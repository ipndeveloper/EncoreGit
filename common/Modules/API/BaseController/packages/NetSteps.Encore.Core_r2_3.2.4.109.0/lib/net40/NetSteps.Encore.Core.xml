<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetSteps.Encore.Core</name>
    </assembly>
    <members>
        <member name="T:NetSteps.Encore.Core.Buffers.BigEndianBufferReader">
            <summary>
            Helper class that reads big-endian binary data from a buffer.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.BufferReader">
            <summary>
            IBufferReader's base implementation
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.IBufferReader">
            <summary>
            Helper for reading binary data from a buffer.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadBoolean(System.Byte[],System.Int32@)">
            <summary>
            Reads a boolean from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadByte(System.Byte[],System.Int32@)">
            <summary>
            Reads a byte from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadBytes(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Reads an array of bytes from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="count">the number of bytes in the array</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadChar(System.Byte[],System.Int32@)">
            <summary>
            Reads a char from the buffer (two-byte).
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadCharArray(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Reads an array of characters from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="arrayLength">the number of characters in the array</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadDecimal(System.Byte[],System.Int32@)">
            <summary>
            Reads a decimal from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadDouble(System.Byte[],System.Int32@)">
            <summary>
            Reads a double from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadEncodedString(System.Byte[],System.Int32@,System.Int32,System.Text.Encoding)">
            <summary>
            Reads an encoded string from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="byteCount">the number of bytes used by the string</param>
            <param name="coder">an encoding used to interpret the bytes</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadGuid(System.Byte[],System.Int32@)">
            <summary>
            Reads a Guid from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadInt16(System.Byte[],System.Int32@)">
            <summary>
            Reads an Int16 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadInt32(System.Byte[],System.Int32@)">
            <summary>
            Reads an Int32 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadInt64(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt64 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadSByte(System.Byte[],System.Int32@)">
            <summary>
            Reads a signed byte from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadSingle(System.Byte[],System.Int32@)">
            <summary>
            Reads a Single from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadStringWithByteCountPrefix(System.Byte[],System.Int32@)">
            <summary>
            Reads a length-prefixed string from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadStringWithByteCountPrefix(System.Byte[],System.Int32@,System.Text.Encoding)">
            <summary>
            Reads a length-prefixed string from the buffer using the encoding given.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="coder">an encoding used to interpret the bytes read</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadUInt16(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt16 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadUInt32(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt32 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadUInt64(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt64 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReader.ReadReflectedObject``1(System.Byte[],System.Int32@,NetSteps.Encore.Core.Buffers.IBufferReflector{``0})">
            <summary>
            Reads an instance of type T from the buffer.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="reflector">reflector for reading type T</param>
            <returns>the instance of type T read from the buffer</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Buffers.IBufferReader.Encoding">
            <summary>
            Gets the encoding used when reading string data.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.Create">
            <summary>
            Creates the default buffer reader.
            </summary>
            <returns>a buffer reader matching the current machine's
            bit-endianness.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.Create(System.Text.Encoding)">
            <summary>
            Creates the default buffer reader.
            </summary>
            <param name="enc">the encoding used to interpret strings.</param>
            <returns>a buffer reader matching the current machine's
            bit-endianness.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enc">an encoding</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadBoolean(System.Byte[],System.Int32@)">
            <summary>
            Reads a boolean from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadByte(System.Byte[],System.Int32@)">
            <summary>
            Reads a byte array from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a byte array</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadBytes(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Reads a byte array from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="count">number of bytes to read</param>
            <returns>a byte array</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadChar(System.Byte[],System.Int32@)">
            <summary>
            Reads a char from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a char value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadInt16(System.Byte[],System.Int32@)">
            <summary>
            Reads an Int16 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>an int16 value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadInt32(System.Byte[],System.Int32@)">
            <summary>
            Reads an Int32 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>an Int32 value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadInt64(System.Byte[],System.Int32@)">
            <summary>
            Reads an Int64 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>an Int64 value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadDecimal(System.Byte[],System.Int32@)">
            <summary>
            Reads a decimal from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a decimal value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadDouble(System.Byte[],System.Int32@)">
            <summary>
            Reads a double from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a double value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadSingle(System.Byte[],System.Int32@)">
            <summary>
            Reads a single from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a single value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadSByte(System.Byte[],System.Int32@)">
            <summary>
            Reads a signed byte from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a signed byte</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadUInt16(System.Byte[],System.Int32@)">
            <summary>
            Reads a UInt32 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a UInt32 value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadUInt32(System.Byte[],System.Int32@)">
            <summary>
            Reads a UInt32 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a UInt32 value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadUInt64(System.Byte[],System.Int32@)">
            <summary>
            Reads a UInt64 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a UInt64 value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadGuid(System.Byte[],System.Int32@)">
            <summary>
            Reads a Guid from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a guid value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadStringWithByteCountPrefix(System.Byte[],System.Int32@)">
            <summary>
            Reads an length-prefixed string from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a string value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadStringWithByteCountPrefix(System.Byte[],System.Int32@,System.Text.Encoding)">
            <summary>
            Reads an length-prefixed, encoded string from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="coder">an encoding to use when decoding the bytes</param>
            <returns>a string value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadEncodedString(System.Byte[],System.Int32@,System.Int32,System.Text.Encoding)">
            <summary>
            Reads an encoded string from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="byteCount">number of bytes to interpret as string data</param>
            <param name="coder">an encoding to use when decoding the bytes</param>
            <returns>a string value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadCharArray(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Reads an array of characters from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="arrayLength">number of characters to read</param>
            <returns>a char array</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferReader.ReadReflectedObject``1(System.Byte[],System.Int32@,NetSteps.Encore.Core.Buffers.IBufferReflector{``0})">
            <summary>
            Reads an instance of type T from the buffer.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <param name="reflector">reflector for reading type T</param>
            <returns>the instance of type T read from the buffer</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Buffers.BufferReader.Encoding">
            <summary>
            Gets the reader's encoding. This is the encoding used to read string data from the buffer.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferReader.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferReader.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enc">an encoding</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferReader.ReadUInt16(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt16 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferReader.ReadUInt32(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt32 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferReader.ReadUInt64(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt64 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.LittleEndianBufferReader">
            <summary>
            Implementation of IBufferreader that reads little endian data from a buffer.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferReader.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferReader.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enc">an encoding</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferReader.ReadUInt16(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt16 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferReader.ReadUInt32(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt32 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferReader.ReadUInt64(System.Byte[],System.Int32@)">
            <summary>
            Reads an UInt64 from the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where reading begins</param>
            <returns>a value</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.BigEndianBufferWriter">
            <summary>
            Helper class for writing big-endian binary data to a buffer.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.BufferWriter">
            <summary>
            IBufferWriter's base implementation
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.IBufferWriter">
            <summary>
            Helper for writing binary data to a buffer.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.FillBytes(System.Byte[],System.Int32@,System.Int32,System.Byte)">
            <summary>
            Fills a buffer.
            </summary>
            <param name="buffer">a buffer</param>
            <param name="offset">offset to begin</param>
            <param name="count">number of bytes to fill</param>
            <param name="value">fill value</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Writes a boolean value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Byte)">
            <summary>
            Writes a byte value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Byte[])">
            <summary>
            Writes a byte array to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes from a byte array to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="source">the source array</param>
            <param name="sourceOffset">offset into source where copying begins</param>
            <param name="count">number of bytes to copy from source into buffer</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Char)">
            <summary>
            Writes a char value (two-byte) to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Char[],System.Boolean)">
            <summary>
            Writes an array of chars to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <param name="byteLengthPrefix">whether a byte length prefix should be written</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Char[],System.Boolean,System.Text.Encoding)">
            <summary>
            Writes an array of chars to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <param name="byteLengthPrefix">whether a byte length prefix should be written</param>
            <param name="coder">an encoding used to transform the string to bytes</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Decimal)">
            <summary>
            Writes a decimal value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Double)">
            <summary>
            Writes a boolean value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Guid)">
            <summary>
            Writes a Guid value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Int16)">
            <summary>
            Writes an Int16 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Writes an Int32 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Int64)">
            <summary>
            Writes an Int64 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.SByte)">
            <summary>
            Writes a signed byte value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.Single)">
            <summary>
            Writes a float to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.String,System.Boolean)">
            <summary>
            Writes a string to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the string</param>
            <param name="byteLengthPrefix">whether a byte length prefix should be written</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Writes a string to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the string</param>
            <param name="byteLengthPrefix">whether a byte length prefix should be written</param>
            <param name="coder">an encoding used to transform the string to bytes</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.UInt16)">
            <summary>
            Writes an UInt16 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.UInt32)">
            <summary>
            Writes an UInt32 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.Write(System.Byte[],System.Int32@,System.UInt64)">
            <summary>
            Writes an UInt64 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferWriter.WriteReflectedObject``1(System.Byte[],System.Int32@,NetSteps.Encore.Core.Buffers.IBufferReflector{``0},``0)">
            <summary>
            Writes an instance of type T to the buffer.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="reflector">reflector for writing type T</param>
            <param name="value">the instance</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Buffers.IBufferWriter.Encoding">
            <summary>
            Gets the encoding used when writing string data.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Create">
            <summary>
            Creates the default buffer writer.
            </summary>
            <returns>a buffer writer matching the current machine's
            bit-endianness.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Create(System.Text.Encoding)">
            <summary>
            Creates the default buffer writer.
            </summary>
            <param name="enc">the encoding used to produce bytes for strings.</param>
            <returns>a buffer writer matching the current machine's
            bit-endianness.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enc">the encoding used to produce bytes for strings.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.FillBytes(System.Byte[],System.Int32@,System.Int32,System.Byte)">
            <summary>
            Fills a buffer.
            </summary>
            <param name="buffer">a buffer</param>
            <param name="offset">offset to begin</param>
            <param name="count">number of bytes to fill</param>
            <param name="value">fill value</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Writes a boolean value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Byte)">
            <summary>
            Writes a byte value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Byte[])">
            <summary>
            Writes a byte array to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the array</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes from a byte array to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the source array</param>
            <param name="sourceOffset">offset into source where copying begins</param>
            <param name="count">number of bytes to copy from source into buffer</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Char)">
            <summary>
            Writes a char value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Int16)">
            <summary>
            Writes an Int16 to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Writes an Int32 to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Int64)">
            <summary>
            Writes an Int64 to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Decimal)">
            <summary>
            Writes a decimal value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Double)">
            <summary>
            Writes a floating point double value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Single)">
            <summary>
            Writes a floating point single value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.SByte)">
            <summary>
            Writes a signed byte to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.UInt16)">
            <summary>
            Writes a UInt16 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.UInt32)">
            <summary>
            Writes a UInt32 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.UInt64)">
            <summary>
            Writes a UInt64 value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Guid)">
            <summary>
            Writes a Guid value to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.String,System.Boolean)">
            <summary>
            Writes a string to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the string</param>
            <param name="byteLengthPrefix">whether a byte length prefix should be written</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Writes a string to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the string</param>
            <param name="byteLengthPrefix">whether a byte length prefix should be written</param>
            <param name="coder">an encoding used to transform the string to bytes</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Char[],System.Boolean)">
            <summary>
            Writes an array of chars to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <param name="byteLengthPrefix">whether a byte length prefix should be written</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.Write(System.Byte[],System.Int32@,System.Char[],System.Boolean,System.Text.Encoding)">
            <summary>
            Writes an array of chars to the buffer.
            </summary>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="value">the value</param>
            <param name="byteLengthPrefix">whether a byte length prefix should be written</param>
            <param name="coder">an encoding used to transform the string to bytes</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BufferWriter.WriteReflectedObject``1(System.Byte[],System.Int32@,NetSteps.Encore.Core.Buffers.IBufferReflector{``0},``0)">
            <summary>
            Writes an instance of type T to the buffer.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="buffer">the buffer</param>
            <param name="offset">offest into buffer where writing begins</param>
            <param name="reflector">reflector for writing type T</param>
            <param name="value">the instance</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Buffers.BufferWriter.Encoding">
            <summary>
            Gets the encoding used when writing string data.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferWriter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferWriter.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enc">the encoding used to produce bytes for strings.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferWriter.Write(System.Byte[],System.Int32@,System.UInt16)">
            <summary>
            Writes an UInt16 to a buffer.
            </summary>
            <param name="buffer">the target buffer</param>
            <param name="offset">an offset where writing begins</param>
            <param name="value">a value</param>
            <returns>the number of bytes written to the buffer</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferWriter.Write(System.Byte[],System.Int32@,System.UInt32)">
            <summary>
            Writes an UInt32 to a buffer.
            </summary>
            <param name="buffer">the target buffer</param>
            <param name="offset">an offset where writing begins</param>
            <param name="value">a value</param>
            <returns>the number of bytes written to the buffer</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.BigEndianBufferWriter.Write(System.Byte[],System.Int32@,System.UInt64)">
            <summary>
            Writes an UInt64 to a buffer.
            </summary>
            <param name="buffer">the target buffer</param>
            <param name="offset">an offset where writing begins</param>
            <param name="value">a value</param>
            <returns>the number of bytes written to the buffer</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.LittleEndianBufferWriter">
            <summary>
            Helper class for writing little-endian binary data to a buffer.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferWriter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferWriter.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enc">the encoding used to produce bytes for strings.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferWriter.Write(System.Byte[],System.Int32@,System.UInt16)">
            <summary>
            Writes an UInt16 to a buffer.
            </summary>
            <param name="buffer">the target buffer</param>
            <param name="offset">an offset where writing begins</param>
            <param name="value">a value</param>
            <returns>the number of bytes written to the buffer</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferWriter.Write(System.Byte[],System.Int32@,System.UInt32)">
            <summary>
            Writes an UInt32 to a buffer.
            </summary>
            <param name="buffer">the target buffer</param>
            <param name="offset">an offset where writing begins</param>
            <param name="value">a value</param>
            <returns>the number of bytes written to the buffer</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.LittleEndianBufferWriter.Write(System.Byte[],System.Int32@,System.UInt64)">
            <summary>
            Writes an UInt64 to a buffer.
            </summary>
            <param name="buffer">the target buffer</param>
            <param name="offset">an offset where writing begins</param>
            <param name="value">a value</param>
            <returns>the number of bytes written to the buffer</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.Crc16">
            <summary>
            Utility class for generating CRC16 checksums.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.Crc16.ComputeChecksum(System.Byte[])">
            <summary>
            Computes a checksum over an array of bytes.
            </summary>
            <param name="bytes">the bytes</param>
            <returns>the checksum</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.Crc32">
            <summary>
            Utility class for generating CRC16 checksums.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.Crc32.ComputeChecksum(System.Byte[])">
            <summary>
            Computes a checksum over an array of bytes.
            </summary>
            <param name="bytes">the bytes</param>
            <returns>the checksum</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.Crc32.ComputeChecksum(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes a checksum over an array of bytes beginning with the first and
            continuing to length.
            </summary>
            <param name="bytes"></param>
            <param name="first"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.InitialCrcValue">
            <summary>
            A few common initial CRC values
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Buffers.InitialCrcValue.Zeros">
            <summary>
            All zero.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Buffers.InitialCrcValue.NonZero_x1D0F">
            <summary>
            Common initial value of 0x1D0F
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Buffers.InitialCrcValue.NonZero_xFFFF">
            <summary>
            Common initial value of 0xFFFF
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.Crc16Ccitt">
            <summary>
            Utility class for generating CRC16CITT checksums.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.Crc16Ccitt.ComputeChecksum(System.Byte[])">
            <summary>
            Computes a checksum over an array of bytes.
            </summary>
            <param name="bytes">the bytes</param>
            <returns>the checksum</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.Crc16Ccitt.#ctor(NetSteps.Encore.Core.Buffers.InitialCrcValue)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="initialValue">which initial value the checksum should use</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.BitLayout">
            <summary>
            Enums for bit layouts.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Buffers.BitLayout.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Buffers.BitLayout.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.IBufferIO">
            <summary>
            Interface for objects that provide their own buffer IO.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferIO.WriteToBuffer(NetSteps.Encore.Core.Buffers.IBufferWriter,System.Byte[],System.Int32@)">
            <summary>
            Writes to the buffer.
            </summary>
            <param name="writer">a buffer writer</param>
            <param name="target">the target buffer</param>
            <param name="offset">reference to an offset into the buffer where writing
            can begin; upon exit, must be incremented by the number of bytes consumed</param>
            <returns>total number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferIO.ReadFromBuffer(NetSteps.Encore.Core.Buffers.IBufferReader,System.Byte[],System.Int32@)">
            <summary>
            Reads from the buffer.
            </summary>
            <param name="reader">a buffer reader</param>
            <param name="source">the source buffer</param>
            <param name="offset">reference to an offset into the buffer where reading
            can begin; upon exit, must be incremented by the number of bytes consumed</param>
            <returns>the number of bytes consumed during the read</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.IBufferReflector`1">
            <summary>
            Reflects type T onto a buffer.
            </summary>
            <typeparam name="T">type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReflector`1.WriteToBuffer(NetSteps.Encore.Core.Buffers.IBufferWriter,System.Byte[],System.Int32@,`0)">
            <summary>
            Writes an instance of type T to the buffer.
            </summary>
            <param name="writer">a buffer writer</param>
            <param name="target">the target buffer</param>
            <param name="offset">reference to an offset into the buffer where writing
            can begin; upon exit, must be incremented by the number of bytes consumed</param>
            <param name="source">the instance of type T being written</param>
            <returns>total number of bytes written</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.IBufferReflector`1.ReadFromBuffer(NetSteps.Encore.Core.Buffers.IBufferReader,System.Byte[],System.Int32@,`0@)">
            <summary>
            Reads an instance of type T to the buffer.
            </summary>
            <param name="reader">a buffer reader</param>
            <param name="source">the source buffer</param>
            <param name="offset">reference to an offset into the buffer where reading
            can begin; upon exit, must be incremented by the number of bytes consumed</param>
            <param name="target">variable that will hold the instance upon success</param>
            <returns>the number of bytes consumed during the read</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Buffers.Int32SingleUnion">
            <summary>
            Utility struct to convert between Int32 and Single
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance initialized with the given integer.
            </summary>
            <param name="i">An Int32 value.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Buffers.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance initialized with the given floating point number.
            </summary>
            <param name="f">A Single value.</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Buffers.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an Int32.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Buffers.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a Single.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.CleanupScopeItemEventArgs">
            <summary>
            Provides information about cleanup scope events.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScopeItemEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="item">the item that caused the event</param>
        </member>
        <member name="P:NetSteps.Encore.Core.CleanupScopeItemEventArgs.Item">
            <summary>
            The item that caused the event.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.CleanupScope">
            <summary>
            Utility class for collecting actions and disposable items for cleanup. Actions and 
            disposable items, at dispose time, are either disposed (IDisposables) 
            or invoked (Actions) in the reverse order in which they are added to the scope.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Disposable">
            <summary>
            Abstract logic for disposable objects.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Disposable.Finalize">
            <summary>
            Finalizes the instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Disposable.Dispose">
            <summary>
            Disposes the instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Disposable.PerformDispose(System.Boolean)">
            <summary>
            Performs the dispose logic.
            </summary>
            <param name="disposing">Whether the object is disposing (IDisposable.Dispose method was called).</param>
            <returns>Implementers should return true if the disposal was successful; otherwise false.</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Disposable.IsDisposed">
            <summary>
            Indicates whether the instance has been disposed.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.ICleanupScope">
            <summary>
            Deliniates a cleanup scope.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.ICleanupScope.Add``1(``0)">
            <summary>
            Adds a disposable item to the scope. When the scope
            is disposed all added items are guaranteed to also be
            disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.ICleanupScope.AddAction(System.Action)">
            <summary>
            Adds an action to be performed upon scope
            completion (on dispose).
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.ICleanupScope.ShareScope">
            <summary>
            Prepares the scope for use in multiple threads.
            </summary>
            <returns>An equivalent scope.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.NewOrSharedScope">
            <summary>
            Shares the ambient scope if it exists; otherwise, creates a new scope.
            </summary>
            <returns>a cleanup scope</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.#ctor">
            <summary>
            Creates a new scope.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.#ctor(System.Boolean)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="independent">indicates whether the scope is independent of the stack</param>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.#ctor(System.Boolean,System.Object)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="independent">indicates whether the scope is independent of the stack</param>
            <param name="ownerNotifier">the owner, notifier</param>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.#ctor(System.Object)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="ownerNotifier">the owner, notifier</param>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.#ctor(System.Boolean,System.IDisposable[])">
            <summary>
            Creates a new scope and adds to it the disposable item given.
            </summary>
            <param name="independent">indicates whether the scope is independent of the stack</param>
            <param name="items">Items to be disposed when the scope is cleaned up.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.#ctor(System.IDisposable[])">
            <summary>
            Creates a new scope and adds to it the disposable item given.
            </summary>
            <param name="items">Items to be disposed when the scope is cleaned up.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.#ctor(System.Boolean,System.Action[])">
            <summary>
            Creates a new scope and adds an action to be performed when the scope is cleaned up.
            </summary>
            <param name="independent">indicates whether the scope is independent of the stack</param>
            <param name="actions">an array of actions to be performed when the scope is cleaned up.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.#ctor(System.Action[])">
            <summary>
            Creates a new scope and adds an action to be performed when the scope is cleaned up.
            </summary>
            <param name="actions">an array of actions to be performed when the scope is cleaned up.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.Add``1(``0)">
            <summary>
            Adds a disposable item to the cleanup scope. Actions and disposable items are collected 
            and at cleanup whill be either disposed (IDisposables) or invoked (Actions) in the reverse 
            order in which they are added.
            </summary>
            <typeparam name="T">Type of the item being added; ensures IDisposable by inference.</typeparam>
            <param name="item">An item to be disposed when the scope is cleaned up.</param>
            <returns>Returns the item given.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.AddAction(System.Action)">
            <summary>
            Adds an action to the cleanup scope. Actions and IDisposables collected in the same queue and
            are either disposed (IDisposables) or invoked (Actions) in the reverse order in which they are
            added.
            </summary>
            <param name="action">An action to be performed when the scope is cleaned up.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.ShareScope">
            <summary>
            Shares the scope. Callers must guarantee that there is a matching call to Dispose
            for every call to share. Preferrably by wrapping it in a using clause.
            </summary>
            <returns>the shared scope</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.CleanupScope.PerformDispose(System.Boolean)">
            <summary>
            Performs the scope's disposal.
            </summary>
            <param name="disposing">indicates whether the scope is disposing</param>
            <returns><em>true</em> if disposed as a result of the call; otherwise <em>false</em></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.CleanupScope.Current">
            <summary>
            Gets the current "ambient" cleanup scope. This is the nearest
            cleanup scope in the call stack.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.CleanupScope.ItemAdded">
            <summary>
            Event fired when items are added to he scope.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.CleanupScope.ItemDisposed">
            <summary>
            Event fired when items are disposed by the scope.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.BitFlags32">
            <summary>
            Utility class for working with bit/flags.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Collections.BitFlags32.Empty">
            <summary>
            Empty instance; all bits turned off.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.#ctor(System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="flags">flag values</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.On(System.Int32)">
            <summary>
            Turns the bit on at the position indicated.
            </summary>
            <param name="bit">bit position</param>
            <returns>flags with the indicated bit turned on</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.Off(System.Int32)">
            <summary>
            Turns the bit off at the position indicated.
            </summary>
            <param name="bit">bit position</param>
            <returns>flags with the indicated bit turned off</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.IncludeFlags(System.Int32)">
            <summary>
            Includes all of the flags given. (turns on bits corresponding to the bits given)
            </summary>
            <param name="flags">flags to turn on</param>
            <returns>the flags for chaining</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.ExcludeFlags(System.Int32)">
            <summary>
            Excludes all of the flags given. (turns off bits corresponding to the bits given)
            </summary>
            <param name="flags">flags to turn off</param>
            <returns>the flags for chaining</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.Equals(NetSteps.Encore.Core.Collections.BitFlags32)">
            <summary>
            Determines if the flags are equal to another.
            </summary>
            <param name="other">the other</param>
            <returns>true if equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.Equals(System.Object)">
            <summary>
            Determines if the flags are equal to another object.
            </summary>
            <param name="obj">the other object</param>
            <returns>true if equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.GetHashCode">
            <summary>
            Gets a hashcode for the instance.
            </summary>
            <returns>a hashcode</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.ToString">
            <summary>
            Converts the bit vector into a bit string.
            </summary>
            <returns>bits string</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.op_Equality(NetSteps.Encore.Core.Collections.BitFlags32,NetSteps.Encore.Core.Collections.BitFlags32)">
            <summary>
            Equality operator.
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.op_Inequality(NetSteps.Encore.Core.Collections.BitFlags32,NetSteps.Encore.Core.Collections.BitFlags32)">
            <summary>
            Inequality operator.
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are NOT equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.op_Implicit(NetSteps.Encore.Core.Collections.BitFlags32)~System.Int32">
            <summary>
            Implicit conversion operator from BitFlags to Int32.
            </summary>
            <param name="flags">value to convert</param>
            <returns>an Int32 representation of the flags</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitFlags32.op_Implicit(System.Int32)~NetSteps.Encore.Core.Collections.BitFlags32">
            <summary>
            Implicit converstion operator from Int32 to BitFlags32
            </summary>
            <param name="flags">value to convert</param>
            <returns>a BitFlags32</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.BitFlags32.IsEmpty">
            <summary>
            Indicates whether the bit flags are empty (none set to true).
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.BitFlags32.TrueFlagCount">
            <summary>
            Number of flags currently set to true.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.BitFlags32.Item(System.Int32)">
            <summary>
            Gets and sets bit values to ON (true) or OFF (false).
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.BitVector">
            <summary>
            Utility structure for working with bit values.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Collections.BitVector.Empty">
            <summary>
            Empty vector; all bits turned off.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.#ctor(System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="count">Number of bits contained in the vector</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.GetFlags(System.Int32)">
            <summary>
            Gets the flags at the index given.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.SetFlags(System.Int32,NetSteps.Encore.Core.Collections.BitFlags32)">
            <summary>
            Sets flags at the given index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.Equals(NetSteps.Encore.Core.Collections.BitVector)">
            <summary>
            Determines if the vector is equal to another.
            </summary>
            <param name="other">the other vector</param>
            <returns>true if equal; otherwise false.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.Equals(System.Object)">
            <summary>
            Determines if the vector is equal to another object.
            </summary>
            <param name="obj">the other object</param>
            <returns>true if equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.GetHashCode">
            <summary>
            Gets the hashcode for the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.ToString">
            <summary>
            Converts the bit vector into a bit string.
            </summary>
            <returns>bits string</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.op_Equality(NetSteps.Encore.Core.Collections.BitVector,NetSteps.Encore.Core.Collections.BitVector)">
            <summary>
            Equality operator.
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.op_Inequality(NetSteps.Encore.Core.Collections.BitVector,NetSteps.Encore.Core.Collections.BitVector)">
            <summary>
            Inequality operator.
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are NOT equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.Copy">
            <summary>
            Creates a copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.BitVector.Clone">
            <summary>
            Clones the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.BitVector.IsEmpty">
            <summary>
            Determines if the vector is empty.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.BitVector.Count">
            <summary>
            Number of flags in the vector.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.BitVector.TrueFlagCount">
            <summary>
            Number of flags currently set to true.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.BitVector.Item(System.Int32)">
            <summary>
            Gets and sets the bit at the index given.
            </summary>
            <param name="index">index of the bit to set or get; zero based.</param>
            <returns>whether the bit at the given index is turned on</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.IRegistrar">
            <summary>
            Base (untyped) registrar.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.IRegistrar.CancelRegistration(NetSteps.Encore.Core.Collections.IRegistrationKey)">
            <summary>
            Cancels the registration given.
            </summary>
            <param name="key">a registration</param>
            <returns><em>true</em> if the registration was canceled as a result of the call; otherwise <em>false</em>.</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.IRegistrar`2">
            <summary>
            Strongly typed registrar; maintains registrations.
            </summary>
            <typeparam name="K">key type K</typeparam>
            <typeparam name="H">handback type H</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.IRegistrar`2.IsRegistered(`0)">
            <summary>
            Determines if a key has a registration.
            </summary>
            <param name="key">the key</param>
            <returns><em>true</em> if the registration is present; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.IRegistrar`2.TryGetRegistration(`0,NetSteps.Encore.Core.Collections.IRegistrationKey{`0,`1}@)">
            <summary>
            Tries to get the current registration for a key.
            </summary>
            <param name="key">the key</param>
            <param name="registration">reference to a variable where the registration
            will be returned upon success.</param>
            <returns><em>true</em> if the registration is present; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.IRegistrar`2.TryRegister(`0,`1,NetSteps.Encore.Core.Collections.IRegistrationKey{`0,`1}@)">
            <summary>
            Tries to register a key and handback.
            </summary>
            <param name="key">the key</param>
            <param name="handback">the handback</param>
            <param name="registration">reference to a variable where the registration
            will be returned upon success.</param>
            <returns><em>true</em> if the registration is successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.IRegistrar`2.TryReplaceRegistration(NetSteps.Encore.Core.Collections.IRegistrationKey,`0,`1,NetSteps.Encore.Core.Collections.IRegistrationKey{`0,`1}@)">
            <summary>
            Tries to replace the current registration.
            </summary>
            <param name="current">the current</param>
            <param name="key">the key</param>
            <param name="handback">the handback</param>
            <param name="registration">reference to a variable where the new
            registration will be returned upon success.</param>
            <returns><em>true</em> if the registration is present; otherwise <em>false</em></returns>
        </member>
        <member name="E:NetSteps.Encore.Core.Collections.IRegistrar`2.OnAny">
            <summary>
            Event fired on any registration event.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.Collections.IRegistrar`2.OnNewRegistration">
            <summary>
            Event fired when new registrations occur.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.IRegistrationKey">
            <summary>
            Base (untyped) registration key.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.IRegistrationKey.Cancel">
            <summary>
            Cancels a registration.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey.IsCanceled">
            <summary>
            Indicates whether the registration has been canceled.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey.KeyType">
            <summary>
            Gets the key's type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey.HandbackType">
            <summary>
            Gets the handback's type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey.UntypedRegistrar">
            <summary>
            Gets a reference (untyped) to the registrar
            upon which this registration was made.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey.UntypedKey">
            <summary>
            Gets a reference (untyped) to the key.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey.UntypedHandback">
            <summary>
            Gets a reference (untyped) to the handback.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.IRegistrationKey`2">
            <summary>
            Represents a strongly typed registration of key type K with
            a registrar.
            </summary>
            <typeparam name="K">key type K</typeparam>
            <typeparam name="H">handback type H</typeparam>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey`2.Registrar">
            <summary>
            Gets the strongly typed registrar upon which this
            registration was made.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey`2.Key">
            <summary>
            Gets the strongly typed key.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.IRegistrationKey`2.Handback">
            <summary>
            Gets the strongly typed handback.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.Collections.IRegistrationKey`2.OnAny">
            <summary>
            Gets and sets the registration event handler.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.NameValueCollectionExtensions">
            <summary>
            Contains extensions for NameValueCollection
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.NameValueCollectionExtensions.FirstValueOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Transforms the value part of a name-value pair to type T if it
            is present in the collection.
            </summary>
            <typeparam name="T">result type T</typeparam>
            <param name="nvc">the collection</param>
            <param name="name">the value's name</param>
            <returns>a result type T if the name-value pair is present; otherwise default(T)</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.NameValueCollectionExtensions.FirstValueOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String,System.Func{System.String,``0})">
            <summary>
            Transforms the value part of a name-value pair to type T if it
            is present in the collection.
            </summary>
            <typeparam name="T">result type T</typeparam>
            <param name="nvc">the collection</param>
            <param name="name">the value's name</param>
            <param name="transform">optional function used to transform the value</param>
            <returns>a result type T if the name-value pair is present; otherwise default(T)</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.Registrar`2">
            <summary>
            Basic implementation of the registrar.
            </summary>
            <typeparam name="K">key type K</typeparam>
            <typeparam name="H">handback type H</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.Registrar`2.IsRegistered(`0)">
            <summary>
            Determines if a key has a registration.
            </summary>
            <param name="key">the key</param>
            <returns><em>true</em> if the registration is present; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.Registrar`2.TryGetRegistration(`0,NetSteps.Encore.Core.Collections.IRegistrationKey{`0,`1}@)">
            <summary>
            Tries to get the current registration for a key.
            </summary>
            <param name="key">the key</param>
            <param name="registration">reference to a variable where the registration
            will be returned upon success.</param>
            <returns><em>true</em> if the registration is present; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.Registrar`2.TryRegister(`0,`1,NetSteps.Encore.Core.Collections.IRegistrationKey{`0,`1}@)">
            <summary>
            Tries to register a key and handback.
            </summary>
            <param name="key">the key</param>
            <param name="handback">the handback</param>
            <param name="registration">reference to a variable where the registration
            will be written upon success.</param>
            <returns><em>true</em> if the registration is successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.Registrar`2.TryReplaceRegistration(NetSteps.Encore.Core.Collections.IRegistrationKey,`0,`1,NetSteps.Encore.Core.Collections.IRegistrationKey{`0,`1}@)">
            <summary>
            Tries to replace the current registration.
            </summary>
            <param name="current">the current</param>
            <param name="key">the key</param>
            <param name="handback">the handback</param>
            <param name="registration">reference to a variable where the new
            registration will be returned upon success.</param>
            <returns><em>true</em> if the registration is present; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.Registrar`2.CancelRegistration(NetSteps.Encore.Core.Collections.IRegistrationKey)">
            <summary>
            Cancels the registration given.
            </summary>
            <param name="registration">a registration</param>
            <returns><em>true</em> if the registration was canceled as a result of the call; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.Registrar`2.VisitEach(System.Action{NetSteps.Encore.Core.Collections.IRegistrationKey{`0,`1}})">
            <summary>
            Allows subclasses to safely walk the registrations without
            blocking concurrent registrar operations.
            </summary>
            <param name="visitor">an action called for each regisration</param>
        </member>
        <member name="E:NetSteps.Encore.Core.Collections.Registrar`2.OnAny">
            <summary>
            Event fired on any registration event.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.Collections.Registrar`2.OnNewRegistration">
            <summary>
            Event fired when new registrations occur.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.RegistrarExtensions">
            <summary>
            Contains utility methods for registrars.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrarExtensions.Register``2(NetSteps.Encore.Core.Collections.IRegistrar{``0,``1},``0,``1)">
            <summary>
            Adds a registration for the key and handback given.
            </summary>
            <typeparam name="K">key type K</typeparam>
            <typeparam name="H">handback type H</typeparam>
            <param name="registrar">the registrar</param>
            <param name="key">the key</param>
            <param name="handback">the handback</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrarExtensions.Register``2(NetSteps.Encore.Core.Collections.IRegistrar{``0,``1},``0)">
            <summary>
            Unregisters the current registration associated with the key given.
            </summary>
            <typeparam name="K">key type K</typeparam>
            <typeparam name="H">handback type H</typeparam>
            <param name="registrar">the registrar</param>
            <param name="key">the key</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.RegistrationEventKind">
            <summary>
            Registration event kinds.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Collections.RegistrationEventKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Collections.RegistrationEventKind.Registration">
            <summary>
            Indicates a new registration occurred.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Collections.RegistrationEventKind.Replacing">
            <summary>
            Indicates the registrar is replacing the registration.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Collections.RegistrationEventKind.Replaced">
            <summary>
            Indicates the registrar has replaced the registration.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Collections.RegistrationEventKind.Canceling">
            <summary>
            Indicates the registration is being canceled.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Collections.RegistrationEventKind.Canceled">
            <summary>
            Indicates the registration is canceled.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.RegistrationEventArgs">
            <summary>
            Base (untyped) EventArgs for registration events.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrationEventArgs.#ctor(NetSteps.Encore.Core.Collections.IRegistrationKey,NetSteps.Encore.Core.Collections.RegistrationEventKind)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="key"></param>
            <param name="kind"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrationEventArgs.Cancel">
            <summary>
            Cancels the event.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.RegistrationEventArgs.UntypedKey">
            <summary>
            Gets the untyped registration.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.RegistrationEventArgs.Kind">
            <summary>
            Gets the kind of registration event.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.RegistrationEventArgs.CanCancel">
            <summary>
            Indicates whether the event can be canceled.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.RegistrationEventArgs.IsCanceled">
            <summary>
            Indicates whether the event has been canceled.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.RegistrationEventArgs`2">
            <summary>
            EventArgs for registration events.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrationEventArgs`2.#ctor(NetSteps.Encore.Core.Collections.IRegistrationKey{`0,`1},NetSteps.Encore.Core.Collections.RegistrationEventKind)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="key"></param>
            <param name="kind"></param>
        </member>
        <member name="P:NetSteps.Encore.Core.Collections.RegistrationEventArgs`2.Key">
            <summary>
            Gets the strongly typed registration key.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Collections.RegistrationException">
            <summary>
            Base registration exception.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrationException.#ctor">
            <summary>
            Default constructor; creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrationException.#ctor(System.String)">
            <summary>
            Creates a new instance using the error message given.
            </summary>
            <param name="errorMessage">An error message describing the exception.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the error message and cuase given.
            </summary>
            <param name="errorMessage">An error message describing the exception.</param>
            <param name="cause">An inner exception that caused this exception</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Collections.RegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used during serialization.
            </summary>
            <param name="si">SerializationInfo</param>
            <param name="sc">StreamingContext</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2">
            <summary>
            Base class for configuration element collections.
            </summary>
            <typeparam name="TElement">Element type</typeparam>
            <typeparam name="TKey">Key type</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="addElmName">name used to add an element to the collection (default is 'add')</param>
            <param name="clearElmName">name used when clearing elements from the collection (default is 'clear')</param>
            <param name="removeElmName">name used to delete an element from the collection (default is 'remove')</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.Add(`0)">
            <summary>
            Adds an element.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.Clear">
            <summary>
            Clears the elements.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.IndexOf(`0)">
            <summary>
            Finds the index of an element.
            </summary>
            <param name="item">the element</param>
            <returns>the index of the element</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.Remove(`0)">
            <summary>
            Removes an element.
            </summary>
            <param name="item">the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.Remove(`1)">
            <summary>
            Removes an element by key.
            </summary>
            <param name="key">the element's key</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.RemoveAt(System.Int32)">
            <summary>
            Removes an element at the given index.
            </summary>
            <param name="index">the element's index</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.CreateNewElement">
            <summary>
            Creates a new element of type TElement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element's key.
            </summary>
            <param name="element">the element</param>
            <returns>the element's key</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.PerformGetElementKey(`0)">
            <summary>
            Abstract method; gets the element's key.
            </summary>
            <param name="element">the element</param>
            <returns>the element's key</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>an enumerator</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.CollectionType">
            <summary>
            CollectionType
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.Count">
            <summary>
            Number of elements.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.Item(System.Int32)">
            <summary>
            Accesses an element by index.
            </summary>
            <param name="index">element index</param>
            <returns>the element at <paramref name="index"/></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Configuration.AbstractConfigurationElementCollection`2.Item(`1)">
            <summary>
            Accesses a element by key.
            </summary>
            <param name="key">an element's key</param>
            <returns>the element with the given key</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Constants">
            <summary>
            Contains global constants.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Constants.RandomPrime">
            <summary>
            Prime seed for hashcodes; I chose this for its bit distribution. ~P
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Copy`1">
            <summary>
            Utility class for making copies to target type T.
            </summary>
            <typeparam name="T">target type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Copy`1.From``1(``0)">
            <summary>
            Creates a copy of source.
            </summary>
            <typeparam name="S">source type S</typeparam>
            <param name="source">the source</param>
            <returns>an instance of target type T, copied from the source</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Copy`1.From``1(``0,NetSteps.Encore.Core.CopyKind)">
            <summary>
            Creates a copy of source.
            </summary>
            <typeparam name="S">source type S</typeparam>
            <param name="source">the source</param>
            <param name="kind">kind of copy; loose or strict</param>
            <returns>an instance of target type T, copied from the source</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Copy`1.From``1(NetSteps.Encore.Core.IoC.IContainer,``0,NetSteps.Encore.Core.CopyKind)">
            <summary>
            Creates a copy of source.
            </summary>
            <typeparam name="S">source type S</typeparam>
            <param name="container">a container (scope)</param>
            <param name="source">the source</param>
            <param name="kind">kind of copy; loose or strict</param>
            <returns>an instance of target type T, copied from the source</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.AnonymousSourceCopier`2">
            <summary>
            Copier implementation for anonymous source objects.
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NetSteps.Encore.Core.ICopier`2">
            <summary>
            Copies properties of the source object to the target object.
            </summary>
            <typeparam name="S">source type S</typeparam>
            <typeparam name="T">target type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.ICopier`2.CopyTo(`1,`0,NetSteps.Encore.Core.CopyKind,NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Copies properties from a source object to a target object.
            </summary>
            <param name="target">the target object</param>
            <param name="source">the source object</param>
            <param name="kind">kind of copy (loose or strict)</param>
            <param name="container">a container scope</param>
        </member>
        <member name="M:NetSteps.Encore.Core.AnonymousSourceCopier`2.CopyTo(`1,`0,NetSteps.Encore.Core.CopyKind,NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Copies source to target.
            </summary>
            <param name="target"></param>
            <param name="source"></param>
            <param name="kind"></param>
            <param name="container"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.Copier`2">
            <summary>
            Copies properties of the source object to the target object.
            </summary>
            <typeparam name="S">source type S</typeparam>
            <typeparam name="T">target type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Copier`2.CopyTo(`1,`0,NetSteps.Encore.Core.CopyKind,NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Copies properties from a source object to a target object.
            </summary>
            <param name="target">the target object</param>
            <param name="source">the source object</param>
            <param name="kind">kind of copy (loose or strict)</param>
            <param name="container">a container scope</param>		
        </member>
        <member name="M:NetSteps.Encore.Core.Copier`2.PerformStrictCopy(`1,`0,NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Allows subclasses to perform a strict copy.
            </summary>
            <param name="target">the target object</param>
            <param name="source">the source object</param>
            <param name="container">a container scope</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Copier`2.PerformLooseCopy(`1,`0,NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Allows subclasses to perform a loose copy.
            </summary>
            <param name="target">the target object</param>
            <param name="source">the source object</param>
            <param name="container">a container scope</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Copier`1">
            <summary>
            Static copier used with anonymous/closed types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Copier`1.LooseCopyTo``1(`0,``0,NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Performs a loose copy from source to target.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="target"></param>
            <param name="source"></param>
            <param name="container"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.CopierAutoImplementAttribute">
            <summary>
            Used by the framework too wireup copier implementations.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Stereotype.StereotypeAttribute">
            <summary>
            Stereotype base class; stereotypes the target.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Stereotype.StereotypeAttribute.#ctor(NetSteps.Encore.Core.Stereotype.StereotypeBehaviors)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Stereotype.StereotypeAttribute.RegisterStereotypeImplementation``1(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Called by the framework for stereotypes with behavior including 
            StereotypeBehaviors.AutoImplementedBehavior.
            </summary>
            <typeparam name="T">stereotype type T</typeparam>
            <param name="container">container from which the instance was requested</param>
            <returns><em>true</em> if a concrete type is registered as a result of the call; otherwise <em>false</em></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Stereotype.StereotypeAttribute.Behaviors">
            <summary>
            Indicates the stereotype's behaviors.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.CopierAutoImplementAttribute.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.CopierAutoImplementAttribute.RegisterStereotypeImplementation``1(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Creates and registers a copier implementation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <returns></returns>	
        </member>
        <member name="T:NetSteps.Encore.Core.CopyKind">
            <summary>
            Enum of copy kinds.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CopyKind.Loose">
            <summary>
            Default. Indicates a loose copy; all properties of source do not have to 
            be present on target.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CopyKind.Strict">
            <summary>
            Indicates a strict copy; all properties of source must be present on target.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.ICopierExtensions">
            <summary>
            Extensions for ICopier&lt;S,T>
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.ICopierExtensions.Copy``2(NetSteps.Encore.Core.ICopier{``0,``1},``0)">
            <summary>
            Using the given copier, creates a copy of a source object.
            </summary>
            <param name="copier">the copier</param>
            <param name="source">the source object</param>
        </member>
        <member name="M:NetSteps.Encore.Core.ICopierExtensions.Copy``2(NetSteps.Encore.Core.ICopier{``0,``1},``0,NetSteps.Encore.Core.CopyKind)">
            <summary>
            Using the given copier, creates a copy of a source object.
            </summary>
            <param name="copier">the copier</param>
            <param name="source">the source object</param>
            <param name="kind">kind of copy (loose or strict)</param>
        </member>
        <member name="M:NetSteps.Encore.Core.ICopierExtensions.Copy``2(NetSteps.Encore.Core.ICopier{``0,``1},NetSteps.Encore.Core.IoC.IContainer,``0)">
            <summary>
            Using the given copier, creates a copy of a source object.
            </summary>
            <param name="copier">the copier</param>
            <param name="source">the source object</param>
            <param name="container">a container scope</param>
        </member>
        <member name="M:NetSteps.Encore.Core.ICopierExtensions.Copy``2(NetSteps.Encore.Core.ICopier{``0,``1},NetSteps.Encore.Core.IoC.IContainer,``0,NetSteps.Encore.Core.CopyKind)">
            <summary>
            Using the given copier, creates a copy of a source object.
            </summary>
            <param name="copier">the copier</param>
            <param name="source">the source object</param>
            <param name="kind">kind of copy (loose or strict)</param>
            <param name="container">a container scope</param>
        </member>
        <member name="T:NetSteps.Encore.Core.DataGenerator">
            <summary>
            Utility class for generating random data.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.#ctor(NetSteps.Encore.Core.Buffers.IBufferReader)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="reader">A reader for interpreting the random bytes.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetBoolean">
            <summary>
            Gets a random boolean value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetByte">
            <summary>
            Gets a random byte value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetBytes(System.Int32)">
            <summary>
            Gets an array of random byte values.
            </summary>
            <param name="len">Number of bytes in the array.</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetNumericString(System.Int32)">
            <summary>
            Gets a string of random numeric values.
            </summary>
            <param name="len">number of characters</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetEnum``1">
            <summary>
            Gets a random value of enum type E.
            </summary>
            <typeparam name="E">type E</typeparam>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetChar">
            <summary>
            Gets a random char value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetInt16">
            <summary>
            Gets a random Int16 value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetInt32">
            <summary>
            Gets a random Int32 value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetInt64">
            <summary>
            Gets a random Int64 value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetDecimal">
            <summary>
            Gets a random decimal value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetDouble">
            <summary>
            Gets a random double floating point value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetSingle">
            <summary>
            Gets a random single floating point value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetSByte">
            <summary>
            Gets a random signed-byte value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetUInt16">
            <summary>
            Gets a random UInt16 value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetUInt32">
            <summary>
            Gets a random UInt32 value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetUInt64">
            <summary>
            Gets a random UInt64 value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetGuid">
            <summary>
            Gets a random guid value.
            </summary>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetCharacterArray(System.Int32)">
            <summary>
            Gets an array of random char values.
            </summary>
            <param name="length">number of characters</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetString(System.Int32)">
            <summary>
            Gets a random string value.
            </summary>
            <param name="length">length of the string</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetArray``1(System.Int32)">
            <summary>
            Gets an array of random items.
            </summary>
            <typeparam name="T">item type T</typeparam>
            <param name="length">length of the new array</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.DataGenerator.GetArray``1(System.Int32,System.Boolean)">
            <summary>
            Gets an array of random items.
            </summary>
            <typeparam name="T">item type T</typeparam>
            <param name="length">length of the new array</param>
            <param name="initializeEa">indicates whether each item is initialized with a random value</param>
            <returns>the value</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Dto.DataTransferObject`1">
            <summary>
            Base class for IDataTransferObject implementations generated by the framework.
            </summary>
            <typeparam name="T">interface type T</typeparam>
        </member>
        <member name="T:NetSteps.Encore.Core.Dto.SPI.IDataTransferObjectSPI`1">
            <summary>
            DTO Service Provider Interface; used internally by the framework.
            </summary>
            <typeparam name="T">dto type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.SPI.IDataTransferObjectSPI`1.CopyState(NetSteps.Encore.Core.Dto.DataTransferObject{`0})">
            <summary>
            Copies state from another instance.
            </summary>
            <param name="other">the other instance</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.SPI.IDataTransferObjectSPI`1.CopySource(`0)">
            <summary>
            Copies state from another instance.
            </summary>
            <param name="other">the other instance.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DataTransferObject`1.MarkReadonly">
            <summary>
            Called by the framework to mark an DataTransferObject as readonly.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DataTransferObject`1.CheckWriteOnce">
            <summary>
            Ensures the instance is writable.
            </summary>    
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DataTransferObject`1.CopyState(NetSteps.Encore.Core.Dto.DataTransferObject{`0})">
            <summary>
            Copies state from another instance.
            </summary>
            <param name="other">the other instance</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DataTransferObject`1.CopySource(`0)">
            <summary>
            Copies state from another instance.
            </summary>
            <param name="other">the other instance.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DataTransferObject`1.PerformCopySource(`0)">
            <summary>
            Overriden by subclasses to copy the state from another instance.
            </summary>
            <param name="other">the other instance</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DataTransferObject`1.PerformCopyState(NetSteps.Encore.Core.Dto.DataTransferObject{`0})">
            <summary>
            Overriden by subclasses to copy the state from another instance.
            </summary>
            <param name="other">the other instance</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Dto.DTOAttribute">
            <summary>
            Marks an interface or class as a stereotypical DTO and implements the stereotypical DTO behavior for interfaces.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DTOAttribute.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DTOAttribute.RegisterStereotypeImplementation``1(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Implements the stereotypical DTO behavior for interfaces of type T.
            </summary>
            <typeparam name="T">interface type T</typeparam>
            <returns>concrete implementation implementing the 
            stereotypical DTO behavior</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Dto.DtoIgnoreAttribute">
            <summary>
            Marks a property such that it will be ignored by DTO code generation.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.DtoIgnoreAttribute.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Dto.IContainerExtensions">
            <summary>
            Container extensions for DataTransferObjects
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.IContainerExtensions.Mutation``1(NetSteps.Encore.Core.IoC.IContainer,``0,System.Action{``0})">
            <summary>
            Creates a data transfer object by mutating the dto given.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="container">a container</param>
            <param name="item">an existing dto object to mutate</param>
            <param name="mutator">an action used to mutate the item</param>
            <returns>a new dto instance with the mutated values</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.IContainerExtensions.Mutation``1(NetSteps.Encore.Core.IoC.IContainer,``0,System.Action{``0},System.Boolean)">
            <summary>
            Creates a data transfer object by mutating the dto given.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="container">a container</param>
            <param name="item">an existing dto object to mutate</param>
            <param name="mutator">an action used to mutate the item</param>
            <param name="readonly">indicates whether the result should be marked readonly</param>
            <returns>a new dto instance with the mutated values</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.IContainerExtensions.DtoCopy``1(NetSteps.Encore.Core.IoC.IContainer,``0)">
            <summary>
            Creates a copy of a data transfer object.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="container">a container</param>
            <param name="item">an existing dto object to mutate</param>
            <returns>a readonly copy of <paramref name="item"/></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.IContainerExtensions.DtoCopy``1(NetSteps.Encore.Core.IoC.IContainer,``0,System.Boolean)">
            <summary>
            Creates a copy of a data transfer object.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="container">a container</param>
            <param name="item">an existing dto object to mutate</param>
            <param name="readonly">indicates whether the result should be marked readonly</param>
            <returns>a copy of <paramref name="item"/></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.IContainerExtensions.NewDto``1(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Creates an instance of an interface for use as a data transfer object.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="container">a container</param>
            <returns>a new dto instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Dto.IContainerExtensions.NewDto``1(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.LifespanTracking)">
            <summary>
            Creates an instance of an interface for use as a data transfer object.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="container">a container</param>
            <param name="tracking">lifespan tracking of the new instance</param>
            <returns>a new dto instance</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Extensions">
            <summary>
            Various extension methods.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.GetFullName(System.Delegate)">
            <summary>
            Gets the fully qualified, human readable name for a delegate.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.RemoveTrailing(System.String,System.String)">
            <summary>
            Removes a string from the end of another string if present.
            </summary>
            <param name="target">The target string.</param>
            <param name="value">The value to remove.</param>
            <returns>the target string with the value removed</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.EqualsOrItemsEqual``1(``0[],``0[])">
            <summary>
            Determines if the arrays are equal or if the items in two different arrays
            are equal.
            </summary>
            <typeparam name="T">Item type T</typeparam>
            <param name="lhs">Left-hand comparand</param>
            <param name="rhs">Right-hand comparand</param>
            <returns><b>true</b> if the arrays are equal or if the items in the arrays are equal.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.CalculateCombinedHashcode``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Produces a combined hashcode from the enumerated items.
            </summary>
            <typeparam name="T">element type T</typeparam>
            <param name="items">an enumerable</param>
            <param name="seed">the hash seed (starting value)</param>
            <returns>the combined hashcode</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.CountBitsInFlag(System.UInt32)">
            <summary>
            Counts the number of bits turned on.
            </summary>
            <param name="value">a value</param>
            <returns>number of bits turned on</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.CountBitsInFlag(System.Int32)">
            <summary>
            Counts the number of bits turned on.
            </summary>
            <param name="value">a value</param>
            <returns>number of bits turned on</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.GetMemberFromExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets a member from the expression given.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="expression">the expression</param>
            <returns>the expression's target member</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.JsonToDynamic(System.String)">
            <summary>
            Creates a dynamic object over the given JSON.
            </summary>
            <param name="json">JSON input</param>
            <returns>a dynamic object</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.ToJson(System.Object)">
            <summary>
            Converts the source object to JSON
            </summary>
            <param name="source">the source</param>
            <returns>the JSON representation of the source</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.DoubleQuote(System.String)">
            <summary>
            Double quotes the given string, delimiting inner quotes.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Extensions.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumerable to a readonly collection.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="collection">the collection</param>
            <returns>returns a read-only collection</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.CreationContextOptions">
            <summary>
            Options for creation contexts.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationContextOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationContextOptions.InstanceTracking">
            <summary>
            Indicates the creation context should track instances.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationContextOptions.EnableCaching">
            <summary>
            Indicates that caching is enabled.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationContextOptions.InheritCache">
            <summary>
            Indicates the creation context should inherit cached items from the outer context.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationContextOptions.InheritScope">
            <summary>
            Indicates that the context should inherit its scope from an outer scope if one exists.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.CreationEventKind">
            <summary>
            Kinds of creation events.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationEventKind.Created">
            <summary>
            Indicates the factory created the instance (or caused to be created).
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationEventKind.Initialized">
            <summary>
            Indicates the factory invoked an initializer for the instance.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationEventKind.Copied">
            <summary>
            Indicates the factory copy-constructed an instance based on another instance.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationEventKind.Cached">
            <summary>
            Indicates the factory cached the instance.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationEventKind.Reissued">
            <summary>
            Indicates the factory reissued the instance.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.CreationEventKind.DuckType">
            <summary>
            Indicates the factory ducktyped an instance of another type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.ICreationContext">
            <summary>
            Interface for creation contexts.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.ICreationContext.Subscribe``1(System.Action{System.Type,``0,System.String,NetSteps.Encore.Core.CreationEventKind})">
            <summary>
            Creates a subscription to creation events against type T.
            </summary>
            <typeparam name="T">subscription target type T</typeparam>
            <param name="observer">An action that will be called upon creation events against type T</param>
        </member>
        <member name="M:NetSteps.Encore.Core.ICreationContext.NotifyObserversOfCreationEvent``1(System.Type,``0,System.String,NetSteps.Encore.Core.CreationEventKind)">
            <summary>
            Notifies observers of type T that a creation event occurred.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestedType"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="evt"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.ICreationContext.EnsureCache``2(``0,System.Func{``1})">
            <summary>
            Ensures a cache is registered with the context, creating the cache if necessary
            using the factory given.
            </summary>
            <typeparam name="K">Registration key type K</typeparam>
            <typeparam name="C">Cache type C</typeparam>
            <param name="key">registration key</param>
            <param name="factory">factory method that will be used to create a new cache if one is not
            already present.</param>
            <returns>a cache</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.ICreationContext.EnsureCache``2(``0)">
            <summary>
            Ensures a cache is registered with the context and returns
            that cache.
            </summary>
            <typeparam name="K">Registration key type K</typeparam>
            <typeparam name="C">Cache type C</typeparam>
            <param name="key">registration key</param>
            <returns>a cache</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.ICreationContext.TryGetCache``2(``0,``1@)">
            <summary>
            Tries to get a cache from the creation context.
            </summary>
            <typeparam name="K">Registration key type K</typeparam>
            <typeparam name="C">Cache type C</typeparam>
            <param name="key">registration key</param>
            <param name="cache">output variable where the cache will be returned upon success</param>
            <returns>true if the cache was returned; otherwise false.</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.ICreationContext.Scope">
            <summary>
            Gets the cleanup scope for the context.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.CommandBinding`1">
            <summary>
            Base class for command bindings.
            </summary>
            <typeparam name="T">target type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.CommandBinding`1.#ctor(NetSteps.Encore.Core.IoC.Constructors.ConstructorAdapter{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="adapter">A constructor adapter for type T</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.CommandBinding`1.Execute(NetSteps.Encore.Core.IoC.IContainer,System.String)">
            <summary>
            Executes the constructor adapter and returns the resulting instance.
            </summary>
            <param name="container">scoping container</param>
            <param name="name">the registered name or null</param>
            <returns>the resulting instance</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Constructors.CommandBinding`1.Adapter">
            <summary>
            Gets the constructor adapter for target type T
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.ConstructorAdapter`2">
            <summary>
            Adapter for constructors defined on concrete type C of type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <typeparam name="C">concrete type C</typeparam>
            <summary>
            Adapter for constructors defined on concrete type C of type T
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.ConstructorAdapter`1">
            <summary>
            Adapter for constructors defined on type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <summary>
            Adapter for constructors defined on type T
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorAdapter`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorAdapter`1.Execute(NetSteps.Encore.Core.IoC.IContainer,System.String,System.Object[])">
            <summary>
            Executes the constructor and returns the resulting instance.
            </summary>
            <param name="container">scoping container</param>
            <param name="name">the registered name or null</param>
            <param name="parameters">parameters intended for the new instance</param>
            <returns>a new instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorAdapter`1.GetConstructorAdapterByOrdinal(System.Int32,System.Reflection.ConstructorInfo)">
            <summary>
            Compiles a constructor adapter for the given constructor.
            </summary>
            <param name="ordinal">the ordinal position of the constructor among constructors defined on type T</param>
            <param name="ci">constructor info</param>
            <returns>the compiled constructor adapter type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorAdapter`2.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorAdapter`2.GetConstructorAdapterByOrdinal(System.Int32,System.Reflection.ConstructorInfo)">
            <summary>
            Compiles a constructor adapter for the given constructor.
            </summary>
            <param name="ordinal">the ordinal position of the constructor among constructors defined on type T</param>
            <param name="ci">constructor info</param>
            <returns>the compiled constructor adapter type</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`1">
            <summary>
            Base constructor command; matches incomming parameters to the most suitable
            constructor declared on the target type.
            </summary>
            <typeparam name="T">target type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`1.TryMatchAndBind(NetSteps.Encore.Core.IoC.Param[],NetSteps.Encore.Core.IoC.Constructors.CommandBinding{`0}@)">
            <summary>
            Tries to match supplied params to a constructor and provides a command binding.
            </summary>
            <param name="parameters">the supplied parameters</param>
            <param name="binding">variable to hold the binding upon success</param>
            <returns>true if successful; otherwise false</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`1.ParameterCount">
            <summary>
            Gets the parameter count.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`1.BoundToSuppliedDefaults">
            <summary>
            Indicates whether the command is bound to supplied defaults.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`2">
            <summary>
            Default implementation of the constructor command type.
            </summary>
            <typeparam name="T">target type T</typeparam>
            <typeparam name="C">concrete type C</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`2.#ctor(System.Reflection.ConstructorInfo,NetSteps.Encore.Core.IoC.Param[],System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="ci">reflected constructor info</param>
            <param name="defaults">default params supplied during registration</param>
            <param name="ordinal">ordinal position of the constructor among constructors for the concrete type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`2.TryMatchAndBind(NetSteps.Encore.Core.IoC.Param[],NetSteps.Encore.Core.IoC.Constructors.CommandBinding{`0}@)">
            <summary>
            Tries to match supplied params to a constructor and provides a command binding.
            </summary>
            <param name="parameters">the supplied parameters</param>
            <param name="binding">variable to hold the binding upon success</param>
            <returns>true if successful; otherwise false</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`2.ParameterCount">
            <summary>
            Gets the parameter count.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Constructors.ConstructorCommand`2.BoundToSuppliedDefaults">
            <summary>
            Indicates whether the command is bound to supplied defaults.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.ConstructorSet`2">
            <summary>
            Gets a contructor set for a type.
            </summary>
            <typeparam name="T">target type T</typeparam>
            <typeparam name="C">concrete type C</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.ConstructorSet`2.#ctor(NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.DefaultConstructorAdapter`1">
            <summary>
            Constructor adapter for types that have a default constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.DefaultConstructorAdapter`1.Execute(NetSteps.Encore.Core.IoC.IContainer,System.String,System.Object[])">
            <summary>
            Executes the constructor and returns the resulting instance.
            </summary>
            <param name="container">scoping container</param>
            <param name="name">the registered name or null</param>
            <param name="parameters">parameters intended for the new instance</param>
            <returns>a new instance</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.DefaultConstructorAdapter`2">
            <summary>
            Constructor adapter for types that have a default constructor.
            </summary>
            <typeparam name="T">target type T</typeparam>
            <typeparam name="C">concrete type C</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.DefaultConstructorAdapter`2.Execute(NetSteps.Encore.Core.IoC.IContainer,System.String,System.Object[])">
            <summary>
            Executes the constructor and returns the resulting instance.
            </summary>
            <param name="container">scoping container</param>
            <param name="name">the registered name or null</param>
            <param name="parameters">parameters intended for the new instance</param>
            <returns>a new instance</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.FactoryConstructorAdapter`1">
            <summary>
            Factory constructor adapter.
            </summary>
            <typeparam name="T">target type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.FactoryConstructorAdapter`1.Execute(NetSteps.Encore.Core.IoC.IContainer,System.String,System.Object[])">
            <summary>
            Executes the constructor and returns the resulting instance.
            </summary>
            <param name="container">scoping container</param>
            <param name="name">the registered name or null</param>
            <param name="parameters">parameters intended for the new instance</param>
            <returns>a new instance</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Constructors.FactoryConstructorAdapter`2">
            <summary>
            Factory constructor adapter.
            </summary>
            <typeparam name="T">target type T</typeparam>
            <typeparam name="C">concrete type C</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Constructors.FactoryConstructorAdapter`2.Execute(NetSteps.Encore.Core.IoC.IContainer,System.String,System.Object[])">
            <summary>
            Executes the constructor and returns the resulting instance.
            </summary>
            <param name="container">scoping container</param>
            <param name="name">the registered name or null</param>
            <param name="parameters">parameters intended for the new instance</param>
            <returns>a new instance</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Container">
            <summary>
            Utility class for working with containers.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Container.IdentifyTenantAsLogicalRoot">
            <summary>
            Identifies the current tenant's container as the logical root container.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Container.Current">
            <summary>
            Gets the container assigned to the current thread.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Container.LogicalRoot">
            <summary>
            Gets the logical root container.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Container.Root">
            <summary>
            Gets the root container.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.RegistrationBehaviors">
            <summary>
            Indicates registration behavior.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.RegistrationBehaviors.None">
            <summary>
            None; empty.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.RegistrationBehaviors.Default">
            <summary>
            Indicates the target is the default implementation.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.RegistrationBehaviors.Named">
            <summary>
            Indicates the target is a named implementation.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.RegistrationBehaviors.OverrideDefault">
            <summary>
            Indicates the target is intended to override
            the default implementation.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.RegistrationBehaviors.OverrideNamed">
            <summary>
            Indicates the target is intended to override
            a named implementation.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.RegistrationBehaviors.IfNoneOther">
            <summary>
            Indicates the target is to be the registered
            instance if no other registrations exist.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.RegistrationBehaviors.DefaultOrOverrideDefault">
            <summary>
            Indicates the target is either the default instance
            or if a default exists; target overrides the default.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute">
            <summary>
            Indicates that the target should be registered with the
            IoC container upon assembly wireup.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.Meta.WireupTaskAttribute">
            <summary>
            Base wireup task attribute. Wireup tasks are executed by the wireup coordinator opon discovery.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupTaskAttribute.#ctor">
            <summary>
            Createas a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupTaskAttribute.#ctor(NetSteps.Encore.Core.Wireup.WireupPhase)">
            <summary>
            Createas a new instance.
            </summary>
            <param name="phase">the wireup phase in which the task is executed</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupTaskAttribute.ExecuteTask(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
            <summary>
            Called by the framework to execute the task.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupTaskAttribute.PerformTask(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
            <summary>
            Called by the base class upon execution. Derived classes should 
            provide an implementation that performs the wireup logic.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.Meta.WireupTaskAttribute.Phase">
            <summary>
            Indicates the wireup phase.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.#ctor">
            <summary>
            Creates a new instance; used the implemented type can be inferred from a single
            superclass or interface implementation.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.#ctor(System.Type,NetSteps.Encore.Core.IoC.RegistrationBehaviors)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="registerFor">indicates the type for which the target will become
            a registered implementation.</param>
            <param name="behaviors">registration behaviors</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.#ctor(NetSteps.Encore.Core.Wireup.WireupPhase,System.Type,NetSteps.Encore.Core.IoC.RegistrationBehaviors)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="phase">the wireup phase in which the registration should be completed</param>
            <param name="registerFor">indicates the type for which the target will become
            a registered implementation.</param>
            <param name="behaviors">registration behaviors</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.#ctor(System.Type,NetSteps.Encore.Core.IoC.RegistrationBehaviors,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="registerFor">indicates the type for which the target will become
            a registered implementation.</param>
            <param name="behaviors">registration behaviors</param>
            <param name="name">the registered implementation's name</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.#ctor(NetSteps.Encore.Core.Wireup.WireupPhase,System.Type,NetSteps.Encore.Core.IoC.RegistrationBehaviors,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="phase">the wireup phase in which the registration should be completed</param>
            <param name="registerFor">indicates the type for which the target will become
            a registered implementation.</param>
            <param name="behaviors">registration behaviors</param>
            <param name="name">the registered implementation's name</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.PerformTask(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
            <summary>
            Performs the wireup task.
            </summary>
            <param name="coordinator"></param>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.RegistratedForType">
            <summary>
            Gets the type for which the target type is registered.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.Behaviors">
            <summary>
            Gets the registration behaviors.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.Name">
            <summary>
            Gets the named implementation's name; otherwise null.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ContainerRegisterAttribute.ScopeBehavior">
            <summary>
            Indicates scope behavior for instances of the implementation type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IContainer">
            <summary>
            Container interface.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.NewUntyped(NetSteps.Encore.Core.IoC.LifespanTracking,System.Type)">
            <summary>
            Creates a new instance of the target type.
            </summary>
            <param name="tracking"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.New``1(NetSteps.Encore.Core.IoC.LifespanTracking)">
            <summary>
            Resolves type T to an instance according to it's registration.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="tracking">Lifespan tracking used for the instance
            if it is newly created.</param>
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.NewWithParams``1(NetSteps.Encore.Core.IoC.LifespanTracking,NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Resolves type T to an instance according to it's registration, utilizing the
            parameters given if the instance must be newly created.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="tracking">Lifespan tracking used for the instance
            if it is newly created.</param>
            <param name="parameters">Initialization parameters whose values are used
            if an instance must be newly created.</param>
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.NewNamed``1(NetSteps.Encore.Core.IoC.LifespanTracking,System.String)">
            <summary>
            Resolves type T to an instance according to a named registration.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="tracking">Lifespan tracking used for the instance
            if it is newly created.</param>
            <param name="name">the name</param>
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.NewNamedWithParams``1(NetSteps.Encore.Core.IoC.LifespanTracking,System.String,NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Resolves type T to an instance according to a named registration, utilizing the
            parameters given if the instance must be newly created.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="tracking">Lifespan tracking used for the instance
            if it is newly created.</param>
            <param name="name">the name</param>
            <param name="parameters">Initialization parameters whose values are used
            if an instance must be newly created.</param>
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.NewImplementationOf``1(NetSteps.Encore.Core.IoC.LifespanTracking,System.Type)">
            <summary>
            Resolves a specific implementation of type T according to the implementation's registration.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="tracking">Lifespan tracking used for the instance
            if it is newly created.</param>
            <param name="subtype"></param>
            <returns>an instance of the implementation type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.MakeChildContainer(NetSteps.Encore.Core.CreationContextOptions)">
            <summary>
            Makes a child container from the current container.
            </summary>
            <param name="options">options </param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.ShareContainer">
            <summary>
            Prepares the container for being shared in multiple threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.Subscribe``1(System.Action{System.Type,``0,System.String,NetSteps.Encore.Core.CreationEventKind})">
            <summary>
            Creates a subscription to creation events against type T.
            </summary>
            <typeparam name="T">subscription target type T</typeparam>
            <param name="observer">An action that will be called upon creation events against type T</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.NotifyObserversOfCreationEvent``1(System.Type,``0,System.String,NetSteps.Encore.Core.CreationEventKind)">
            <summary>
            Notifies observers of type T that a creation event occurred.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestedType"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="evt"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.EnsureCache``2(``0,System.Func{``1})">
            <summary>
            Ensures a cache is registered with the context and returns
            that cache.
            </summary>
            <typeparam name="K">Registration key type K</typeparam>
            <typeparam name="C">Cache type C</typeparam>
            <param name="key">registration key</param>
            <param name="factory">factory method that will be used to create a new cache if one is not
            already present.</param>
            <returns>a cache</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.EnsureCache``2(``0)">
            <summary>
            Ensures a cache is registered with the context and returns
            that cache.
            </summary>
            <typeparam name="K">Registration key type K</typeparam>
            <typeparam name="C">Cache type C</typeparam>
            <param name="key">registration key</param>
            <returns>a cache</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainer.TryGetCache``2(``0,``1@)">
            <summary>
            Tries to get a cache from the creation context.
            </summary>
            <typeparam name="K">Registration key type K</typeparam>
            <typeparam name="C">Cache type C</typeparam>
            <param name="key">registration key</param>
            <param name="cache">output variable where the cache will be returned upon success</param>
            <returns>true if the cache was returned; otherwise false.</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IContainer.Key">
            <summary>
            Gets the container's unique ID.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IContainer.Registry">
            <summary>
            Gets the container's registry.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IContainer.IsRoot">
            <summary>
            Indicates whether the container is the root.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IContainer.IsTenant">
            <summary>
            Indicates whether the container is within a tenant scope.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IContainer.TenantID">
            <summary>
            Gets the current tenant identifier if the container is
            within a tentant scope; otherwise null.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IContainer.Scope">
            <summary>
            Gets the cleanup scope for the context.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IRootContainer">
            <summary>
            Interface for root containers.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.IWireupObserver">
            <summary>
            Interface for wireup observers. Wireup coordinators will notify observers of 
            tasks and dependencies having a matching observer key.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.IWireupObserver.NotifyWireupTask(NetSteps.Encore.Core.Wireup.IWireupCoordinator,NetSteps.Encore.Core.Wireup.Meta.WireupTaskAttribute,System.Type)">
            <summary>
            Called by coordinators to notify observers of wireup tasks.
            </summary>
            <param name="coordinator"></param>
            <param name="task"></param>
            <param name="target"></param>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.IWireupObserver.ObserverKey">
            <summary>
            Gets the observer's key.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IRootContainer.RegisterMultiTenant``1">
            <summary>
            Registers a multi-tenant resolver with the container.
            </summary>
            <typeparam name="TTenantResolver">tenant resolver type TTenantResolver</typeparam>
            <returns>A type registration for the tenant resolver</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IRootContainer.RegisterMultiTenant``1(System.Func{NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.Param[],``0})">
            <summary>
            Registers a multi-tenant resolver with the container.
            </summary>
            <typeparam name="TTenantResolver">tenant resolver type TTenantResolver</typeparam>
            <param name="factory">factory that will provide the tenant resolver instances</param>
            <returns>A type registration for the tenant resolver</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IRootContainer.TryResolveTenant(System.Object@)">
            <summary>
            Tries to resolve a tenant ID.
            </summary>
            <param name="id">variable to hold the tenant ID upon success</param>
            <returns>true if the tenant is resolved; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IRootContainer.RegisterTenant(System.Object)">
            <summary>
            Registers a tenant ID returning the tenant specific root container.
            </summary>
            <param name="id">tenant ID</param>
            <returns>the tenant specific root container</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IRootContainer.ResolveCurrentTenant">
            <summary>
            Resolves the current tenant and returns the tenant specific root container.
            </summary>
            <returns>the tenant specific root container</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IRootContainer.ResolveTenantByID(System.Object)">
            <summary>
            Resolves the tenant by ID and returns the tenant specific root container.
            </summary>
            <param name="id">the tenant ID</param>
            <returns>the tenant specific root container</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IRootContainer.SupportsMultipleTenants">
            <summary>
            Indicates whether the container has multi-tenant support.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Create">
            <summary>
            Utility class for working with containers.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewContainer">
            <summary>
            Creates a new container scoped by the current container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewContainer(NetSteps.Encore.Core.CreationContextOptions)">
            <summary>
            Creates a new container scoped by the current container.
            </summary>
            <param name="options">creation context options</param>
            <returns></returns>		
            <see cref="T:NetSteps.Encore.Core.CreationContextOptions"/>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.TenantContainer">
            <summary>
            Creates a tenant container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.AsIf``1(System.Object)">
            <summary>
            Creates an interface proxy type T over the source object. (If it looks like a duck, etc, etc.)
            </summary>
            <typeparam name="T">interface type T</typeparam>
            <param name="source">the source</param>
            <returns>an interface proxy (duck type) over the source</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.New``1">
            <summary>
            Resolves an instance of type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <returns>a resolved instance of type T</returns>
            <remarks>If type T implements IDisposable it is the caller's 
            responsibility to ensure that the Dispose method is called
            at the appropriate time. To change this behavior call the
            overloaded New method and supply an alternate LifespanTracking value.</remarks>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.New``1(NetSteps.Encore.Core.IoC.LifespanTracking)">
            <summary>
            Resolves an instance of type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="tracking">lifespan tracking</param>
            <returns>a resolved instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.New``1(System.Type)">
            <summary>
            Resolves a specific implementation of type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="impl">implementation type</param>
            <returns>a resolved instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewWithParams``1(NetSteps.Encore.Core.IoC.LifespanTracking,NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Resolves an instance of type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="tracking">lifespan tracking</param>
            <param name="parameters">the parameters</param>
            <returns>a resolved instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.New``1(NetSteps.Encore.Core.IoC.LifespanTracking,System.Type)">
            <summary>
            Resolves a specific implementation of type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="tracking">lifespan tracking</param>
            <param name="impl">implementation type</param>
            <returns>a resolved instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewInit``1">
            <summary>
            Creates a new instance of type T for initialization.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewInit``1(NetSteps.Encore.Core.IoC.LifespanTracking)">
            <summary>
            Creates a new instance of type T for initialization.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewNamed``1(System.String)">
            <summary>
            Resolves a named instance of type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="name">the instance's name</param>
            <returns>a resolved instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewNamed``1(System.String,NetSteps.Encore.Core.IoC.LifespanTracking)">
            <summary>
            Resolves a named instance of type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="name">the instance's name</param>
            <param name="tracking">lifespan tracking</param>
            <returns>a resolved instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.SharedOrNewContainer">
            <summary>
            Gets a container with its own scope; either an existing
            container that is not root or a new child container.
            </summary>
            <returns>a container</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.Mutation``1(``0,System.Action{``0})">
            <summary>
            Creates a data transfer object by mutating the dto given.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="item">an existing dto object to mutate</param>
            <param name="mutator">an action used to mutate the item</param>
            <returns>a new dto instance with the mutated values</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.Mutation``1(``0,System.Action{``0},System.Boolean)">
            <summary>
            Creates a data transfer object by mutating the dto given.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="item">an existing dto object to mutate</param>
            <param name="mutator">an action used to mutate the item</param>
            <param name="readonly">indicates whether the result should be marked readonly</param>
            <returns>a new dto instance with the mutated values</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.DtoCopy``1(``0)">
            <summary>
            Creates a readonly copy of a data transfer object.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="item">an existing dto object to mutate</param>
            <returns>a readonly copy of <paramref name="item"/></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.DtoCopy``1(``0,System.Boolean)">
            <summary>
            Creates a copy of a data transfer object.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="item">an existing dto object to mutate</param>
            <param name="readonly">indicates whether the result should be marked readonly</param>
            <returns>a copy of <paramref name="item"/></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewDto``1">
            <summary>
            Creates an instance of an interface for use as a data transfer object.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <returns>a new dto instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Create.NewDto``1(NetSteps.Encore.Core.IoC.LifespanTracking)">
            <summary>
            Creates an instance of an interface for use as a data transfer object.
            </summary>
            <typeparam name="T">dto type T</typeparam>
            <param name="tracking">lifespan tracking of the new instance</param>
            <returns>a new dto instance</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.BasicDuck">
            <summary>
            Used by the framework for duck typing dynamic objects.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuck.#ctor(System.Object)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuck.MakeGetMemberBinder(System.String)">
            <summary>
            Gets a binder for a member property.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuck.MakeSetMemberBinder(System.String)">
            <summary>
            Gets a binder for a member property.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuck.CastDuckTarget``1">
            <summary>
            Casts the duck type as target type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuck.GetMember(System.String)">
            <summary>
            Gets a member by name.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuck.SetMember(System.String,System.Object)">
            <summary>
            Sets the member by name.
            </summary>
            <param name="member"></param>
            <param name="val"></param>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.BasicDuck.DuckTarget">
            <summary>
            Gets the source object that has been duck typed.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.BasicDuckGetMemberBinder">
            <summary>
            Helper class for getting duck type'd members.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuckGetMemberBinder.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuckGetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <summary>
            Fallback handler for missing members.
            </summary>
            <param name="target"></param>
            <param name="errorSuggestion"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.BasicDuckSetMemberBinder">
            <summary>
            Helper class for setting duck type'd members.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuckSetMemberBinder.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.BasicDuckSetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <summary>
            Fallback handler for missing members.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
            <param name="errorSuggestion"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Duck">
            <summary>
            Utility class for accomplishing limited duck typing.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Duck.TypeAs``1(System.Object)">
            <summary>
            Creates a duck type proxy over a source object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Duck.ImplementConstructor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass)">
            <summary>
            Overrides the base constructor on the concrete type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ScopeBehavior">
            <summary>
            Enumeration of scope behaviors
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ScopeBehavior.Default">
            <summary>
            Default == InstancePerRequest
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ScopeBehavior.InstancePerRequest">
            <summary>
            Indicates an instance is created for each
            container request. (Default)
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ScopeBehavior.SpecializationDisallowed">
            <summary>
            Indicates that specialization is no longer allowed.
            Pertains to the current container as well as any subsequent container scopes.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ScopeBehavior.InstancePerScope">
            <summary>
            Indicates an instance is created for each
            lifetime scope.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ScopeBehavior.Singleton">
            <summary>
            Indicates an instance is only created once
            within the shared-scope of a root container.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ScopeBehavior.FinalSingleton">
            <summary>
            Indicates an instance is a singleton and cannot be
            overridden.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ContainerException">
            <summary>
            Base container exception.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerException.#ctor">
            <summary>
            Default constructor; creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerException.#ctor(System.String)">
            <summary>
            Creates a new instance using the error message given.
            </summary>
            <param name="errorMessage">An error message describing the exception.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the error message and cuase given.
            </summary>
            <param name="errorMessage">An error message describing the exception.</param>
            <param name="cause">An inner exception that caused this exception</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used during serialization.
            </summary>
            <param name="si">SerializationInfo</param>
            <param name="sc">StreamingContext</param>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ContainerRegistryException">
            <summary>
            Indicates an exception during container registration.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegistryException.#ctor">
            <summary>
            Default constructor; creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegistryException.#ctor(System.String)">
            <summary>
            Creates a new instance using the error message given.
            </summary>
            <param name="errorMessage">An error message describing the exception.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegistryException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the error message and cuase given.
            </summary>
            <param name="errorMessage">An error message describing the exception.</param>
            <param name="cause">An inner exception that caused this exception</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegistryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used during serialization.
            </summary>
            <param name="si">SerializationInfo</param>
            <param name="sc">StreamingContext</param>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.MissingParameterException">
            <summary>
            Indicates a required parameter was not supplied while resolving a type.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.MissingParameterException.#ctor">
            <summary>
            Default constructor; creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.MissingParameterException.#ctor(System.String)">
            <summary>
            Creates a new instance using the error message given.
            </summary>
            <param name="errorMessage">An error message describing the exception.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.MissingParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance using the error message and cuase given.
            </summary>
            <param name="errorMessage">An error message describing the exception.</param>
            <param name="cause">An inner exception that caused this exception</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.MissingParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used during serialization.
            </summary>
            <param name="si">SerializationInfo</param>
            <param name="sc">StreamingContext</param>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.TypeExtensions">
            <summary>
            Various Type extensions.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.TypeExtensions.GetFullName(System.Delegate)">
            <summary>
            Gets the fully qualified, human readable name for a delegate.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.LifespanTracking">
            <summary>
            Indicates how a container should track the lifespan an 
            object it creates.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.LifespanTracking.Default">
            <summary>
            Default tracking == Automatic.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.LifespanTracking.Automatic">
            <summary>
            Indicates the container must automatically track the lifespans
            and ensure IDisposable instances are disposed.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.LifespanTracking.External">
            <summary>
            Indicates the instances are externally tracked. Callers are
            responsible for cleaning up IDisposable instances.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IContainerExtensions">
            <summary>
            IContainer extensions.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.AsIf``1(NetSteps.Encore.Core.IoC.IContainer,System.Object)">
            <summary>
            Creates an interface proxy type T over the source object. (If it looks like a duck, etc, etc.)
            </summary>
            <typeparam name="T">interface type T</typeparam>
            <param name="c">the container</param>
            <param name="source">the source</param>
            <returns>an interface proxy (duck type) over the source</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.ForType``1(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Gets the registry for type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="c">the container</param>
            <returns>the registry for type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.ForGenericType(NetSteps.Encore.Core.IoC.IContainer,System.Type)">
            <summary>
            Gets the type registry for a generic type.
            </summary>
            <param name="c">a container</param>
            <param name="generic">a generic type</param>
            <returns>a registry for the generic type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.NewUntyped(NetSteps.Encore.Core.IoC.IContainer,System.Type)">
            <summary>
            Resolves an instance according to a target type's registration.
            </summary>
            <returns>an instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.New``1(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Resolves type T to an instance according to it's registration.
            </summary>
            <typeparam name="T">type T</typeparam>
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.NewWithParams``1(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Resolves type T to an instance according to it's registration, utilizing the
            parameters given if the instance must be newly created.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="c">a container</param>
            <param name="parameters">Initialization parameters whose values are used
            if an instance must be newly created.</param>		
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.NewNamed``1(NetSteps.Encore.Core.IoC.IContainer,System.String)">
            <summary>
            Resolves type T to an instance according to a named registration.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="c">a container</param>
            <param name="name">the name</param>
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.NewNamedWithParams``1(NetSteps.Encore.Core.IoC.IContainer,System.String,NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Resolves type T to an instance according to a named registration, utilizing the
            parameters given if the instance must be newly created.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="c">a container</param>
            <param name="name">the name</param>
            <param name="parameters">Initialization parameters whose values are used
            if an instance must be newly created.</param>
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.NewImplementationOf``1(NetSteps.Encore.Core.IoC.IContainer,System.Type)">
            <summary>
            Resolves a specific implementation of type T according to the implementation's registration.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="c">a container</param>
            <param name="implementationType">the implementation type</param>
            <returns>an instance of the implementation type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.NewImplementationOf``2(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.LifespanTracking)">
            <summary>
            Resolves a specific implementation of type T according to the implementation's registration.
            </summary>
            <typeparam name="T">type T</typeparam>
            <typeparam name="C">implementetion type C</typeparam>
            <param name="c">a container</param>
            <param name="tracking">Lifespan tracking used for the instance
            if it is newly created.</param>
            <returns>an instance of the implementation type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.NewInit``1(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Creates a new instance of type T for initialization.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.NewInit``1(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.LifespanTracking)">
            <summary>
            Creates a new instance of type T for initialization.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="c"></param>
            <param name="tracking"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.MakeChildContainer(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Makes a child container from the current container.
            </summary>
            <returns>a child container</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerExtensions.MakeChildContainer(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.CreationContextOptions)">
            <summary>
            Makes a child container from the current container.
            </summary>
            <param name="c">the container</param>
            <param name="options">creation context options</param>
            <returns>a child container</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IContainerOwned">
            <summary>
            Interface for objects owned by a container.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IContainerOwned.Container">
            <summary>
            Gets the container owner.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ContainerOwned">
            <summary>
            abstract implementation of the IContainerOwned interface
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerOwned.#ctor(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="container">the container, owner</param>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ContainerOwned.Container">
            <summary>
            Returns the container, owner.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IContainerRegistrationParticipant">
            <summary>
            Interface for registration participants.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistrationParticipant.End">
            <summary>
            Ends registration for the participant and returns the
            owning container.
            </summary>
            <returns>The owner, container.</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IContainerRegistrationParticipant.IsEnded">
            <summary>
            Indicates whether the registration has ended for this participant.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ContainerRegistrationParticipant">
            <summary>
            Abstract implementation of IContainerRegistrationParticipant
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegistrationParticipant.#ctor(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="container">the container where the registration is occurring</param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegistrationParticipant.End">
            <summary>
            Ends registration for the participant and returns the
            owning container.
            </summary>
            <returns>The owner, container.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ContainerRegistrationParticipant.OnEnded">
            <summary>
            Method called when registration is ended.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ContainerRegistrationParticipant.IsEnded">
            <summary>
            Indicates whether the registration has ended for this participant.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IContainerRegistry">
            <summary>
            A container registry is used to register types and resolve those registrations.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.ForType``1">
            <summary>
            Gets the registry specific to type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <returns>the type registry</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.ForGenericType(System.Type)">
            <summary>
            Gets the registry for a generic type.
            </summary>
            <param name="generic">the generic type</param>
            <returns>the registry for the generic type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.IsTypeRegistered``1">
            <summary>
            Determines if type T is registered.
            </summary>
            <typeparam name="T">type T</typeparam>
            <returns>true if type T is registered; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.IsTypeRegistered(System.Type)">
            <summary>
            Determins if a type is registered.
            </summary>
            <param name="type">the type</param>
            <returns>true if the type is registered; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.IsTypeRegisteredWithName``1(System.String)">
            <summary>
            Determines if a type is registered with the name given.
            </summary>
            <typeparam name="T">typeof T</typeparam>
            <param name="name">the name</param>
            <returns>true if the type is registered; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.IsTypeRegisteredWithName(System.Type,System.String)">
            <summary>
            Determines if a type is registered with the name given.
            </summary>
            <param name="type">the type</param>
            <param name="name">the name</param>
            <returns>true if the type is registered; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.TryGetResolverForType(System.Type,NetSteps.Encore.Core.IoC.IResolver@)">
            <summary>
            Tries to get the resolver for a type.
            </summary>
            <param name="type">the type</param>
            <param name="value">variable to hold the resolver upon success</param>
            <returns>true if successful; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.TryGetResolverForType``1(NetSteps.Encore.Core.IoC.IResolver{``0}@)">
            <summary>
            Tries to get the resolver for type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="value">variable to hold the resolver upon success</param>
            <returns>true if successful; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.TryGetNamedResolverForType``1(System.String,NetSteps.Encore.Core.IoC.IResolver{``0}@)">
            <summary>
            Tries to get a named resolver for type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="name">the name</param>
            <param name="value">variable to hold the resolver upon success</param>
            <returns>true if successful; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IContainerRegistry.TryGetTypeRegistryManagement(System.Type,NetSteps.Encore.Core.IoC.ITypeRegistryManagement@)">
            <summary>
            Tries to get the type registry management object for a type.
            </summary>
            <param name="type">the type</param>
            <param name="value">variable to hold the result upon success</param>
            <returns>true if successful; otherwise false</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IGenericTypeRegistry">
            <summary>
            Type registry for generics.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ITypeRegistry">
            <summary>
            Root, untyped interface for type registry.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry.Register(System.Type)">
            <summary>
            Registers the concrete type.
            </summary>
            <param name="concreteType">A concrete type to be issued by 
            the container when instances of the registered type are resolved.</param>
            <returns>The concrete registration (can be used to specialize the
            registration).</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry.HasNamedRegistration(System.String)">
            <summary>
            Indicates whether named registration is present.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistry.RegisteredType">
            <summary>
            Gets the registered type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistry.CanSpecializeRegistration">
            <summary>
            Indicates whether the registration can be specialized or 
            overridden by subsequent registrations.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistry.UntypedResolver">
            <summary>
            Gets the type's untyped resolver.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IGenericTypeRegistry.ResolverFor``1">
            <summary>
            Gets a resolver for generic type T
            </summary>
            <typeparam name="T">generic type T</typeparam>
            <returns>gets the type's resolver</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Initialize`1">
            <summary>
            Intermediate class used by the framework to capture 
            a newly created object and initialize it from data provided
            by another object.
            </summary>
            <typeparam name="T">object type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Initialize`1.#ctor(NetSteps.Encore.Core.IoC.IContainer,`0)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="c"></param>
            <param name="it"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Initialize`1.Init``1(``0)">
            <summary>
            Initializes the newly created instance from values given.
            </summary>
            <typeparam name="TInit"></typeparam>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Initialize`1.Instance">
            <summary>
            The newly created instance.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.INamedRegistration">
            <summary>
            Interface for named registrations.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.INamedRegistration.Name">
            <summary>
            Gets the registration's name.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IResolver">
            <summary>
            Interface for resolvers.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IResolver.TryUntypedResolve(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.LifespanTracking,System.String,System.Object@)">
            <summary>
            Tries to resolve an instance of the type according to its registration.
            </summary>
            <param name="container">the container</param>
            <param name="tracking">lifespan tracking</param>
            <param name="name">registered name or null</param>
            <param name="instance">variable where the instance will be returned upon success</param>
            <returns>true if an instance is resolved; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IResolver.TryUntypedResolve(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.LifespanTracking,System.String,System.Object@,NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Tries to resolve an instance of the type according to its registration.
            </summary>
            <param name="container">the container</param>
            <param name="tracking">lifespan tracking</param>
            <param name="name">registered name or null</param>
            <param name="instance">variable where the instance will be returned upon success</param>
            <param name="parameters">one or more params to be used in resolving the instance</param>
            <returns>true if an instance is resolved; otherwise false</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.IResolver.TargetType">
            <summary>
            Gets the resolver's target type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.IResolver`1">
            <summary>
            Interface for resolvers of target type T
            </summary>
            <typeparam name="T">target type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IResolver`1.TryResolve(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.LifespanTracking,System.String,`0@)">
            <summary>
            Tries to resolve an instance of the type according to its registration.
            </summary>
            <param name="container">the container</param>
            <param name="tracking">lifespan tracking</param>
            <param name="name">registered name or null</param>
            <param name="instance">variable where the instance will be returned upon success</param>
            <returns>true if an instance is resolved; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.IResolver`1.TryResolve(NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.LifespanTracking,System.String,`0@,NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Tries to resolve an instance of the type according to its registration.
            </summary>
            <param name="container">the container</param>
            <param name="tracking">lifespan tracking</param>
            <param name="name">registered name or null</param>
            <param name="instance">variable where the instance will be returned upon success</param>
            <param name="parameters">one or more params to be used in resolving the instance</param>
            <returns>true if an instance is resolved; otherwise false</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ITenantResolver">
            <summary>
            Interface for tenant resolvers
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITenantResolver.TryResolveTenant(System.Object@)">
            <summary>
            Tries to resolve the current tenant ID.
            </summary>
            <param name="tenantID">variable to hold the tenant id</param>
            <returns>true if a tenant ID is resolved; otherwise false</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ITypeRegistration">
            <summary>
            Registration for a type.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistration.ResolveAnInstancePerRequest">
            <summary>
            Indicates that a type hsould be resolved per request.
            </summary>
            <returns>the registration (for chaining)</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistration.ResolveAnInstancePerScope">
            <summary>
            Indicates that a type hsould be resolved per request.
            </summary>
            <returns>the registration (for chaining)</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistration.ResolveAsSingleton">
            <summary>
            Indicates that a type hsould be resolved per request.
            </summary>
            <returns>the registration (for chaining)</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistration.DisallowSpecialization">
            <summary>
            Indicates that a type hsould be resolved per request.
            </summary>
            <returns>the registration (for chaining)</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistration.RegisteredType">
            <summary>
            The registered type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistration.TargetType">
            <summary>
            The target type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistration.IsNamed">
            <summary>
            Indicates whether the registration is named.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistration.ScopeBehavior">
            <summary>
            Gets the registration's scope behavior.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistration.UntypedResolver">
            <summary>
            Gets the registered type's untyped resolver.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.INamedTypeRegistration">
            <summary>
            Interface for named type registrations.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ITypeRegistration`1">
            <summary>
            Type registration for type T
            </summary>
            <typeparam name="T">type T</typeparam>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistration`1.Resolver">
            <summary>
            Gets the resolver for type T.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.INamedTypeRegistration`1">
            <summary>
            Named type registration for type T.
            </summary>
            <typeparam name="T">type T</typeparam>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ITypeRegistry`1">
            <summary>
            Type registry for type T
            </summary>
            <typeparam name="T">type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry`1.Register``1">
            <summary>
            Registers implementation type C for use when resolving instances of type T.
            </summary>
            <typeparam name="C">sublcass type C</typeparam>
            <returns>the registration for chaining calls</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry`1.Register``1(NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Registers implementation type C for use when resolving instances of type T.
            </summary>
            <typeparam name="C">sublcass type C</typeparam>
            <param name="parameters">one or more Params to be used when resolving instances of type T</param>
            <returns>the registration for chaining calls</returns>		
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry`1.Register``1(System.Func{NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.Param[],``0})">
            <summary>
            Registers a factory for use when resolving instances of type T.
            </summary>
            <typeparam name="C">implementation type C</typeparam>
            <param name="factory">a factory providing instances of type C</param>
            <returns>the registration for chaining calls</returns>		
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry`1.RegisterWithName``1(System.String)">
            <summary>
            Registers implementation type C as a named registration for use when resolving instances of type T by name.
            </summary>
            <typeparam name="C">implementation type C</typeparam>
            <param name="name">the name</param>
            <returns>the registration for chaining calls</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry`1.RegisterWithName``1(System.String,NetSteps.Encore.Core.IoC.Param[])">
            <summary>
            Registers implementation type C as a named registration for use when resolving instances of type T by name.
            </summary>
            <typeparam name="C">implementation type C</typeparam>
            <param name="name">the name</param>
            <returns>the registration for chaining calls</returns>
            <param name="parameters">one or more Params to be used when resolving instances of type T</param>
            <returns>the registration for chaining calls</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry`1.RegisterWithName``1(System.String,System.Func{NetSteps.Encore.Core.IoC.IContainer,NetSteps.Encore.Core.IoC.Param[],``0})">
            <summary>
            Registers a named factory registration for use when resolving instances of type T by name.
            </summary>
            <typeparam name="C">implementation type C</typeparam>
            <param name="name">the name</param>
            <param name="factory">a factory providing instances of type C</param>
            <returns>the registration for chaining calls</returns>		
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry`1.LazyRegister(System.Func{System.Type,System.Type})">
            <summary>
            Registers a function that will provide an implementation of type T upon demand.
            </summary>
            <param name="producer">a callback function that will produce the 
            implementation type upon demand</param>
            <returns>the resulting type registration</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistry`1.TryGetNamedResolver(System.String,NetSteps.Encore.Core.IoC.IResolver{`0}@)">
            <summary>
            Gets the named type resolver for type T. Intended for framework use; you should never need this.
            </summary>
            <param name="name">the type's name</param>
            <param name="value">variable that will hold the resolver upon success</param>
            <returns>true if successful; otherwise false.</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.ITypeRegistry`1.Resolver">
            <summary>
            Gets the type resolver for type T. Intended for framework use; you should never need this.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ITypeRegistryManagement">
            <summary>
            Interface for managing type registries.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ITypeRegistryManagement.MakeCopyForContainer(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Makes a copy of a type registry for the target container.
            </summary>
            <param name="container">a target container</param>
            <returns>a copy of the type registry</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ModuleWireupTask">
            <summary>
            Wires this module.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ModuleWireupTask.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ModuleWireupTask.PerformTask(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
            <summary>
            Performs wireup.
            </summary>
            <param name="coordinator"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ParamKind">
            <summary>
            Enum of param kinds
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ParamKind.UserSupplied">
            <summary>
            Indicates user supplied.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ParamKind.ContainerSupplied">
            <summary>
            Indicates container supplied.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ParamKind.DeclaredDefault">
            <summary>
            Indicates declared as the default.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ParamKind.ContainerDefault">
            <summary>
            Indicates container supplied default
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ParamKind.Named">
            <summary>
            Indicates the param is named
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ParamKind.DefaultNamed">
            <summary>
            Indicates the param is default, named, and container supplied
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.ParamKind.Missing">
            <summary>
            Indicates the param is missing
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Param">
            <summary>
            Abstract class for parameters used with a container.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.IoC.Param.EmptyParams">
            <summary>
            An empty param array.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Param.Value``1(``0)">
            <summary>
            Creates a param on a value.
            </summary>
            <typeparam name="T">value type T</typeparam>
            <param name="value">the value</param>
            <returns>a param</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Param.Resolve``1">
            <summary>
            Creates a param that will resolve type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <returns>a param</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Param.ResolveNamed``1(System.String)">
            <summary>
            Creates a param that will resolve type T from the container.
            </summary>
            <typeparam name="T">type T</typeparam>
            <returns>a param</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Param.Named``1(System.String,``0)">
            <summary>
            Creates a param with a name and value.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="name">the name</param>
            <param name="value">the value</param>
            <returns>a param</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Param.#ctor(NetSteps.Encore.Core.IoC.ParamKind,System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="kind"></param>
            <param name="typeofValue"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Param.GetValue(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Gets the parameter's value.
            </summary>
            <param name="container">scoping container</param>
            <returns>the param's value</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Param.Kind">
            <summary>
            Gets the param's kind.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Param.TypeofValue">
            <summary>
            Gets the type of the param's value.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Param.HasName">
            <summary>
            Indicates whether the param is named.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.IoC.Param.Name">
            <summary>
            Gets the param's name.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.ParamExtensions">
            <summary>
            extensions for the Param class
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ParamExtensions.OfType``1(NetSteps.Encore.Core.IoC.Param[],NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Gets a value from the first parameter of type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="pp">array of parameters</param>
            <param name="c">a container</param>
            <returns>the parameter's value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ParamExtensions.AssignableTo``1(NetSteps.Encore.Core.IoC.Param[],NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Gets a value from the first parameter assignable to type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="pp">array of parameters</param>
            <param name="c">a container</param>
            <returns>the parameter's value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ParamExtensions.Named``1(NetSteps.Encore.Core.IoC.Param[],System.String,NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Gets a value from the first parameter assignable to T and with the name given.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="pp">array of parameters</param>
            <param name="name">the parameter's name</param>
            <param name="c">a container</param>
            <returns>the parameter's value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ParamExtensions.At``1(NetSteps.Encore.Core.IoC.Param[],System.Int32,NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Gets a value from the parameter of type T and at the index given.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="pp">array of paramters</param>
            <param name="position">the parameter's index</param>
            <param name="c">a container</param>
            <returns>the parameter's value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.ParamExtensions.First(NetSteps.Encore.Core.IoC.Param[],System.Func{NetSteps.Encore.Core.IoC.Param,System.Boolean})">
            <summary>
            Gets the first parameter from <paramref name="pp"/> that satisfies the predticate.
            </summary>
            <param name="pp">array of paramters</param>
            <param name="predicate">the predicate</param>
            <returns>the first param succeeding the predicate</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IoC.Registry.IGenericTypeRegistration">
            <summary>
            Registration for a generic type.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IoC.Registry.IGenericTypeRegistration.ResolverFor``1">
            <summary>
            Gets a resolver for type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <returns>the resolver for type T</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.IRepository`2">
            <summary>
            Basic repository interface for performing CRUD for 
            model type M.
            </summary>
            <typeparam name="M">model type M</typeparam>
            <typeparam name="I">model's identity type I</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepository`2.Create(NetSteps.Encore.Core.IoC.IContainer,`0)">
            <summary>
            Creates a new model M within the repository.
            </summary>
            <param name="container">current container</param>
            <param name="model">the model instance</param>
            <returns>the stored instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepository`2.Read(NetSteps.Encore.Core.IoC.IContainer,`1)">
            <summary>
            Reads an instance by identity from the repository.
            </summary>
            <param name="container">current container</param>
            <param name="id">the instance's identity</param>
            <returns>the instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepository`2.All(NetSteps.Encore.Core.IoC.IContainer)">
            <summary>
            Reads all instances of model type M from the repository.
            </summary>
            <param name="container">current container</param>
            <returns>an enumerable over all instances of M</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepository`2.Update(NetSteps.Encore.Core.IoC.IContainer,`0)">
            <summary>
            Updates the repository's copy of an instance M
            </summary>
            <param name="container">current container</param>
            <param name="model">the model instance</param>
            <returns>the updated instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepository`2.Delete(NetSteps.Encore.Core.IoC.IContainer,`1)">
            <summary>
            Deletes the repository's copy of an instance by it's identity.
            </summary>
            <param name="container">current container</param>
            <param name="id">the instance's identity</param>
        </member>
        <member name="T:NetSteps.Encore.Core.IRepositoryExtensions">
            <summary>
            Extensions for IRepository&lt;M>
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepositoryExtensions.Create``2(NetSteps.Encore.Core.IRepository{``0,``1},``0)">
            <summary>
            Creates a new model M within the repository.
            </summary>
            <param name="repo">the repository</param>
            <param name="model">the model instance</param>
            <returns>the stored instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepositoryExtensions.Read``2(NetSteps.Encore.Core.IRepository{``0,``1},``1)">
            <summary>
            Reads an instance by identity from the repository.
            </summary>
            <param name="repo">the repository</param>
            <param name="id">the instance's identity</param>
            <returns>the instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepositoryExtensions.All``2(NetSteps.Encore.Core.IRepository{``0,``1})">
            <summary>
            Reads all instances of model type M from the repository.
            </summary>
            <param name="repo">the repository</param>
            <returns>an enumerable over all instances of M</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepositoryExtensions.Update``2(NetSteps.Encore.Core.IRepository{``0,``1},``0)">
            <summary>
            Updates the repository's copy of an instance M
            </summary>
            <param name="repo">the repository</param>
            <param name="model">the model instance</param>
            <returns>the updated instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.IRepositoryExtensions.Delete``2(NetSteps.Encore.Core.IRepository{``0,``1},``1)">
            <summary>
            Deletes the repository's copy of an instance by it's identity.
            </summary>
            <param name="repo">the repository</param>
            <param name="id">the instance's identity</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.LogConfigurationSection">
            <summary>
            Configuration section for log settings.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.CDefaultSourceLevel">
            <summary>
            Default source level name.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.CDefaultStackTraceThreshold">
            <summary>
            Default stack trace threshold
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.CDefaultParallelDispatchThreshold">
            <summary>
            Default parallel disptach threshold
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.PropertyName_namespaces">
            <summary>
            Property name for namespaces
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.PropertyName_defaultWriterType">
            <summary>
            Property name for defaultWriter.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.PropertyName_defaultSourceLevel">
            <summary>
            Property name for defaultSourceLevel.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.PropertyName_defaultStackTraceThreshold">
            <summary>
            Property name for defaultStackTraceThreshold.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.PropertyName_parallelDispatchThreshold">
            <summary>
            Property name for parallelDispatchThreshold.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogConfigurationSection.SectionName">
            <summary>
            Configuration section name for trace settings.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogConfigurationSection.DefaultSourceLevel">
            <summary>
            The default source levels.
            </summary>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogConfigurationSection.DefaultStackTraceThreshold">
            <summary>
            The default stack trace threshold
            </summary>
            <seealso cref="T:System.Diagnostics.TraceEventType"/>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogConfigurationSection.ParallelDispatchThreshold">
            <summary>
            The log sink manager's parallel dispatch threshold.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogConfigurationSection.DefaultWriterType">
            <summary>
            The default LogEventWriter
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogConfigurationSection.Namespaces">
            <summary>
            Gets the confgured namespace elements.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogConfigurationSection.Current">
            <summary>
            Gets the current configuration section.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.NamespaceElementCollection">
            <summary>
            Configuration element collection for specializing logging for a namespaces.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.NamespaceElementCollection.PerformGetElementKey(NetSteps.Encore.Core.Log.NamespaceElement)">
            <summary>
            Gets the element's key
            </summary>
            <param name="element">the element</param>
            <returns>the key</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.NamespaceElement">
            <summary>
            Configuration element for specializing logging for a namespace.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.NamespaceElement.Namespace">
            <summary>
            The namespace to which the configuration element applies.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.NamespaceElement.IsSpecialized">
            <summary>
            Whether the namespace has specialized source levels, etc.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.NamespaceElement.SourceLevel">
            <summary>
            The source levels.
            </summary>
            <seealso cref="T:System.Diagnostics.SourceLevels"/>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.NamespaceElement.StackTraceThreshold">
            <summary>
            The stack trace threshold
            </summary>
            <seealso cref="T:System.Diagnostics.TraceEventType"/>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.NamespaceElement.WriterTypeName">
            <summary>
            The type of sink to construct.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.NamespaceElement.WriterName">
            <summary>
            The name of the sink (in the parent object's 'sinks' collection)
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.Extensions">
            <summary>
            Utility class containing extensions for logging.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.Extensions.GetLogSourceName(System.Type)">
            <summary>
            Gets the log source name for a type.
            </summary>
            <param name="type">the type</param>
            <returns>the log source name</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.Extensions.GetLogSink(System.Type)">
            <summary>
            Gets the type's log sink.
            </summary>
            <param name="type">the target type.</param>
            <returns>A log sink.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.Extensions.GetLogSink``1(``0)">
            <summary>
            Gets the instance's log sink.
            </summary>
            <param name="item">the target instance.</param>
            <returns>A log sink.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.Extensions.FormatForLogging(System.Exception)">
            <summary>
            Formats an exception for output into the log.
            </summary>
            <param name="ex">the exception</param>
            <returns>a string representation of the exception</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.Extensions.FormatForLogging(System.Exception,System.Boolean)">
            <summary>
            Formats an exception for output into the log.
            </summary>
            <param name="ex">the exception</param>
            <param name="exposeStackTrace">indicates whether stack trace should be exposed in the output</param>
            <returns>a string representation of the exception</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.ILogSink">
            <summary>
            Interface for log sinks.
            </summary>
            <remarks>
            Log sinks take log events generated by the framework and does something
            useful with them, such as put them in a database or write them to another
            logging service.
            </remarks>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.IsLogging(System.Diagnostics.SourceLevels)">
            <summary>
            Indicates whether the log sink is forwarding messages
            at the source level given.
            </summary>
            <param name="level">the source level to check</param>
            <returns>true if forwarding; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Critical(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Error(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Information(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that an informational event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Resume(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Start(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a start activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Stop(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a start activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Suspend(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a suspend activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Transfer(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a transfer activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Verbose(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a verbose event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSink.Warning(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.ILogSink.Name">
            <summary>
            The log sink's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.ILogSink.NextSink">
            <summary>
            The next sink in the sink chain; possibly null.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.ILogSink.Writer">
            <summary>
            The log event writer associated with the sink.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.ILogSink.Levels">
            <summary>
            The sink's source levels. Determines what actually gets logged.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.ILogSink.StackTraceThreshold">
            <summary>
            The sink's stacktrace threshold. Determines at which level 
            a stacktrace is generated.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.ILogSinkExtensions">
            <summary>
            LogSink extensions
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <typeparam name="TData">data type TData</typeparam>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <typeparam name="TData">data type TData</typeparam>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object providing data about the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical``1(NetSteps.Encore.Core.Log.ILogSink,System.Func{``0})">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{``0})">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Critical(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error``1(NetSteps.Encore.Core.Log.ILogSink,System.Func{``0})">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{``0})">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Error(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information``1(NetSteps.Encore.Core.Log.ILogSink,System.Func{``0})">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{``0})">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Information(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume``1(NetSteps.Encore.Core.Log.ILogSink,System.Func{``0})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{``0})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Resume(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a start activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start``1(NetSteps.Encore.Core.Log.ILogSink,System.Func{``0})">
            <summary>
            Notifies the sink that a start activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{``0})">
            <summary>
            Notifies the sink that a start activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Start(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Stop``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Stop``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Stop(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Stop(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Stop(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Stop(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Stop(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Stop(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Suspend``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Suspend``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Suspend(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Suspend(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Suspend(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Suspend(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Suspend(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Suspend(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Transfer``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Transfer``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Transfer(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Transfer(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Transfer(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Transfer(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Transfer(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Transfer(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning``1(NetSteps.Encore.Core.Log.ILogSink,System.Func{``0})">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{``0})">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Warning(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose``1(NetSteps.Encore.Core.Log.ILogSink,``0)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,``0)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose``1(NetSteps.Encore.Core.Log.ILogSink,System.Func{``0})">
            <summary>
            Notifies the sink that a verbose event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose``1(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{``0})">
            <summary>
            Notifies the sink that a Verbose event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="data">function that resolves an object describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose(NetSteps.Encore.Core.Log.ILogSink,System.String)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose(NetSteps.Encore.Core.Log.ILogSink,System.String,System.Object[])">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="formattedMessage">a formatted message describing the event</param>
            <param name="messageArgs">arguments used when formatting the log message</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.String)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose(NetSteps.Encore.Core.Log.ILogSink,System.Func{System.String})">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkExtensions.Verbose(NetSteps.Encore.Core.Log.ILogSink,System.Int32,System.String,System.Func{System.String})">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="sink">the target sink</param>
            <param name="appEventKind">application specific event kind</param>
            <param name="appEventName">application specific event name</param>
            <param name="message">a function that produces a message describing the event</param>
            <returns>the log event</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.ILogSinkGhostWriter">
            <summary>
            Interface for ghost writers. Writing log events are delegated to ghost writers.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkGhostWriter.GhostWrite(NetSteps.Encore.Core.Log.LogEventWriter,NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Delegates writing an event.
            </summary>
            <param name="writer"></param>
            <param name="evt"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.ILogSinkManagement">
            <summary>
            Interface allowing log sink management.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkManagement.Reconfigure(System.Diagnostics.SourceLevels,System.Diagnostics.TraceEventType,NetSteps.Encore.Core.Log.LogEventWriter,NetSteps.Encore.Core.Log.ILogSink)">
            <summary>
            Reconfigures a log sink.
            </summary>
            <param name="level">a source level</param>
            <param name="stackTraceThreshold">a stacktrace threshold</param>
            <param name="writer">an event writer</param>
            <param name="next">the next sink in the chain</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.ILogSinkManager">
            <summary>
            Manages log sinks.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.ILogSinkManager.GetLogSinkForType(System.Type)">
            <summary>
            Gets the currently configured log sink for the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.ILogSinkManager.DefaultLogSink">
            <summary>
            Gets the default log sink.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.LogDataTransform`1">
            <summary>
            Static class used by logging to transform runtime types into textual data.
            </summary>
            <typeparam name="TData">data type TData</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogDataTransform`1.Transform(`0)">
            <summary>
            Transforms data into textual form suitable for the log.
            </summary>
            <param name="data">the data</param>
            <returns>a string representation</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.LogEvent">
            <summary>
            Contains information related to log events.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogEvent.#ctor(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Diagnostics.StackTrace)">
            <summary>
            Creates a new log event.
            </summary>
            <param name="source">the source of the event</param>
            <param name="eventType">the event type</param>
            <param name="appKind">an application specific event kind</param>
            <param name="appKindName">an application specific event name</param>
            <param name="stackTrace">a stack trace associated with the event</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogEvent.ToString">
            <summary>
            Gets the string representation of the log event.
            </summary>
            <returns>string representation</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogEvent.Equals(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Determines if the log event is equal to another.
            </summary>
            <param name="other">the other</param>
            <returns>true if equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogEvent.Equals(System.Object)">
            <summary>
            Determines if the log event is equal to another object.
            </summary>
            <param name="obj">the other object</param>
            <returns>true if equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogEvent.GetHashCode">
            <summary>
            Gets the event's hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.EnviornmentName">
            <summary>
            Gets the name of the environment where the event originated.
            </summary>
            <remarks>Environment names are established in the configuration
            file and are used to differentiate environments where log events
            originate. It only becomes relevant if you collect log events
            from more than one environment and want to differentiate events
            by environment at a later time.</remarks>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.MachineName">
            <summary>
            Gets the machine's name (NetBIOS) where the event originated.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.ComponentName">
            <summary>
            Gets the component name.
            </summary>
            <remarks>Component names are established in the configuration
            file and are used to differentiate processes from one-another.
            Component names are a friendly name for a process and work
            well when they identify the process's role such as 
            'commercial site', 'corporate site' and 'backend'.</remarks>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.ProcessName">
            <summary>
            Gets the process name where the event originated.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.ProcessID">
            <summary>
            Gets the process ID where the event originated.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.ProcessSequence">
            <summary>
            Sequence suitable for ordering the log events in the order
            in which they were produced within the source process.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.ThreadID">
            <summary>
            Gets the thread ID where the event originated.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.SourceName">
            <summary>
            Gets the name of the log source that originated the event.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.TimestampUTC">
            <summary>
            Gets a timestamp indicating when the event originated.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.EventType">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.Kind">
            <summary>
            Gets the event's kind.
            </summary>
            <remarks>Event kinds are application specific and should
            be used to identify specific events or event kinds. While
            the EventType is a standardized 'event type' indicator, 
            event kinds allow your own identity or severity scheme 
            over log events.</remarks>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.KindName">
            <summary>
            Gets the name of the event's kind.
            </summary>
            <remarks>Event kinds are application specific and should
            be used to identify specific events or event kinds. While
            the EventType is a standardized 'event type' indicator, 
            event kinds allow your own identity or severity scheme 
            over log events.</remarks>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.Message">
            <summary>
            Gets a message associated with the event.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogEvent.StackTrace">
            <summary>
            Gets the stack trace associated with the log message.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.DataLogEvent`1">
            <summary>
            Log message for data.
            </summary>
            <typeparam name="TData">data type TData</typeparam>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.LazyLogEvent">
            <summary>
            Implementation that lazily generates the log message. (when/if it is actually written to a log sink)
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LazyLogEvent.#ctor(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Func{System.String},System.Diagnostics.StackTrace)">
            <summary>
            Creates a new log event.
            </summary>
            <param name="source">the source of the event</param>
            <param name="eventType">the event type</param>
            <param name="appKind">an application specific event kind</param>
            <param name="appKindName">an application specific event name</param>
            <param name="message">the log message producer</param>
            <param name="stackTrace">a stack trace associated with the event</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LazyLogEvent.Message">
            <summary>
            Gets the event's message.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.DataLogEvent`1.#ctor(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,`0,System.Diagnostics.StackTrace)">
            <summary>
            Creates a new log event.
            </summary>
            <param name="source">the source of the event</param>
            <param name="eventType">the event type</param>
            <param name="appKind">an application specific event kind</param>
            <param name="appKindName">an application specific event name</param>
            <param name="data">data to be transformed for data</param>
            <param name="stackTrace">a stack trace associated with the event</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.LazyDataLogEvent`1">
            <summary>
            Log message for data.
            </summary>
            <typeparam name="TData">data type TData</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LazyDataLogEvent`1.#ctor(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Func{`0},System.Diagnostics.StackTrace)">
            <summary>
            Creates a new log event.
            </summary>
            <param name="source">the source of the event</param>
            <param name="eventType">the event type</param>
            <param name="appKind">an application specific event kind</param>
            <param name="appKindName">an application specific event name</param>
            <param name="data">data to be transformed for data</param>
            <param name="stackTrace">a stack trace associated with the event</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.SimpleLogEvent">
            <summary>
            Simple implementation of log event taking string messages.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.SimpleLogEvent.#ctor(System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.String,System.Diagnostics.StackTrace)">
            <summary>
            Creates a new log event.
            </summary>
            <param name="source">the source of the event</param>
            <param name="eventType">the event type</param>
            <param name="appKind">an application specific event kind</param>
            <param name="appKindName">an application specific event name</param>
            <param name="message">the log message</param>
            <param name="stackTrace">a stack trace associated with the event</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.SimpleLogEvent.Message">
            <summary>
            Gets the event's message.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.LogEventWriter">
            <summary>
            Writes log events onto a more durable store or to another resource.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogEventWriter.NullWriter">
            <summary>
            An event writer stub for use when no configuration exists.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogEventWriter.Initialize(System.String)">
            <summary>
            Initializes the event writer.
            </summary>
            <param name="sourceName">the name of the log source that will be using the writer.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogEventWriter.WriteLogEvent(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Writes log events.
            </summary>
            <param name="evt">the event</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.LogSink">
            <summary>
            Default implementaton of the LogSink interface.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogSink.DefaultApplicationSpecificLogEventKind">
            <summary>
            Default value used for ApplicationSpecificLogEventKind when none is given.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Log.LogSink.DefaultApplicationSpecificLogEventName">
            <summary>
            Default value used for ApplicationSpecificLogEventName when none is given.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.#ctor(NetSteps.Encore.Core.Log.ILogSinkGhostWriter,System.String,System.Diagnostics.SourceLevels,System.Diagnostics.TraceEventType,NetSteps.Encore.Core.Log.LogEventWriter,NetSteps.Encore.Core.Log.ILogSink)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">the log sink's name</param>
            <param name="levels">a source level</param>
            <param name="stackTraceThreshold">the stack threshold</param>
            <param name="writer">an event writer</param>
            <param name="next">the next sink in the chain or null</param>
            <param name="ghostWriter"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.IsLogging(System.Diagnostics.SourceLevels)">
            <summary>
            Indicates whether the log sink is forwarding messages
            at the source level given.
            </summary>
            <param name="level">the source level to check</param>
            <returns>true if forwarding; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Critical(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a critical event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Error(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a error event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Information(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a informational event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Resume(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a resume activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Start(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a start activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Stop(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a stop activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Suspend(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a suspend activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Transfer(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a transfer activity occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Warning(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a warning event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.LogSink.Verbose(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Notifies the sink that a verbose event occurred.
            </summary>
            <param name="evt">event details</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogSink.Name">
            <summary>
            The sink's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogSink.Levels">
            <summary>
            The sink's source level.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogSink.NextSink">
            <summary>
            The next sink in the chain.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogSink.StackTraceThreshold">
            <summary>
            The sink's stack trace threshold.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Log.LogSink.Writer">
            <summary>
            The sink's event writer.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.Reactor`1">
            <summary>
            A parallel reactor is used to efficiently trigger actions in parallel in
            response to items being pushed to the reactor.
            </summary>
            <typeparam name="TItem">item type TItem</typeparam>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.Reactor`1.DefaultOptions">
            <summary>
            The default options used by reactors when none are given to the constructor.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Reactor`1.#ctor(System.Action{NetSteps.Encore.Core.Parallel.Reactor{`0},`0})">
            <summary>
            Creates a new instance with the default options.
            </summary>
            <param name="reactor">the reactor's action</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Reactor`1.#ctor(System.Action{NetSteps.Encore.Core.Parallel.Reactor{`0},`0},NetSteps.Encore.Core.Parallel.ReactorOptions)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="reactor">the reactor's action</param>
            <param name="options">options</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Reactor`1.Cancel">
            <summary>
            Stops a reactor. Once stopped a reactor cannot be restarted.
            </summary>
            <returns>the reactor (for chaining)</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Reactor`1.Push(`0)">
            <summary>
            Pushes a new item to the reactor.
            </summary>
            <param name="item">an item</param>
            <returns>the reactor (for chaining)</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Reactor`1.AllowLogEvent(System.Diagnostics.SourceLevels)">
            <summary>
            Determines if a log event is allowed for the levels given.
            </summary>
            <param name="levels"></param>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Reactor`1.IsEmpty">
            <summary>
            Determines if the reactor is empty. Empty means there are no items
            that have not already been reacted too.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Reactor`1.IsIdle">
            <summary>
            Indicates whether the reactor is idle.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Reactor`1.IsActive">
            <summary>
            Indicates whether the reactor is active.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Reactor`1.IsCanceled">
            <summary>
            Indicates whethe the reactor is stopping.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Reactor`1.IsStopped">
            <summary>
            Indicates whether the reactor is stopped.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Reactor`1.Options">
            <summary>
            Gets the reactor's options.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.Parallel.Reactor`1.UncaughtException">
            <summary>
            Event fired when uncaught exceptions are encountered by the reactor.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Log.TraceLogEventWriter">
            <summary>
            Echos log events to a System.Diagnostics trace source.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.TraceLogEventWriter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.TraceLogEventWriter.WriteLogEvent(NetSteps.Encore.Core.Log.LogEvent)">
            <summary>
            Writes the log event to a trace source.
            </summary>
            <param name="evt">the log event</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Log.TraceLogEventWriter.Initialize(System.String)">
            <summary>
            Initializes the trace source.
            </summary>
            <param name="sourceName">the trace source's name</param>
        </member>
        <member name="T:NetSteps.Encore.Core.ModuleWireup">
            <summary>
            Wireup command. Performs default wireup for the module.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.WireupCommand">
            <summary>
            Abstract wireup command.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.IWireupCommand">
            <summary>
            Interface for commands executed at wireup time.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.IWireupCommand.Execute(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
            <summary>
            Executes the command.
            </summary>
            <param name="coordinator">the wireup coordinator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.WireupCommand.NetSteps#Encore#Core#Wireup#IWireupCommand#Execute(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
            <summary>
            Executes the wireup command.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.WireupCommand.PerformWireup(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
            <summary>
            Called by the base class upon execute. Derived classes should 
            provide an implementation that performs the wireup logic.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.ModuleWireup.__wireupCount">
            <summary>
            Tracks whether this module has been wired up.
            </summary>
            <remarks>
            This mechanism only exists because of the chicken-and-egg
            relationship between the root IoC container and the wireup
            coordinator. It enables the IoC container to see whether
            the wireup has been triggered on this assembly and enables
            it to "auto-wire" in cases where the library is included
            in a project that is ignorant of the wireup dependency
            logic.
            </remarks>
        </member>
        <member name="M:NetSteps.Encore.Core.ModuleWireup.PerformWireup(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
            <summary>
            Wires up this module.
            </summary>
            <param name="coordinator"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.Net.INetEndpoint">
            <summary>
            Interface for sending and receiving data on a network endpoint.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetEndpoint.ReceiveFrom(System.Net.EndPoint@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives data from an endpoint.
            </summary>
            <param name="endpoint">reference to an endpoint.</param>
            <param name="data">buffer where the incomming data will be stored</param>
            <param name="offset">first byte within the buffer where data will be stored</param>
            <param name="count">number of bytes available in the buffer</param>
            <returns>number of bytes received</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetEndpoint.ReceiveFromAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Action{System.Exception,NetSteps.Encore.Core.Net.OverlappedOpState})">
            <summary>
            Receives data from an endpoint.
            </summary>
            <param name="endpoint">an endpoint.</param>
            <param name="data">buffer where the incomming data will be stored</param>
            <param name="offset">first byte within the buffer where data will be stored</param>
            <param name="count">number of bytes available in the buffer</param>
            <param name="callback">action called when the receive is complete</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetEndpoint.SendTo(System.Net.EndPoint,System.Byte[])">
            <summary>
            Sends data to an endpoint.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetEndpoint.SendTo(System.Net.EndPoint,System.Byte[],System.Int32)">
            <summary>
            Sends data to an endpoint.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="count"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetEndpoint.SendTo(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to an endpoint.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="flags"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetEndpoint.SendToAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Action{System.Exception,NetSteps.Encore.Core.Net.OverlappedOpState})">
            <summary>
            Asynchronously sends data to an endpoint.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="count"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetEndpoint.SendToAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Action{System.Exception,NetSteps.Encore.Core.Net.OverlappedOpState})">
            <summary>
            Asynchronously sends data to an endpoint.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetEndpoint.ReleaseAsyncEventArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is used by the framework to release/reuse SocketAsyncEventArgs. You should not normally
            call this method..
            </summary>
            <param name="socketArgs"></param>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.INetEndpoint.EndPoint">
            <summary>
            Gets the underlying endpoint.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Net.DecodeMessageResultKind">
            <summary>
            Indicates a decoded message's result (kind)
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Net.DecodeMessageResultKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Net.DecodeMessageResultKind.Success">
            <summary>
            Decoding was successful.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Net.DecodeMessageResultKind.Partial">
            <summary>
            Partially decoded, needs more data.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Net.DecodeMessageResultKind.Garbage">
            <summary>
            Message was garbage.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Net.DecodeMessageResultKind.Blacklist">
            <summary>
            Indicates the endpoint should be blacklisted.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Net.DecodeMessageResult`1">
            <summary>
            Result of an attempt to decode a message.
            </summary>
            <typeparam name="M">message type M</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.DecodeMessageResult`1.#ctor(NetSteps.Encore.Core.Net.DecodeMessageResultKind,`0)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="kind">the kind</param>
            <param name="message">the message</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.DecodeMessageResult`1.Kind">
            <summary>
            Gets the result's kind.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.DecodeMessageResult`1.Message">
            <summary>
            Gets the result's message.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Net.INetworkProtocol`1">
            <summary>
            Interface for network protocols of message type M
            </summary>
            <typeparam name="M">message type M</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetworkProtocol`1.Initialize(NetSteps.Encore.Core.Net.INetEndpoint)">
            <summary>
            Initialized the protocol instance on an endpoint.
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetworkProtocol`1.TryDecodeMessage(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Tries to decode a received message.
            </summary>
            <param name="endpoint">the source endpoint</param>
            <param name="buffer">a buffer containing received bytes</param>
            <param name="offset">offset to first received byte</param>
            <param name="length">number of useable bytes in the buffer</param>
            <returns>message result</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetworkProtocol`1.EncodeMessage(`0)">
            <summary>
            Encodes a message.
            </summary>
            <param name="message">the message object</param>
            <returns>the message's bytes</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.INetworkProtocol`1.HandleEndpointMessage(System.Net.IPEndPoint,System.DateTime,`0)">
            <summary>
            Handles endpoint messages that have been successfully decoded.
            </summary>
            <param name="endpoint">endpoint</param>
            <param name="timestamp">timestamp of the message's arrival</param>
            <param name="message">the message</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.INetworkProtocol`1.IsFullDuplex">
            <summary>
            Indicates whether the protocol is full duplex.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.INetworkProtocol`1.IsThreadSafe">
            <summary>
            Indicates whether the protocol instance is thread-safe.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Net.OverlappedOpState">
            <summary>
            Encapsulates the state of an operation that occurred
            in parallel on an EndPoint.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedOpState.EndAsyncOp">
            <summary>
            Ends the asynchronous operation. Allows the framework to
            recycle internal structures allocated for the op.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.OverlappedOpState.Buffer">
            <summary>
            Accesses the raw byte buffer containing data. For SendXXX operations this
            is the data sent; for ReceiveXXX operations this is the data received.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.OverlappedOpState.BytesTransferred">
            <summary>
            Number of bytes used in the operation.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.OverlappedOpState.Offset">
            <summary>
            Offset within the buffer where valid data begins. WARNING: May not be the beginning of the buffer.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.OverlappedOpState.Operation">
            <summary>
            Identifies the operation that was performed.
            </summary>
            <see cref="T:System.Net.Sockets.SocketAsyncOperation"/>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.OverlappedOpState.RemoteEndPoint">
            <summary>
            Identifies the remote side of the communication.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.OverlappedOpState.SocketError">
            <summary>
            Identifies the socket error. NOTE: SocketError.Success indicates no error occurred!
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint">
            <summary>
            Socket adapter that provides a simplified convention for working with
            overlapped IO.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.Initialize(System.Net.Sockets.Socket)">
            <summary>
            Initializes
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.AcceptAsync(System.Net.EndPoint,System.Action{System.Exception,NetSteps.Encore.Core.Net.OverlappedOpState})">
            <summary>
            Accepts connections asynchronously
            </summary>
            <param name="endpoint"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.ConnectAsync(System.Net.EndPoint,System.Action{System.Exception,NetSteps.Encore.Core.Net.OverlappedOpState})">
            <summary>
            Connects to an endpoint asynchronously.
            </summary>
            <param name="endpoint"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.ReceiveFrom(System.Net.EndPoint@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives from an endpoint asynchronously.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.ReceiveFromAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Action{System.Exception,NetSteps.Encore.Core.Net.OverlappedOpState})">
            <summary>
            Receives from an endpoint asynchronously.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.SendTo(System.Net.EndPoint,System.Byte[])">
            <summary>
            Sends data to an endpoint.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.SendTo(System.Net.EndPoint,System.Byte[],System.Int32)">
            <summary>
            Sends data to an endpoint asynchronously.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="count"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.SendTo(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to an endpoint asynchronously.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="flags"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.SendToAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Action{System.Exception,NetSteps.Encore.Core.Net.OverlappedOpState})">
            <summary>
            Sends data to an endpoint asynchronously.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="count"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.SendToAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Action{System.Exception,NetSteps.Encore.Core.Net.OverlappedOpState})">
            <summary>
            Sends data to an endpoint asynchronously.
            </summary>
            <param name="endpoint"></param>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.AcquireAsyncEventArgs">
            <summary>
            Acquires async event args and attaches it to this object's
            IO_Completed method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.ReleaseAsyncEventArgs(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Releases an async event args previously acquired.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.PerformDispose(System.Boolean)">
            <summary>
            Performs this object's disposal.
            </summary>
            <param name="disposing"></param>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.OverlappedSocketEndpoint.EndPoint">
            <summary>
            Gets the underlying endpoint.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Net.ResourceRequestExtensions">
            <summary>
            Extensions for resource oriented HTTP requests.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Net.ResourceRequestExtensions.ResourceClientString">
            <summary>
            String used as the Client in HTTP requests.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.MakeResourceRequest(System.Uri)">
            <summary>
            Given a URI, makes a web request.
            </summary>
            <param name="uri">the URI</param>
            <returns>a web request</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.MakeResourceRequest(System.Uri,System.Boolean)">
            <summary>
            Given a URI, makes a web request.
            </summary>
            <param name="uri">the URI</param>
            <param name="keepAlive">indicates whether keepalive should be set for the connection</param>
            <returns>a web request</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.WithBasicAuth(System.Net.HttpWebRequest,System.String,System.String)">
            <summary>
            Adds HTTP Basic Auth to the request.
            </summary>
            <param name="req">the request</param>
            <param name="username">a username</param>
            <param name="password">a password</param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.ParallelGet``1(System.Uri,System.Func{System.Net.HttpWebResponse,``0})">
            <summary>
            Performs an HTTP GET against a URI.
            </summary>
            <param name="uri">the uri</param>
            <param name="responseHandler">a response handler that will read/interpret the response</param>
            <returns>a completion</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.ParallelGet``1(System.Net.HttpWebRequest,System.Func{System.Net.HttpWebResponse,``0})">
            <summary>
            Perfroms an HTTP GET.
            </summary>
            <param name="req">the web request on which to perform the GET.</param>
            <param name="responseHandler">a response handler that will read/interpret the response</param>
            <returns>a completion</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.ParallelPut``1(System.Net.HttpWebRequest,System.Byte[],System.String,System.Func{System.Net.HttpWebResponse,``0})">
            <summary>
            Perfroms an HTTP PUT.
            </summary>
            <param name="req">the web request on which to perform the PUT.</param>
            <param name="postBody">array of bytes containing the post body</param>
            <param name="contentType">indicates the post body's content type</param>
            <param name="responseHandler">a response handler that will read/interpret the response</param>
            <returns>a completion</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.ParallelPost``1(System.Net.HttpWebRequest,System.Byte[],System.String,System.Func{System.Net.HttpWebResponse,``0})">
            <summary>
            Perfroms an HTTP POST.
            </summary>
            <param name="req">the web request on which to perform the POST.</param>
            <param name="postBody">array of bytes containing the post body</param>
            <param name="contentType">indicates the post body's content type</param>
            <param name="responseHandler">a response handler that will read/interpret the response</param>
            <returns>a completion</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.ParallelDelete``1(System.Net.HttpWebRequest,System.Func{System.Net.HttpWebResponse,``0})">
            <summary>
            Perfroms an HTTP DELETE.
            </summary>
            <param name="req">the web request on which to perform the DELETE.</param>
            <param name="responseHandler">a response handler that will read/interpret the response</param>
            <returns>a completion</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpGet(System.Net.HttpWebRequest,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP POST against a URI as JSON.
            </summary>
            <param name="req">the http request</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpPostJson``1(System.Net.HttpWebRequest,``0,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP POST against a URI as JSON.
            </summary>
            <typeparam name="B">body type B</typeparam>
            <param name="req">the http request</param>
            <param name="body">the post body (will be serialized as JSON)</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpPostJson``1(System.Net.HttpWebRequest,``0,System.Text.Encoding,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP POST against a URI as JSON.
            </summary>
            <typeparam name="B">body type B</typeparam>
            <param name="req">the http request</param>
            <param name="body">the post body (will be serialized as JSON)</param>
            <param name="encoding">the content encoding</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpPutJson``1(System.Net.HttpWebRequest,``0,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP PUT against a URI as JSON.
            </summary>
            <typeparam name="B">body type B</typeparam>
            <param name="req">the http request</param>
            <param name="body">the post body (will be serialized as JSON)</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpPutJson``1(System.Net.HttpWebRequest,``0,System.Text.Encoding,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP PUT against a URI as JSON.
            </summary>
            <typeparam name="B">body type B</typeparam>
            <param name="req">the http request</param>
            <param name="body">the post body (will be serialized as JSON)</param>
            <param name="encoding">the content encoding</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpPostXml``1(System.Net.HttpWebRequest,``0,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP POST against a URI as XML.
            </summary>
            <typeparam name="B">body type B</typeparam>
            <param name="req">the http request</param>
            <param name="body">the post body</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpPostXml``1(System.Net.HttpWebRequest,``0,System.Text.Encoding,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP POST against a URI as XML.
            </summary>
            <typeparam name="B">body type B</typeparam>
            <param name="req">the http request</param>
            <param name="body">the post body</param>
            <param name="encoding">the content encoding</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpPutXml(System.Net.HttpWebRequest,System.Xml.Linq.XElement,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP PUT against a URI as XML.
            </summary>
            <param name="req">the http request</param>
            <param name="body">the post body</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.HttpPutXml(System.Net.HttpWebRequest,System.Xml.Linq.XElement,System.Text.Encoding,System.Action{System.Exception,System.Net.HttpWebResponse})">
            <summary>
            Performs an HTTP PUT against a URI as XML.
            </summary>
            <param name="req">the http request</param>
            <param name="body">the post body</param>
            <param name="encoding">the content encoding</param>
            <param name="after">an action to be called upon completion</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.GetResponseBodyAsString(System.Net.HttpWebResponse)">
            <summary>
            Gets the response body from a web response.
            </summary>
            <param name="response">the web response</param>
            <returns>the full web response as text</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.DeserializeResponseAsDynamic(System.Net.HttpWebResponse)">
            <summary>
            Deserializes a response body as a dynamic object.
            </summary>
            <param name="response">the web response</param>
            <returns>a dynamic object over the response body</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.DeserializeResponse``1(System.Net.HttpWebResponse)">
            <summary>
            Deserializes a response to an object of type T.
            </summary>
            <typeparam name="T">typeof T</typeparam>
            <param name="response">the web resposne</param>
            <returns>an instance of type T</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.ResourceRequestExtensions.IsSuccess(System.Net.HttpStatusCode)">
            <summary>
            Determines if an HTTP status code indicates succes (within the 200 range).
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Net.UdpProtocolEndpoint`1">
            <summary>
            UDP endpoint for communicating according to a network protocol.
            </summary>
            <typeparam name="M">message type M</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.UdpProtocolEndpoint`1.#ctor(NetSteps.Encore.Core.Net.INetworkProtocol{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="protocol">a protocol</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.UdpProtocolEndpoint`1.ParallelReceive(System.Net.IPEndPoint)">
            <summary>
            Begins receiving protocol messages in parallel from the endpoint given.
            </summary>
            <param name="endpoint">an endpoint</param>
            <returns>this object (for chaining)</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.UdpProtocolEndpoint`1.PerformDispose(System.Boolean)">
            <summary>
            Performs the instance's disposal.
            </summary>
            <param name="disposing"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.UdpProtocolEndpoint`1.TryAcquireBuffer(System.Byte[]@)">
            <summary>
            Tries to acquire a buffer.
            </summary>
            <param name="buffer">variable where the buffer will be returned upon success</param>
            <returns>true if successful; othewise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.UdpProtocolEndpoint`1.ReleaseBuffer(System.Byte[])">
            <summary>
            Releases a buffer previously acquired from the endpoint.
            </summary>
            <param name="buffer">the buffer being released</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Net.UdpProtocolEndpoint`1.RecycleBuffer(System.Byte[])">
            <summary>
            Recycles the buffer given.
            </summary>
            <param name="buffer">the buffer</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Net.UdpProtocolEndpoint`1.Protocol">
            <summary>
            Gets the endpoint's protocol.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.AsyncResult">
            <summary>
            Basic implementation of the ITaskCompletion interface.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.AsyncResult.#ctor(System.Threading.ManualResetEvent)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.AsyncResult.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Creates a new instance and initializes the AsyncCallback.
            </summary>
            <param name="asyncCallback">A delegate to be called when the async operation completes.</param>
            <param name="asyncHandback">A handback object passed to the AsyncCallback when the operation completes.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.AsyncResult.#ctor(System.AsyncCallback,System.Object,System.Object)">
            <summary>
            Creates a new instance and initializes the AsyncCallback.
            </summary>
            <param name="asyncCallback">A delegate to be called when the async operation completes.</param>
            <param name="asyncHandback">A handback object passed to the AsyncCallback when the operation completes.</param>
            <param name="asyncState">A state object for use as a handback for the creator.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.AsyncResult.EndInvoke">
            <summary>
            Ends the asynchronous operation.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.AsyncResult.EndInvoke(System.TimeSpan,System.Boolean)">
            <summary>
            Ends the asynchronous operation.
            </summary>
            <param name="timeout"></param>
            <param name="exitContext"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.AsyncResult.EndInvoke(System.Int32,System.Boolean)">
            <summary>
            Ends the asynchronous operation.
            </summary>
            <param name="millisecondsTimeout"></param>
            <param name="exitContext"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.AsyncResult.PerformDispose(System.Boolean)">
            <summary>
            Performs a disposal of the async result.
            </summary>
            <param name="disposing"></param>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.AsyncResult.AsyncState">
            <summary>
            Gets the task's asynchronous state.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.AsyncResult.CompletedSynchronously">
            <summary>
            Indicates whether the task completed synchronously.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets the task's wait handle.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.AsyncResult.IsCompleted">
            <summary>
            Gets a value indicating whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.AsyncResult.IsFaulted">
            <summary>
            Indicates whether the asynchronous operation resulted in a fault.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.AsyncResult.Exception">
            <summary>
            Gets the exception that caused the fault.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.CompletionEventArgs">
            <summary>
            Completion event arguments.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.CompletionEventArgs.#ctor(NetSteps.Encore.Core.Parallel.Completion)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="completion">the completion</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.CompletionEventArgs.Completion">
            <summary>
            The completion upon which the event fired.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.Completion">
            <summary>
            Default waitable implementation.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.#ctor(System.Object)">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.#ctor(System.Object,System.Boolean)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="target">action's target</param>
            <param name="completed">Indicates whether the wait has already
            completed.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.MarkCompleted">
            <summary>
            Marks the completion.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.MarkFaulted(System.Exception)">
            <summary>
            Marks the completion.
            </summary>
            <param name="fault"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.Wait(System.TimeSpan)">
            <summary>
            Waits (blocks the current thread) until the value is present or the timeout is exceeded.
            </summary>
            <param name="timeout">A timespan representing the timeout period.</param>
            <returns>The future's value.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.ToAsyncResult">
            <summary>
            Gets an async result for .NET framework synchronization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.ToAsyncResult(System.AsyncCallback,System.Object)">
            <summary>
            Gets an async result for .NET framework synchronization.
            </summary>
            <param name="asyncCallback"></param>
            <param name="asyncHandback"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.ToAsyncResult(System.AsyncCallback,System.Object,System.Object)">
            <summary>
            Gets an async result for .NET framework synchronization.
            </summary>
            <param name="asyncCallback"></param>
            <param name="asyncHandback"></param>
            <param name="asyncState"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.MakeAsyncCallback``1(``0,System.Action{System.IAsyncResult,``0})">
            <summary>
            Makes an AsyncCallback delegate that produces the completion.
            </summary>
            <typeparam name="H">handback type H</typeparam>
            <param name="handback">the handback</param>
            <param name="handler">a handler that produces the completion</param>
            <returns>An AsyncCallback.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.Continue(NetSteps.Encore.Core.Parallel.Continuation)">
            <summary>
            Schedules an action to execute when another completion succeeds.
            </summary>
            <param name="continuation">an action to run when the completion succeeds</param>
            <returns>a completion for the success action</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.Continue``1(NetSteps.Encore.Core.Parallel.ContinuationFunc{``0})">
            <summary>
            Schedules a function to execute when another completion succeeds.
            </summary>
            <typeparam name="R">result type R</typeparam>
            <param name="continuation">a function to run when the completion succeeds</param>
            <returns>a completion for the success function</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion.PerformMarkCompleted``1(``0,System.Action{``0},System.Action)">
            <summary>
            Helper method for marking completions.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="self"></param>
            <param name="callback"></param>
            <param name="after">an action to run after the operation completes</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion.IsCompleted">
            <summary>
            Indicates whether the wait has completed.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion.IsFaulted">
            <summary>
            Determines if the completion resulted in an error.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion.Exception">
            <summary>
            Gets the exception that caused the fault.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.Parallel.Completion.Completed">
            <summary>
            Event fired exactly once upon completion.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.Parallel.Completion.Faulted">
            <summary>
            Event fired exactly once when a fault is encountered.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion.WaitHandle">
            <summary>
            Gets a wait handle for the completion.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.CompletionEventArgs`1">
            <summary>
            Completion event arguments.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.CompletionEventArgs`1.#ctor(NetSteps.Encore.Core.Parallel.Completion{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="completion">the completion</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.CompletionEventArgs`1.Completion">
            <summary>
            Gets the completion upon which the event fired.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.Completion`1">
            <summary>
            Default waitable implementation.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.#ctor(System.Object)">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.MarkCompleted(`0)">
            <summary>
            Marks the completion.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.MarkFaulted(System.Exception)">
            <summary>
            Marks the completion.
            </summary>
            <param name="fault"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.Wait(System.TimeSpan)">
            <summary>
            Waits (blocks the current thread) until the value is present or the timeout is exceeded.
            </summary>
            <param name="timeout">A timespan representing the timeout period.</param>
            <returns>The future's value.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.TryGetValue(`0@)">
            <summary>
            Tries to read the value. This call will not block the calling
            thread if the value is not present.
            </summary>
            <param name="value">A reference where the value will be written if 
            it is present.</param>
            <returns><em>true</em> if the value was successfully read; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Tries to read the value. This call will not block the calling
            thread for the period of the timeout if the value is not present.
            </summary>
            <param name="millisecondsTimeout">timeout in milliseconds</param>
            <param name="value">A reference where the value will be written if 
            it is present.</param>
            <returns><em>true</em> if the value was successfully read; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.TryGetValue(System.TimeSpan,`0@)">
            <summary>
            Tries to read the value. This call will not block the calling
            thread for the period of the timeout if the value is not present.
            </summary>
            <param name="timeout">the timeout</param>
            <param name="value">A reference where the value will be written if 
            it is present.</param>
            <returns><em>true</em> if the value was successfully read; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.AwaitValue">
            <summary>
            Waits (blocks the current thread) until the value is present.
            </summary>
            <returns>The future's value.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.AwaitValue(System.Int32)">
            <summary>
            Waits (blocks the current thread) until the value is present or the timeout is exceeded.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds.</param>
            <returns>The future's value.</returns>
            <exception cref="T:NetSteps.Encore.Core.Parallel.ParallelTimeoutException">thrown if the timeout is exceeded before the value becomes available.</exception>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.AwaitValue(System.TimeSpan)">
            <summary>
            Waits (blocks the current thread) until the value is present or the timeout is exceeded.
            </summary>
            <param name="timeout">A timespan representing the timeout period.</param>
            <returns>The future's value.</returns>
            <exception cref="T:System.TimeoutException">thrown if the timeout is exceeded before the value becomes available.</exception>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.ToAsyncResult">
            <summary>
            Gets an async result for .NET framework synchronization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.ToAsyncResult(System.AsyncCallback,System.Object)">
            <summary>
            Gets an async result for .NET framework synchronization.
            </summary>
            <param name="asyncCallback"></param>
            <param name="asyncHandback"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.ToAsyncResult(System.AsyncCallback,System.Object,System.Object)">
            <summary>
            Gets an async result for .NET framework synchronization.
            </summary>
            <param name="asyncCallback"></param>
            <param name="asyncHandback"></param>
            <param name="asyncState"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.MakeAsyncCallback``1(``0,System.Func{System.IAsyncResult,``0,`0})">
            <summary>
            Makes an AsyncCallback delegate that produces the completion.
            </summary>
            <typeparam name="H">handback type H</typeparam>
            <param name="handback">the handback</param>
            <param name="handler">a handler that produces the completion</param>
            <returns>An AsyncCallback.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.Continue(NetSteps.Encore.Core.Parallel.Continuation{`0})">
            <summary>
            Schedules an action to execute when another completion succeeds.
            </summary>
            <param name="continuation">an action to run when the completion succeeds</param>
            <returns>a completion for the success action</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.Continue``1(NetSteps.Encore.Core.Parallel.ContinuationFunc{`0,``0})">
            <summary>
            Schedules a function to execute when another completion succeeds.
            </summary>
            <typeparam name="R">result type R</typeparam>
            <param name="continuation">a function to run when the completion succeeds</param>
            <returns>a completion for the success function</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Completion`1.PerformDispose(System.Boolean)">
            <summary>
            Performs dispose on the completion.
            </summary>
            <param name="disposing"></param>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion`1.IsCompleted">
            <summary>
            Indicates whether the wait has completed.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion`1.IsFaulted">
            <summary>
            Determines if the completion resulted in an error.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion`1.Exception">
            <summary>
            Gets the exception that caused the fault.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion`1.Value">
            <summary>
            Gets the future variable's value. Warning! Reading this property
            will block your thread indefinitely or until the future variable
            has been set; whichever comes sooner.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.Parallel.Completion`1.Completed">
            <summary>
            Event fired exactly once upon completion.
            </summary>
        </member>
        <member name="E:NetSteps.Encore.Core.Parallel.Completion`1.Faulted">
            <summary>
            Event fired exactly once when a fault is encountered.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Completion`1.WaitHandle">
            <summary>
            Gets a wait handle for the completion.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.Continuation">
            <summary>
            Continuation delegate.
            </summary>
            <param name="fault">an exception raised by the operation</param>
            <remarks>Continuations are invoked when the operation on
            which they depend reaches completion. Continuations always
            receive an exception as their first argument. In success
            cases, the <paramref name="fault"/> argument will be null; otherwise
            it is the exception raised by the operation being continued.</remarks>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.Continuation`1">
            <summary>
            Continuation delegate.
            </summary>
            <typeparam name="T">item type T, usually the result type of the operation being continued.</typeparam>
            <param name="fault">an exception raised by the operation</param>
            <param name="item">the result of the continued operation (when the operation is a Fun&lt;>)</param>
            <remarks>Continuations are invoked when the operation on
            which they depend reaches completion. Continuations always
            receive an exception as their first argument. In success
            cases, the <paramref name="fault"/> argument will be null; otherwise
            it is the exception raised by the operation being continued.</remarks>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.ContinuationFunc`1">
            <summary>
            Continuation delegate.
            </summary>
            <typeparam name="R">result type R</typeparam>
            <param name="fault">an exception raised by the operation</param>
            <returns>a return item</returns>
            <remarks>Continuations are invoked when the operation on
            which they depend reaches completion. Continuations always
            receive an exception as their first argument. In success
            cases, the <paramref name="fault"/> argument will be null; otherwise
            it is the exception raised by the operation being continued.</remarks>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.ContinuationFunc`2">
            <summary>
            Continuation delegate.
            </summary>
            <typeparam name="T">item type T, usually the result type of the operation being continued.</typeparam>
            <typeparam name="R">result type R</typeparam>
            <param name="fault">an exception raised by the operation</param>
            <param name="item">the result of the continued operation (when the operation is a Fun&lt;>)</param>
            <returns>a return item</returns>
            <remarks>Continuations are invoked when the operation on
            which they depend reaches completion. Continuations always
            receive an exception as their first argument. In success
            cases, the <paramref name="fault"/> argument will be null; otherwise
            it is the exception raised by the operation being continued.</remarks>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.Go">
            <summary>
            Parallelism using thread pool.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Go.Parallel(System.Action)">
            <summary>
            Performs an action in parallel.
            </summary>
            <param name="action">an action</param>
            <returns>a completion</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Go.Parallel(System.Action,NetSteps.Encore.Core.Parallel.Continuation)">
            <summary>
            Performs an action in parallel, and when complete, 
            invokes the given continuation.
            </summary>
            <param name="action">an action</param>
            <param name="continuation">a continuation</param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Go.Parallel``1(``0,System.Action{``0},NetSteps.Encore.Core.Parallel.Continuation)">
            <summary>
            Performs an action in parallel, and when complete, 
            invokes the given continuation.
            </summary>
            <typeparam name="T">value type T</typeparam>
            <param name="value">a value to be passed to the action</param>
            <param name="action">an action</param>
            <param name="continuation">a continuation</param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Go.Parallel``1(System.Func{``0})">
            <summary>
            Performs an action in parallel, and when complete, 
            invokes the given continuation.
            </summary>
            <typeparam name="R">result type R</typeparam>
            <param name="fun">an action</param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Go.Parallel``1(System.Func{``0},NetSteps.Encore.Core.Parallel.Continuation{``0})">
            <summary>
            Performs an action in parallel, and when complete, 
            invokes the given continuation.
            </summary>
            <typeparam name="R">result type R</typeparam>
            <param name="fun">an action</param>
            <param name="continuation">a continuation</param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Go.Parallel``2(``0,System.Func{``0,``1})">
            <summary>
            Performs an action in parallel, and when complete, 
            invokes the given continuation.
            </summary>
            <typeparam name="T">value type T</typeparam>
            <typeparam name="R">result type R</typeparam>
            <param name="value">a value to be passed to the action</param>
            <param name="fun">an action</param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Go.Parallel``2(``0,System.Func{``0,``1},NetSteps.Encore.Core.Parallel.Continuation{``1})">
            <summary>
            Performs an action in parallel, and when complete, 
            invokes the given continuation.
            </summary>
            <typeparam name="T">value type T</typeparam>
            <typeparam name="R">result type R</typeparam>
            <param name="value">a value to be passed to the action</param>
            <param name="fun">an action</param>
            <param name="continuation">a continuation</param>
            <returns></returns>
        </member>
        <member name="E:NetSteps.Encore.Core.Parallel.Go.OnUncaughtException">
            <summary>
            Event fired when uncaught exceptions are raised by parallel executions.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.Future`1">
            <summary>
            Default waitable implementation.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.#ctor">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.MarkCompleted(`0)">
            <summary>
            Marks the completion.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.MarkFaulted(System.Exception)">
            <summary>
            Marks the completion.
            </summary>
            <param name="fault"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.Wait(System.TimeSpan)">
            <summary>
            Waits (blocks the current thread) until the value is present or the timeout is exceeded.
            </summary>
            <param name="timeout">A timespan representing the timeout period.</param>
            <returns>The future's value.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.TryGetValue(`0@)">
            <summary>
            Tries to read the value. This call will not block the calling
            thread if the value is not present.
            </summary>
            <param name="value">A reference where the value will be written if 
            it is present.</param>
            <returns><em>true</em> if the value was successfully read; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Tries to read the value. This call will not block the calling
            thread for the period of the timeout if the value is not present.
            </summary>
            <param name="millisecondsTimeout">timeout in milliseconds</param>
            <param name="value">A reference where the value will be written if 
            it is present.</param>
            <returns><em>true</em> if the value was successfully read; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.TryGetValue(System.TimeSpan,`0@)">
            <summary>
            Tries to read the value. This call will not block the calling
            thread for the period of the timeout if the value is not present.
            </summary>
            <param name="timeout">the timeout</param>
            <param name="value">A reference where the value will be written if 
            it is present.</param>
            <returns><em>true</em> if the value was successfully read; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.AwaitValue">
            <summary>
            Waits (blocks the current thread) until the value is present.
            </summary>
            <returns>The future's value.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.AwaitValue(System.Int32)">
            <summary>
            Waits (blocks the current thread) until the value is present or the timeout is exceeded.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds.</param>
            <returns>The future's value.</returns>
            <exception cref="T:NetSteps.Encore.Core.Parallel.ParallelTimeoutException">thrown if the timeout is exceeded before the value becomes available.</exception>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Future`1.AwaitValue(System.TimeSpan)">
            <summary>
            Waits (blocks the current thread) until the value is present or the timeout is exceeded.
            </summary>
            <param name="timeout">A timespan representing the timeout period.</param>
            <returns>The future's value.</returns>
            <exception cref="T:System.TimeoutException">thrown if the timeout is exceeded before the value becomes available.</exception>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Future`1.IsCompleted">
            <summary>
            Indicates whether the wait has completed.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Future`1.IsFaulted">
            <summary>
            Determines if the completion resulted in an error.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Future`1.Exception">
            <summary>
            Gets the exception that caused the fault.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.Future`1.Value">
            <summary>
            Gets the future variable's value. Warning! Reading this property
            will block your thread indefinitely or until the future variable
            has been set; whichever comes sooner.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.DemuxResultKind">
            <summary>
            Indicates kinds of results when dumultiplexing.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.DemuxResultKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.DemuxResultKind.Observed">
            <summary>
            The result was observed. This indicates the current thread observed a result
            originated by another thread.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.DemuxResultKind.Originated">
            <summary>
            The result was originated by the current thread.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.DemuxProducer`2">
            <summary>
            Demultiplexes an operation.
            </summary>
            <typeparam name="A"></typeparam>
            <typeparam name="R"></typeparam>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.DemuxProducer`2.DefaultDemuxTimeout">
            <summary>
            Default timeout period.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.DemuxProducer`2.DefaultMaxRetries">
            <summary>
            Default number of timeout retries.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.DemuxProducer`2.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.DemuxProducer`2.#ctor(System.TimeSpan)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="demuxTimeout">a timeout period</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.DemuxProducer`2.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="demuxTimeout">a timeout period</param>
            <param name="maxRetries">max timeout retries</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.DemuxProducer`2.TryConsume(`0,`1@)">
            <summary>
            Tries to demux a completion result.
            </summary>
            <param name="args"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.DemuxProducer`2.ProduceResult(`0,`1@)">
            <summary>
            Produces
            </summary>
            <param name="arg"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.ParallelException">
            <summary>
            Base exception thrown by the parallel framework.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ParallelException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ParallelException.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">an error message</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ParallelException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">an error message</param>
            <param name="cause">an inner exception that caused this exception</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ParallelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by serialization to create an instance.
            </summary>
            <param name="si"></param>
            <param name="sc"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.ParallelTimeoutException">
            <summary>
            Exception indicating a task timed out before completion.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ParallelTimeoutException.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ParallelTimeoutException.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">an error message</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ParallelTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">an error message</param>
            <param name="cause">an inner exception that caused this exception</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ParallelTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by serialization to create an instance.
            </summary>
            <param name="si"></param>
            <param name="sc"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.Notification">
            <summary>
            Utility for notify
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.Notification.ContinueWith(System.IAsyncResult,System.Action)">
            <summary>
            Schedules a continuation action for after an async result
            completes.
            </summary>
            <param name="async">the async result</param>
            <param name="continuation">the continuation</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.ReactorExceptionArgs">
            <summary>
            EventArgs issued when a reactor encounters an uncaught exception.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ReactorExceptionArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="err">the uncaught exception</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.ReactorExceptionArgs.UncaughtException">
            <summary>
            The uncaught exception.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.ReactorExceptionArgs.Rethrow">
            <summary>
            Whether the exception should be rethrown.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.ReactorOptions">
            <summary>
            Options for the Reactor class.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorOptions.DefaultMaxDegreeOfParallelism">
            <summary>
            Default max DOP
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorOptions.DefaultMaxParallelDepth">
            <summary>
            Default miximum parallel depth.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorOptions.DefaultDispatchesPerBorrowedThread">
            <summary>
            Default dispatches per borrowed thread. Used when max parallel depth is exceeded.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ReactorOptions.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ReactorOptions.#ctor(System.Int32)">
            <summary>
            Creates a new instance with a max degree of parallelism.
            </summary>
            <param name="maxDegreeOfParallelism">a max degree of parallelism</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Parallel.ReactorOptions.#ctor(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="maxDegreeOfParallelism">a max degree of parallelism</param>
            <param name="yieldBusyReactor">indicates whether to occasionally yield a busy reactor</param>
            <param name="yieldFrequency">indicates yield frequency when yielding a busy reactor</param>
            <param name="maxParallelDepth">maximum parallel depth</param>
            <param name="dispatchesPerSequential">dispatches per borowed thread</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.ReactorOptions.MaxDegreeOfParallelism">
            <summary>
            The reactor's max degree of parallelism. This option controls the maximum number of concurrent threads
            used to react to items pushed to the reactor.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.ReactorOptions.YieldBusyReactor">
            <summary>
            Whether the reactor yields busy reactor threads. This option can provide better parallelism when the
            entire thread pool is busy.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.ReactorOptions.YieldFrequency">
            <summary>
            Indicates the frequency at which a reactor thread yields.
            </summary>
            <remarks>Generally speaking, when a reactor is configured to yield, each thread pool thread will
            react to at most YieldFrequency items before yielding the thread back to the pool.</remarks>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.ReactorOptions.MaxParallelDepth">
            <summary>
            Maximum parallel depth.
            </summary>
            <remarks>For busy reactors, borrows the callers thread when the maximum parallel depth
            is reached.</remarks>
        </member>
        <member name="P:NetSteps.Encore.Core.Parallel.ReactorOptions.DispatchesPerBorrowedThread">
            <summary>
            Sequential dispatches per borrowed thread.
            </summary>
            <remarks>For busy reactors, when borrowing the caller's thread, the number of items to
            process before returning control to the caller.</remarks>
        </member>
        <member name="T:NetSteps.Encore.Core.Parallel.ReactorState">
            <summary>
            Indicates the Reactor's state.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorState.Idle">
            <summary>
            Indicates the reactor is idle.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorState.Active">
            <summary>
            Indicates the reactor is active.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorState.SuspendSignaled">
            <summary>
            Indicates the reactor is suspending.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorState.Suspended">
            <summary>
            Indicates the reactor is suspended.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorState.StopSignaled">
            <summary>
            Indicates the reactor is stopping.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Parallel.ReactorState.Stopped">
            <summary>
            Indicates the reactor has stopped.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.UncaughtExceptionArgs">
            <summary>
            Event args for uncaught exceptions.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.UncaughtExceptionArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:NetSteps.Encore.Core.UncaughtExceptionArgs.Error">
            <summary>
            The uncaught exception.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Process.HealthCheck">
            <summary>
            Base class for health checks.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Process.HealthCheck.IsSuccess(System.Object)">
            <summary>
            Indicates whether an status represents success.
            </summary>
            <param name="status">status object</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Process.HealthCheck.GetStatus">
            <summary>
            Generates a status object.
            </summary>
            <returns>the status</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Process.HealthCheck.GetStatus(System.Boolean)">
            <summary>
            Generates a status object.
            </summary>
            <param name="showStackTrace">indicates whether a stack trace should be returned on errors</param>
            <returns>the status</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Process.HealthCheck.PerformGetStatus(System.Object)">
            <summary>
            Performs specialized status checks.
            </summary>
            <param name="status">a dynamic object for collecting specialized status</param>
            <returns>true if the specialized status was successful; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Process.HealthCheck.FromStatusToJson(System.Object)">
            <summary>
            Converst the status object to JSON.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Process.IProcessIdentity">
            <summary>
            Interface for a process identity. Used when a process self-identifies.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.IProcessIdentity.Tenant">
            <summary>
            Identifies the customer/tenant associated with the process.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.IProcessIdentity.Component">
            <summary>
            Indicates the software component represented by the process.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.IProcessIdentity.Environment">
            <summary>
            Identifies the environment in which the process is operating.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.IProcessIdentity.MachineName">
            <summary>
            Identifies the machine name where the process is located.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.IProcessIdentity.ProcessName">
            <summary>
            Indicates the name of the process.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.IProcessIdentity.ProcessID">
            <summary>
            Indicates the process' operating system ID.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Process.ProcessIdentity">
            <summary>
            Interface for a process identity. Used when a process self-identifies.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentity.Tenant">
            <summary>
            Identifies the customer/tenant associated with the process.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentity.Component">
            <summary>
            Indicates the software component represented by the process.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentity.Environment">
            <summary>
            Identifies the environment in which the process is operating.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentity.MachineName">
            <summary>
            Identifies the machine name where the process is located.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentity.ProcessName">
            <summary>
            Indicates process' name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentity.ProcessID">
            <summary>
            Indicates the process' operating system ID.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection">
            <summary>
            Configuration section for log settings.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.CDefaultEnvironment">
            <summary>
            Default environment string
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.CDefaultTenant">
            <summary>
            Default tenant string
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.PropertyName_environment">
            <summary>
            Property name for environment.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.PropertyName_component">
            <summary>
            Property name for component.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.PropertyName_tenant">
            <summary>
            Property name for tenant.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.SectionName">
            <summary>
            Configuration section name for trace settings.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.Component">
            <summary>
            Indicates the name of the component that the current application represents.
            The meaning of "component" is up to the user but in general indicates a
            role that an application performs within a system.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.Environment">
            <summary>
            Indicates the name of the environment in which the application is executing.
            The meaning of "environment" is up to the user but in general indicates an
            environment such as: { dev | test | stage | prod }. In cases where
            events in one environment can be heard by journalers in another environment
            the presence of this value in an event helps with filtering.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.Tenant">
            <summary>
            Indicates the name of the tenant or customer.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Process.ProcessIdentifyConfigurationSection.Current">
            <summary>
            Gets the current configuration section.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_CannotBeEmpty">
            <summary>
              Looks up a localized string similar to cannot be empty.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_CannotBeNull">
            <summary>
              Looks up a localized string similar to cannot be null.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_MustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to value must be greater than zero.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_MustBeZeroOrGreater">
            <summary>
              Looks up a localized string similar to value must be greater than or equal to zero.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_OffsetWouldResultInBufferOverrun">
            <summary>
              Looks up a localized string similar to offset would result in buffer overrun.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_TypeMustBeAssignableToException">
            <summary>
              Looks up a localized string similar to type must be assignable to Exception.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_TypeMustBeAssignableToIWireupCommand">
            <summary>
              Looks up a localized string similar to must be assignable to IWireupCommand.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_TypeMustBeAssignableToTypeofT">
            <summary>
              Looks up a localized string similar to type must be assignable to typeof T.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Chk_TypeofTIsInterface">
            <summary>
              Looks up a localized string similar to typeof(T) must be an interface.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_AlreadyDisposed">
            <summary>
              Looks up a localized string similar to object already disposed.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_BaseTypeConstraintNotSet">
            <summary>
              Looks up a localized string similar to base type constraint not set.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_ConfiguredWireupCoordinatorTypeMismatch">
            <summary>
              Looks up a localized string similar to configured wireup coordinator doesn&apos;t implement IWireupCoordinator.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_ExceptionOccurredInParallelThread">
            <summary>
              Looks up a localized string similar to An exception occurred in parallel, see attached exception for details..
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_NotInitialized">
            <summary>
              Looks up a localized string similar to not initialized; this method can only be used after the instance has been initialized.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_ReactorCanceled">
            <summary>
              Looks up a localized string similar to reactor has been canceled and cannot perform the operation.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_StatusTypeMustBeEnum">
            <summary>
              Looks up a localized string similar to status type must be an enum.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_StereotypeBehaviorGeneratedForInterfacesOnly">
            <summary>
              Looks up a localized string similar to this stereotypical behavior can only be generated for interfaces.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Err_WireupMustBePerformed">
            <summary>
              Looks up a localized string similar to wireup must be performed before IoC can be used.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Error_AsyncResultAlreadySet">
            <summary>
              Looks up a localized string similar to AsyncResult values are write-once and the value has already been set.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.ResourceClientName">
            <summary>
              Looks up a localized string similar to NetSteps Resource Client v.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Properties.Resources.Warn_ErrorWhileDisposingCleanupScope">
            <summary>
              Looks up a localized string similar to uncaught exception while disposing cleanup scope.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.ValueRef`1">
            <summary>
            Reference to a raw value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.IValueRef">
            <summary>
            Interface for objects that have a value that can be loaded on the stack.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.IValueRef.LoadAddress(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the address of the value by pushing it onto the stack.
            </summary>
            <param name="il">the il generator.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.IValueRef.LoadValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the value by pushing it onto the stack.
            </summary>
            <param name="il">the il generator.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.IValueRef.StoreValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores the value by popping it off of the stack.
            </summary>
            <param name="il">the il generator.</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.IValueRef.Name">
            <summary>
            Name of the value.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.IValueRef.TargetType">
            <summary>
            Gets the value's type.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ValueRef`1.#ctor(`0)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ValueRef`1.LoadAddress(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the address of the value.
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ValueRef`1.LoadValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the value.
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ValueRef`1.StoreValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Stores the value.
            </summary>
            <param name="il"></param>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.ValueRef`1.Name">
            <summary>
            The value's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.ValueRef`1.TargetType">
            <summary>
            Get's the value's target type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly">
            <summary>
            Helper class for emiting assemblies.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">the assembly's name</param>
            <param name="rootNamespace">the assembly's root namespace</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.#ctor(System.String,System.String,System.Version,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance
            </summary>
            <param name="name">the assembly's name</param>
            <param name="rootNamespace">the assembly's root namespace</param>
            <param name="version">the assembly's version</param>
            <param name="culture">the assembly's culture</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.#ctor(System.String,System.String,System.Version,System.Globalization.CultureInfo,System.Byte[],System.Byte[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="name">the assembly's name</param>
            <param name="rootNamespace">the assembly's root namespace</param>
            <param name="version">the assembly's version</param>
            <param name="culture">the assembly's culture</param>
            <param name="publicKey">the assembly's public key</param>
            <param name="publicKeyToken">the assembly's public key token</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.#ctor(System.Reflection.AssemblyName,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">the assembly's name</param>
            <param name="rootNamespace">the assembly's root namespace</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.Compile">
            <summary>
            Compiles the assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.DefineModule(System.String,System.String)">
            <summary>
            Defines a new module in the assembly.
            </summary>
            <param name="name">the module's name</param>
            <param name="namespace">a root namespace for the module</param>
            <returns>An emitted module builder</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.DefineClass(System.String)">
            <summary>
            Defines a class.
            </summary>
            <param name="name">the class' name</param>
            <returns>the emitted class</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.DefineClass(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
            <summary>
            Defines a class.
            </summary>
            <param name="name">the class' name</param>
            <param name="attributes">the class' attributes</param>
            <param name="supertype">the class' supertype</param>
            <param name="interfaces">a list of interfaces the class will implement</param>
            <returns>the emitted class</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.IsCompiled">
            <summary>
            Indicates whether the assembly has been compiled.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.Name">
            <summary>
            Gets the assembly's name
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.RootNamespace">
            <summary>
            Gets the assembly's root namespace.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.Builder">
            <summary>
            Gets the assembly's builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly.BaseModule">
            <summary>
            Gets the assembly's base module.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedClass">
            <summary>
            Helper class for working with a class in the IL stream.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedMember">
            <summary>
            Helper class for working with class members in the IL stream.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMember.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="type">the emitted type</param>
            <param name="name">the name of the member</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMember.Compile">
            <summary>
            Compiles the member.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMember.OnCompile">
            <summary>
            Called by the framework when the member is being compiled.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMember.IsCompiled">
            <summary>
            Indicates whether the member has been compiled.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMember.IsStatic">
            <summary>
            Indicates whether the member is a static member.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMember.Name">
            <summary>
            Gets the member's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMember.TargetClass">
            <summary>
            Gets the emitted class on which this member resides.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefaultTypeAttributes">
            <summary>
            Default type attributes.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.StaticTypeAttributes">
            <summary>
            Static type attributes
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.#ctor(System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="module">emitted module, owner</param>
            <param name="name">the class' name</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.#ctor(System.Reflection.Emit.ModuleBuilder,System.String,System.Reflection.TypeAttributes)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="module">emitted module, owner</param>
            <param name="name">the class' name</param>
            <param name="attributes">the class' attributes</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.#ctor(System.Reflection.Emit.ModuleBuilder,System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="module">emitted module, owner</param>
            <param name="name">the class' name</param>
            <param name="attributes">the class' attributes</param>
            <param name="supertype">the class' supertype</param>
            <param name="interfaces">an array of interfaces the type will implement</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.#ctor(System.Reflection.Emit.ModuleBuilder,NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="module">module</param>
            <param name="eclass">parent class, owner</param>
            <param name="name">the class' name</param>
            <param name="attributes">the class' attributes</param>
            <param name="supertype">the class' supertype</param>
            <param name="interfaces">an array of interfaces the type will implement</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.AddInterfaceImplementation(System.Type)">
            <summary>
            Adds an interface to the list of interfaces the class implements.
            </summary>
            <param name="type">interface type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineCCtor">
            <summary>
            Defines a default constructor.
            </summary>
            <returns>the emitted constructor</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineCtor">
            <summary>
            Defines a constructor.
            </summary>
            <returns>the constructor</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineDefaultCtor">
            <summary>
            Defines a default constructor.
            </summary>
            <returns>the constructor</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineField``1(System.String)">
            <summary>
            Defines a field of type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="fieldName">the field's name</param>
            <returns>the emitted field</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineField(System.String,System.Type)">
            <summary>
            Defines a field.
            </summary>
            <param name="fieldName">the field's name</param>
            <param name="fieldType">the field's type</param>
            <returns>the emitted field</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineField(System.String,NetSteps.Encore.Core.Reflection.Emit.TypeRef)">
            <summary>
            Defines a field.
            </summary>
            <param name="fieldName">the field's name</param>
            <param name="fieldType">the field's type (ref)</param>
            <returns>the emitted field</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineGenericParamentersFromType(System.Type)">
            <summary>
            Defines generic arguments as defined on another generic type.
            </summary>
            <param name="generic">the generic type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineMethod(System.String)">
            <summary>
            Defines a method.
            </summary>
            <param name="methodName">the method's name</param>
            <returns>the emitted method</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineMethodFromInfo(System.Reflection.MethodInfo)">
            <summary>
            Defines a method based on another method.
            </summary>
            <param name="method">the other method</param>
            <returns>the emitted method</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineNestedType">
            <summary>
            Defines a nested type.
            </summary>
            <returns>the nested emitted type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineOverrideMethod(System.Reflection.MethodInfo)">
            <summary>
            Defines a method that overrides another method.
            </summary>
            <param name="method">the method to override</param>
            <returns>an emitted method</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineProperty``1(System.String)">
            <summary>
            Defines a property of type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="propertyName">the property's name</param>
            <returns>the emitted property</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefineProperty(System.String,System.Type)">
            <summary>
            Defines a property
            </summary>
            <param name="propertyName">the property's name</param>
            <param name="propertyType">the property's type</param>
            <returns>the emitted property</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefinePropertyFromPropertyInfo(System.Reflection.PropertyInfo)">
            <summary>
            Defines a property based on another property.
            </summary>
            <param name="property">the other property</param>
            <returns>the emitted property</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefinePropertyWithBackingField``1(System.String)">
            <summary>
            Defines a property with a backing field of type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="propertyName">the property's name</param>
            <returns>the emitted property</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.DefinePropertyWithBackingField(System.String,System.Type)">
            <summary>
            Defines a property with a backing field.
            </summary>
            <param name="propertyName">the property's name</param>
            <param name="propertyType">the property's type</param>
            <returns>an emitted property</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.OnCompile">
            <summary>
            Compiles the emitted type.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.TryGetProperty(System.String,NetSteps.Encore.Core.Reflection.Emit.EmittedProperty@)">
            <summary>
            Tries to get a property by name.
            </summary>
            <param name="name">the property's name</param>
            <param name="prop">variable to hold the property upon success</param>
            <returns>true if successful; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.StubMethodsForInterface(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Produces stubs for all methods of an interface.
            </summary>
            <param name="intf">the interface</param>
            <param name="skipGetters">whether to skip getters</param>
            <param name="skipSetters">whether to skip setters</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.SetCustomAttribute``1(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Sets a custom attribute for the emitted class.
            </summary>
            <param name="constructor">the attribute's constructor</param>
            <param name="constructorArgs">arguments for the constructor</param>
            <typeparam name="T">attribute type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.SetCustomAttribute``1(System.Reflection.ConstructorInfo)">
            <summary>
            Sets a custom attribute for the emitted class; for constructors that don't take arguments.
            </summary>
            <param name="constructor">the attribute's constructor</param>
            <typeparam name="T">attribute type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.SetCustomAttribute``1">
            <summary>
            Sets a custom attribute for the emitted class; uses the attribute's default constructor.
            </summary>
            <typeparam name="T">attribute type T</typeparam>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.Attributes">
            <summary>
            Gets the class' attributes.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.Builder">
            <summary>
            Gets the class' builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.Fields">
            <summary>
            Gets the class' fields.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedClass.Ref">
            <summary>
            Get's a type ref to the emitted class.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedConstructor">
            <summary>
            Helper class for working with constructors in the IL stream.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase">
            <summary>
            Base helper class for working with methods in the IL stream.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="type">the emitted type, owner</param>
            <param name="name">the method's name</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.ClearAttributes">
            <summary>
            Clears the method's attributes.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.DefineLocal(System.String,System.Type)">
            <summary>
            Defines a local variable.
            </summary>
            <param name="name">the local's name</param>
            <param name="type">the local's type</param>
            <returns>the emitted local</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.DefineLocal(System.String,NetSteps.Encore.Core.Reflection.Emit.TypeRef)">
            <summary>
            Defines a local variable.
            </summary>
            <param name="name">the local's name</param>
            <param name="type">the local's type (ref)</param>
            <returns>the emitted local</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.ContributeInstructions(System.Action{NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase,System.Reflection.Emit.ILGenerator})">
            <summary>
            Contributes instructions for the method.
            </summary>
            <param name="gen">an action that provides instructions for the method</param>
            <remarks>
            The <paramref name="gen"/> actions provided to the method will be called in the
            order they are provided. It is the caller's responsibility that the generators
            are registered in the proper order and that dependencies are satisfield before
            each generator is called.
            </remarks>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.DefineParameter(System.String,NetSteps.Encore.Core.Reflection.Emit.TypeRef)">
            <summary>
            Defines a parameter.
            </summary>
            <param name="name">the parameter's name</param>
            <param name="typeRef">the parameter's type (ref)</param>
            <returns>the emitted parameter</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.DefineParameter(System.String,System.Type)">
            <summary>
            Defines a parameter.
            </summary>
            <param name="name">the parameter's name</param>
            <param name="type">the parameter's type</param>
            <returns>the emitted parameter</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.AddParameter(NetSteps.Encore.Core.Reflection.Emit.EmittedParameter)">
            <summary>
            Adds a parameter introduced by subclasses.
            </summary>
            <param name="parameter">the parameter</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.EmitCall(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions for calling the method.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.ExcludeAttributes(System.Reflection.MethodAttributes)">
            <summary>
            Excludes the attributes given.
            </summary>
            <param name="attr">attributes to be excluded</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.IncludeAttributes(System.Reflection.MethodAttributes)">
            <summary>
            Includes the attributes given.
            </summary>
            <param name="attr">the attributes to be included</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.CompileLocals(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compiles the method's locals.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.CompileParameters(System.Reflection.Emit.MethodBuilder)">
            <summary>
            Compiles the method's parmeters.
            </summary>
            <param name="m">the method</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.CompileParameters(System.Reflection.Emit.ConstructorBuilder)">
            <summary>
            Compiles the construtor's parameters.
            </summary>
            <param name="c">the construtor builder</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.EmitInstructions(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compiles the method's contributed instructions.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.SetILGenerator(System.Reflection.Emit.ILGenerator)">
            <summary>
            Sets the IL generator used when emitting. If subclasses utilize the 
            compilation helper methods, the ILGenerator must be set prior to
            calling these helpers.
            </summary>
            <param name="il">IL</param>
            <returns>the given IL</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.HasBuilder">
            <summary>
            Indicates whether the method has a builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.Attributes">
            <summary>
            Gets the method's attributes.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.CallingConvention">
            <summary>
            Gets the method's calling convetions.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.ParameterTypes">
            <summary>
            Gets the method's parameter types.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase.Parameters">
            <summary>
            Gets the method's defined parameters.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedConstructor.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="type">the emitted type; owner</param>
            <param name="name">the constructor's name</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedConstructor.EmitCall(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits a call to the underlying constructor.
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedConstructor.OnCompile">
            <summary>
            Compiles the constructor.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedConstructor.Builder">
            <summary>
            Gets the constructor's builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedConstructor.HasBuilder">
            <summary>
            Indicates whether the constructor has a builder.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedField">
            <summary>
            Helper class for working with fields in the IL stream.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.IFieldRef">
            <summary>
            Interface for field references.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.IFieldRef.FieldInfo">
            <summary>
            Gets the FieldInfo for the target field.
            </summary>
            <returns>FieldInfo metadata for the underlying field.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String,NetSteps.Encore.Core.Reflection.Emit.TypeRef)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="type">the emitted type</param>
            <param name="name">the field's name</param>
            <param name="fieldType">the field's type (ref)</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.ExcludeAttributes(System.Reflection.FieldAttributes)">
            <summary>
            Excludes the attributes given.
            </summary>
            <param name="attr">the attributes to exclude</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.ClearAttributes">
            <summary>
            Clears the field's attributes.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.IncludeAttributes(System.Reflection.FieldAttributes)">
            <summary>
            Includes the attributes given.
            </summary>
            <param name="attr">the attributes to include</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.LoadAddress(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions to load the field's address.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.LoadValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions to load the field's value.
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.StoreValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions to store the field's value.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.OnCompile">
            <summary>
            Compiles the field.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedField.WithInit(NetSteps.Encore.Core.Reflection.Emit.IValueRef)">
            <summary>
            Assigns the field's initial value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedField.Attributes">
            <summary>
            Gets the field's attributes.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedField.Builder">
            <summary>
            Gets the field's builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedField.FieldType">
            <summary>
            Gets a reference to the field's type
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedField.FieldInfo">
            <summary>
            Gets the reflection FieldInfo for the field.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedField.TargetType">
            <summary>
            Gets the field's target type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedGenericArgument">
            <summary>
            Helper class for working with generic arguments in the IL stream.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedGenericArgument.AddBaseTypeConstraint(System.Type)">
            <summary>
            Adds a type constraint to the generic argument.
            </summary>
            <param name="type">the constraining type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedGenericArgument.AddBaseTypeConstraint(NetSteps.Encore.Core.Reflection.Emit.TypeRef)">
            <summary>
            Adds a type constraint to the generic argument.
            </summary>
            <param name="typeRef">a reference to the constraining type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedGenericArgument.AddInterfaceConstraint(System.Type)">
            <summary>
            Adds an interface constraint to the generic argument.
            </summary>
            <param name="type">the constraining type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedGenericArgument.AddInterfaceConstraint(NetSteps.Encore.Core.Reflection.Emit.TypeRef)">
            <summary>
            Adds an interface constraint to the generic argument.
            </summary>
            <param name="typeref">a reference to the constraining type</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedGenericArgument.Attributes">
            <summary>
            Gets the argument's attributes.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedGenericArgument.Name">
            <summary>
            Gets the argument's name
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedGenericArgument.Position">
            <summary>
            Gets the argument's position
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal">
            <summary>
            Helper class for working with local variables in the IL stream.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.#ctor(System.String,System.Int32,NetSteps.Encore.Core.Reflection.Emit.TypeRef)">
            <summary>
            Creates a new instance
            </summary>
            <param name="name">the local's name</param>
            <param name="index">the index</param>
            <param name="localType">the type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.Compile(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compiles the local.
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.LoadAddress(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions to load the local's address.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.LoadValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions to load the local's value.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.StoreValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions to store the local's value.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.LocalIndex">
            <summary>
            Indicates the local's declaration index.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.LocalType">
            <summary>
            Indicates the local's type (ref).
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.Name">
            <summary>
            Gets the local's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.Builder">
            <summary>
            Gets the local's builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedLocal.TargetType">
            <summary>
            Gets the local's target type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod">
            <summary>
            Helper class for working with methods in the IL stream.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.PublicInterfaceImplementationAttributes">
            <summary>
            MethodAttributes for public interface implementations.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String)">
            <summary>
            Creates a new instace.
            </summary>
            <param name="type">owning type</param>
            <param name="name">the method's name</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.Reflection.MethodInfo)">
            <summary>
            Creates a new instance based on the given method info.
            </summary>
            <param name="type">owning type</param>
            <param name="method">method info describing the method to emit</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Creates a new instance that overrides the given method.
            </summary>
            <param name="type">owning type</param>
            <param name="method">method info describing the method to emit</param>
            <param name="isOverride">indicates whether the emitted method will override the given method</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.GetGenericTypeParameters(System.Reflection.Emit.MethodBuilder,System.Type[])">
            <summary>
            Gets the method's 
            </summary>
            <param name="builder"></param>
            <param name="genericArguments"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.EmitCall(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits a instructions to call the method.
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.OnCompile">
            <summary>
            Compiles the method.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.ParameterTypes">
            <summary>
            Gets a method's parameter types.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.HasBuilder">
            <summary>
            Indicates whether the method has a builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.Builder">
            <summary>
            Gets the method's builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.ReturnType">
            <summary>
            Gets a reference to the method's return type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedMethod.GenericArgumentTypes">
            <summary>
            Gets the method's generic argument types.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedModule">
            <summary>
            Helper class for working with a modules in the IL stream.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="assembly">the assembly, owner</param>
            <param name="name">the module's name</param>
            <param name="namespace">a namespace name for the classes in the module (base)</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.Compile">
            <summary>
            Compiles the module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.DefineClass(System.String)">
            <summary>
            Defines a class.
            </summary>
            <param name="name">the class' name</param>
            <returns>the emitted class</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.DefineClass(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
            <summary>
            Defines a class
            </summary>
            <param name="name">the class' name</param>
            <param name="attributes">the class' attributes</param>
            <param name="supertype">the class' supertype</param>
            <param name="interfaces">list of interfaces the class will implement</param>
            <returns>the emitted class</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.Save">
            <summary>
            Saves the module.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.Assembly">
            <summary>
            Gets the assembly within which the module resides.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.Builder">
            <summary>
            Gets the underlying ModuleBuilder for the module.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.Name">
            <summary>
            Gets the module's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.Namespace">
            <summary>
            Gets the default namespace for the module.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedModule.IsCompiled">
            <summary>
            Indicates whether the module has been compiled.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter">
            <summary>
            Helper class for working with parameters in the IL stream.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase,System.Int32,System.String,NetSteps.Encore.Core.Reflection.Emit.TypeRef)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="method">the method, owner</param>
            <param name="index">the parameter's index</param>
            <param name="name">the parameter's name</param>
            <param name="type">the parameter's type (ref)</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.#ctor(System.Reflection.Emit.ParameterBuilder,System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="builder">a parameter builder</param>
            <param name="type">the parameter's type (ref)</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.ClearAttributes">
            <summary>
            Clears the parameter's attributes.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.ExcludeAttributes(System.Reflection.ParameterAttributes)">
            <summary>
            Excludes the attributes given.
            </summary>
            <param name="attr">attributes to be excluded</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.IncludeAttributes(System.Reflection.ParameterAttributes)">
            <summary>
            Includes the attributes given.
            </summary>
            <param name="attr">attributes to be encluded</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.Compile(System.Reflection.Emit.MethodBuilder)">
            <summary>
            Compiles the parameter.
            </summary>
            <param name="m">method builder</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.LoadAddress(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits IL to load the parameter's address.
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.LoadValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits IL to load the parameter's value.
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.StoreValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits IL to store the parameter's value.
            </summary>
            <param name="il"></param>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.Method">
            <summary>
            Gets the method that defines the parameter.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.Attributes">
            <summary>
            Gets the method's attributes.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.Builder">
            <summary>
            Gets the parameter's builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.Index">
            <summary>
            Gets the parameter's index.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.Name">
            <summary>
            Gets the parameter's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.ParameterType">
            <summary>
            Gets a reference to the parameter's type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedParameter.TargetType">
            <summary>
            Gets the parameter target's type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty">
            <summary>
            Helper class for working with properties in the IL stream.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String,System.Type,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="type">the property's type</param>
            <param name="name">the property's name</param>
            <param name="propertyType">the property's type</param>
            <param name="isStatic">whether the property is a static property</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String,NetSteps.Encore.Core.Reflection.Emit.TypeRef,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="type">the property's type</param>
            <param name="name">the property's name</param>
            <param name="propertyType">the property's type (ref)</param>
            <param name="isStatic">whether the property is a static property</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass,System.String,NetSteps.Encore.Core.Reflection.Emit.TypeRef,System.Type[],System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="type">the property's type</param>
            <param name="name">the property's name</param>
            <param name="propertyType">the property's type (ref)</param>
            <param name="paramTypes">the property's parameter types</param>
            <param name="isStatic">whether the property is a static property</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.AddGetter">
            <summary>
            Adds a getter to a property.
            </summary>
            <returns>the emitted getter method</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.AddGetter(System.Reflection.MethodInfo)">
            <summary>
            Adds a getter to a property by overriding the given method.
            </summary>
            <returns>the emitted getter method</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.AddSetter">
            <summary>
            Adds asetter to a property.
            </summary>
            <returns>the emitted setter method</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.AddSetter(System.Reflection.MethodInfo)">
            <summary>
            Adds a setter to a property by overriding the given method.
            </summary>
            <returns>the emitted setter method</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.BindField(System.Reflection.FieldInfo)">
            <summary>
            Binds the property to an underlying field (simple getter and setter).
            </summary>
            <param name="field">a field ref</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.BindField(NetSteps.Encore.Core.Reflection.Emit.EmittedField)">
            <summary>
            Binds the property to an underlying field (simple getter and setter).
            </summary>
            <param name="field">the field</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.GetPropertyInfo">
            <summary>
            Gets property info from the emitted property (not implemented).
            </summary>
            <returns>not implemented</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.LoadAddress(System.Reflection.Emit.ILGenerator)">
            <summary>
            Loads the address of a property (not implemented).
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.LoadValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions to load the property's value.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.StoreValue(System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits instructions to store the property's value.
            </summary>
            <param name="il">IL</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.OnCompile">
            <summary>
            Compiles the property.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.Attributes">
            <summary>
            Gets the property's attributes.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.Builder">
            <summary>
            Gets the property's builder.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.CallingConventions">
            <summary>
            Gets the property's calling conventions.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.Getter">
            <summary>
            Gets the property's getter method.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.Setter">
            <summary>
            Gets the property's setter method.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.IsReadonly">
            <summary>
            Indicates whether the property is readonly.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.ParameterTypes">
            <summary>
            Gets the property's parameter types.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.PropertyType">
            <summary>
            Gets the property's type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.BoundField">
            <summary>
            Gets a reference to the field to which the property is bound. (for bound properties)
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedProperty.TargetType">
            <summary>
            Gets the property's target type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.Extensions">
            <summary>
            Various extensions for help while emitting MSIL.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.Extensions.FormatEmittedTypeName(System.Type,System.String)">
            <summary>
            Generates a valid type name for a generated type.
            </summary>
            <param name="type">the type upon which the generated type is based</param>
            <param name="suffix">a suffix for differentiation when generating more than
            one class based on <paramref name="type"/></param>
            <returns>a type name for the emitted type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.Extensions.MangleTypeName(System.Type)">
            <summary>
            Mangles a type name so that it is usable as an emitted type's name.
            </summary>
            <param name="type">the type</param>
            <returns>the (possibly) mangled name</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.Extensions.MangleTypeNameWithoutNamespace(System.Type)">
            <summary>
            Mangles a type name so that it is usable as an emitted type's name.
            </summary>
            <param name="type">the type</param>
            <returns>the (possibly) mangled name</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions">
            <summary>
            Helper class for working with IL.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Add(System.Reflection.Emit.ILGenerator)">
            <summary>
            Adds two values on the stack and pushes the result onto the stack.
            </summary>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.AddUnsignedWithOverflowCheck(System.Reflection.Emit.ILGenerator)">
            <summary>
            Adds two unsigned integers on the stack, performs an overflow check and pushes the result onto the stack.
            </summary>		
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.AddWithOverflowCheck(System.Reflection.Emit.ILGenerator)">
            <summary>
            Adds two integers on the stack, performs an overflow check and pushes the result onto the stack.
            </summary>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ArgListPointer(System.Reflection.Emit.ILGenerator)">
            <summary>
            Pushes an unmanaged pointer to the argument list of the current method onto the stack.
            </summary>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BeginScope(System.Reflection.Emit.ILGenerator)">
            <summary>
            Starts a new scope.
            </summary>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BitwiseAnd(System.Reflection.Emit.ILGenerator)">
            <summary>
            Computes the bitwise AND of two values on the stack and pushes the result onto the stack.
            </summary>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Box(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Converts a ValueType to an object reference.
            </summary>
            <param name="valueType">the value type</param>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Branch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label.
            </summary>
            <param name="label"></param>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if two values are equal.
            </summary>
            <param name="label">A target label.</param>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfNotEqual_Un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if two values are not equal.
            </summary>
            <param name="label">A target label.</param>
            <param name="il">il generator</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfNotEqual(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.TypeRef,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if two values are not equal.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="type">type of values being compared</param>
            <param name="label">target label</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfNotEqual(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if two values are not equal.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="type">type of values being compared</param>
            <param name="label">target label</param>		
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfEqual_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if two values are equal.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfFalse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the value on the stack is false, null, or zero.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfFalse_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the value on the stack is false, null, or zero.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfGreaterThan(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is greater than the second value on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfGreaterThanOrEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is greater than or equal to the second value on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfGreaterThanOrEqual_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is greater than or equal to the second value on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfGreaterThanOrEqual_Unsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is greater than or equal to the second value on the stack when
            comparing unsigned integer values or unordered float values.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfGreaterThanOrEqual_Unsigned_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is greater than or equal to the second value on the stack when
            comparing unsigned integer values or unordered float values.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfGreaterThan_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label the first value on the stack 
            is greater than the second value on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfGreaterThan_Unsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label the first value on the stack 
            is greater than the second value on the stack when
            comparing unsigned integer values or unordered float values.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfGreaterThan_Unsigned_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is greater than the second value on the stack when
            comparing unsigned integer values or unordered float values.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfLessThan(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label the first value on the stack 
            is less than the second value on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfLessThanOrEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is less than or equal to the second value on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfLessThanOrEqual_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is less than or equal to the second value on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfLessThanOrEqual_Unsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is less than or equal to the second value on the stack when
            comparing unsigned integer values or unordered float values.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfLessThanOrEqual_Unsigned_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is less than or equal to the second value on the stack when
            comparing unsigned integer values or unordered float values.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfLessThan_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is less than the second value on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfLessThan_Unsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is less than the second value on the stack when
            comparing unsigned integer values or unordered float values.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfLessThan_Unsigned_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the first value on the stack 
            is less than the second value on the stack when
            comparing unsigned integer values or unordered float values.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfTrue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the value on the stack is true, not null, or non zero.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BranchIfTrue_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label if the value on the stack is true, not null, or non zero.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Branch_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Transfers control to a target label.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="label">A target label.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Break(System.Reflection.Emit.ILGenerator)">
            <summary>
            Signals the CLI to inform the debugger that a breakpoint has been tripped.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls the method indicated by the method descriptor.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="method">MethodInfo for the method to call.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.EmittedMethodBase)">
            <summary>
            Emits instructions to call the method given.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="method">the method</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Call``1(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            Emits instructions to call a method by name on type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="name">name of the method to call</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Call``1(System.Reflection.Emit.ILGenerator,System.String,System.Reflection.BindingFlags)">
            <summary>
            Emits instructions to call a method by name on type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="name">name of the method to call</param>
            <param name="bindingAttr">method binding flags used to lookup the method</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Call``1(System.Reflection.Emit.ILGenerator,System.String,System.Type[])">
            <summary>
            Emits instructions to call a method by name on type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="name">name of the method to call</param>
            <param name="types">parameters that differentiate the method to call</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Call``1(System.Reflection.Emit.ILGenerator,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            Emits instructions to call a method by name on type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="name">name of the method to call</param>
            <param name="bindingAttr">method binding flags used to lookup the method</param>
            <param name="types">parameters that differentiate the method to call</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            Calls the constructor indicated by the constructor descriptor.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="ctor">ConstructorInfo for the constructor to call.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CallIndirectManaged(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <summary>
            Calls the method indicated on the evaluation stack (as a pointer to an entry point).
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="method">MethodInfo for the method to call.</param>
            <param name="callingConventions">The managed calling conventions to be used.</param>
            <param name="returnType">The return type of the method if it returns a result; otherwise null.</param>
            <param name="parameterTypes">The types of parameters for the call.</param>
            <param name="optionalParameterTypes">The types of optional parameters for the call if the method accepts optional parameters; otherwise null.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CallIndirectUnanaged(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
            <summary>
            Calls the method indicated on the evaluation stack (as a pointer to an entry point).
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="method">MethodInfo for the method to call.</param>
            <param name="callingConventions">The unmanaged calling conventions to be used.</param>
            <param name="returnType">The return type of the method if it returns a result; otherwise null.</param>
            <param name="parameterTypes">The types of parameters for the call.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CallVarArgs(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls the varargs method indicated by the method descriptor.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="method">MethodInfo for the method to call.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method; otherwise null.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CallVarArgsVirtual(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls a late-bound method on an object, pushing the result object onto the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="method">MethodInfo for the method to call.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method; otherwise null.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CallVirtual(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Calls a late-bound method on an object, pushing the result object onto the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="method">MethodInfo for the method to call.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CallVirtual``1(System.Reflection.Emit.ILGenerator,System.String)">
            /// <summary>
            Emits instructions to call a virtual method by name on type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="name">the target method's name</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CallVirtual``1(System.Reflection.Emit.ILGenerator,System.String,System.Type[])">
            /// <summary>
            Emits instructions to call a virtual method by name on type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="name">the target method's name</param>
            <param name="parameterTypes">parameters that differentiate the method to call</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CallVirtual``1(System.Reflection.Emit.ILGenerator,System.String,System.Reflection.BindingFlags,System.Type[])">
            /// <summary>
            Emits instructions to call a virtual method by name on type T.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="name">the target method's name</param>
            <param name="binding">binding flags used to lookup the method</param>
            <param name="parameterTypes">parameters that differentiate the method to call</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CastClass(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Casts to the target type.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="targetType">the target type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CheckFinite(System.Reflection.Emit.ILGenerator)">
            <summary>
            Throws a System.ArithmeticException if the value on the stack is not a finite number.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CompareEqual(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two values on the stack and if they are equal, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CompareEquality(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Compares the values on the stack for equality.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="type">the values' type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CompareEquality(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
            <summary>
            Compares the two values on top of the stack for inequality.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="type">the values' type</param>
            <param name="lookingForInequality">indicates whether inequality is desired; reverses the logic</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CompareEquality(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.ILGenerator},System.Type,System.Boolean)">
            <summary>
            Compares the two values placed on the stack via callback methods for equality.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="loadLeftOperand">action that pushes the left hand operand onto the stack</param>
            <param name="loadRightOperand">action that pushes the right hand operand onto the stack</param>
            <param name="type">the values' type</param>
            <param name="lookingForInequality">indicates whether inequality is desired; reverses the logic</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadDefaultValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Loads the default value for a type; similar to C#'s default keyword.
            </summary>
            <param name="il"></param>
            <param name="type"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CompareGreaterThan(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two values on the stack and if the first value is greater than the second, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CompareGreaterThan_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two values on the stack and if the first value is greater than the second, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CompareLessThan(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two values on the stack and if the first value is less than the second, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CompareLessThan_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Compares two values on the stack and if the first value is less than the second, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Constrained(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits the constrained op code.
            </summary>
            <param name="il"></param>
            <param name="t"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToFloat32(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to a float32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToFloat32WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to a float32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToFloat64(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to a float64.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt16(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an int16 and pads it to an int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt16WithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an int16 and pads it to an int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt16WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an int16 and pads it to an int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt32(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt32WithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt32WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt64(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an int64.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt64WithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an int64.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt64WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an int64.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an int8 and pads it to an int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt8WithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an int8 and pads it to an int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToInt8WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an int8 and pads it to an int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToNaturalInt(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to a natural int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToNaturalIntWithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to a natural int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToNaturalIntWithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to a natural int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUInt16(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an unsigned int16 and pads it to an int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUInt32(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an unsigned int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUInt64(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an unsigned int64.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUInt8(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to an unsigned int8 and pads it to an int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedInt16WithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the signed value on the top of the stack to a unsigned int16 and pads it to an int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedInt16WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an unsigned int16 and pads it to int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedInt32WithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the signed value on the top of the stack to a unsigned int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedInt32WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an unsigned int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedInt64WithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the signed value on the top of the stack to a unsigned int64.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedInt64WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an unsigned int64.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedInt8WithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the signed value on the top of the stack to a unsigned int8 and pads it to an int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedInt8WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an unsigned int8 and pads it to int32.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedNaturalInt(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the value on the top of the stack to a unsigned natural int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedNaturalIntWithOverflow(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the signed value on the top of the stack to a natural unsigned int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.ConvertToUnsignedNaturalIntWithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Converts the unsigned value on the top of the stack to an unsigned natural int.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CopyBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            Copies a specified number of bytes from a source address to a destination address.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.CopyObject(System.Reflection.Emit.ILGenerator)">
            <summary>
            Copies the value type located at an address to another address (type &amp;, *, or natural int).
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.DeclareLocal(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="localType">the local's type</param>
            <returns>a local builder</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.DeclareLocal(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="localType">the local's type</param>
            <param name="pinned">indicates whether the local should be pinned</param>
            <returns>a local builder</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.DefineAndMarkLabel(System.Reflection.Emit.ILGenerator)">
            <summary>
            Defines and marks a label.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <returns>returns the label</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.DefineLabel(System.Reflection.Emit.ILGenerator)">
            <summary>
            Defines a label.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <returns>returns the label</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Divide(System.Reflection.Emit.ILGenerator)">
            <summary>
            Divides two values and pushes the result as a floating-point or quotient onto the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Divide_Unsigned(System.Reflection.Emit.ILGenerator)">
            <summary>
            Divides two unsigned integer values and pushes the result (int32) onto the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Duplicate(System.Reflection.Emit.ILGenerator)">
            <summary>
            Copies the topmost value on the evaluation stack and pushes the copy onto the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.EndFilter(System.Reflection.Emit.ILGenerator)">
            <summary>
            Transfers control back from the filter clause of an exception block back to the CLI exception handler.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.EndFinally(System.Reflection.Emit.ILGenerator)">
            <summary>
            Transfers control back from the fault or finally clause of an exception block back to the CLI exception handler.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.EndScope(System.Reflection.Emit.ILGenerator)">
            <summary>
            Ends a scope.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.InitObject(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="type">the type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.IsInstance(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits an instruction to test whether an object reference
            (type O) is an instance of a particular class.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="type">the type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits instructions to load an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="il">an ILGenerator where instructions are emitted</param>
            <param name="index">the arg's index</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadElementRef(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArg_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArg_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArg_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArg_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArg_ShortForm(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="a"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArgAddress(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="a"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArgAddress(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.EmittedParameter)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArgAddress_ShortForm(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="a"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadArgAddress_ShortForm(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.EmittedParameter)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadField(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.IFieldRef)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="field"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="field"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadFieldAddress(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="field"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadFieldAddress(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.EmittedField)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="field"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="local"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocal(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="lcl"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocalAddress(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="local"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocalAddress(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="lcl"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocalAddressShort(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="local"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocalAddressShort(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="lcl"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocal_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocal_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocal_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadLocal_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadNull(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadObjectRef(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadProperty(System.Reflection.Emit.ILGenerator,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="p"></param>
            <param name="nonPublic"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadToken(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="type"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="type"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Boolean)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Int64)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Single)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Double)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Decimal)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.IValueRef)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Object)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="a"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_4(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_5(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_6(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_7(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_8(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_M1(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Load_I4_ShortForm(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="a"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.MarkLabel(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="lbl"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Multiply(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Xor(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.New``1(System.Reflection.Emit.ILGenerator,System.Reflection.BindingFlags,System.Type[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="il"></param>
            <param name="bindingAttr"></param>
            <param name="types"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.New``1(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="il"></param>
            <param name="types"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.NewObj(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="ctor"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Nop(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Pop(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreElement(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="local"></param>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreElement(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreElementRef(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="field"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreField(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.IFieldRef)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="field"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="local"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreLocal(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="localIndex"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreLocalShortForm(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="lcl"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreArg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Emits IL to store a parameter's value.
            </summary>
            <param name="il"></param>
            <param name="index">the parameter's index</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreLocal_0(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreLocal_1(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreLocal_2(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreLocal_3(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreProperty(System.Reflection.Emit.ILGenerator,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="p"></param>
            <param name="nonPublic"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.StoreValue(System.Reflection.Emit.ILGenerator,NetSteps.Encore.Core.Reflection.Emit.IValueRef)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Subtract(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Switch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label[])">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="cases"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Throw(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.Throw(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="exception"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.UnboxAny(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="type"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BeginExceptionBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BeginFinallyBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.EndExceptionBlock(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.NewArr(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="type"></param>
            <param name="elmCount"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.ILGeneratorExtensions.BeginCatchBlock(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="exceptionType"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssemblies">
            <summary>
            Utility class for emitting assemblies and tracking those assemblies so
            that type resolution works for the emitted types.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssemblies.PrepareTypeName(System.Type,System.String)">
            <summary>
            Prepares a type name.
            </summary>
            <param name="type"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssemblies.GetEmittableFullName(System.Type)">
            <summary>
            Generates an emittable full name for a type by name mangling.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssemblies.GetEmittedAssembly(System.String)">
            <summary>
            Gets an emitted assembly by name.
            </summary>
            <param name="name">the assembly's name</param>
            <returns>the assembly if it exists; otherwise null</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssemblies.GetEmittedAssemblyWithEmitWhenNotFound(System.Reflection.AssemblyName,System.Action{NetSteps.Encore.Core.Reflection.Emit.EmittedAssembly})">
            <summary>
            Gets an emitted assembly by name; if it doesn't exist usess the emitter callback to 
            generate it.
            </summary>
            <param name="name">the assembly's name</param>
            <param name="emitter">a callback method that will emit the assembly</param>
            <returns>the assembly</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssemblies.MakeEmittedAssemblyNameFromAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Creates an emitted assembly based on information taken from the target assembly.
            </summary>
            <param name="nameFormat">used to format the emitted assembly's name</param>
            <param name="target">the target assembly</param>
            <returns>an assembly name</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssemblies.DynamicAssembly">
            <summary>
            Gets the dynamic assembly.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssemblies.WriteDynamicAssemblyOnExit">
            <summary>
            Indicates whether the dynamic assembly should be writen to disk upon exit.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssembliesConfigSection">
            <summary>
            Configuration section for cache settings.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssembliesConfigSection.SectionName">
            <summary>
            Configuration section name for cache settings
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssembliesConfigSection.DynamicAssemblyPrefix">
            <summary>
            Prefix for the emitted assembly.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssembliesConfigSection.WriteAssembliesOnExit">
            <summary>
            Indicates whether emitted assemblies should be written to disk on exit.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.RuntimeAssembliesConfigSection.Current">
            <summary>
            Gets the current configuration section.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.TypeRef">
            <summary>
            A wrapper object for a type reference.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Reflection.Emit.TypeRef.Empty">
            <summary>
            An empty type ref.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.TypeRef.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="type">the type that is referenced</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.TypeRef.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.TypeRef.FromType``1">
            <summary>
            Creates a type ref from type T
            </summary>
            <typeparam name="T">type T</typeparam>
            <returns>a type ref</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.TypeRef.FromType(System.Type)">
            <summary>
            Creates a type ref from a type.
            </summary>
            <param name="type">the type</param>
            <returns>the type ref</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.TypeRef.FromEmittedClass(NetSteps.Encore.Core.Reflection.Emit.EmittedClass)">
            <summary>
            Creates a type ref from an emitted type (possibly before compilation).
            </summary>
            <param name="class">the emitted type</param>
            <returns>a type ref</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.TypeRef.Target">
            <summary>
            Gets the reference target.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Emit.EmittedTypeRef">
            <summary>
            A specialized TypeRef for emitted types.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Emit.EmittedTypeRef.#ctor(NetSteps.Encore.Core.Reflection.Emit.EmittedClass)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="eclass">the emitted type</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Reflection.Emit.EmittedTypeRef.Target">
            <summary>
            Gets the referenced type.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.Extensions">
            <summary>
            Extension methods for System.Type.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetReadableFullName(System.Type)">
            <summary>
            Gets a readable full name. Since this method uses reflection it should be used
            rarely. It was created to supply simpler type names when constructing error messages.
            </summary>
            <param name="type">The type.</param>
            <returns>A readable name such as My.Namespace.MyType&lt;string, int></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetReadableSimpleName(System.Type)">
            <summary>
            Gets a readable simple name for a type.
            </summary>
            <param name="type">the type</param>
            <returns>A readable name such as MyType&lt;string, int></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.IsNumber(System.Type)">
            <summary>
            Determines if a type is a number.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.IsAnonymousType(System.Type)">
            <summary>
            Determines if the privided type is an anonymous type.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            Adapted from answers found here:
            http://stackoverflow.com/questions/1650681/determining-whether-a-type-is-an-anonymous-type
            </remarks>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetTypeHierarchyInDeclarationOrder(System.Type)">
            <summary>
            Gets the type hierarchy in declaration (depth-first, inheritance) order.
            </summary>
            <param name="type">the type</param>
            <returns>type hierarchy in declaration (depth-first, inheritance) order</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetReadWriteProperties(System.Type)">
            <summary>
            Using reflection, gets the type's properties that are both read and write.
            </summary>
            <param name="type">the type</param>
            <returns>the properties</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetReadableProperties(System.Type)">
            <summary>
            Using reflection, gets the type's properties that can be read.
            </summary>
            <param name="type">the type</param>
            <returns>the properties</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetReadableProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Using reflection, gets the type's properties that can be read.
            </summary>
            <param name="type">the type</param>
            <param name="binding">binding flags</param>
            <returns>the properties</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetReadableProperty(System.Type,System.String)">
            <summary>
            Using reflection, gets a readable property by name.
            </summary>
            <param name="propertyName">the property name</param>
            <param name="type">the type</param>
            <returns>a property or null</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetReadablePropertiesFromHierarchy(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Using reflection, gets readable properties for the type and all of its base classes, interfaces.
            </summary>
            <param name="type">the type</param>
            <param name="binding">binding flags</param>
            <returns>writable properties</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetReadablePropertyWithAssignmentCompatablity(System.Type,System.String,System.Reflection.BindingFlags,System.Type)">
            <summary>
            Using reflection, gets a readable property by name and assignability.
            </summary>
            <param name="type">the type</param>
            <param name="propertyName">the property name</param>
            <param name="binding">binding flags</param>
            <param name="assignableFromType">a type used to test assignability</param>
            <returns>a property or null</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetWritablePropertyWithAssignmentCompatablity(System.Type,System.String,System.Reflection.BindingFlags,System.Type)">
            <summary>
            Using reflection, gets a writable property by name and assignability.
            </summary>
            <param name="type">the type</param>
            <param name="propertyName">the property name</param>
            <param name="binding">binding flags</param>
            <param name="assignableFromType">a type used to test assignability</param>
            <returns>a property or null</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetWritablePropertyWithAssignmentCompatablityFromHierarchy(System.Type,System.String,System.Reflection.BindingFlags,System.Type)">
            <summary>
            Using reflection, gets a writable property by name and assignability.
            </summary>
            <param name="type">the type</param>
            <param name="propertyName">the property name</param>
            <param name="binding">binding flags</param>
            <param name="assignableFromType">a type used to test assignability</param>
            <returns>a property or null</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetWritableProperties(System.Type)">
            <summary>
            Using reflection, gets writable properties.
            </summary>
            <param name="type">the type</param>
            <returns>writable properties</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetWritableProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Using reflection, gets writable properties.
            </summary>
            <param name="type">the type</param>
            <param name="binding">binding flags</param>
            <returns>writable properties</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetWritablePropertiesFromHierarchy(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Using reflection, gets writable properties for the type and all of its base classes, interfaces.
            </summary>
            <param name="type">the type</param>
            <param name="binding">binding flags</param>
            <returns>writable properties</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetWriteableProperty(System.Type,System.String)">
            <summary>
            Using reflection, gets a writable property by name.
            </summary>
            <param name="type">the type</param>
            <param name="propertyName">the property name</param>
            <returns>a property or null</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetGenericMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Int32,System.Int32)">
            <summary>
            Using reflection, gets a generic method from the target type.
            </summary>
            <param name="type">the target type</param>
            <param name="name">the property name</param>
            <param name="binding">binding flags</param>
            <param name="parameterCount">number of parameters on the target method</param>
            <param name="genericArgumentCount">number of generic arguments on the target method</param>
            <returns>a property or null</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.GetGenericMethod(System.Type,System.String,System.Int32,System.Int32)">
            <summary>
            Using reflection, gets a generic method from the target type.
            </summary>
            <param name="type">the target type</param>
            <param name="name">the property name</param>
            <param name="parameterCount">number of parameters on the target method</param>
            <param name="genericArgumentCount">number of generic arguments on the target method</param>
            <returns>a property or null</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.IsTypeofGenericTypeDefinition(System.Type,System.Type)">
            <summary>
            Determins if the target type is an implementation of the given generic definition.
            </summary>
            <param name="type">the target type</param>
            <param name="generic">the generic definition</param>
            <returns>true if the target is an implementation of the generic definition</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.FindEnumerableElementType(System.Type)">
            <summary>
            If the type is IEnumerable&lt;>, gets the element type (typeof(T)).
            </summary>
            <param name="type">the type</param>
            <returns>type T of the IEnumerable&lt;T> if the given type is enumerable; otherwise <em>null</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.FindElementType(System.Type)">
            <summary>
            Given a type, finds the type's element type.
            </summary>
            <param name="type">the type</param>
            <returns>the type's element type</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.EqualsOrItemsEqual``1(``0[],``0[])">
            <summary>
            Determines if the arrays are equal or if the items in two different arrays
            are equal.
            </summary>
            <typeparam name="T">Item type T</typeparam>
            <param name="lhs">Left-hand comparand</param>
            <param name="rhs">Right-hand comparand</param>
            <returns><b>true</b> if the arrays are equal or if the items in the arrays are equal.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.Extensions.FormatForLogging(System.Exception,System.Boolean)">
            <summary>
            Formats an exception for output into the log.
            </summary>
            <param name="ex">the exception</param>
            <param name="exposeStackTrace">indicates whether stack trace should be exposed in the output</param>
            <returns>a string representation of the exception</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.MemberInfoExtensions">
            <summary>
            Contains extension methods for the MemberInfo.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.MemberInfoExtensions.GetTypeOfValue(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of a member's value.
            </summary>
            <param name="member">the member</param>
            <returns>the type</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.MethodInfoExtensions">
            <summary>
            Contains extension methods for the MethodInfo and MethodBase types.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.MethodInfoExtensions.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            Gets the parameter types for a method.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.ParameterHelper">
            <summary>
            Helper class for working with parameters in the IL stream. These helpers make it easier
            to deal with method parameters and parameter info, including generics.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.ParameterHelper.SetUpParameters(System.Type[],System.Reflection.ParameterInfo[],System.Reflection.Emit.MethodBuilder)">
            <summary>
            Defines parameters on the given method builder according to the parameter types and info given.
            </summary>
            <param name="parameterTypes">array of parameter types</param>
            <param name="parameters">additional array of parameter info</param>
            <param name="method">the method builder on which to define the parameters</param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.ParameterHelper.GetParameterTypes(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            Extracts a parameter list from a method.
            </summary>
            <param name="method">the method</param>
            <param name="parameters">additional parameter info</param>
            <returns>a parameter list</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.ParameterHelper.SetUpParameterConstraints(System.Type[],System.Reflection.Emit.GenericTypeParameterBuilder[])">
            <summary>
            Set up parameter constraints.
            </summary>
            <param name="parameterTypes"></param>
            <param name="genericTypeParameterBuilders"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.ParameterHelper.ParameterCount(System.Reflection.MethodInfo)">
            <summary>
            Gets the parameter count.
            </summary>
            <param name="method">The method info.</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Reflection.PropertyInfoExtensions">
            <summary>
            Various PropertyInfo extensions.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Reflection.PropertyInfoExtensions.FormatBackingFieldName(System.Reflection.MemberInfo)">
            <summary>
            Produces a backing field name for the given member
            </summary>
            <param name="member">the member</param>
            <returns>returns a backing field name</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.DelegatedJsonRepresentation`2">
            <summary>
            Delegated JSON representation transform.
            </summary>
            <typeparam name="T">delegated target type T</typeparam>
            <typeparam name="C">target type C</typeparam>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.DelegatedRepresentation`3">
            <summary>
            Delegated representation transform. Transforms target type T into representation R, and upon
            restore, restores type C.
            
            </summary>
            <typeparam name="T">delegated target type T</typeparam>
            <typeparam name="C">target type C</typeparam>
            <typeparam name="R">representation type R</typeparam>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.IRepresentation`2">
            <summary>
            Transforms source item into an alternate representation.
            </summary>
            <typeparam name="T">item type T</typeparam>
            <typeparam name="R">representation type R</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.IRepresentation`2.TransformItem(`0)">
            <summary>
            Produces representation type R from an item.
            </summary>
            <param name="item">the item</param>
            <returns>a representation of the item</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.IRepresentation`2.RestoreItem(`1)">
            <summary>
            Restores an item from a representation
            </summary>
            <param name="representation">the representation</param>
            <returns>the restored item</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.DelegatedRepresentation`3.#ctor(NetSteps.Encore.Core.Representation.IRepresentation{`1,`2})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="transform">delegate target transform for type C to R</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.DelegatedRepresentation`3.TransformItem(`0)">
            <summary>
            Produces representation type R from an item.
            </summary>
            <param name="item">the item</param>
            <returns>a representation of the item</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.DelegatedRepresentation`3.RestoreItem(`2)">
            <summary>
            Restores an item from a representation
            </summary>
            <param name="representation">the representation</param>
            <returns>the restored item</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.IJsonRepresentation`1">
            <summary>
            Transforms source item into a it's JSON representation
            </summary>
            <typeparam name="T">item type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.DelegatedJsonRepresentation`2.#ctor(System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="strict">Inidcates whether the JSON transorm should be strict</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.DelegatedJsonRepresentationLoose`2">
            <summary>
            Delegated loose JSON representation transform.
            </summary>
            <typeparam name="T">delegated target type T</typeparam>
            <typeparam name="C">target type C</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.DelegatedJsonRepresentationLoose`2.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.DelegatedJsonRepresentationStrict`2">
            <summary>
            Delegated  strict JSON representation transform.
            </summary>
            <typeparam name="T">delegated target type T</typeparam>
            <typeparam name="C">target type C</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.DelegatedJsonRepresentationStrict`2.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.JsonRepresentation`1">
            <summary>
            Transforms source item into a it's JSON representation
            </summary>
            <typeparam name="T">item type T</typeparam>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.RepresentationBase`2">
            <summary>
            Abstract implementation.
            </summary>
            <typeparam name="T">item type T</typeparam>
            <typeparam name="R">representation type R</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.RepresentationBase`2.TransformItem(`0)">
            <summary>
            Produces representation type R from an item.
            </summary>
            <param name="item">the item</param>
            <returns>a representation of the item</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.RepresentationBase`2.RestoreItem(`1)">
            <summary>
            Restores an item from a representation
            </summary>
            <param name="representation">the representation</param>
            <returns>the restored item</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.JsonRepresentation`1.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new instance with serializer settings given.
            </summary>
            <param name="settings">serializer settings</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.JsonRepresentation`1.TransformItem(`0)">
            <summary>
            Produces a JSON representation from an item.
            </summary>
            <param name="item">the item</param>
            <returns>JSON representation of the item</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.JsonRepresentation`1.RestoreItem(System.String)">
            <summary>
            Restores an item from it's JSON representation
            </summary>
            <param name="json">the item's JSON representation</param>
            <returns>the restored item</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.JsonTransformLoose`1">
            <summary>
            Transforms an items into a JSON representation, ignoring missing members.
            </summary>
            <typeparam name="T">item type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.JsonTransformLoose`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Representation.JsonTransformStrict`1">
            <summary>
            Transforms an items into a JSON representation, erroring on missing members.
            </summary>
            <typeparam name="T">item type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Representation.JsonTransformStrict`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Status`1">
            <summary>
            Utility structure for performing and tracking threadsafe state transitions.
            </summary>
            <typeparam name="E">State type E (should be an enum)</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.#ctor(`0)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="initialState">Initial state</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.IsGreaterThan(`0)">
            <summary>
            Determines if the current state is greater than the comparand.
            </summary>
            <param name="comparand">comparand</param>
            <returns><em>true</em> if the current state is greater than <paramref name="comparand"/>; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.IsLessThan(`0)">
            <summary>
            Determines if the current state is less than the comparand.
            </summary>
            <param name="comparand">comparand</param>
            <returns><em>true</em> if the current state is less than <paramref name="comparand"/>; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.ChangeState(`0)">
            <summary>
            Transitions to the given state.
            </summary>
            <param name="value">the target state</param>
            <returns><em>true</em> if the state was changes as a result of the call; 
            otherwise <em>false</em> (already had the desired state).</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.SetStateIfGreaterThan(`0,`0)">
            <summary>
            Performs a state transition if the current state compares greater than the <paramref name="comparand"/>
            </summary>
            <param name="value">the target state</param>
            <param name="comparand">comparand state</param>
            <returns><em>true</em> if the current state compares greater than <paramref name="comparand"/>; 
            otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.SetStateIfLessThan(`0,`0)">
            <summary>
            Performs a state transition if the current state compares less than the <paramref name="comparand"/>
            </summary>
            <param name="value">the target state</param>
            <param name="comparand">comparand state</param>
            <returns><em>true</em> if the current state compares less than <paramref name="comparand"/>; 
            otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.SetStateIfLessThan(`0,`0,System.Action)">
            <summary>
            Performs a state transition if the current state compares less than the <paramref name="comparand"/>
            </summary>
            <param name="value">the target state</param>
            <param name="comparand">comparand state</param>
            <param name="action">An action to be performed if the state transition succeeds</param>
            <returns><em>true</em> if the current state compares less than <paramref name="comparand"/>; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.SpinToggleState(`0,`0)">
            <summary>
            Toggles between the toggle state and the desired state - with
            a spin-wait if necessary.
            </summary>
            <param name="desired">desired state</param>
            <param name="toggle">state from which the desired state can toggle</param>
            <returns><em>true</em> if the state transitions to the desired state from the toggle state; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.SpinWaitForState(`0,System.Action)">
            <summary>
            Performs a spinwait until the current state equals the target state.
            </summary>
            <param name="targetState">the target state</param>
            <param name="loopAction">An action to perform inside the spin cycle</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.TrySpinWaitForState(`0,System.Func{`0,System.Boolean})">
            <summary>
            Performs a spinwait until the current state equals the target state.
            </summary>
            <param name="targetState">the target state</param>
            <param name="loopAction">An action to perform inside the spin cycle; 
            waiting continues until either the target state is reached or the loop
            action returns false.</param>
            <returns><em>true</em> if the target state was reached; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.TryTransition(`0,`0)">
            <summary>
            Tries to transition the state
            </summary>
            <param name="value">the target state</param>
            <param name="comparand">comparand state must match current state</param>
            <returns><em>true</em> if the current state matches <paramref name="comparand"/> and the state is transitioned to <paramref name="value"/>; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.TryTransition(`0,`0[])">
            <summary>
            Tries to transition the state.
            </summary>
            <param name="value">the target state</param>
            <param name="comparand">one or more comparands</param>
            <returns>true if the current state matches one of the comparands and is transitioned to <paramref name="value"/>; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.TryTransition(`0,`0,System.Action)">
            <summary>
            Tries to transition the state. Upon success executes the action given.
            </summary>
            <param name="value">the target state</param>
            <param name="comparand">comparand state must match current state</param>
            <param name="action">action to perform if the state transition is successful</param>
            <returns><em>true</em> if the current state matches <paramref name="comparand"/> and the state is transitioned to <paramref name="value"/>; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.CompareExchange(`0,`0)">
            <summary>
            Compares the current state to the comparand, if they are equal, replaces the current state with the values
            </summary>
            <param name="value">the value</param>
            <param name="comparand">the comparand</param>
            <returns>the status prior</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.HasState(`0)">
            <summary>
            Determines if the current state includes the value given.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.Equals(NetSteps.Encore.Core.Status{`0})">
            <summary>
            Tests whethe the status is equal to another.
            </summary>
            <param name="other">the other</param>
            <returns>true if equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.Equals(System.Object)">
            <summary>
            Tests whether the status is equal to another
            </summary>
            <param name="obj">the other</param>
            <returns>true if equal; otherwise false</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.GetHashCode">
            <summary>
            Gets the hashcode.
            </summary>
            <returns>the hashcode</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.op_Equality(NetSteps.Encore.Core.Status{`0},NetSteps.Encore.Core.Status{`0})">
            <summary>
            Specialized == operator
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are equal</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.op_Inequality(NetSteps.Encore.Core.Status{`0},NetSteps.Encore.Core.Status{`0})">
            <summary>
            Specialized != operator
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are not equal</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.op_Equality(NetSteps.Encore.Core.Status{`0},`0)">
            <summary>
            Specialized == operator
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are equal</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.op_Inequality(NetSteps.Encore.Core.Status{`0},`0)">
            <summary>
            Specialized != operator
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are not equal</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.op_Equality(`0,NetSteps.Encore.Core.Status{`0})">
            <summary>
            Specialized == operator
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are equal</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.op_Inequality(`0,NetSteps.Encore.Core.Status{`0})">
            <summary>
            Specialized != operator
            </summary>
            <param name="lhs">left hand comparand</param>
            <param name="rhs">right hand comparand</param>
            <returns>true if the comparands are not equal</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.ToObject(NetSteps.Encore.Core.Status{`0})">
            <summary>
            Converts Status&lt;E> to E
            </summary>
            <param name="s">the status</param>
            <returns>the equivalent E</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Status`1.ToStatus(`0)">
            <summary>
            Converts E to Status&lt;E>
            </summary>
            <param name="s">the value</param>
            <returns>the equivalent Status&lt;E></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Status`1.CurrentState">
            <summary>
            Accesses the current state.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Stereotype.IStereotypeCommissioner">
            <summary>
            Stereotype commissioners impart stereotype information to the framework.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Stereotype.StereotypeBehaviors">
            <summary>
            Enum of stereotype behaviors.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Stereotype.StereotypeBehaviors.Marker">
            <summary>
            Indicates the stereotype is a marker.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Stereotype.StereotypeBehaviors.AutoImplementedBehavior">
            <summary>
            Indicates the stereotypical behavior is emitted for the marked element.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Stereotype.StereotypeBehaviors.OverridesDisallowed">
            <summary>
            Indicates that overrides have been disallowed for the stereotype.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Stereotype.StereotypeBehaviors.ContributesLogic">
            <summary>
            Indicates the stereotype contributes logic to emitted code.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerBehavior">
            <summary>
            Enum of stereotype behaviors.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerBehavior.Default">
            <summary>
            Default behavior.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerBehavior.EmitsImplementations">
            <summary>
            Indicates the commissioner emits missing implementations.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerBehavior.SupplementsEmittedImplementations">
            <summary>
            Indicates the commissioner supplements emitted implementations.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerBehavior.OverridesDisallowed">
            <summary>
            Indicates that overrides have been disallowed for the stereotype.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerAttribute">
            <summary>
            Marks an interface or implementation as a stereotype commissioner.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">stereotype name</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerAttribute.#ctor(System.String,NetSteps.Encore.Core.Stereotype.StereotypeCommissionerBehavior)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">stereotype name</param>
            <param name="behavior">the commissioner's behavior</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerAttribute.Name">
            <summary>
            Gets the stereotype's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Stereotype.StereotypeCommissionerAttribute.Behavior">
            <summary>
            Indicates the streotype commissioner's behavior.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Util">
            <summary>
            Utility class containing utility functions and extensions.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.GetSHA1Hash(System.String)">
            <summary>
            Gets an SHA1 hashcode for the value given, using the default UTF8 encoding.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.GetSHA1Hash(System.String,System.Text.Encoding)">
            <summary>
            Gets an SHA1 hashcode for the value given.
            </summary>
            <param name="value"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.GetSHA1HashAndConvertToBase64(System.String)">
            <summary>
            Gets an SHA1 hashcode for the value given and converts it to Base64, using the default UTF8 encoding.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.GetSHA1HashAndConvertToBase64(System.String,System.Text.Encoding)">
            <summary>
            Gets an SHA1 hashcode for the value given and converts it to Base64.
            </summary>
            <param name="value"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.Dispose``1(``0@)">
            <summary>
            Disposes an instance if it is disposable and sets the reference variable to null.
            </summary>
            <typeparam name="T">typeof item T</typeparam>
            <param name="item">reference to an item to be disposed.</param>
            <returns><em>true</em> if the item is disposed as a result of the call; otherwise <em>false</em>.</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.MakeReliableLockFromString(System.String)">
            <summary>
            Interns a string if it is not already interned.
            </summary>
            <param name="value">the target string</param>
            <returns>the value string interned</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.InternIt(System.String)">
            <summary>
            Interns a string if it is not already interned.
            </summary>
            <param name="value">the target string</param>
            <returns>the value string interned</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.GetLockForType(System.Type)">
            <summary>
            Gets a lock for a type suitable for synchronizing activity on the type
            without blocking other activity in the VM.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.GetKeyForType(System.Type)">
            <summary>
            Gets a key for a type suitable for representing the type as a hashtable
            or dictionary key without pinning the type and its assembly into memory.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.GetLockForAssembly(System.Reflection.Assembly)">
            <summary>
            Gets a lock for an assembly suitable for synchronizing activity on the 
            assembly without blocking other activity in the VM.
            </summary>
            <param name="assembly">the assembly</param>
            <returns>an object suitable for locking activity against the assembly</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.GetKeyForAssembly(System.Reflection.Assembly)">
            <summary>
            Gets a key for an assembly suitable for representing the assembly as a hashtable
            or dictionary key without pinning the assembly into memory.
            </summary>
            <param name="assembly">the assembly</param>
            <returns>a key for an assembly</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.LazyInitializeWithLock``1(``0@,System.Object)">
            <summary>
            Initializes a referenced variable if it is not already initialized.
            </summary>
            <typeparam name="T">variable type T</typeparam>
            <param name="variable">reference to the variable being initialized</param>
            <param name="lck">an object used as a lock if initialization is necessary</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.LazyInitializeWithLock``1(``0@,System.Object,System.Func{``0})">
            <summary>
            Initializes a referenced variable if it is not already initialized. Uses
            the <paramref name="factory"/> to create the instance if necessary.
            </summary>
            <typeparam name="T">variable type T</typeparam>
            <param name="variable">reference to the variable being initialized</param>
            <param name="lck">an object used as a lock if initialization is necessary</param>
            <param name="factory">factory delegate</param>
            <returns>the value of the variable, after the lazy initailize</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.NonBlockingLazyInitializeVolatile``1(``0@,System.Func{``0})">
            <summary>
            Initializes a variable if it doesn't already have a value. This method is
            thread-safe and non-blocking.
            </summary>
            <typeparam name="T">type T</typeparam>
            <param name="value">reference to the value</param>
            <param name="factory">function that creates the instance if it doesn't have a value</param>
            <returns>the instance</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.NonBlockingLazyInitializeVolatile``1(``0@)">
            <summary>
            Initializes a variable if it doesn't already have a value. This method is
            thread-safe and non-blocking.
            </summary>
            <typeparam name="T">type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.VolatileRead``1(``0@)">
            <summary>
            Reads the referenced value after synchronizing all processors.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Util.VolatileWrite``1(``0@,``0)">
            <summary>
            Writes a value to a reference and synchronizing all processors.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reference"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NetSteps.Encore.Core.WeakReference`1">
            <summary>
            Strongly typed weak reference.
            </summary>
            <typeparam name="T">referenced type T</typeparam>
        </member>
        <member name="M:NetSteps.Encore.Core.WeakReference`1.#ctor(`0)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="target">a reference target.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.WeakReference`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance (from serialization)
            </summary>
            <param name="info">serialization info</param>
            <param name="context">serialization context</param>
        </member>
        <member name="P:NetSteps.Encore.Core.WeakReference`1.StrongTarget">
            <summary>
            Gets the referenced target as type T.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.WeakReferenceExtensions">
            <summary>
            Extends the weak reference type.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.WeakReferenceExtensions.TryGetStrongTarget``1(System.WeakReference,``0@)">
            <summary>
            Tries to get the target of the reference.
            </summary>
            <typeparam name="T">type T of the referenced object</typeparam>
            <param name="weakRef">the target reference</param>
            <param name="target">reference to a variable that will recieve the target if successful</param>
            <returns><em>true</em> if the reference is alive and has a valid value of type T; otherwise <em>false</em></returns>
            <exception cref="T:System.InvalidCastException">thrown if the target of the reference cannot be cast to type T</exception>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.AssemblyDependency">
            <summary>
            Structure around a key-value-pair.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.AssemblyDependency.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="assembly">the assembly's name</param>
            <param name="version">the assembly's version</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.AssemblyDependency.Equals(NetSteps.Encore.Core.Wireup.AssemblyDependency)">
            <summary>
            Determines if the pair is equal to another.
            </summary>
            <param name="other">the other</param>
            <returns><em>true</em> if equal; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.AssemblyDependency.Equals(System.Object)">
            <summary>
            Determines if the pair is equal to another object.
            </summary>
            <param name="obj">the other object</param>
            <returns><em>true</em> if equal; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.AssemblyDependency.ToString">
            <summary>
            Converts the pair to a string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.AssemblyDependency.GetHashCode">
            <summary>
            Calculates the pair's hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.AssemblyDependency.op_Equality(NetSteps.Encore.Core.Wireup.AssemblyDependency,NetSteps.Encore.Core.Wireup.AssemblyDependency)">
            <summary>
            Determines if two pairs are equal.
            </summary>
            <param name="lhs">left hand operand</param>
            <param name="rhs">right hand operand</param>
            <returns><em>true</em> if equal; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.AssemblyDependency.op_Inequality(NetSteps.Encore.Core.Wireup.AssemblyDependency,NetSteps.Encore.Core.Wireup.AssemblyDependency)">
            <summary>
            Determines if two pairs are unequal.
            </summary>
            <param name="lhs">left hand operand</param>
            <param name="rhs">right hand operand</param>
            <returns><em>true</em> if unequal; otherwise <em>false</em></returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.AssemblyDependency.Name">
            <summary>
            Gets the assembly's name.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.AssemblyDependency.Version">
            <summary>
            Gets the assembly's version.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.WireupConfigurationElementCollection">
            <summary>
            Configuration element collection for wireup elements.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.WireupConfigurationElementCollection.PerformGetElementKey(NetSteps.Encore.Core.Wireup.WireupConfigurationElement)">
            <summary>
            Gets the element's key
            </summary>
            <param name="element">the element</param>
            <returns>the key</returns>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.WireupConfigurationSection">
            <summary>
            Configuration section for wireup.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.WireupConfigurationSection.TypeName">
            <summary>
            Gets and sets the name of the configuration coordinator type.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.WireupConfigurationSection.HookAssemblyLoad">
            <summary>
            Indicates whether assemblies should be automatically wired up upon assembly load.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.WireupConfigurationSection.WireupAllRunningAssemblies">
            <summary>
            Indicates whether a call to the wireup coordinator's SelfConfigure method should wireup all
            running assemblies.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.WireupConfigurationSection.Assemblies">
            <summary>
            Gets the collection of configured assemblies.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.WireupConfigurationElement">
            <summary>
            Configuration element for wiring up an assembly.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.WireupConfigurationElement.AssemblyName">
            <summary>
            The name of the assembly upon which wireup is performed.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.WireupConfigurationElement.Ordinal">
            <summary>
            The ordinal; indicates the order in which assemblies are registered.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.Constants">
            <summary>
            Contains global constants.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.Constants.RandomPrime">
            <summary>
            Prime seed for hashcodes; I chose this for its bit distribution. ~P
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.IWireupCoordinator">
            <summary>
            Ensures assemblies are wired up according to their declared
            wireup dependencies and that all wireup commands are given
            a chance to run.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.IWireupCoordinator.WireupDependencies(System.Reflection.Assembly)">
            <summary>
            Coordinates the wireup of an assembly.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.IWireupCoordinator.NotifyAssemblyLoaded(System.Reflection.Assembly)">
            <summary>
            Called by the framework when an assembly is loaded.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.IWireupCoordinator.WireupDependency(System.Type)">
            <summary>
            Directly wires up a dependency (if it is not already wired).
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.IWireupCoordinator.ExposeDependenciesFor(System.Reflection.Assembly)">
            <summary>
            Exposes the dependencies an assembly has on other assemblies.
            </summary>
            <param name="assem">the target assembly</param>
            <returns>all known dependencies according to wireup declarations</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.IWireupCoordinator.RegisterObserver(NetSteps.Encore.Core.Wireup.IWireupObserver)">
            <summary>
            Registers an observer.
            </summary>
            <param name="observer"></param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.IWireupCoordinator.UnregisterObserver(System.Guid)">
            <summary>
            Unregisters an observer.
            </summary>
            <param name="observerKey"></param>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.WireupBehaviors">
            <summary>
            Declares wireup behaviors.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupBehaviors.DeclarationsOnly">
            <summary>
            Indicates the wireup coordinator should only use declarations to 
            guide the wireup.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupBehaviors.Discovery">
            <summary>
            Indicates the wireup coordinator should use discovery to guide
            wireup.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.WireupPhase">
            <summary>
            Wireup phases relate to an assembly.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupPhase.Immediate">
            <summary>
            Immediately upon discovery.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupPhase.BeforeDependencies">
            <summary>
            Indicates before dependencies are resolved.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupPhase.Dependencies">
            <summary>
            Indicates as dependencies are resolved.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupPhase.BeforeTasks">
            <summary>
            Indicates before tasks are executed.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupPhase.Tasks">
            <summary>
            Indicates as tasks are executed.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupPhase.BeforeWireup">
            <summary>
            Indicates before wireup.
            </summary>
        </member>
        <member name="F:NetSteps.Encore.Core.Wireup.WireupPhase.AfterWireup">
            <summary>
            Indicates after wireup.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.Meta.WireupAttribute">
            <summary>
            Attribute declaring a wireup command for an assembly.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupAttribute.#ctor(NetSteps.Encore.Core.Wireup.WireupBehaviors)">
            <summary>
            Creates a new WireupAttribute and initializes its behavior.
            </summary>
            <param name="behaviors">the assembly's wireup behavior</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupAttribute.#ctor(System.Type)">
            <summary>
            Creates a new WireupAttribute and initializes the command type.
            </summary>
            <param name="commandType">command type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupAttribute.#ctor(NetSteps.Encore.Core.Wireup.WireupBehaviors,System.Type)">
            <summary>
            Creates a new WireupAttribute and initializes its behavior and command type.
            </summary>
            <param name="behaviors">the assembly's wireup behavior</param>
            <param name="commandType">command type</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupAttribute.#ctor(NetSteps.Encore.Core.Wireup.WireupBehaviors,System.Type[])">
            <summary>
            Creates a new WireupAttribute and initializes its behavior and command types.
            </summary>
            <param name="behaviors">the assembly's wireup behavior</param>
            <param name="commandTypes">command types</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.Meta.WireupAttribute.Behaviors">
            <summary>
            Indicates the assembly's wireup behaviors.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.Meta.WireupAttribute.CommandType">
            <summary>
            The command types to be invoked during wireup.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.Meta.WireupDependencyAttribute">
            <summary>
            Attribute declaring a wireup dependance on another type (a "reliant" type).
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupDependencyAttribute.#ctor(System.Type)">
            <summary>
            Createas a new WireupDependency and initializes it with a type upon which the 
            current element is dependent.
            </summary>
            <param name="target">The type upon which the attribute target is dependent</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.Meta.WireupDependencyAttribute.#ctor(NetSteps.Encore.Core.Wireup.WireupPhase,System.Type)">
            <summary>
            Createas a new WireupDependency and initializes it with a type upon which the 
            current element is dependent.
            </summary>
            <param name="phase">the wireup phase in which the dependency is resolved</param>
            <param name="target">The type upon which the attribute target is dependent</param>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.Meta.WireupDependencyAttribute.Phase">
            <summary>
            Indicates the wireup phase.
            </summary>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.Meta.WireupDependencyAttribute.TargetType">
            <summary>
            The target of the dependency.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Wireup.WireupCoordinator">
            <summary>
            Utility class for coordinating wireup.
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Wireup.WireupCoordinator.SelfConfigure">
            <summary>
            Causes the wireup coordinator to self-configure.
            </summary>
            <returns>the coordinator after it self-configures</returns>
        </member>
        <member name="P:NetSteps.Encore.Core.Wireup.WireupCoordinator.Instance">
            <summary>
            Accesses the singleton IWireupCoordinator instance.
            </summary>
        </member>
        <member name="T:NetSteps.Encore.Core.Xml.XDynamic">
            <summary>
            Static class for creating dynamic objects over XML
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XDynamic.Parse(System.String,System.Boolean)">
            <summary>
            Parses the input text and returns a dynamic object.
            </summary>
            <param name="text">source xml text</param>
            <param name="includeRootObject">whether or not the root object is included in the structure of the resulting dynamic</param>
            <returns>a dynamic object shaped like the input xml</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XDynamic.Parse(System.String)">
            <summary>
            Parses the input text and returns a dynamic object.
            </summary>
            <param name="text">source xml text</param>
            <returns>a dynamic object shaped like the input xml</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XDynamic.ToDynamic(System.Xml.Linq.XElement)">
            <summary>
            Creates an object over the XElement given.
            </summary>
            <param name="elm">the source element</param>
            <returns>an object shaped like the input xml</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XDynamic.AddAttributesToDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.Xml.Linq.XElement)">
            <summary>
            Adds attributes from an element into the dictionary given.
            </summary>
            <param name="expando">target dictionary</param>
            <param name="elm">source element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XDynamic.AddElementsToDictionary(System.Collections.Generic.IDictionary{System.String,System.Object},System.Xml.Linq.XElement)">
            <summary>
            Adds child elements from an element into the dictionary given.
            </summary>
            <param name="expando">target dictionary</param>
            <param name="elm">source element</param>
        </member>
        <member name="T:NetSteps.Encore.Core.Xml.XElementExtensions">
            <summary>
            Extensions for working with XElement and XML
            </summary>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.XmlToDynamic(System.String)">
            <summary>
            Converts a string into a dynamic XML object.
            </summary>
            <param name="text">the source xml</param>
            <returns>a dynamic object shaped according to the input xml</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ToDynamic(System.Xml.Linq.XElement)">
            <summary>
            Converts an XElement into a dynamic XML object.
            </summary>
            <param name="xml">the source xml element</param>
            <returns>a dynamic object shaped according to the input xml</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadBooleanOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadByteOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named byte value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadBytesOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named byte array value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadCharOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named char value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadInt16OrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named Int16 value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadInt32OrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named Int32 value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadInt64OrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named Int64 value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadDecimalOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named decimal value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadDoubleOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named double value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadSingleOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named single value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadSByteOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named SByte value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadUInt16OrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named UInt16 value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadUInt32OrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named UInt32 value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadUInt64OrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named UInt64 value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadGuidOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named Guid value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadStringOrDefault(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a named String value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <returns>the value</returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Boolean@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Boolean@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Boolean@,System.Boolean)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Boolean@,System.Func{System.Boolean})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Byte@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Byte@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Byte@,System.Byte)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Byte@,System.Func{System.Byte})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Char@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Char@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Char@,System.Char)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Char@,System.Func{System.Char})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.DateTime@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.DateTime@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.DateTime@,System.DateTime)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.DateTime@,System.Func{System.DateTime})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Decimal@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Decimal@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Decimal@,System.Decimal)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Decimal@,System.Func{System.Decimal})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Double@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Double@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Double@,System.Double)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Double@,System.Func{System.Double})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Int16@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int16@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int16@,System.Int16)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int16@,System.Func{System.Int16})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Int32@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int32@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int32@,System.Int32)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int32@,System.Func{System.Int32})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Int64@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int64@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int64@,System.Int64)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Int64@,System.Func{System.Int64})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue``1(System.Xml.Linq.XContainer,System.String,``0@)">
            <summary>
            Tries to read a named value from an xml container.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault``1(System.Xml.Linq.XElement,System.String,``0@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault``1(System.Xml.Linq.XElement,System.String,``0@,``0)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault``1(System.Xml.Linq.XElement,System.String,``0@,System.Func{``0})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValueAsEnum``1(System.Xml.Linq.XElement,System.String,``0@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefaultAsEnum``1(System.Xml.Linq.XElement,System.String,``0@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefaultAsEnum``1(System.Xml.Linq.XElement,System.String,``0@,``0)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefaultAsEnum``1(System.Xml.Linq.XElement,System.String,``0@,System.Func{``0})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.SByte@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.SByte@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.SByte@,System.SByte)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.SByte@,System.Func{System.SByte})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.Single@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Single@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Single@,System.Single)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.Single@,System.Func{System.Single})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.String@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.String@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.String@,System.String)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.String@,System.Func{System.String})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.UInt16@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt16@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt16@,System.UInt16)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt16@,System.Func{System.UInt16})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.UInt32@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt32@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt32@,System.UInt32)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt32@,System.Func{System.UInt32})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.TryReadNamedValue(System.Xml.Linq.XElement,System.String,System.UInt64@)">
            <summary>
            Tries to read a named value from an xml element.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success</param>
            <returns><em>true</em> if successful; otherwise <em>false</em></returns>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt64@)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt64@,System.UInt64)">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
        <member name="M:NetSteps.Encore.Core.Xml.XElementExtensions.ReadNamedValueOrDefault(System.Xml.Linq.XElement,System.String,System.UInt64@,System.Func{System.UInt64})">
            <summary>
            Read a named value from an xml element; if the value doesn't exist, value is set to
            the default given.
            </summary>
            <param name="element">element</param>
            <param name="name">name</param>
            <param name="value">reference to a variable that will receive the value upon success.</param>
            <param name="defa">default value used if no value is present on the element</param>
        </member>
    </members>
</doc>

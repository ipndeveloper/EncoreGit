//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [Serializable]
    public partial class KitItemPrice: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void KitItemPriceIDChanged();
    	public int KitItemPriceID
    	{
    		get { return _kitItemPriceID; }
    		set
    		{
    			if (_kitItemPriceID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'KitItemPriceID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_kitItemPriceID = value;
    				KitItemPriceIDChanged();
    				OnPropertyChanged("KitItemPriceID");
    			}
    		}
    	}
    	private int _kitItemPriceID;
    	partial void OrderItemIDChanged();
    	public int OrderItemID
    	{
    		get { return _orderItemID; }
    		set
    		{
    			if (_orderItemID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemID", _orderItemID);
    				_orderItemID = value;
    				OrderItemIDChanged();
    				OnPropertyChanged("OrderItemID");
    			}
    		}
    	}
    	private int _orderItemID;
    	partial void OriginalUnitPriceChanged();
    	public Nullable<decimal> OriginalUnitPrice
    	{
    		get { return _originalUnitPrice; }
    		set
    		{
    			if (_originalUnitPrice != value)
    			{
    				ChangeTracker.RecordOriginalValue("OriginalUnitPrice", _originalUnitPrice);
    				_originalUnitPrice = value;
    				OriginalUnitPriceChanged();
    				OnPropertyChanged("OriginalUnitPrice");
    			}
    		}
    	}
    	private Nullable<decimal> _originalUnitPrice;
    	partial void ProductPriceTypeIDChanged();
    	public int ProductPriceTypeID
    	{
    		get { return _productPriceTypeID; }
    		set
    		{
    			if (_productPriceTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductPriceTypeID", _productPriceTypeID);
    				_productPriceTypeID = value;
    				ProductPriceTypeIDChanged();
    				OnPropertyChanged("ProductPriceTypeID");
    			}
    		}
    	}
    	private int _productPriceTypeID;
    	partial void UnitPriceChanged();
    	public decimal UnitPrice
    	{
    		get { return _unitPrice; }
    		set
    		{
    			if (_unitPrice != value)
    			{
    				ChangeTracker.RecordOriginalValue("UnitPrice", _unitPrice);
    				_unitPrice = value;
    				UnitPriceChanged();
    				OnPropertyChanged("UnitPrice");
    			}
    		}
    	}
    	private decimal _unitPrice;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountDevice))]
    [KnownType(typeof(QueueItemStatus))]
    [KnownType(typeof(DomainEventQueueItem))]
    [Serializable]
    public partial class DeviceNotification: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void DeviceNotificationIDChanged();
    	public int DeviceNotificationID
    	{
    		get { return _deviceNotificationID; }
    		set
    		{
    			if (_deviceNotificationID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'DeviceNotificationID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_deviceNotificationID = value;
    				DeviceNotificationIDChanged();
    				OnPropertyChanged("DeviceNotificationID");
    			}
    		}
    	}
    	private int _deviceNotificationID;
    	partial void AccountDeviceIDChanged();
    	public int AccountDeviceID
    	{
    		get { return _accountDeviceID; }
    		set
    		{
    			if (_accountDeviceID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountDeviceID", _accountDeviceID);
    				if (!IsDeserializing)
    				{
    					if (AccountDevice != null && AccountDevice.AccountDeviceID != value)
    					{
    						AccountDevice = null;
    					}
    				}
    				_accountDeviceID = value;
    				AccountDeviceIDChanged();
    				OnPropertyChanged("AccountDeviceID");
    			}
    		}
    	}
    	private int _accountDeviceID;
    	partial void QueueItemStatusIDChanged();
    	public short QueueItemStatusID
    	{
    		get { return _queueItemStatusID; }
    		set
    		{
    			if (_queueItemStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("QueueItemStatusID", _queueItemStatusID);
    				if (!IsDeserializing)
    				{
    					if (QueueItemStatus != null && QueueItemStatus.QueueItemStatusID != value)
    					{
    						QueueItemStatus = null;
    					}
    				}
    				_queueItemStatusID = value;
    				QueueItemStatusIDChanged();
    				OnPropertyChanged("QueueItemStatusID");
    			}
    		}
    	}
    	private short _queueItemStatusID;
    	partial void BodyChanged();
    	public string Body
    	{
    		get { return _body; }
    		set
    		{
    			if (_body != value)
    			{
    				ChangeTracker.RecordOriginalValue("Body", _body);
    				_body = value;
    				BodyChanged();
    				OnPropertyChanged("Body");
    			}
    		}
    	}
    	private string _body;
    	partial void ResultMessageChanged();
    	public string ResultMessage
    	{
    		get { return _resultMessage; }
    		set
    		{
    			if (_resultMessage != value)
    			{
    				ChangeTracker.RecordOriginalValue("ResultMessage", _resultMessage);
    				_resultMessage = value;
    				ResultMessageChanged();
    				OnPropertyChanged("ResultMessage");
    			}
    		}
    	}
    	private string _resultMessage;
    	partial void DomainEventQueueItemIDChanged();
    	public Nullable<int> DomainEventQueueItemID
    	{
    		get { return _domainEventQueueItemID; }
    		set
    		{
    			if (_domainEventQueueItemID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DomainEventQueueItemID", _domainEventQueueItemID);
    				if (!IsDeserializing)
    				{
    					if (DomainEventQueueItem != null && DomainEventQueueItem.DomainEventQueueItemID != value)
    					{
    						DomainEventQueueItem = null;
    					}
    				}
    				_domainEventQueueItemID = value;
    				DomainEventQueueItemIDChanged();
    				OnPropertyChanged("DomainEventQueueItemID");
    			}
    		}
    	}
    	private Nullable<int> _domainEventQueueItemID;
    	partial void AttemptCountChanged();
    	public byte AttemptCount
    	{
    		get { return _attemptCount; }
    		set
    		{
    			if (_attemptCount != value)
    			{
    				ChangeTracker.RecordOriginalValue("AttemptCount", _attemptCount);
    				_attemptCount = value;
    				AttemptCountChanged();
    				OnPropertyChanged("AttemptCount");
    			}
    		}
    	}
    	private byte _attemptCount;
    	partial void LastRunDateUTCChanged();
    	public Nullable<System.DateTime> LastRunDateUTC
    	{
    		get { return _lastRunDateUTC; }
    		set
    		{
    			if (_lastRunDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastRunDateUTC", _lastRunDateUTC);
    				_lastRunDateUTC = value;
    				LastRunDateUTCChanged();
    				OnPropertyChanged("LastRunDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _lastRunDateUTC;

        #endregion
        #region Navigation Properties
    
    	public AccountDevice AccountDevice
    	{
    		get { return _accountDevice; }
    		set
    		{
    			if (!ReferenceEquals(_accountDevice, value))
    			{
    				var previousValue = _accountDevice;
    				_accountDevice = value;
    				FixupAccountDevice(previousValue);
    				OnNavigationPropertyChanged("AccountDevice");
    			}
    		}
    	}
    	private AccountDevice _accountDevice;
    
    	public QueueItemStatus QueueItemStatus
    	{
    		get { return _queueItemStatus; }
    		set
    		{
    			if (!ReferenceEquals(_queueItemStatus, value))
    			{
    				var previousValue = _queueItemStatus;
    				_queueItemStatus = value;
    				FixupQueueItemStatus(previousValue);
    				OnNavigationPropertyChanged("QueueItemStatus");
    			}
    		}
    	}
    	private QueueItemStatus _queueItemStatus;
    
    	public DomainEventQueueItem DomainEventQueueItem
    	{
    		get { return _domainEventQueueItem; }
    		set
    		{
    			if (!ReferenceEquals(_domainEventQueueItem, value))
    			{
    				var previousValue = _domainEventQueueItem;
    				_domainEventQueueItem = value;
    				FixupDomainEventQueueItem(previousValue);
    				OnNavigationPropertyChanged("DomainEventQueueItem");
    			}
    		}
    	}
    	private DomainEventQueueItem _domainEventQueueItem;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountDevice = null;
    		QueueItemStatus = null;
    		DomainEventQueueItem = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccountDevice(AccountDevice previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.DeviceNotifications.Contains(this))
    		{
    			previousValue.DeviceNotifications.Remove(this);
    		}
    
    		if (AccountDevice != null)
    		{
    			if (!AccountDevice.DeviceNotifications.Contains(this))
    			{
    				AccountDevice.DeviceNotifications.Add(this);
    			}
    
    			AccountDeviceID = AccountDevice.AccountDeviceID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountDevice")
    				&& (ChangeTracker.OriginalValues["AccountDevice"] == AccountDevice))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountDevice");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountDevice", previousValue);
    			}
    			if (AccountDevice != null && !AccountDevice.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountDevice.StartTracking();
    			}
    		}
    	}
    
    	private void FixupQueueItemStatus(QueueItemStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.DeviceNotifications.Contains(this))
    		{
    			previousValue.DeviceNotifications.Remove(this);
    		}
    
    		if (QueueItemStatus != null)
    		{
    			if (!QueueItemStatus.DeviceNotifications.Contains(this))
    			{
    				QueueItemStatus.DeviceNotifications.Add(this);
    			}
    
    			QueueItemStatusID = QueueItemStatus.QueueItemStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("QueueItemStatus")
    				&& (ChangeTracker.OriginalValues["QueueItemStatus"] == QueueItemStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("QueueItemStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("QueueItemStatus", previousValue);
    			}
    			if (QueueItemStatus != null && !QueueItemStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				QueueItemStatus.StartTracking();
    			}
    		}
    	}
    
    	private void FixupDomainEventQueueItem(DomainEventQueueItem previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.DeviceNotifications.Contains(this))
    		{
    			previousValue.DeviceNotifications.Remove(this);
    		}
    
    		if (DomainEventQueueItem != null)
    		{
    			if (!DomainEventQueueItem.DeviceNotifications.Contains(this))
    			{
    				DomainEventQueueItem.DeviceNotifications.Add(this);
    			}
    
    			DomainEventQueueItemID = DomainEventQueueItem.DomainEventQueueItemID;
    		}
    		else if (!skipKeys)
    		{
    			DomainEventQueueItemID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("DomainEventQueueItem")
    				&& (ChangeTracker.OriginalValues["DomainEventQueueItem"] == DomainEventQueueItem))
    			{
    				ChangeTracker.OriginalValues.Remove("DomainEventQueueItem");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("DomainEventQueueItem", previousValue);
    			}
    			if (DomainEventQueueItem != null && !DomainEventQueueItem.ChangeTracker.ChangeTrackingEnabled)
    			{
    				DomainEventQueueItem.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

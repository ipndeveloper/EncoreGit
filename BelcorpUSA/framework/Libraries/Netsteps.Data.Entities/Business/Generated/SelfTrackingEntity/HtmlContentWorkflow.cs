//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(HtmlContentWorkflowType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(HtmlContent))]
    [Serializable]
    public partial class HtmlContentWorkflow: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void HtmlContentWorkflowIDChanged();
    	public int HtmlContentWorkflowID
    	{
    		get { return _htmlContentWorkflowID; }
    		set
    		{
    			if (_htmlContentWorkflowID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'HtmlContentWorkflowID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_htmlContentWorkflowID = value;
    				HtmlContentWorkflowIDChanged();
    				OnPropertyChanged("HtmlContentWorkflowID");
    			}
    		}
    	}
    	private int _htmlContentWorkflowID;
    	partial void HtmlContentIDChanged();
    	public int HtmlContentID
    	{
    		get { return _htmlContentID; }
    		set
    		{
    			if (_htmlContentID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContentID", _htmlContentID);
    				if (!IsDeserializing)
    				{
    					if (HtmlContent != null && HtmlContent.HtmlContentID != value)
    					{
    						HtmlContent = null;
    					}
    				}
    				_htmlContentID = value;
    				HtmlContentIDChanged();
    				OnPropertyChanged("HtmlContentID");
    			}
    		}
    	}
    	private int _htmlContentID;
    	partial void UserIDChanged();
    	public int UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserID", _userID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private int _userID;
    	partial void HtmlContentWorkflowTypeIDChanged();
    	public Nullable<short> HtmlContentWorkflowTypeID
    	{
    		get { return _htmlContentWorkflowTypeID; }
    		set
    		{
    			if (_htmlContentWorkflowTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContentWorkflowTypeID", _htmlContentWorkflowTypeID);
    				if (!IsDeserializing)
    				{
    					if (HtmlContentWorkflowType != null && HtmlContentWorkflowType.HtmlContentWorkflowTypeID != value)
    					{
    						HtmlContentWorkflowType = null;
    					}
    				}
    				_htmlContentWorkflowTypeID = value;
    				HtmlContentWorkflowTypeIDChanged();
    				OnPropertyChanged("HtmlContentWorkflowTypeID");
    			}
    		}
    	}
    	private Nullable<short> _htmlContentWorkflowTypeID;
    	partial void WorkflowDateUTCChanged();
    	public System.DateTime WorkflowDateUTC
    	{
    		get { return _workflowDateUTC; }
    		set
    		{
    			if (_workflowDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("WorkflowDateUTC", _workflowDateUTC);
    				_workflowDateUTC = value;
    				WorkflowDateUTCChanged();
    				OnPropertyChanged("WorkflowDateUTC");
    			}
    		}
    	}
    	private System.DateTime _workflowDateUTC;
    	partial void CommentsChanged();
    	public string Comments
    	{
    		get { return _comments; }
    		set
    		{
    			if (_comments != value)
    			{
    				ChangeTracker.RecordOriginalValue("Comments", _comments);
    				_comments = value;
    				CommentsChanged();
    				OnPropertyChanged("Comments");
    			}
    		}
    	}
    	private string _comments;
    	partial void TitleChanged();
    	public string Title
    	{
    		get { return _title; }
    		set
    		{
    			if (_title != value)
    			{
    				ChangeTracker.RecordOriginalValue("Title", _title);
    				_title = value;
    				TitleChanged();
    				OnPropertyChanged("Title");
    			}
    		}
    	}
    	private string _title;

        #endregion
        #region Navigation Properties
    
    	public HtmlContentWorkflowType HtmlContentWorkflowType
    	{
    		get { return _htmlContentWorkflowType; }
    		set
    		{
    			if (!ReferenceEquals(_htmlContentWorkflowType, value))
    			{
    				var previousValue = _htmlContentWorkflowType;
    				_htmlContentWorkflowType = value;
    				FixupHtmlContentWorkflowType(previousValue);
    				OnNavigationPropertyChanged("HtmlContentWorkflowType");
    			}
    		}
    	}
    	private HtmlContentWorkflowType _htmlContentWorkflowType;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public HtmlContent HtmlContent
    	{
    		get { return _htmlContent; }
    		set
    		{
    			if (!ReferenceEquals(_htmlContent, value))
    			{
    				var previousValue = _htmlContent;
    				_htmlContent = value;
    				FixupHtmlContent(previousValue);
    				OnNavigationPropertyChanged("HtmlContent");
    			}
    		}
    	}
    	private HtmlContent _htmlContent;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		HtmlContentWorkflowType = null;
    		User = null;
    		HtmlContent = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHtmlContentWorkflowType(HtmlContentWorkflowType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlContentWorkflows.Contains(this))
    		{
    			previousValue.HtmlContentWorkflows.Remove(this);
    		}
    
    		if (HtmlContentWorkflowType != null)
    		{
    			if (!HtmlContentWorkflowType.HtmlContentWorkflows.Contains(this))
    			{
    				HtmlContentWorkflowType.HtmlContentWorkflows.Add(this);
    			}
    
    			HtmlContentWorkflowTypeID = HtmlContentWorkflowType.HtmlContentWorkflowTypeID;
    		}
    		else if (!skipKeys)
    		{
    			HtmlContentWorkflowTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlContentWorkflowType")
    				&& (ChangeTracker.OriginalValues["HtmlContentWorkflowType"] == HtmlContentWorkflowType))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlContentWorkflowType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContentWorkflowType", previousValue);
    			}
    			if (HtmlContentWorkflowType != null && !HtmlContentWorkflowType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlContentWorkflowType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlContentWorkflows.Contains(this))
    		{
    			previousValue.HtmlContentWorkflows.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.HtmlContentWorkflows.Contains(this))
    			{
    				User.HtmlContentWorkflows.Add(this);
    			}
    
    			UserID = User.UserID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupHtmlContent(HtmlContent previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlContentWorkflows.Contains(this))
    		{
    			previousValue.HtmlContentWorkflows.Remove(this);
    		}
    
    		if (HtmlContent != null)
    		{
    			if (!HtmlContent.HtmlContentWorkflows.Contains(this))
    			{
    				HtmlContent.HtmlContentWorkflows.Add(this);
    			}
    
    			HtmlContentID = HtmlContent.HtmlContentID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlContent")
    				&& (ChangeTracker.OriginalValues["HtmlContent"] == HtmlContent))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlContent");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContent", previousValue);
    			}
    			if (HtmlContent != null && !HtmlContent.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlContent.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

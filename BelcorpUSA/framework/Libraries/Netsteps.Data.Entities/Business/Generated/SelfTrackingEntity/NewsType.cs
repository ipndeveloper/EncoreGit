//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(News))]
    [KnownType(typeof(User))]
    [KnownType(typeof(NewsTypeLanguageSort))]
    [Serializable]
    public partial class NewsType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void NewsTypeIDChanged();
    	public short NewsTypeID
    	{
    		get { return _newsTypeID; }
    		set
    		{
    			if (_newsTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'NewsTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_newsTypeID = value;
    				NewsTypeIDChanged();
    				OnPropertyChanged("NewsTypeID");
    			}
    		}
    	}
    	private short _newsTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void EditableChanged();
    	public bool Editable
    	{
    		get { return _editable; }
    		set
    		{
    			if (_editable != value)
    			{
    				ChangeTracker.RecordOriginalValue("Editable", _editable);
    				_editable = value;
    				EditableChanged();
    				OnPropertyChanged("Editable");
    			}
    		}
    	}
    	private bool _editable;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<News> News
    	{
    		get
    		{
    			if (_news == null)
    			{
    				_news = new TrackableCollection<News>();
    				_news.CollectionChanged += FixupNews;
    				_news.CollectionChanged += RaiseNewsChanged;
    			}
    			return _news;
    		}
    		set
    		{
    			if (!ReferenceEquals(_news, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_news != null)
    				{
    					_news.CollectionChanged -= FixupNews;
    					_news.CollectionChanged -= RaiseNewsChanged;
    				}
    				_news = value;
    				if (_news != null)
    				{
    					_news.CollectionChanged += FixupNews;
    					_news.CollectionChanged += RaiseNewsChanged;
    				}
    				OnNavigationPropertyChanged("News");
    			}
    		}
    	}
    	private TrackableCollection<News> _news;
    	partial void NewsChanged();
    	private void RaiseNewsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewsChanged();
    	}
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<NewsTypeLanguageSort> NewsTypeLanguageSorts
    	{
    		get
    		{
    			if (_newsTypeLanguageSorts == null)
    			{
    				_newsTypeLanguageSorts = new TrackableCollection<NewsTypeLanguageSort>();
    				_newsTypeLanguageSorts.CollectionChanged += FixupNewsTypeLanguageSorts;
    				_newsTypeLanguageSorts.CollectionChanged += RaiseNewsTypeLanguageSortsChanged;
    			}
    			return _newsTypeLanguageSorts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_newsTypeLanguageSorts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_newsTypeLanguageSorts != null)
    				{
    					_newsTypeLanguageSorts.CollectionChanged -= FixupNewsTypeLanguageSorts;
    					_newsTypeLanguageSorts.CollectionChanged -= RaiseNewsTypeLanguageSortsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Remove the cascade delete event handler for any entities in the current collection.
    					foreach (NewsTypeLanguageSort item in _newsTypeLanguageSorts)
    					{
    						ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    					}
    				}
    				_newsTypeLanguageSorts = value;
    				if (_newsTypeLanguageSorts != null)
    				{
    					_newsTypeLanguageSorts.CollectionChanged += FixupNewsTypeLanguageSorts;
    					_newsTypeLanguageSorts.CollectionChanged += RaiseNewsTypeLanguageSortsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Add the cascade delete event handler for any entities that are already in the new collection.
    					foreach (NewsTypeLanguageSort item in _newsTypeLanguageSorts)
    					{
    						ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    					}
    				}
    				OnNavigationPropertyChanged("NewsTypeLanguageSorts");
    			}
    		}
    	}
    	private TrackableCollection<NewsTypeLanguageSort> _newsTypeLanguageSorts;
    	partial void NewsTypeLanguageSortsChanged();
    	private void RaiseNewsTypeLanguageSortsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewsTypeLanguageSortsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_news != null)
    		{
    			_news.CollectionChanged -= FixupNews;
    			_news.CollectionChanged -= RaiseNewsChanged;
    			_news.CollectionChanged += FixupNews;
    			_news.CollectionChanged += RaiseNewsChanged;
    		}
    		if (_newsTypeLanguageSorts != null)
    		{
    			_newsTypeLanguageSorts.CollectionChanged -= FixupNewsTypeLanguageSorts;
    			_newsTypeLanguageSorts.CollectionChanged -= RaiseNewsTypeLanguageSortsChanged;
    			_newsTypeLanguageSorts.CollectionChanged += FixupNewsTypeLanguageSorts;
    			_newsTypeLanguageSorts.CollectionChanged += RaiseNewsTypeLanguageSortsChanged;
    			// This is the principal end in an association that performs cascade deletes.
    			// Add the cascade delete event handler for any entities that are 
    			// already in the collection.
    			foreach (var item in _newsTypeLanguageSorts)
    			{
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		News.Clear();
    		User = null;
    		NewsTypeLanguageSorts.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.NewsTypes.Contains(this))
    		{
    			previousValue.NewsTypes.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.NewsTypes.Contains(this))
    			{
    				User.NewsTypes.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupNews(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (News item in e.NewItems)
    			{
    				item.NewsType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("News", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (News item in e.OldItems)
    			{
    				if (ReferenceEquals(item.NewsType, this))
    				{
    					item.NewsType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("News", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNewsTypeLanguageSorts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (NewsTypeLanguageSort item in e.NewItems)
    			{
    				item.NewsType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("NewsTypeLanguageSorts", item);
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Update the event listener to refer to the new dependent.
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (NewsTypeLanguageSort item in e.OldItems)
    			{
    				if (ReferenceEquals(item.NewsType, this))
    				{
    					item.NewsType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("NewsTypeLanguageSorts", item);
    					// Delete the dependent end of this identifying association. If the current state is Added,
    					// allow the relationship to be changed without causing the dependent to be deleted.
    					if (item.ChangeTracker.State != ObjectState.Added)
    					{
    						item.MarkAsDeleted();
    					}
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Remove the previous dependent from the event listener.
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    			}
    		}
    	}

        #endregion
    }
}

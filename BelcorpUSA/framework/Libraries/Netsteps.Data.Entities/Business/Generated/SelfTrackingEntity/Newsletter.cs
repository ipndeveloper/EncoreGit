//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Language))]
    [KnownType(typeof(Market))]
    [KnownType(typeof(NewsletterTrackingStatistic))]
    [Serializable]
    public partial class Newsletter: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void NewsletterIDChanged();
    	public int NewsletterID
    	{
    		get { return _newsletterID; }
    		set
    		{
    			if (_newsletterID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'NewsletterID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_newsletterID = value;
    				NewsletterIDChanged();
    				OnPropertyChanged("NewsletterID");
    			}
    		}
    	}
    	private int _newsletterID;
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				if (!IsDeserializing)
    				{
    					if (Market != null && Market.MarketID != value)
    					{
    						Market = null;
    					}
    				}
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;
    	partial void LanguageIDChanged();
    	public int LanguageID
    	{
    		get { return _languageID; }
    		set
    		{
    			if (_languageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("LanguageID", _languageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_languageID = value;
    				LanguageIDChanged();
    				OnPropertyChanged("LanguageID");
    			}
    		}
    	}
    	private int _languageID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void DateSentUTCChanged();
    	public Nullable<System.DateTime> DateSentUTC
    	{
    		get { return _dateSentUTC; }
    		set
    		{
    			if (_dateSentUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateSentUTC", _dateSentUTC);
    				_dateSentUTC = value;
    				DateSentUTCChanged();
    				OnPropertyChanged("DateSentUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateSentUTC;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void ScheduledSendDateUTCChanged();
    	public System.DateTime ScheduledSendDateUTC
    	{
    		get { return _scheduledSendDateUTC; }
    		set
    		{
    			if (_scheduledSendDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ScheduledSendDateUTC", _scheduledSendDateUTC);
    				_scheduledSendDateUTC = value;
    				ScheduledSendDateUTCChanged();
    				OnPropertyChanged("ScheduledSendDateUTC");
    			}
    		}
    	}
    	private System.DateTime _scheduledSendDateUTC;
    	partial void ConsultantEditableUTCChanged();
    	public Nullable<System.DateTime> ConsultantEditableUTC
    	{
    		get { return _consultantEditableUTC; }
    		set
    		{
    			if (_consultantEditableUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ConsultantEditableUTC", _consultantEditableUTC);
    				_consultantEditableUTC = value;
    				ConsultantEditableUTCChanged();
    				OnPropertyChanged("ConsultantEditableUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _consultantEditableUTC;
    	partial void IsProcessingChanged();
    	public bool IsProcessing
    	{
    		get { return _isProcessing; }
    		set
    		{
    			if (_isProcessing != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsProcessing", _isProcessing);
    				_isProcessing = value;
    				IsProcessingChanged();
    				OnPropertyChanged("IsProcessing");
    			}
    		}
    	}
    	private bool _isProcessing;

        #endregion
        #region Navigation Properties
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public Market Market
    	{
    		get { return _market; }
    		set
    		{
    			if (!ReferenceEquals(_market, value))
    			{
    				var previousValue = _market;
    				_market = value;
    				FixupMarket(previousValue);
    				OnNavigationPropertyChanged("Market");
    			}
    		}
    	}
    	private Market _market;
    
    	public TrackableCollection<NewsletterTrackingStatistic> NewsletterTrackingStatistics
    	{
    		get
    		{
    			if (_newsletterTrackingStatistics == null)
    			{
    				_newsletterTrackingStatistics = new TrackableCollection<NewsletterTrackingStatistic>();
    				_newsletterTrackingStatistics.CollectionChanged += FixupNewsletterTrackingStatistics;
    				_newsletterTrackingStatistics.CollectionChanged += RaiseNewsletterTrackingStatisticsChanged;
    			}
    			return _newsletterTrackingStatistics;
    		}
    		set
    		{
    			if (!ReferenceEquals(_newsletterTrackingStatistics, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_newsletterTrackingStatistics != null)
    				{
    					_newsletterTrackingStatistics.CollectionChanged -= FixupNewsletterTrackingStatistics;
    					_newsletterTrackingStatistics.CollectionChanged -= RaiseNewsletterTrackingStatisticsChanged;
    				}
    				_newsletterTrackingStatistics = value;
    				if (_newsletterTrackingStatistics != null)
    				{
    					_newsletterTrackingStatistics.CollectionChanged += FixupNewsletterTrackingStatistics;
    					_newsletterTrackingStatistics.CollectionChanged += RaiseNewsletterTrackingStatisticsChanged;
    				}
    				OnNavigationPropertyChanged("NewsletterTrackingStatistics");
    			}
    		}
    	}
    	private TrackableCollection<NewsletterTrackingStatistic> _newsletterTrackingStatistics;
    	partial void NewsletterTrackingStatisticsChanged();
    	private void RaiseNewsletterTrackingStatisticsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewsletterTrackingStatisticsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_newsletterTrackingStatistics != null)
    		{
    			_newsletterTrackingStatistics.CollectionChanged -= FixupNewsletterTrackingStatistics;
    			_newsletterTrackingStatistics.CollectionChanged -= RaiseNewsletterTrackingStatisticsChanged;
    			_newsletterTrackingStatistics.CollectionChanged += FixupNewsletterTrackingStatistics;
    			_newsletterTrackingStatistics.CollectionChanged += RaiseNewsletterTrackingStatisticsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Language = null;
    		Market = null;
    		NewsletterTrackingStatistics.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupLanguage(Language previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Newsletters.Contains(this))
    		{
    			previousValue.Newsletters.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.Newsletters.Contains(this))
    			{
    				Language.Newsletters.Add(this);
    			}
    
    			LanguageID = Language.LanguageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMarket(Market previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Newsletters.Contains(this))
    		{
    			previousValue.Newsletters.Remove(this);
    		}
    
    		if (Market != null)
    		{
    			if (!Market.Newsletters.Contains(this))
    			{
    				Market.Newsletters.Add(this);
    			}
    
    			MarketID = Market.MarketID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Market")
    				&& (ChangeTracker.OriginalValues["Market"] == Market))
    			{
    				ChangeTracker.OriginalValues.Remove("Market");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Market", previousValue);
    			}
    			if (Market != null && !Market.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Market.StartTracking();
    			}
    		}
    	}
    
    	private void FixupNewsletterTrackingStatistics(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (NewsletterTrackingStatistic item in e.NewItems)
    			{
    				item.Newsletter = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("NewsletterTrackingStatistics", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (NewsletterTrackingStatistic item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Newsletter, this))
    				{
    					item.Newsletter = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("NewsletterTrackingStatistics", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

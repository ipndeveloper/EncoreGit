//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Product))]
    [KnownType(typeof(Warehouse))]
    [Serializable]
    public partial class WarehouseProduct: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void WarehouseProductIDChanged();
    	public int WarehouseProductID
    	{
    		get { return _warehouseProductID; }
    		set
    		{
    			if (_warehouseProductID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'WarehouseProductID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_warehouseProductID = value;
    				WarehouseProductIDChanged();
    				OnPropertyChanged("WarehouseProductID");
    			}
    		}
    	}
    	private int _warehouseProductID;
    	partial void WarehouseIDChanged();
    	public int WarehouseID
    	{
    		get { return _warehouseID; }
    		set
    		{
    			if (_warehouseID != value)
    			{
    				ChangeTracker.RecordOriginalValue("WarehouseID", _warehouseID);
    				if (!IsDeserializing)
    				{
    					if (Warehouse != null && Warehouse.WarehouseID != value)
    					{
    						Warehouse = null;
    					}
    				}
    				_warehouseID = value;
    				WarehouseIDChanged();
    				OnPropertyChanged("WarehouseID");
    			}
    		}
    	}
    	private int _warehouseID;
    	partial void ProductIDChanged();
    	public int ProductID
    	{
    		get { return _productID; }
    		set
    		{
    			if (_productID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductID", _productID);
    				if (!IsDeserializing)
    				{
    					if (Product != null && Product.ProductID != value)
    					{
    						Product = null;
    					}
    				}
    				_productID = value;
    				ProductIDChanged();
    				OnPropertyChanged("ProductID");
    			}
    		}
    	}
    	private int _productID;
    	partial void QuantityOnHandChanged();
    	public int QuantityOnHand
    	{
    		get { return _quantityOnHand; }
    		set
    		{
    			if (_quantityOnHand != value)
    			{
    				ChangeTracker.RecordOriginalValue("QuantityOnHand", _quantityOnHand);
    				_quantityOnHand = value;
    				QuantityOnHandChanged();
    				OnPropertyChanged("QuantityOnHand");
    			}
    		}
    	}
    	private int _quantityOnHand;
    	partial void QuantityBufferChanged();
    	public int QuantityBuffer
    	{
    		get { return _quantityBuffer; }
    		set
    		{
    			if (_quantityBuffer != value)
    			{
    				ChangeTracker.RecordOriginalValue("QuantityBuffer", _quantityBuffer);
    				_quantityBuffer = value;
    				QuantityBufferChanged();
    				OnPropertyChanged("QuantityBuffer");
    			}
    		}
    	}
    	private int _quantityBuffer;
    	partial void IsAvailableChanged();
    	public bool IsAvailable
    	{
    		get { return _isAvailable; }
    		set
    		{
    			if (_isAvailable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsAvailable", _isAvailable);
    				_isAvailable = value;
    				IsAvailableChanged();
    				OnPropertyChanged("IsAvailable");
    			}
    		}
    	}
    	private bool _isAvailable;
    	partial void QuantityAllocatedChanged();
    	public int QuantityAllocated
    	{
    		get { return _quantityAllocated; }
    		set
    		{
    			if (_quantityAllocated != value)
    			{
    				ChangeTracker.RecordOriginalValue("QuantityAllocated", _quantityAllocated);
    				_quantityAllocated = value;
    				QuantityAllocatedChanged();
    				OnPropertyChanged("QuantityAllocated");
    			}
    		}
    	}
    	private int _quantityAllocated;
    	partial void ReorderLevelChanged();
    	public int ReorderLevel
    	{
    		get { return _reorderLevel; }
    		set
    		{
    			if (_reorderLevel != value)
    			{
    				ChangeTracker.RecordOriginalValue("ReorderLevel", _reorderLevel);
    				_reorderLevel = value;
    				ReorderLevelChanged();
    				OnPropertyChanged("ReorderLevel");
    			}
    		}
    	}
    	private int _reorderLevel;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public Product Product
    	{
    		get { return _product; }
    		set
    		{
    			if (!ReferenceEquals(_product, value))
    			{
    				var previousValue = _product;
    				_product = value;
    				FixupProduct(previousValue);
    				OnNavigationPropertyChanged("Product");
    			}
    		}
    	}
    	private Product _product;
    
    	public Warehouse Warehouse
    	{
    		get { return _warehouse; }
    		set
    		{
    			if (!ReferenceEquals(_warehouse, value))
    			{
    				var previousValue = _warehouse;
    				_warehouse = value;
    				FixupWarehouse(previousValue);
    				OnNavigationPropertyChanged("Warehouse");
    			}
    		}
    	}
    	private Warehouse _warehouse;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Product = null;
    		Warehouse = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProduct(Product previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.WarehouseProducts.Contains(this))
    		{
    			previousValue.WarehouseProducts.Remove(this);
    		}
    
    		if (Product != null)
    		{
    			if (!Product.WarehouseProducts.Contains(this))
    			{
    				Product.WarehouseProducts.Add(this);
    			}
    
    			ProductID = Product.ProductID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Product")
    				&& (ChangeTracker.OriginalValues["Product"] == Product))
    			{
    				ChangeTracker.OriginalValues.Remove("Product");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Product", previousValue);
    			}
    			if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Product.StartTracking();
    			}
    		}
    	}
    
    	private void FixupWarehouse(Warehouse previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.WarehouseProducts.Contains(this))
    		{
    			previousValue.WarehouseProducts.Remove(this);
    		}
    
    		if (Warehouse != null)
    		{
    			if (!Warehouse.WarehouseProducts.Contains(this))
    			{
    				Warehouse.WarehouseProducts.Add(this);
    			}
    
    			WarehouseID = Warehouse.WarehouseID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Warehouse")
    				&& (ChangeTracker.OriginalValues["Warehouse"] == Warehouse))
    			{
    				ChangeTracker.OriginalValues.Remove("Warehouse");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Warehouse", previousValue);
    			}
    			if (Warehouse != null && !Warehouse.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Warehouse.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

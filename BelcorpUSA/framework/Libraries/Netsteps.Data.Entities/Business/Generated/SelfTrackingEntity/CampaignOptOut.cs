//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(DomainEventType))]
    [KnownType(typeof(OptOutType))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(Campaign))]
    [Serializable]
    public partial class CampaignOptOut: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CampaignOptOutIDChanged();
    	public int CampaignOptOutID
    	{
    		get { return _campaignOptOutID; }
    		set
    		{
    			if (_campaignOptOutID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CampaignOptOutID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_campaignOptOutID = value;
    				CampaignOptOutIDChanged();
    				OnPropertyChanged("CampaignOptOutID");
    			}
    		}
    	}
    	private int _campaignOptOutID;
    	partial void DomainEventTypeIDChanged();
    	public Nullable<short> DomainEventTypeID
    	{
    		get { return _domainEventTypeID; }
    		set
    		{
    			if (_domainEventTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DomainEventTypeID", _domainEventTypeID);
    				if (!IsDeserializing)
    				{
    					if (DomainEventType != null && DomainEventType.DomainEventTypeID != value)
    					{
    						DomainEventType = null;
    					}
    				}
    				_domainEventTypeID = value;
    				DomainEventTypeIDChanged();
    				OnPropertyChanged("DomainEventTypeID");
    			}
    		}
    	}
    	private Nullable<short> _domainEventTypeID;
    	partial void OptOutTypeIDChanged();
    	public Nullable<short> OptOutTypeID
    	{
    		get { return _optOutTypeID; }
    		set
    		{
    			if (_optOutTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OptOutTypeID", _optOutTypeID);
    				if (!IsDeserializing)
    				{
    					if (OptOutType != null && OptOutType.OptOutTypeID != value)
    					{
    						OptOutType = null;
    					}
    				}
    				_optOutTypeID = value;
    				OptOutTypeIDChanged();
    				OnPropertyChanged("OptOutTypeID");
    			}
    		}
    	}
    	private Nullable<short> _optOutTypeID;
    	partial void CampaignIDChanged();
    	public Nullable<int> CampaignID
    	{
    		get { return _campaignID; }
    		set
    		{
    			if (_campaignID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CampaignID", _campaignID);
    				if (!IsDeserializing)
    				{
    					if (Campaign != null && Campaign.CampaignID != value)
    					{
    						Campaign = null;
    					}
    				}
    				_campaignID = value;
    				CampaignIDChanged();
    				OnPropertyChanged("CampaignID");
    			}
    		}
    	}
    	private Nullable<int> _campaignID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void EmailAddressChanged();
    	public string EmailAddress
    	{
    		get { return _emailAddress; }
    		set
    		{
    			if (_emailAddress != value)
    			{
    				ChangeTracker.RecordOriginalValue("EmailAddress", _emailAddress);
    				_emailAddress = value;
    				EmailAddressChanged();
    				OnPropertyChanged("EmailAddress");
    			}
    		}
    	}
    	private string _emailAddress;

        #endregion
        #region Navigation Properties
    
    	public DomainEventType DomainEventType
    	{
    		get { return _domainEventType; }
    		set
    		{
    			if (!ReferenceEquals(_domainEventType, value))
    			{
    				var previousValue = _domainEventType;
    				_domainEventType = value;
    				FixupDomainEventType(previousValue);
    				OnNavigationPropertyChanged("DomainEventType");
    			}
    		}
    	}
    	private DomainEventType _domainEventType;
    
    	public OptOutType OptOutType
    	{
    		get { return _optOutType; }
    		set
    		{
    			if (!ReferenceEquals(_optOutType, value))
    			{
    				var previousValue = _optOutType;
    				_optOutType = value;
    				FixupOptOutType(previousValue);
    				OnNavigationPropertyChanged("OptOutType");
    			}
    		}
    	}
    	private OptOutType _optOutType;
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public Campaign Campaign
    	{
    		get { return _campaign; }
    		set
    		{
    			if (!ReferenceEquals(_campaign, value))
    			{
    				var previousValue = _campaign;
    				_campaign = value;
    				FixupCampaign(previousValue);
    				OnNavigationPropertyChanged("Campaign");
    			}
    		}
    	}
    	private Campaign _campaign;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		DomainEventType = null;
    		OptOutType = null;
    		Account = null;
    		Campaign = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupDomainEventType(DomainEventType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignOptOuts.Contains(this))
    		{
    			previousValue.CampaignOptOuts.Remove(this);
    		}
    
    		if (DomainEventType != null)
    		{
    			if (!DomainEventType.CampaignOptOuts.Contains(this))
    			{
    				DomainEventType.CampaignOptOuts.Add(this);
    			}
    
    			DomainEventTypeID = DomainEventType.DomainEventTypeID;
    		}
    		else if (!skipKeys)
    		{
    			DomainEventTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("DomainEventType")
    				&& (ChangeTracker.OriginalValues["DomainEventType"] == DomainEventType))
    			{
    				ChangeTracker.OriginalValues.Remove("DomainEventType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("DomainEventType", previousValue);
    			}
    			if (DomainEventType != null && !DomainEventType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				DomainEventType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOptOutType(OptOutType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignOptOuts.Contains(this))
    		{
    			previousValue.CampaignOptOuts.Remove(this);
    		}
    
    		if (OptOutType != null)
    		{
    			if (!OptOutType.CampaignOptOuts.Contains(this))
    			{
    				OptOutType.CampaignOptOuts.Add(this);
    			}
    
    			OptOutTypeID = OptOutType.OptOutTypeID;
    		}
    		else if (!skipKeys)
    		{
    			OptOutTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OptOutType")
    				&& (ChangeTracker.OriginalValues["OptOutType"] == OptOutType))
    			{
    				ChangeTracker.OriginalValues.Remove("OptOutType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OptOutType", previousValue);
    			}
    			if (OptOutType != null && !OptOutType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OptOutType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccount(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignOptOuts.Contains(this))
    		{
    			previousValue.CampaignOptOuts.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.CampaignOptOuts.Contains(this))
    			{
    				Account.CampaignOptOuts.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			AccountID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCampaign(Campaign previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignOptOuts.Contains(this))
    		{
    			previousValue.CampaignOptOuts.Remove(this);
    		}
    
    		if (Campaign != null)
    		{
    			if (!Campaign.CampaignOptOuts.Contains(this))
    			{
    				Campaign.CampaignOptOuts.Add(this);
    			}
    
    			CampaignID = Campaign.CampaignID;
    		}
    		else if (!skipKeys)
    		{
    			CampaignID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Campaign")
    				&& (ChangeTracker.OriginalValues["Campaign"] == Campaign))
    			{
    				ChangeTracker.OriginalValues.Remove("Campaign");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Campaign", previousValue);
    			}
    			if (Campaign != null && !Campaign.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Campaign.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

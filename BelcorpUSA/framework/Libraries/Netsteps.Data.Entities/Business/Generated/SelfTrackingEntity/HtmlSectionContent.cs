//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(HtmlSection))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(HtmlContent))]
    [Serializable]
    public partial class HtmlSectionContent: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void HtmlSectionContentIDChanged();
    	public int HtmlSectionContentID
    	{
    		get { return _htmlSectionContentID; }
    		set
    		{
    			if (_htmlSectionContentID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'HtmlSectionContentID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_htmlSectionContentID = value;
    				HtmlSectionContentIDChanged();
    				OnPropertyChanged("HtmlSectionContentID");
    			}
    		}
    	}
    	private int _htmlSectionContentID;
    	partial void HtmlSectionIDChanged();
    	public int HtmlSectionID
    	{
    		get { return _htmlSectionID; }
    		set
    		{
    			if (_htmlSectionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlSectionID", _htmlSectionID);
    				if (!IsDeserializing)
    				{
    					if (HtmlSection != null && HtmlSection.HtmlSectionID != value)
    					{
    						HtmlSection = null;
    					}
    				}
    				_htmlSectionID = value;
    				HtmlSectionIDChanged();
    				OnPropertyChanged("HtmlSectionID");
    			}
    		}
    	}
    	private int _htmlSectionID;
    	partial void HtmlContentIDChanged();
    	public int HtmlContentID
    	{
    		get { return _htmlContentID; }
    		set
    		{
    			if (_htmlContentID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContentID", _htmlContentID);
    				if (!IsDeserializing)
    				{
    					if (HtmlContent != null && HtmlContent.HtmlContentID != value)
    					{
    						HtmlContent = null;
    					}
    				}
    				_htmlContentID = value;
    				HtmlContentIDChanged();
    				OnPropertyChanged("HtmlContentID");
    			}
    		}
    	}
    	private int _htmlContentID;
    	partial void SiteIDChanged();
    	public Nullable<int> SiteID
    	{
    		get { return _siteID; }
    		set
    		{
    			if (_siteID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteID", _siteID);
    				if (!IsDeserializing)
    				{
    					if (Site != null && Site.SiteID != value)
    					{
    						Site = null;
    					}
    				}
    				_siteID = value;
    				SiteIDChanged();
    				OnPropertyChanged("SiteID");
    			}
    		}
    	}
    	private Nullable<int> _siteID;

        #endregion
        #region Navigation Properties
    
    	public HtmlSection HtmlSection
    	{
    		get { return _htmlSection; }
    		set
    		{
    			if (!ReferenceEquals(_htmlSection, value))
    			{
    				var previousValue = _htmlSection;
    				_htmlSection = value;
    				FixupHtmlSection(previousValue);
    				OnNavigationPropertyChanged("HtmlSection");
    			}
    		}
    	}
    	private HtmlSection _htmlSection;
    
    	public Site Site
    	{
    		get { return _site; }
    		set
    		{
    			if (!ReferenceEquals(_site, value))
    			{
    				var previousValue = _site;
    				_site = value;
    				FixupSite(previousValue);
    				OnNavigationPropertyChanged("Site");
    			}
    		}
    	}
    	private Site _site;
    
    	public HtmlContent HtmlContent
    	{
    		get { return _htmlContent; }
    		set
    		{
    			if (!ReferenceEquals(_htmlContent, value))
    			{
    				var previousValue = _htmlContent;
    				_htmlContent = value;
    				FixupHtmlContent(previousValue);
    				OnNavigationPropertyChanged("HtmlContent");
    			}
    		}
    	}
    	private HtmlContent _htmlContent;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		HtmlSection = null;
    		Site = null;
    		HtmlContent = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHtmlSection(HtmlSection previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlSectionContents.Contains(this))
    		{
    			previousValue.HtmlSectionContents.Remove(this);
    		}
    
    		if (HtmlSection != null)
    		{
    			if (!HtmlSection.HtmlSectionContents.Contains(this))
    			{
    				HtmlSection.HtmlSectionContents.Add(this);
    			}
    
    			HtmlSectionID = HtmlSection.HtmlSectionID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlSection")
    				&& (ChangeTracker.OriginalValues["HtmlSection"] == HtmlSection))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlSection");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlSection", previousValue);
    			}
    			if (HtmlSection != null && !HtmlSection.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlSection.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSite(Site previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlSectionContents.Contains(this))
    		{
    			previousValue.HtmlSectionContents.Remove(this);
    		}
    
    		if (Site != null)
    		{
    			if (!Site.HtmlSectionContents.Contains(this))
    			{
    				Site.HtmlSectionContents.Add(this);
    			}
    
    			SiteID = Site.SiteID;
    		}
    		else if (!skipKeys)
    		{
    			SiteID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Site")
    				&& (ChangeTracker.OriginalValues["Site"] == Site))
    			{
    				ChangeTracker.OriginalValues.Remove("Site");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Site", previousValue);
    			}
    			if (Site != null && !Site.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Site.StartTracking();
    			}
    		}
    	}
    
    	private void FixupHtmlContent(HtmlContent previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlSectionContents.Contains(this))
    		{
    			previousValue.HtmlSectionContents.Remove(this);
    		}
    
    		if (HtmlContent != null)
    		{
    			if (!HtmlContent.HtmlSectionContents.Contains(this))
    			{
    				HtmlContent.HtmlSectionContents.Add(this);
    			}
    
    			HtmlContentID = HtmlContent.HtmlContentID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlContent")
    				&& (ChangeTracker.OriginalValues["HtmlContent"] == HtmlContent))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlContent");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContent", previousValue);
    			}
    			if (HtmlContent != null && !HtmlContent.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlContent.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

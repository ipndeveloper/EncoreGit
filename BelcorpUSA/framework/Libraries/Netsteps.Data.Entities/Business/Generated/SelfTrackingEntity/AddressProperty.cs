//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Address))]
    [KnownType(typeof(AddressPropertyType))]
    [Serializable]
    public partial class AddressProperty: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AddressPropertyIDChanged();
    	public int AddressPropertyID
    	{
    		get { return _addressPropertyID; }
    		set
    		{
    			if (_addressPropertyID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AddressPropertyID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_addressPropertyID = value;
    				AddressPropertyIDChanged();
    				OnPropertyChanged("AddressPropertyID");
    			}
    		}
    	}
    	private int _addressPropertyID;
    	partial void AddressIDChanged();
    	public int AddressID
    	{
    		get { return _addressID; }
    		set
    		{
    			if (_addressID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AddressID", _addressID);
    				if (!IsDeserializing)
    				{
    					if (Address != null && Address.AddressID != value)
    					{
    						Address = null;
    					}
    				}
    				_addressID = value;
    				AddressIDChanged();
    				OnPropertyChanged("AddressID");
    			}
    		}
    	}
    	private int _addressID;
    	partial void AddressPropertyTypeIDChanged();
    	public int AddressPropertyTypeID
    	{
    		get { return _addressPropertyTypeID; }
    		set
    		{
    			if (_addressPropertyTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AddressPropertyTypeID", _addressPropertyTypeID);
    				if (!IsDeserializing)
    				{
    					if (AddressPropertyType != null && AddressPropertyType.AddressPropertyTypeID != value)
    					{
    						AddressPropertyType = null;
    					}
    				}
    				_addressPropertyTypeID = value;
    				AddressPropertyTypeIDChanged();
    				OnPropertyChanged("AddressPropertyTypeID");
    			}
    		}
    	}
    	private int _addressPropertyTypeID;
    	partial void PropertyValueChanged();
    	public string PropertyValue
    	{
    		get { return _propertyValue; }
    		set
    		{
    			if (_propertyValue != value)
    			{
    				ChangeTracker.RecordOriginalValue("PropertyValue", _propertyValue);
    				_propertyValue = value;
    				PropertyValueChanged();
    				OnPropertyChanged("PropertyValue");
    			}
    		}
    	}
    	private string _propertyValue;

        #endregion
        #region Navigation Properties
    
    	public Address Address
    	{
    		get { return _address; }
    		set
    		{
    			if (!ReferenceEquals(_address, value))
    			{
    				var previousValue = _address;
    				_address = value;
    				FixupAddress(previousValue);
    				OnNavigationPropertyChanged("Address");
    			}
    		}
    	}
    	private Address _address;
    
    	public AddressPropertyType AddressPropertyType
    	{
    		get { return _addressPropertyType; }
    		set
    		{
    			if (!ReferenceEquals(_addressPropertyType, value))
    			{
    				var previousValue = _addressPropertyType;
    				_addressPropertyType = value;
    				FixupAddressPropertyType(previousValue);
    				OnNavigationPropertyChanged("AddressPropertyType");
    			}
    		}
    	}
    	private AddressPropertyType _addressPropertyType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Address = null;
    		AddressPropertyType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAddress(Address previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AddressProperties.Contains(this))
    		{
    			previousValue.AddressProperties.Remove(this);
    		}
    
    		if (Address != null)
    		{
    			if (!Address.AddressProperties.Contains(this))
    			{
    				Address.AddressProperties.Add(this);
    			}
    
    			AddressID = Address.AddressID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Address")
    				&& (ChangeTracker.OriginalValues["Address"] == Address))
    			{
    				ChangeTracker.OriginalValues.Remove("Address");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Address", previousValue);
    			}
    			if (Address != null && !Address.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Address.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAddressPropertyType(AddressPropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AddressProperties.Contains(this))
    		{
    			previousValue.AddressProperties.Remove(this);
    		}
    
    		if (AddressPropertyType != null)
    		{
    			if (!AddressPropertyType.AddressProperties.Contains(this))
    			{
    				AddressPropertyType.AddressProperties.Add(this);
    			}
    
    			AddressPropertyTypeID = AddressPropertyType.AddressPropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AddressPropertyType")
    				&& (ChangeTracker.OriginalValues["AddressPropertyType"] == AddressPropertyType))
    			{
    				ChangeTracker.OriginalValues.Remove("AddressPropertyType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AddressPropertyType", previousValue);
    			}
    			if (AddressPropertyType != null && !AddressPropertyType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AddressPropertyType.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AutoshipSchedule))]
    [Serializable]
    public partial class AutoshipScheduleDay: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AutoshipScheduleDayIDChanged();
    	public int AutoshipScheduleDayID
    	{
    		get { return _autoshipScheduleDayID; }
    		set
    		{
    			if (_autoshipScheduleDayID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AutoshipScheduleDayID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_autoshipScheduleDayID = value;
    				AutoshipScheduleDayIDChanged();
    				OnPropertyChanged("AutoshipScheduleDayID");
    			}
    		}
    	}
    	private int _autoshipScheduleDayID;
    	partial void AutoshipScheduleIDChanged();
    	public int AutoshipScheduleID
    	{
    		get { return _autoshipScheduleID; }
    		set
    		{
    			if (_autoshipScheduleID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipScheduleID", _autoshipScheduleID);
    				if (!IsDeserializing)
    				{
    					if (AutoshipSchedule != null && AutoshipSchedule.AutoshipScheduleID != value)
    					{
    						AutoshipSchedule = null;
    					}
    				}
    				_autoshipScheduleID = value;
    				AutoshipScheduleIDChanged();
    				OnPropertyChanged("AutoshipScheduleID");
    			}
    		}
    	}
    	private int _autoshipScheduleID;
    	partial void DayChanged();
    	public byte Day
    	{
    		get { return _day; }
    		set
    		{
    			if (_day != value)
    			{
    				ChangeTracker.RecordOriginalValue("Day", _day);
    				_day = value;
    				DayChanged();
    				OnPropertyChanged("Day");
    			}
    		}
    	}
    	private byte _day;

        #endregion
        #region Navigation Properties
    
    	public AutoshipSchedule AutoshipSchedule
    	{
    		get { return _autoshipSchedule; }
    		set
    		{
    			if (!ReferenceEquals(_autoshipSchedule, value))
    			{
    				var previousValue = _autoshipSchedule;
    				_autoshipSchedule = value;
    				FixupAutoshipSchedule(previousValue);
    				OnNavigationPropertyChanged("AutoshipSchedule");
    			}
    		}
    	}
    	private AutoshipSchedule _autoshipSchedule;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AutoshipSchedule = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAutoshipSchedule(AutoshipSchedule previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipScheduleDays.Contains(this))
    		{
    			previousValue.AutoshipScheduleDays.Remove(this);
    		}
    
    		if (AutoshipSchedule != null)
    		{
    			if (!AutoshipSchedule.AutoshipScheduleDays.Contains(this))
    			{
    				AutoshipSchedule.AutoshipScheduleDays.Add(this);
    			}
    
    			AutoshipScheduleID = AutoshipSchedule.AutoshipScheduleID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AutoshipSchedule")
    				&& (ChangeTracker.OriginalValues["AutoshipSchedule"] == AutoshipSchedule))
    			{
    				ChangeTracker.OriginalValues.Remove("AutoshipSchedule");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipSchedule", previousValue);
    			}
    			if (AutoshipSchedule != null && !AutoshipSchedule.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AutoshipSchedule.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

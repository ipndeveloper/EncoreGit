//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(NewsType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Market))]
    [KnownType(typeof(HtmlSection))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(EventContext))]
    [Serializable]
    public partial class News: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void NewsIDChanged();
    	public int NewsID
    	{
    		get { return _newsID; }
    		set
    		{
    			if (_newsID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'NewsID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_newsID = value;
    				NewsIDChanged();
    				OnPropertyChanged("NewsID");
    			}
    		}
    	}
    	private int _newsID;
    	partial void NewsTypeIDChanged();
    	public short NewsTypeID
    	{
    		get { return _newsTypeID; }
    		set
    		{
    			if (_newsTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("NewsTypeID", _newsTypeID);
    				if (!IsDeserializing)
    				{
    					if (NewsType != null && NewsType.NewsTypeID != value)
    					{
    						NewsType = null;
    					}
    				}
    				_newsTypeID = value;
    				NewsTypeIDChanged();
    				OnPropertyChanged("NewsTypeID");
    			}
    		}
    	}
    	private short _newsTypeID;
    	partial void StartDateUTCChanged();
    	public System.DateTime StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private System.DateTime _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void IsPublicChanged();
    	public bool IsPublic
    	{
    		get { return _isPublic; }
    		set
    		{
    			if (_isPublic != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsPublic", _isPublic);
    				_isPublic = value;
    				IsPublicChanged();
    				OnPropertyChanged("IsPublic");
    			}
    		}
    	}
    	private bool _isPublic;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void MarketIDChanged();
    	public Nullable<int> MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				if (!IsDeserializing)
    				{
    					if (Market != null && Market.MarketID != value)
    					{
    						Market = null;
    					}
    				}
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private Nullable<int> _marketID;
    	partial void HtmlSectionIDChanged();
    	public Nullable<int> HtmlSectionID
    	{
    		get { return _htmlSectionID; }
    		set
    		{
    			if (_htmlSectionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlSectionID", _htmlSectionID);
    				if (!IsDeserializing)
    				{
    					if (HtmlSection != null && HtmlSection.HtmlSectionID != value)
    					{
    						HtmlSection = null;
    					}
    				}
    				_htmlSectionID = value;
    				HtmlSectionIDChanged();
    				OnPropertyChanged("HtmlSectionID");
    			}
    		}
    	}
    	private Nullable<int> _htmlSectionID;
    	partial void IsFeaturedChanged();
    	public bool IsFeatured
    	{
    		get { return _isFeatured; }
    		set
    		{
    			if (_isFeatured != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsFeatured", _isFeatured);
    				_isFeatured = value;
    				IsFeaturedChanged();
    				OnPropertyChanged("IsFeatured");
    			}
    		}
    	}
    	private bool _isFeatured;
    	partial void IsMobileChanged();
    	public bool IsMobile
    	{
    		get { return _isMobile; }
    		set
    		{
    			if (_isMobile != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsMobile", _isMobile);
    				_isMobile = value;
    				IsMobileChanged();
    				OnPropertyChanged("IsMobile");
    			}
    		}
    	}
    	private bool _isMobile;

        #endregion
        #region Navigation Properties
    
    	public NewsType NewsType
    	{
    		get { return _newsType; }
    		set
    		{
    			if (!ReferenceEquals(_newsType, value))
    			{
    				var previousValue = _newsType;
    				_newsType = value;
    				FixupNewsType(previousValue);
    				OnNavigationPropertyChanged("NewsType");
    			}
    		}
    	}
    	private NewsType _newsType;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public Market Market
    	{
    		get { return _market; }
    		set
    		{
    			if (!ReferenceEquals(_market, value))
    			{
    				var previousValue = _market;
    				_market = value;
    				FixupMarket(previousValue);
    				OnNavigationPropertyChanged("Market");
    			}
    		}
    	}
    	private Market _market;
    
    	public HtmlSection HtmlSection
    	{
    		get { return _htmlSection; }
    		set
    		{
    			if (!ReferenceEquals(_htmlSection, value))
    			{
    				var previousValue = _htmlSection;
    				_htmlSection = value;
    				FixupHtmlSection(previousValue);
    				OnNavigationPropertyChanged("HtmlSection");
    			}
    		}
    	}
    	private HtmlSection _htmlSection;
    
    	public TrackableCollection<Site> Sites
    	{
    		get
    		{
    			if (_sites == null)
    			{
    				_sites = new TrackableCollection<Site>();
    				_sites.CollectionChanged += FixupSites;
    				_sites.CollectionChanged += RaiseSitesChanged;
    			}
    			return _sites;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites != null)
    				{
    					_sites.CollectionChanged -= FixupSites;
    					_sites.CollectionChanged -= RaiseSitesChanged;
    				}
    				_sites = value;
    				if (_sites != null)
    				{
    					_sites.CollectionChanged += FixupSites;
    					_sites.CollectionChanged += RaiseSitesChanged;
    				}
    				OnNavigationPropertyChanged("Sites");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites;
    	partial void SitesChanged();
    	private void RaiseSitesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SitesChanged();
    	}
    
    	public TrackableCollection<EventContext> EventContexts
    	{
    		get
    		{
    			if (_eventContexts == null)
    			{
    				_eventContexts = new TrackableCollection<EventContext>();
    				_eventContexts.CollectionChanged += FixupEventContexts;
    				_eventContexts.CollectionChanged += RaiseEventContextsChanged;
    			}
    			return _eventContexts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_eventContexts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_eventContexts != null)
    				{
    					_eventContexts.CollectionChanged -= FixupEventContexts;
    					_eventContexts.CollectionChanged -= RaiseEventContextsChanged;
    				}
    				_eventContexts = value;
    				if (_eventContexts != null)
    				{
    					_eventContexts.CollectionChanged += FixupEventContexts;
    					_eventContexts.CollectionChanged += RaiseEventContextsChanged;
    				}
    				OnNavigationPropertyChanged("EventContexts");
    			}
    		}
    	}
    	private TrackableCollection<EventContext> _eventContexts;
    	partial void EventContextsChanged();
    	private void RaiseEventContextsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		EventContextsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_sites != null)
    		{
    			_sites.CollectionChanged -= FixupSites;
    			_sites.CollectionChanged -= RaiseSitesChanged;
    			_sites.CollectionChanged += FixupSites;
    			_sites.CollectionChanged += RaiseSitesChanged;
    		}
    		if (_eventContexts != null)
    		{
    			_eventContexts.CollectionChanged -= FixupEventContexts;
    			_eventContexts.CollectionChanged -= RaiseEventContextsChanged;
    			_eventContexts.CollectionChanged += FixupEventContexts;
    			_eventContexts.CollectionChanged += RaiseEventContextsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		NewsType = null;
    		User = null;
    		Market = null;
    		HtmlSection = null;
    		Sites.Clear();
    		EventContexts.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupNewsType(NewsType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.News.Contains(this))
    		{
    			previousValue.News.Remove(this);
    		}
    
    		if (NewsType != null)
    		{
    			if (!NewsType.News.Contains(this))
    			{
    				NewsType.News.Add(this);
    			}
    
    			NewsTypeID = NewsType.NewsTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("NewsType")
    				&& (ChangeTracker.OriginalValues["NewsType"] == NewsType))
    			{
    				ChangeTracker.OriginalValues.Remove("NewsType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("NewsType", previousValue);
    			}
    			if (NewsType != null && !NewsType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				NewsType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.News.Contains(this))
    		{
    			previousValue.News.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.News.Contains(this))
    			{
    				User.News.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMarket(Market previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.News.Contains(this))
    		{
    			previousValue.News.Remove(this);
    		}
    
    		if (Market != null)
    		{
    			if (!Market.News.Contains(this))
    			{
    				Market.News.Add(this);
    			}
    
    			MarketID = Market.MarketID;
    		}
    		else if (!skipKeys)
    		{
    			MarketID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Market")
    				&& (ChangeTracker.OriginalValues["Market"] == Market))
    			{
    				ChangeTracker.OriginalValues.Remove("Market");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Market", previousValue);
    			}
    			if (Market != null && !Market.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Market.StartTracking();
    			}
    		}
    	}
    
    	private void FixupHtmlSection(HtmlSection previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.News.Contains(this))
    		{
    			previousValue.News.Remove(this);
    		}
    
    		if (HtmlSection != null)
    		{
    			if (!HtmlSection.News.Contains(this))
    			{
    				HtmlSection.News.Add(this);
    			}
    
    			HtmlSectionID = HtmlSection.HtmlSectionID;
    		}
    		else if (!skipKeys)
    		{
    			HtmlSectionID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlSection")
    				&& (ChangeTracker.OriginalValues["HtmlSection"] == HtmlSection))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlSection");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlSection", previousValue);
    			}
    			if (HtmlSection != null && !HtmlSection.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlSection.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				if (!item.News.Contains(this))
    				{
    					item.News.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (item.News.Contains(this))
    				{
    					item.News.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites", item);
    				}
    			}
    		}
    	}
    
    	private void FixupEventContexts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (EventContext item in e.NewItems)
    			{
    				item.News = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("EventContexts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (EventContext item in e.OldItems)
    			{
    				if (ReferenceEquals(item.News, this))
    				{
    					item.News = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("EventContexts", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

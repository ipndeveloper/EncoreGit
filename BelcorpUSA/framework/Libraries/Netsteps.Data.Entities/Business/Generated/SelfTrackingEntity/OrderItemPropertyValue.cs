//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderItemProperty))]
    [KnownType(typeof(OrderItemPropertyType))]
    [Serializable]
    public partial class OrderItemPropertyValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderItemPropertyValueIDChanged();
    	public int OrderItemPropertyValueID
    	{
    		get { return _orderItemPropertyValueID; }
    		set
    		{
    			if (_orderItemPropertyValueID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderItemPropertyValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderItemPropertyValueID = value;
    				OrderItemPropertyValueIDChanged();
    				OnPropertyChanged("OrderItemPropertyValueID");
    			}
    		}
    	}
    	private int _orderItemPropertyValueID;
    	partial void OrderItemPropertyTypeIDChanged();
    	public int OrderItemPropertyTypeID
    	{
    		get { return _orderItemPropertyTypeID; }
    		set
    		{
    			if (_orderItemPropertyTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemPropertyTypeID", _orderItemPropertyTypeID);
    				if (!IsDeserializing)
    				{
    					if (OrderItemPropertyType != null && OrderItemPropertyType.OrderItemPropertyTypeID != value)
    					{
    						OrderItemPropertyType = null;
    					}
    				}
    				_orderItemPropertyTypeID = value;
    				OrderItemPropertyTypeIDChanged();
    				OnPropertyChanged("OrderItemPropertyTypeID");
    			}
    		}
    	}
    	private int _orderItemPropertyTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<OrderItemProperty> OrderItemProperties
    	{
    		get
    		{
    			if (_orderItemProperties == null)
    			{
    				_orderItemProperties = new TrackableCollection<OrderItemProperty>();
    				_orderItemProperties.CollectionChanged += FixupOrderItemProperties;
    				_orderItemProperties.CollectionChanged += RaiseOrderItemPropertiesChanged;
    			}
    			return _orderItemProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItemProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItemProperties != null)
    				{
    					_orderItemProperties.CollectionChanged -= FixupOrderItemProperties;
    					_orderItemProperties.CollectionChanged -= RaiseOrderItemPropertiesChanged;
    				}
    				_orderItemProperties = value;
    				if (_orderItemProperties != null)
    				{
    					_orderItemProperties.CollectionChanged += FixupOrderItemProperties;
    					_orderItemProperties.CollectionChanged += RaiseOrderItemPropertiesChanged;
    				}
    				OnNavigationPropertyChanged("OrderItemProperties");
    			}
    		}
    	}
    	private TrackableCollection<OrderItemProperty> _orderItemProperties;
    	partial void OrderItemPropertiesChanged();
    	private void RaiseOrderItemPropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemPropertiesChanged();
    	}
    
    	public OrderItemPropertyType OrderItemPropertyType
    	{
    		get { return _orderItemPropertyType; }
    		set
    		{
    			if (!ReferenceEquals(_orderItemPropertyType, value))
    			{
    				var previousValue = _orderItemPropertyType;
    				_orderItemPropertyType = value;
    				FixupOrderItemPropertyType(previousValue);
    				OnNavigationPropertyChanged("OrderItemPropertyType");
    			}
    		}
    	}
    	private OrderItemPropertyType _orderItemPropertyType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderItemProperties != null)
    		{
    			_orderItemProperties.CollectionChanged -= FixupOrderItemProperties;
    			_orderItemProperties.CollectionChanged -= RaiseOrderItemPropertiesChanged;
    			_orderItemProperties.CollectionChanged += FixupOrderItemProperties;
    			_orderItemProperties.CollectionChanged += RaiseOrderItemPropertiesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderItemProperties.Clear();
    		OrderItemPropertyType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderItemPropertyType(OrderItemPropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItemPropertyValues.Contains(this))
    		{
    			previousValue.OrderItemPropertyValues.Remove(this);
    		}
    
    		if (OrderItemPropertyType != null)
    		{
    			if (!OrderItemPropertyType.OrderItemPropertyValues.Contains(this))
    			{
    				OrderItemPropertyType.OrderItemPropertyValues.Add(this);
    			}
    
    			OrderItemPropertyTypeID = OrderItemPropertyType.OrderItemPropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItemPropertyType")
    				&& (ChangeTracker.OriginalValues["OrderItemPropertyType"] == OrderItemPropertyType))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItemPropertyType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemPropertyType", previousValue);
    			}
    			if (OrderItemPropertyType != null && !OrderItemPropertyType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItemPropertyType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderItemProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItemProperty item in e.NewItems)
    			{
    				item.OrderItemPropertyValue = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItemProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItemProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderItemPropertyValue, this))
    				{
    					item.OrderItemPropertyValue = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItemProperties", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

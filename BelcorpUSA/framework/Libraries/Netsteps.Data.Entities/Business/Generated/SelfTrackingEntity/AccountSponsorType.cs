//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountSponsor))]
    [Serializable]
    public partial class AccountSponsorType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountSponsorTypeIDChanged();
    	public int AccountSponsorTypeID
    	{
    		get { return _accountSponsorTypeID; }
    		set
    		{
    			if (_accountSponsorTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountSponsorTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountSponsorTypeID = value;
    				AccountSponsorTypeIDChanged();
    				OnPropertyChanged("AccountSponsorTypeID");
    			}
    		}
    	}
    	private int _accountSponsorTypeID;
    	partial void CodeChanged();
    	public string Code
    	{
    		get { return _code; }
    		set
    		{
    			if (_code != value)
    			{
    				ChangeTracker.RecordOriginalValue("Code", _code);
    				_code = value;
    				CodeChanged();
    				OnPropertyChanged("Code");
    			}
    		}
    	}
    	private string _code;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void MaxPositionsChanged();
    	public Nullable<int> MaxPositions
    	{
    		get { return _maxPositions; }
    		set
    		{
    			if (_maxPositions != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaxPositions", _maxPositions);
    				_maxPositions = value;
    				MaxPositionsChanged();
    				OnPropertyChanged("MaxPositions");
    			}
    		}
    	}
    	private Nullable<int> _maxPositions;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<AccountSponsor> AccountSponsors
    	{
    		get
    		{
    			if (_accountSponsors == null)
    			{
    				_accountSponsors = new TrackableCollection<AccountSponsor>();
    				_accountSponsors.CollectionChanged += FixupAccountSponsors;
    				_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    			}
    			return _accountSponsors;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountSponsors, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountSponsors != null)
    				{
    					_accountSponsors.CollectionChanged -= FixupAccountSponsors;
    					_accountSponsors.CollectionChanged -= RaiseAccountSponsorsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Remove the cascade delete event handler for any entities in the current collection.
    					foreach (AccountSponsor item in _accountSponsors)
    					{
    						ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    					}
    				}
    				_accountSponsors = value;
    				if (_accountSponsors != null)
    				{
    					_accountSponsors.CollectionChanged += FixupAccountSponsors;
    					_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Add the cascade delete event handler for any entities that are already in the new collection.
    					foreach (AccountSponsor item in _accountSponsors)
    					{
    						ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    					}
    				}
    				OnNavigationPropertyChanged("AccountSponsors");
    			}
    		}
    	}
    	private TrackableCollection<AccountSponsor> _accountSponsors;
    	partial void AccountSponsorsChanged();
    	private void RaiseAccountSponsorsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountSponsorsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_accountSponsors != null)
    		{
    			_accountSponsors.CollectionChanged -= FixupAccountSponsors;
    			_accountSponsors.CollectionChanged -= RaiseAccountSponsorsChanged;
    			_accountSponsors.CollectionChanged += FixupAccountSponsors;
    			_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    			// This is the principal end in an association that performs cascade deletes.
    			// Add the cascade delete event handler for any entities that are 
    			// already in the collection.
    			foreach (var item in _accountSponsors)
    			{
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountSponsors.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccountSponsors(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountSponsor item in e.NewItems)
    			{
    				item.AccountSponsorType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountSponsors", item);
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Update the event listener to refer to the new dependent.
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountSponsor item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountSponsorType, this))
    				{
    					item.AccountSponsorType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountSponsors", item);
    					// Delete the dependent end of this identifying association. If the current state is Added,
    					// allow the relationship to be changed without causing the dependent to be deleted.
    					if (item.ChangeTracker.State != ObjectState.Added)
    					{
    						item.MarkAsDeleted();
    					}
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Remove the previous dependent from the event listener.
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    			}
    		}
    	}

        #endregion
    }
}

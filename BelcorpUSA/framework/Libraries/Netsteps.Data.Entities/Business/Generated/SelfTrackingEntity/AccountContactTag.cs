//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountListValue))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(User))]
    [Serializable]
    public partial class AccountContactTag: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountContactTagIDChanged();
    	public int AccountContactTagID
    	{
    		get { return _accountContactTagID; }
    		set
    		{
    			if (_accountContactTagID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountContactTagID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountContactTagID = value;
    				AccountContactTagIDChanged();
    				OnPropertyChanged("AccountContactTagID");
    			}
    		}
    	}
    	private int _accountContactTagID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void ContactCategoryIDChanged();
    	public Nullable<int> ContactCategoryID
    	{
    		get { return _contactCategoryID; }
    		set
    		{
    			if (_contactCategoryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ContactCategoryID", _contactCategoryID);
    				if (!IsDeserializing)
    				{
    					if (AccountListValue != null && AccountListValue.AccountListValueID != value)
    					{
    						AccountListValue = null;
    					}
    				}
    				_contactCategoryID = value;
    				ContactCategoryIDChanged();
    				OnPropertyChanged("ContactCategoryID");
    			}
    		}
    	}
    	private Nullable<int> _contactCategoryID;
    	partial void ContactStatusIDChanged();
    	public Nullable<int> ContactStatusID
    	{
    		get { return _contactStatusID; }
    		set
    		{
    			if (_contactStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ContactStatusID", _contactStatusID);
    				if (!IsDeserializing)
    				{
    					if (AccountListValue2 != null && AccountListValue2.AccountListValueID != value)
    					{
    						AccountListValue2 = null;
    					}
    				}
    				_contactStatusID = value;
    				ContactStatusIDChanged();
    				OnPropertyChanged("ContactStatusID");
    			}
    		}
    	}
    	private Nullable<int> _contactStatusID;
    	partial void ContactTypeIDChanged();
    	public Nullable<int> ContactTypeID
    	{
    		get { return _contactTypeID; }
    		set
    		{
    			if (_contactTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ContactTypeID", _contactTypeID);
    				if (!IsDeserializing)
    				{
    					if (AccountListValue1 != null && AccountListValue1.AccountListValueID != value)
    					{
    						AccountListValue1 = null;
    					}
    				}
    				_contactTypeID = value;
    				ContactTypeIDChanged();
    				OnPropertyChanged("ContactTypeID");
    			}
    		}
    	}
    	private Nullable<int> _contactTypeID;
    	partial void SourceChanged();
    	public string Source
    	{
    		get { return _source; }
    		set
    		{
    			if (_source != value)
    			{
    				ChangeTracker.RecordOriginalValue("Source", _source);
    				_source = value;
    				SourceChanged();
    				OnPropertyChanged("Source");
    			}
    		}
    	}
    	private string _source;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;

        #endregion
        #region Navigation Properties
    
    	public AccountListValue AccountListValue
    	{
    		get { return _accountListValue; }
    		set
    		{
    			if (!ReferenceEquals(_accountListValue, value))
    			{
    				var previousValue = _accountListValue;
    				_accountListValue = value;
    				FixupAccountListValue(previousValue);
    				OnNavigationPropertyChanged("AccountListValue");
    			}
    		}
    	}
    	private AccountListValue _accountListValue;
    
    	public AccountListValue AccountListValue1
    	{
    		get { return _accountListValue1; }
    		set
    		{
    			if (!ReferenceEquals(_accountListValue1, value))
    			{
    				var previousValue = _accountListValue1;
    				_accountListValue1 = value;
    				FixupAccountListValue1(previousValue);
    				OnNavigationPropertyChanged("AccountListValue1");
    			}
    		}
    	}
    	private AccountListValue _accountListValue1;
    
    	public AccountListValue AccountListValue2
    	{
    		get { return _accountListValue2; }
    		set
    		{
    			if (!ReferenceEquals(_accountListValue2, value))
    			{
    				var previousValue = _accountListValue2;
    				_accountListValue2 = value;
    				FixupAccountListValue2(previousValue);
    				OnNavigationPropertyChanged("AccountListValue2");
    			}
    		}
    	}
    	private AccountListValue _accountListValue2;
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountListValue = null;
    		AccountListValue1 = null;
    		AccountListValue2 = null;
    		Account = null;
    		User = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccountListValue(AccountListValue previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountContactTags.Contains(this))
    		{
    			previousValue.AccountContactTags.Remove(this);
    		}
    
    		if (AccountListValue != null)
    		{
    			if (!AccountListValue.AccountContactTags.Contains(this))
    			{
    				AccountListValue.AccountContactTags.Add(this);
    			}
    
    			ContactCategoryID = AccountListValue.AccountListValueID;
    		}
    		else if (!skipKeys)
    		{
    			ContactCategoryID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountListValue")
    				&& (ChangeTracker.OriginalValues["AccountListValue"] == AccountListValue))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountListValue");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountListValue", previousValue);
    			}
    			if (AccountListValue != null && !AccountListValue.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountListValue.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountListValue1(AccountListValue previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountContactTags1.Contains(this))
    		{
    			previousValue.AccountContactTags1.Remove(this);
    		}
    
    		if (AccountListValue1 != null)
    		{
    			if (!AccountListValue1.AccountContactTags1.Contains(this))
    			{
    				AccountListValue1.AccountContactTags1.Add(this);
    			}
    
    			ContactTypeID = AccountListValue1.AccountListValueID;
    		}
    		else if (!skipKeys)
    		{
    			ContactTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountListValue1")
    				&& (ChangeTracker.OriginalValues["AccountListValue1"] == AccountListValue1))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountListValue1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountListValue1", previousValue);
    			}
    			if (AccountListValue1 != null && !AccountListValue1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountListValue1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountListValue2(AccountListValue previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountContactTags2.Contains(this))
    		{
    			previousValue.AccountContactTags2.Remove(this);
    		}
    
    		if (AccountListValue2 != null)
    		{
    			if (!AccountListValue2.AccountContactTags2.Contains(this))
    			{
    				AccountListValue2.AccountContactTags2.Add(this);
    			}
    
    			ContactStatusID = AccountListValue2.AccountListValueID;
    		}
    		else if (!skipKeys)
    		{
    			ContactStatusID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountListValue2")
    				&& (ChangeTracker.OriginalValues["AccountListValue2"] == AccountListValue2))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountListValue2");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountListValue2", previousValue);
    			}
    			if (AccountListValue2 != null && !AccountListValue2.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountListValue2.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccount(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountContactTags.Contains(this))
    		{
    			previousValue.AccountContactTags.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AccountContactTags.Contains(this))
    			{
    				Account.AccountContactTags.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			AccountID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountContactTags.Contains(this))
    		{
    			previousValue.AccountContactTags.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.AccountContactTags.Contains(this))
    			{
    				User.AccountContactTags.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

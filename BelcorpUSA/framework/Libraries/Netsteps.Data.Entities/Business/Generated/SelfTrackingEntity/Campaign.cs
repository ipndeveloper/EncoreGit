//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(CampaignAction))]
    [KnownType(typeof(CampaignEmail))]
    [KnownType(typeof(CampaignOptOut))]
    [KnownType(typeof(CampaignType))]
    [KnownType(typeof(DomainEventType))]
    [KnownType(typeof(Market))]
    [KnownType(typeof(User))]
    [KnownType(typeof(CampaignSubscriber))]
    [Serializable]
    public partial class Campaign: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CampaignIDChanged();
    	public int CampaignID
    	{
    		get { return _campaignID; }
    		set
    		{
    			if (_campaignID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CampaignID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_campaignID = value;
    				CampaignIDChanged();
    				OnPropertyChanged("CampaignID");
    			}
    		}
    	}
    	private int _campaignID;
    	partial void CampaignTypeIDChanged();
    	public short CampaignTypeID
    	{
    		get { return _campaignTypeID; }
    		set
    		{
    			if (_campaignTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CampaignTypeID", _campaignTypeID);
    				if (!IsDeserializing)
    				{
    					if (CampaignType != null && CampaignType.CampaignTypeID != value)
    					{
    						CampaignType = null;
    					}
    				}
    				_campaignTypeID = value;
    				CampaignTypeIDChanged();
    				OnPropertyChanged("CampaignTypeID");
    			}
    		}
    	}
    	private short _campaignTypeID;
    	partial void DomainEventTypeIDChanged();
    	public Nullable<short> DomainEventTypeID
    	{
    		get { return _domainEventTypeID; }
    		set
    		{
    			if (_domainEventTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DomainEventTypeID", _domainEventTypeID);
    				if (!IsDeserializing)
    				{
    					if (DomainEventType != null && DomainEventType.DomainEventTypeID != value)
    					{
    						DomainEventType = null;
    					}
    				}
    				_domainEventTypeID = value;
    				DomainEventTypeIDChanged();
    				OnPropertyChanged("DomainEventTypeID");
    			}
    		}
    	}
    	private Nullable<short> _domainEventTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void CreatedByUserIDChanged();
    	public Nullable<int> CreatedByUserID
    	{
    		get { return _createdByUserID; }
    		set
    		{
    			if (_createdByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CreatedByUserID", _createdByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_createdByUserID = value;
    				CreatedByUserIDChanged();
    				OnPropertyChanged("CreatedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _createdByUserID;
    	partial void StartDateUTCChanged();
    	public Nullable<System.DateTime> StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void IsCorporateChanged();
    	public bool IsCorporate
    	{
    		get { return _isCorporate; }
    		set
    		{
    			if (_isCorporate != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsCorporate", _isCorporate);
    				_isCorporate = value;
    				IsCorporateChanged();
    				OnPropertyChanged("IsCorporate");
    			}
    		}
    	}
    	private bool _isCorporate;
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				if (!IsDeserializing)
    				{
    					if (Market != null && Market.MarketID != value)
    					{
    						Market = null;
    					}
    				}
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<CampaignAction> CampaignActions
    	{
    		get
    		{
    			if (_campaignActions == null)
    			{
    				_campaignActions = new TrackableCollection<CampaignAction>();
    				_campaignActions.CollectionChanged += FixupCampaignActions;
    				_campaignActions.CollectionChanged += RaiseCampaignActionsChanged;
    			}
    			return _campaignActions;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignActions, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignActions != null)
    				{
    					_campaignActions.CollectionChanged -= FixupCampaignActions;
    					_campaignActions.CollectionChanged -= RaiseCampaignActionsChanged;
    				}
    				_campaignActions = value;
    				if (_campaignActions != null)
    				{
    					_campaignActions.CollectionChanged += FixupCampaignActions;
    					_campaignActions.CollectionChanged += RaiseCampaignActionsChanged;
    				}
    				OnNavigationPropertyChanged("CampaignActions");
    			}
    		}
    	}
    	private TrackableCollection<CampaignAction> _campaignActions;
    	partial void CampaignActionsChanged();
    	private void RaiseCampaignActionsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignActionsChanged();
    	}
    
    	public TrackableCollection<CampaignEmail> CampaignEmails
    	{
    		get
    		{
    			if (_campaignEmails == null)
    			{
    				_campaignEmails = new TrackableCollection<CampaignEmail>();
    				_campaignEmails.CollectionChanged += FixupCampaignEmails;
    				_campaignEmails.CollectionChanged += RaiseCampaignEmailsChanged;
    			}
    			return _campaignEmails;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignEmails, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignEmails != null)
    				{
    					_campaignEmails.CollectionChanged -= FixupCampaignEmails;
    					_campaignEmails.CollectionChanged -= RaiseCampaignEmailsChanged;
    				}
    				_campaignEmails = value;
    				if (_campaignEmails != null)
    				{
    					_campaignEmails.CollectionChanged += FixupCampaignEmails;
    					_campaignEmails.CollectionChanged += RaiseCampaignEmailsChanged;
    				}
    				OnNavigationPropertyChanged("CampaignEmails");
    			}
    		}
    	}
    	private TrackableCollection<CampaignEmail> _campaignEmails;
    	partial void CampaignEmailsChanged();
    	private void RaiseCampaignEmailsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignEmailsChanged();
    	}
    
    	public TrackableCollection<CampaignOptOut> CampaignOptOuts
    	{
    		get
    		{
    			if (_campaignOptOuts == null)
    			{
    				_campaignOptOuts = new TrackableCollection<CampaignOptOut>();
    				_campaignOptOuts.CollectionChanged += FixupCampaignOptOuts;
    				_campaignOptOuts.CollectionChanged += RaiseCampaignOptOutsChanged;
    			}
    			return _campaignOptOuts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignOptOuts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignOptOuts != null)
    				{
    					_campaignOptOuts.CollectionChanged -= FixupCampaignOptOuts;
    					_campaignOptOuts.CollectionChanged -= RaiseCampaignOptOutsChanged;
    				}
    				_campaignOptOuts = value;
    				if (_campaignOptOuts != null)
    				{
    					_campaignOptOuts.CollectionChanged += FixupCampaignOptOuts;
    					_campaignOptOuts.CollectionChanged += RaiseCampaignOptOutsChanged;
    				}
    				OnNavigationPropertyChanged("CampaignOptOuts");
    			}
    		}
    	}
    	private TrackableCollection<CampaignOptOut> _campaignOptOuts;
    	partial void CampaignOptOutsChanged();
    	private void RaiseCampaignOptOutsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignOptOutsChanged();
    	}
    
    	public CampaignType CampaignType
    	{
    		get { return _campaignType; }
    		set
    		{
    			if (!ReferenceEquals(_campaignType, value))
    			{
    				var previousValue = _campaignType;
    				_campaignType = value;
    				FixupCampaignType(previousValue);
    				OnNavigationPropertyChanged("CampaignType");
    			}
    		}
    	}
    	private CampaignType _campaignType;
    
    	public DomainEventType DomainEventType
    	{
    		get { return _domainEventType; }
    		set
    		{
    			if (!ReferenceEquals(_domainEventType, value))
    			{
    				var previousValue = _domainEventType;
    				_domainEventType = value;
    				FixupDomainEventType(previousValue);
    				OnNavigationPropertyChanged("DomainEventType");
    			}
    		}
    	}
    	private DomainEventType _domainEventType;
    
    	public Market Market
    	{
    		get { return _market; }
    		set
    		{
    			if (!ReferenceEquals(_market, value))
    			{
    				var previousValue = _market;
    				_market = value;
    				FixupMarket(previousValue);
    				OnNavigationPropertyChanged("Market");
    			}
    		}
    	}
    	private Market _market;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<CampaignSubscriber> CampaignSubscribers
    	{
    		get
    		{
    			if (_campaignSubscribers == null)
    			{
    				_campaignSubscribers = new TrackableCollection<CampaignSubscriber>();
    				_campaignSubscribers.CollectionChanged += FixupCampaignSubscribers;
    				_campaignSubscribers.CollectionChanged += RaiseCampaignSubscribersChanged;
    			}
    			return _campaignSubscribers;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignSubscribers, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignSubscribers != null)
    				{
    					_campaignSubscribers.CollectionChanged -= FixupCampaignSubscribers;
    					_campaignSubscribers.CollectionChanged -= RaiseCampaignSubscribersChanged;
    				}
    				_campaignSubscribers = value;
    				if (_campaignSubscribers != null)
    				{
    					_campaignSubscribers.CollectionChanged += FixupCampaignSubscribers;
    					_campaignSubscribers.CollectionChanged += RaiseCampaignSubscribersChanged;
    				}
    				OnNavigationPropertyChanged("CampaignSubscribers");
    			}
    		}
    	}
    	private TrackableCollection<CampaignSubscriber> _campaignSubscribers;
    	partial void CampaignSubscribersChanged();
    	private void RaiseCampaignSubscribersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignSubscribersChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_campaignActions != null)
    		{
    			_campaignActions.CollectionChanged -= FixupCampaignActions;
    			_campaignActions.CollectionChanged -= RaiseCampaignActionsChanged;
    			_campaignActions.CollectionChanged += FixupCampaignActions;
    			_campaignActions.CollectionChanged += RaiseCampaignActionsChanged;
    		}
    		if (_campaignEmails != null)
    		{
    			_campaignEmails.CollectionChanged -= FixupCampaignEmails;
    			_campaignEmails.CollectionChanged -= RaiseCampaignEmailsChanged;
    			_campaignEmails.CollectionChanged += FixupCampaignEmails;
    			_campaignEmails.CollectionChanged += RaiseCampaignEmailsChanged;
    		}
    		if (_campaignOptOuts != null)
    		{
    			_campaignOptOuts.CollectionChanged -= FixupCampaignOptOuts;
    			_campaignOptOuts.CollectionChanged -= RaiseCampaignOptOutsChanged;
    			_campaignOptOuts.CollectionChanged += FixupCampaignOptOuts;
    			_campaignOptOuts.CollectionChanged += RaiseCampaignOptOutsChanged;
    		}
    		if (_campaignSubscribers != null)
    		{
    			_campaignSubscribers.CollectionChanged -= FixupCampaignSubscribers;
    			_campaignSubscribers.CollectionChanged -= RaiseCampaignSubscribersChanged;
    			_campaignSubscribers.CollectionChanged += FixupCampaignSubscribers;
    			_campaignSubscribers.CollectionChanged += RaiseCampaignSubscribersChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		CampaignActions.Clear();
    		CampaignEmails.Clear();
    		CampaignOptOuts.Clear();
    		CampaignType = null;
    		DomainEventType = null;
    		Market = null;
    		User = null;
    		CampaignSubscribers.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCampaignType(CampaignType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Campaigns.Contains(this))
    		{
    			previousValue.Campaigns.Remove(this);
    		}
    
    		if (CampaignType != null)
    		{
    			if (!CampaignType.Campaigns.Contains(this))
    			{
    				CampaignType.Campaigns.Add(this);
    			}
    
    			CampaignTypeID = CampaignType.CampaignTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CampaignType")
    				&& (ChangeTracker.OriginalValues["CampaignType"] == CampaignType))
    			{
    				ChangeTracker.OriginalValues.Remove("CampaignType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CampaignType", previousValue);
    			}
    			if (CampaignType != null && !CampaignType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CampaignType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupDomainEventType(DomainEventType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Campaigns.Contains(this))
    		{
    			previousValue.Campaigns.Remove(this);
    		}
    
    		if (DomainEventType != null)
    		{
    			if (!DomainEventType.Campaigns.Contains(this))
    			{
    				DomainEventType.Campaigns.Add(this);
    			}
    
    			DomainEventTypeID = DomainEventType.DomainEventTypeID;
    		}
    		else if (!skipKeys)
    		{
    			DomainEventTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("DomainEventType")
    				&& (ChangeTracker.OriginalValues["DomainEventType"] == DomainEventType))
    			{
    				ChangeTracker.OriginalValues.Remove("DomainEventType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("DomainEventType", previousValue);
    			}
    			if (DomainEventType != null && !DomainEventType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				DomainEventType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMarket(Market previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Campaigns.Contains(this))
    		{
    			previousValue.Campaigns.Remove(this);
    		}
    
    		if (Market != null)
    		{
    			if (!Market.Campaigns.Contains(this))
    			{
    				Market.Campaigns.Add(this);
    			}
    
    			MarketID = Market.MarketID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Market")
    				&& (ChangeTracker.OriginalValues["Market"] == Market))
    			{
    				ChangeTracker.OriginalValues.Remove("Market");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Market", previousValue);
    			}
    			if (Market != null && !Market.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Market.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Campaigns.Contains(this))
    		{
    			previousValue.Campaigns.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Campaigns.Contains(this))
    			{
    				User.Campaigns.Add(this);
    			}
    
    			CreatedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			CreatedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCampaignActions(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignAction item in e.NewItems)
    			{
    				item.Campaign = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignActions", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignAction item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Campaign, this))
    				{
    					item.Campaign = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignActions", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaignEmails(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignEmail item in e.NewItems)
    			{
    				item.Campaign = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignEmails", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignEmail item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Campaign, this))
    				{
    					item.Campaign = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignEmails", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaignOptOuts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignOptOut item in e.NewItems)
    			{
    				item.Campaign = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignOptOuts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignOptOut item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Campaign, this))
    				{
    					item.Campaign = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignOptOuts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaignSubscribers(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignSubscriber item in e.NewItems)
    			{
    				item.Campaign = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignSubscribers", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignSubscriber item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Campaign, this))
    				{
    					item.Campaign = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignSubscribers", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

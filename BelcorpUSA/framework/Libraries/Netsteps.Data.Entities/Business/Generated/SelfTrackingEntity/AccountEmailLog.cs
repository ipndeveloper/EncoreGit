//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(EmailType))]
    [Serializable]
    public partial class AccountEmailLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountEmailLogIDChanged();
    	public int AccountEmailLogID
    	{
    		get { return _accountEmailLogID; }
    		set
    		{
    			if (_accountEmailLogID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountEmailLogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountEmailLogID = value;
    				AccountEmailLogIDChanged();
    				OnPropertyChanged("AccountEmailLogID");
    			}
    		}
    	}
    	private int _accountEmailLogID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void EmailTypeIDChanged();
    	public Nullable<short> EmailTypeID
    	{
    		get { return _emailTypeID; }
    		set
    		{
    			if (_emailTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("EmailTypeID", _emailTypeID);
    				if (!IsDeserializing)
    				{
    					if (EmailType != null && EmailType.EmailTypeID != value)
    					{
    						EmailType = null;
    					}
    				}
    				_emailTypeID = value;
    				EmailTypeIDChanged();
    				OnPropertyChanged("EmailTypeID");
    			}
    		}
    	}
    	private Nullable<short> _emailTypeID;
    	partial void EmailAddressChanged();
    	public string EmailAddress
    	{
    		get { return _emailAddress; }
    		set
    		{
    			if (_emailAddress != value)
    			{
    				ChangeTracker.RecordOriginalValue("EmailAddress", _emailAddress);
    				_emailAddress = value;
    				EmailAddressChanged();
    				OnPropertyChanged("EmailAddress");
    			}
    		}
    	}
    	private string _emailAddress;
    	partial void SentSuccessfullyChanged();
    	public Nullable<bool> SentSuccessfully
    	{
    		get { return _sentSuccessfully; }
    		set
    		{
    			if (_sentSuccessfully != value)
    			{
    				ChangeTracker.RecordOriginalValue("SentSuccessfully", _sentSuccessfully);
    				_sentSuccessfully = value;
    				SentSuccessfullyChanged();
    				OnPropertyChanged("SentSuccessfully");
    			}
    		}
    	}
    	private Nullable<bool> _sentSuccessfully;
    	partial void DateSentUTCChanged();
    	public Nullable<System.DateTime> DateSentUTC
    	{
    		get { return _dateSentUTC; }
    		set
    		{
    			if (_dateSentUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateSentUTC", _dateSentUTC);
    				_dateSentUTC = value;
    				DateSentUTCChanged();
    				OnPropertyChanged("DateSentUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateSentUTC;
    	partial void FailureMessageChanged();
    	public string FailureMessage
    	{
    		get { return _failureMessage; }
    		set
    		{
    			if (_failureMessage != value)
    			{
    				ChangeTracker.RecordOriginalValue("FailureMessage", _failureMessage);
    				_failureMessage = value;
    				FailureMessageChanged();
    				OnPropertyChanged("FailureMessage");
    			}
    		}
    	}
    	private string _failureMessage;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public EmailType EmailType
    	{
    		get { return _emailType; }
    		set
    		{
    			if (!ReferenceEquals(_emailType, value))
    			{
    				var previousValue = _emailType;
    				_emailType = value;
    				FixupEmailType(previousValue);
    				OnNavigationPropertyChanged("EmailType");
    			}
    		}
    	}
    	private EmailType _emailType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		EmailType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountEmailLogs.Contains(this))
    		{
    			previousValue.AccountEmailLogs.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AccountEmailLogs.Contains(this))
    			{
    				Account.AccountEmailLogs.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			AccountID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupEmailType(EmailType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountEmailLogs.Contains(this))
    		{
    			previousValue.AccountEmailLogs.Remove(this);
    		}
    
    		if (EmailType != null)
    		{
    			if (!EmailType.AccountEmailLogs.Contains(this))
    			{
    				EmailType.AccountEmailLogs.Add(this);
    			}
    
    			EmailTypeID = EmailType.EmailTypeID;
    		}
    		else if (!skipKeys)
    		{
    			EmailTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("EmailType")
    				&& (ChangeTracker.OriginalValues["EmailType"] == EmailType))
    			{
    				ChangeTracker.OriginalValues.Remove("EmailType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("EmailType", previousValue);
    			}
    			if (EmailType != null && !EmailType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				EmailType.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

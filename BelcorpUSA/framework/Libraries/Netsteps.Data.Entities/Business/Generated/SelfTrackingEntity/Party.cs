//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Address))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(User))]
    [KnownType(typeof(PartyRsvp))]
    [KnownType(typeof(PartyGuest))]
    [KnownType(typeof(EmailTemplateToken))]
    [KnownType(typeof(Party))]
    [Serializable]
    public partial class Party: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void PartyIDChanged();
    	public int PartyID
    	{
    		get { return _partyID; }
    		set
    		{
    			if (_partyID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'PartyID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_partyID = value;
    				PartyIDChanged();
    				OnPropertyChanged("PartyID");
    			}
    		}
    	}
    	private int _partyID;
    	partial void OrderIDChanged();
    	public int OrderID
    	{
    		get { return _orderID; }
    		set
    		{
    			if (_orderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderID", _orderID);
    				if (!IsDeserializing)
    				{
    					if (Order != null && Order.OrderID != value)
    					{
    						Order = null;
    					}
    				}
    				_orderID = value;
    				OrderIDChanged();
    				OnPropertyChanged("OrderID");
    			}
    		}
    	}
    	private int _orderID;
    	partial void AddressIDChanged();
    	public Nullable<int> AddressID
    	{
    		get { return _addressID; }
    		set
    		{
    			if (_addressID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AddressID", _addressID);
    				if (!IsDeserializing)
    				{
    					if (Address != null && Address.AddressID != value)
    					{
    						Address = null;
    					}
    				}
    				_addressID = value;
    				AddressIDChanged();
    				OnPropertyChanged("AddressID");
    			}
    		}
    	}
    	private Nullable<int> _addressID;
    	partial void EmailTemplateIDChanged();
    	public Nullable<int> EmailTemplateID
    	{
    		get { return _emailTemplateID; }
    		set
    		{
    			if (_emailTemplateID != value)
    			{
    				ChangeTracker.RecordOriginalValue("EmailTemplateID", _emailTemplateID);
    				_emailTemplateID = value;
    				EmailTemplateIDChanged();
    				OnPropertyChanged("EmailTemplateID");
    			}
    		}
    	}
    	private Nullable<int> _emailTemplateID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void EviteOrganizerEmailChanged();
    	public string EviteOrganizerEmail
    	{
    		get { return _eviteOrganizerEmail; }
    		set
    		{
    			if (_eviteOrganizerEmail != value)
    			{
    				ChangeTracker.RecordOriginalValue("EviteOrganizerEmail", _eviteOrganizerEmail);
    				_eviteOrganizerEmail = value;
    				EviteOrganizerEmailChanged();
    				OnPropertyChanged("EviteOrganizerEmail");
    			}
    		}
    	}
    	private string _eviteOrganizerEmail;
    	partial void UseEvitesChanged();
    	public bool UseEvites
    	{
    		get { return _useEvites; }
    		set
    		{
    			if (_useEvites != value)
    			{
    				ChangeTracker.RecordOriginalValue("UseEvites", _useEvites);
    				_useEvites = value;
    				UseEvitesChanged();
    				OnPropertyChanged("UseEvites");
    			}
    		}
    	}
    	private bool _useEvites;
    	partial void ShowOnPWSChanged();
    	public bool ShowOnPWS
    	{
    		get { return _showOnPWS; }
    		set
    		{
    			if (_showOnPWS != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShowOnPWS", _showOnPWS);
    				_showOnPWS = value;
    				ShowOnPWSChanged();
    				OnPropertyChanged("ShowOnPWS");
    			}
    		}
    	}
    	private bool _showOnPWS;
    	partial void StartDateUTCChanged();
    	public System.DateTime StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private System.DateTime _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void ParentPartyIDChanged();
    	public Nullable<int> ParentPartyID
    	{
    		get { return _parentPartyID; }
    		set
    		{
    			if (_parentPartyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParentPartyID", _parentPartyID);
    				if (!IsDeserializing)
    				{
    					if (ParentParty != null && ParentParty.PartyID != value)
    					{
    						ParentParty = null;
    					}
    				}
    				_parentPartyID = value;
    				ParentPartyIDChanged();
    				OnPropertyChanged("ParentPartyID");
    			}
    		}
    	}
    	private Nullable<int> _parentPartyID;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public Address Address
    	{
    		get { return _address; }
    		set
    		{
    			if (!ReferenceEquals(_address, value))
    			{
    				var previousValue = _address;
    				_address = value;
    				FixupAddress(previousValue);
    				OnNavigationPropertyChanged("Address");
    			}
    		}
    	}
    	private Address _address;
    
    	public Order Order
    	{
    		get { return _order; }
    		set
    		{
    			if (!ReferenceEquals(_order, value))
    			{
    				var previousValue = _order;
    				_order = value;
    				FixupOrder(previousValue);
    				OnNavigationPropertyChanged("Order");
    			}
    		}
    	}
    	private Order _order;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<PartyRsvp> PartyRsvps
    	{
    		get
    		{
    			if (_partyRsvps == null)
    			{
    				_partyRsvps = new TrackableCollection<PartyRsvp>();
    				_partyRsvps.CollectionChanged += FixupPartyRsvps;
    				_partyRsvps.CollectionChanged += RaisePartyRsvpsChanged;
    			}
    			return _partyRsvps;
    		}
    		set
    		{
    			if (!ReferenceEquals(_partyRsvps, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_partyRsvps != null)
    				{
    					_partyRsvps.CollectionChanged -= FixupPartyRsvps;
    					_partyRsvps.CollectionChanged -= RaisePartyRsvpsChanged;
    				}
    				_partyRsvps = value;
    				if (_partyRsvps != null)
    				{
    					_partyRsvps.CollectionChanged += FixupPartyRsvps;
    					_partyRsvps.CollectionChanged += RaisePartyRsvpsChanged;
    				}
    				OnNavigationPropertyChanged("PartyRsvps");
    			}
    		}
    	}
    	private TrackableCollection<PartyRsvp> _partyRsvps;
    	partial void PartyRsvpsChanged();
    	private void RaisePartyRsvpsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PartyRsvpsChanged();
    	}
    
    	public TrackableCollection<PartyGuest> PartyGuests
    	{
    		get
    		{
    			if (_partyGuests == null)
    			{
    				_partyGuests = new TrackableCollection<PartyGuest>();
    				_partyGuests.CollectionChanged += FixupPartyGuests;
    				_partyGuests.CollectionChanged += RaisePartyGuestsChanged;
    			}
    			return _partyGuests;
    		}
    		set
    		{
    			if (!ReferenceEquals(_partyGuests, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_partyGuests != null)
    				{
    					_partyGuests.CollectionChanged -= FixupPartyGuests;
    					_partyGuests.CollectionChanged -= RaisePartyGuestsChanged;
    				}
    				_partyGuests = value;
    				if (_partyGuests != null)
    				{
    					_partyGuests.CollectionChanged += FixupPartyGuests;
    					_partyGuests.CollectionChanged += RaisePartyGuestsChanged;
    				}
    				OnNavigationPropertyChanged("PartyGuests");
    			}
    		}
    	}
    	private TrackableCollection<PartyGuest> _partyGuests;
    	partial void PartyGuestsChanged();
    	private void RaisePartyGuestsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PartyGuestsChanged();
    	}
    
    	public TrackableCollection<EmailTemplateToken> EmailTemplateTokens
    	{
    		get
    		{
    			if (_emailTemplateTokens == null)
    			{
    				_emailTemplateTokens = new TrackableCollection<EmailTemplateToken>();
    				_emailTemplateTokens.CollectionChanged += FixupEmailTemplateTokens;
    				_emailTemplateTokens.CollectionChanged += RaiseEmailTemplateTokensChanged;
    			}
    			return _emailTemplateTokens;
    		}
    		set
    		{
    			if (!ReferenceEquals(_emailTemplateTokens, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_emailTemplateTokens != null)
    				{
    					_emailTemplateTokens.CollectionChanged -= FixupEmailTemplateTokens;
    					_emailTemplateTokens.CollectionChanged -= RaiseEmailTemplateTokensChanged;
    				}
    				_emailTemplateTokens = value;
    				if (_emailTemplateTokens != null)
    				{
    					_emailTemplateTokens.CollectionChanged += FixupEmailTemplateTokens;
    					_emailTemplateTokens.CollectionChanged += RaiseEmailTemplateTokensChanged;
    				}
    				OnNavigationPropertyChanged("EmailTemplateTokens");
    			}
    		}
    	}
    	private TrackableCollection<EmailTemplateToken> _emailTemplateTokens;
    	partial void EmailTemplateTokensChanged();
    	private void RaiseEmailTemplateTokensChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		EmailTemplateTokensChanged();
    	}
    
    	public TrackableCollection<Party> ChildParties
    	{
    		get
    		{
    			if (_childParties == null)
    			{
    				_childParties = new TrackableCollection<Party>();
    				_childParties.CollectionChanged += FixupChildParties;
    				_childParties.CollectionChanged += RaiseChildPartiesChanged;
    			}
    			return _childParties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_childParties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_childParties != null)
    				{
    					_childParties.CollectionChanged -= FixupChildParties;
    					_childParties.CollectionChanged -= RaiseChildPartiesChanged;
    				}
    				_childParties = value;
    				if (_childParties != null)
    				{
    					_childParties.CollectionChanged += FixupChildParties;
    					_childParties.CollectionChanged += RaiseChildPartiesChanged;
    				}
    				OnNavigationPropertyChanged("ChildParties");
    			}
    		}
    	}
    	private TrackableCollection<Party> _childParties;
    	partial void ChildPartiesChanged();
    	private void RaiseChildPartiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ChildPartiesChanged();
    	}
    
    	public Party ParentParty
    	{
    		get { return _parentParty; }
    		set
    		{
    			if (!ReferenceEquals(_parentParty, value))
    			{
    				var previousValue = _parentParty;
    				_parentParty = value;
    				FixupParentParty(previousValue);
    				OnNavigationPropertyChanged("ParentParty");
    			}
    		}
    	}
    	private Party _parentParty;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_partyRsvps != null)
    		{
    			_partyRsvps.CollectionChanged -= FixupPartyRsvps;
    			_partyRsvps.CollectionChanged -= RaisePartyRsvpsChanged;
    			_partyRsvps.CollectionChanged += FixupPartyRsvps;
    			_partyRsvps.CollectionChanged += RaisePartyRsvpsChanged;
    		}
    		if (_partyGuests != null)
    		{
    			_partyGuests.CollectionChanged -= FixupPartyGuests;
    			_partyGuests.CollectionChanged -= RaisePartyGuestsChanged;
    			_partyGuests.CollectionChanged += FixupPartyGuests;
    			_partyGuests.CollectionChanged += RaisePartyGuestsChanged;
    		}
    		if (_emailTemplateTokens != null)
    		{
    			_emailTemplateTokens.CollectionChanged -= FixupEmailTemplateTokens;
    			_emailTemplateTokens.CollectionChanged -= RaiseEmailTemplateTokensChanged;
    			_emailTemplateTokens.CollectionChanged += FixupEmailTemplateTokens;
    			_emailTemplateTokens.CollectionChanged += RaiseEmailTemplateTokensChanged;
    		}
    		if (_childParties != null)
    		{
    			_childParties.CollectionChanged -= FixupChildParties;
    			_childParties.CollectionChanged -= RaiseChildPartiesChanged;
    			_childParties.CollectionChanged += FixupChildParties;
    			_childParties.CollectionChanged += RaiseChildPartiesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Address = null;
    		Order = null;
    		User = null;
    		PartyRsvps.Clear();
    		PartyGuests.Clear();
    		EmailTemplateTokens.Clear();
    		ChildParties.Clear();
    		ParentParty = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAddress(Address previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Parties.Contains(this))
    		{
    			previousValue.Parties.Remove(this);
    		}
    
    		if (Address != null)
    		{
    			if (!Address.Parties.Contains(this))
    			{
    				Address.Parties.Add(this);
    			}
    
    			AddressID = Address.AddressID;
    		}
    		else if (!skipKeys)
    		{
    			AddressID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Address")
    				&& (ChangeTracker.OriginalValues["Address"] == Address))
    			{
    				ChangeTracker.OriginalValues.Remove("Address");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Address", previousValue);
    			}
    			if (Address != null && !Address.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Address.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrder(Order previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Parties.Contains(this))
    		{
    			previousValue.Parties.Remove(this);
    		}
    
    		if (Order != null)
    		{
    			if (!Order.Parties.Contains(this))
    			{
    				Order.Parties.Add(this);
    			}
    
    			OrderID = Order.OrderID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Order")
    				&& (ChangeTracker.OriginalValues["Order"] == Order))
    			{
    				ChangeTracker.OriginalValues.Remove("Order");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Order", previousValue);
    			}
    			if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Order.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Parties.Contains(this))
    		{
    			previousValue.Parties.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Parties.Contains(this))
    			{
    				User.Parties.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupParentParty(Party previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ChildParties.Contains(this))
    		{
    			previousValue.ChildParties.Remove(this);
    		}
    
    		if (ParentParty != null)
    		{
    			if (!ParentParty.ChildParties.Contains(this))
    			{
    				ParentParty.ChildParties.Add(this);
    			}
    
    			ParentPartyID = ParentParty.PartyID;
    		}
    		else if (!skipKeys)
    		{
    			ParentPartyID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ParentParty")
    				&& (ChangeTracker.OriginalValues["ParentParty"] == ParentParty))
    			{
    				ChangeTracker.OriginalValues.Remove("ParentParty");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ParentParty", previousValue);
    			}
    			if (ParentParty != null && !ParentParty.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ParentParty.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPartyRsvps(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PartyRsvp item in e.NewItems)
    			{
    				item.Party = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PartyRsvps", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PartyRsvp item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Party, this))
    				{
    					item.Party = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PartyRsvps", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPartyGuests(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PartyGuest item in e.NewItems)
    			{
    				item.Party = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PartyGuests", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PartyGuest item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Party, this))
    				{
    					item.Party = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PartyGuests", item);
    				}
    			}
    		}
    	}
    
    	private void FixupEmailTemplateTokens(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (EmailTemplateToken item in e.NewItems)
    			{
    				item.Party = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("EmailTemplateTokens", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (EmailTemplateToken item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Party, this))
    				{
    					item.Party = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("EmailTemplateTokens", item);
    				}
    			}
    		}
    	}
    
    	private void FixupChildParties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Party item in e.NewItems)
    			{
    				item.ParentParty = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ChildParties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Party item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ParentParty, this))
    				{
    					item.ParentParty = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ChildParties", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

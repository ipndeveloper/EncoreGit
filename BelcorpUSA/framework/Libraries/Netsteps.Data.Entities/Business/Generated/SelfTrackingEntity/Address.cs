//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountPaymentMethod))]
    [KnownType(typeof(AddressType))]
    [KnownType(typeof(Country))]
    [KnownType(typeof(StateProvince))]
    [KnownType(typeof(User))]
    [KnownType(typeof(CalendarEvent))]
    [KnownType(typeof(TaxCache))]
    [KnownType(typeof(Warehouse))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(Party))]
    [KnownType(typeof(LogisticsProvider))]
    [KnownType(typeof(AddressTaxOverride))]
    [KnownType(typeof(Merchant))]
    [KnownType(typeof(AddressProperty))]
    [KnownType(typeof(PhoneType))]
    [KnownType(typeof(PickupPoint))]
    [Serializable]
    public partial class Address: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AddressIDChanged();
    	public int AddressID
    	{
    		get { return _addressID; }
    		set
    		{
    			if (_addressID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AddressID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_addressID = value;
    				AddressIDChanged();
    				OnPropertyChanged("AddressID");
    			}
    		}
    	}
    	private int _addressID;
    	partial void AddressTypeIDChanged();
    	public short AddressTypeID
    	{
    		get { return _addressTypeID; }
    		set
    		{
    			if (_addressTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AddressTypeID", _addressTypeID);
    				if (!IsDeserializing)
    				{
    					if (AddressType != null && AddressType.AddressTypeID != value)
    					{
    						AddressType = null;
    					}
    				}
    				_addressTypeID = value;
    				AddressTypeIDChanged();
    				OnPropertyChanged("AddressTypeID");
    			}
    		}
    	}
    	private short _addressTypeID;
    	partial void ProfileNameChanged();
    	public string ProfileName
    	{
    		get { return _profileName; }
    		set
    		{
    			if (_profileName != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProfileName", _profileName);
    				_profileName = value;
    				ProfileNameChanged();
    				OnPropertyChanged("ProfileName");
    			}
    		}
    	}
    	private string _profileName;
    	partial void FirstNameChanged();
    	public string FirstName
    	{
    		get { return _firstName; }
    		set
    		{
    			if (_firstName != value)
    			{
    				ChangeTracker.RecordOriginalValue("FirstName", _firstName);
    				_firstName = value;
    				FirstNameChanged();
    				OnPropertyChanged("FirstName");
    			}
    		}
    	}
    	private string _firstName;
    	partial void LastNameChanged();
    	public string LastName
    	{
    		get { return _lastName; }
    		set
    		{
    			if (_lastName != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastName", _lastName);
    				_lastName = value;
    				LastNameChanged();
    				OnPropertyChanged("LastName");
    			}
    		}
    	}
    	private string _lastName;
    	partial void AttentionChanged();
    	public string Attention
    	{
    		get { return _attention; }
    		set
    		{
    			if (_attention != value)
    			{
    				ChangeTracker.RecordOriginalValue("Attention", _attention);
    				_attention = value;
    				AttentionChanged();
    				OnPropertyChanged("Attention");
    			}
    		}
    	}
    	private string _attention;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void Address1Changed();
    	public string Address1
    	{
    		get { return _address1; }
    		set
    		{
    			if (_address1 != value)
    			{
    				ChangeTracker.RecordOriginalValue("Address1", _address1);
    				_address1 = value;
    				Address1Changed();
    				OnPropertyChanged("Address1");
    			}
    		}
    	}
    	private string _address1;
    	partial void Address2Changed();
    	public string Address2
    	{
    		get { return _address2; }
    		set
    		{
    			if (_address2 != value)
    			{
    				ChangeTracker.RecordOriginalValue("Address2", _address2);
    				_address2 = value;
    				Address2Changed();
    				OnPropertyChanged("Address2");
    			}
    		}
    	}
    	private string _address2;
    	partial void Address3Changed();
    	public string Address3
    	{
    		get { return _address3; }
    		set
    		{
    			if (_address3 != value)
    			{
    				ChangeTracker.RecordOriginalValue("Address3", _address3);
    				_address3 = value;
    				Address3Changed();
    				OnPropertyChanged("Address3");
    			}
    		}
    	}
    	private string _address3;
    	partial void CityChanged();
    	public string City
    	{
    		get { return _city; }
    		set
    		{
    			if (_city != value)
    			{
    				ChangeTracker.RecordOriginalValue("City", _city);
    				_city = value;
    				CityChanged();
    				OnPropertyChanged("City");
    			}
    		}
    	}
    	private string _city;
    	partial void CountyChanged();
    	public string County
    	{
    		get { return _county; }
    		set
    		{
    			if (_county != value)
    			{
    				ChangeTracker.RecordOriginalValue("County", _county);
    				_county = value;
    				CountyChanged();
    				OnPropertyChanged("County");
    			}
    		}
    	}
    	private string _county;
    	partial void StateChanged();
    	public string State
    	{
    		get { return _state; }
    		set
    		{
    			if (_state != value)
    			{
    				ChangeTracker.RecordOriginalValue("State", _state);
    				_state = value;
    				StateChanged();
    				OnPropertyChanged("State");
    			}
    		}
    	}
    	private string _state;
    	partial void StateProvinceIDChanged();
    	public Nullable<int> StateProvinceID
    	{
    		get { return _stateProvinceID; }
    		set
    		{
    			if (_stateProvinceID != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateProvinceID", _stateProvinceID);
    				if (!IsDeserializing)
    				{
    					if (StateProvince != null && StateProvince.StateProvinceID != value)
    					{
    						StateProvince = null;
    					}
    				}
    				_stateProvinceID = value;
    				StateProvinceIDChanged();
    				OnPropertyChanged("StateProvinceID");
    			}
    		}
    	}
    	private Nullable<int> _stateProvinceID;
    	partial void PostalCodeChanged();
    	public string PostalCode
    	{
    		get { return _postalCode; }
    		set
    		{
    			if (_postalCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("PostalCode", _postalCode);
    				_postalCode = value;
    				PostalCodeChanged();
    				OnPropertyChanged("PostalCode");
    			}
    		}
    	}
    	private string _postalCode;
    	partial void CountryIDChanged();
    	public int CountryID
    	{
    		get { return _countryID; }
    		set
    		{
    			if (_countryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryID", _countryID);
    				if (!IsDeserializing)
    				{
    					if (Country != null && Country.CountryID != value)
    					{
    						Country = null;
    					}
    				}
    				_countryID = value;
    				CountryIDChanged();
    				OnPropertyChanged("CountryID");
    			}
    		}
    	}
    	private int _countryID;
    	partial void PhoneNumberChanged();
    	public string PhoneNumber
    	{
    		get { return _phoneNumber; }
    		set
    		{
    			if (_phoneNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("PhoneNumber", _phoneNumber);
    				_phoneNumber = value;
    				PhoneNumberChanged();
    				OnPropertyChanged("PhoneNumber");
    			}
    		}
    	}
    	private string _phoneNumber;
    	partial void IsOutsideCityLimitsChanged();
    	public Nullable<bool> IsOutsideCityLimits
    	{
    		get { return _isOutsideCityLimits; }
    		set
    		{
    			if (_isOutsideCityLimits != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsOutsideCityLimits", _isOutsideCityLimits);
    				_isOutsideCityLimits = value;
    				IsOutsideCityLimitsChanged();
    				OnPropertyChanged("IsOutsideCityLimits");
    			}
    		}
    	}
    	private Nullable<bool> _isOutsideCityLimits;
    	partial void IsDefaultChanged();
    	public bool IsDefault
    	{
    		get { return _isDefault; }
    		set
    		{
    			if (_isDefault != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsDefault", _isDefault);
    				_isDefault = value;
    				IsDefaultChanged();
    				OnPropertyChanged("IsDefault");
    			}
    		}
    	}
    	private bool _isDefault;
    	partial void IsGeoCodeCurrentChanged();
    	public bool IsGeoCodeCurrent
    	{
    		get { return _isGeoCodeCurrent; }
    		set
    		{
    			if (_isGeoCodeCurrent != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsGeoCodeCurrent", _isGeoCodeCurrent);
    				_isGeoCodeCurrent = value;
    				IsGeoCodeCurrentChanged();
    				OnPropertyChanged("IsGeoCodeCurrent");
    			}
    		}
    	}
    	private bool _isGeoCodeCurrent;
    	partial void LatitudeChanged();
    	public Nullable<double> Latitude
    	{
    		get { return _latitude; }
    		set
    		{
    			if (_latitude != value)
    			{
    				ChangeTracker.RecordOriginalValue("Latitude", _latitude);
    				_latitude = value;
    				LatitudeChanged();
    				OnPropertyChanged("Latitude");
    			}
    		}
    	}
    	private Nullable<double> _latitude;
    	partial void LongitudeChanged();
    	public Nullable<double> Longitude
    	{
    		get { return _longitude; }
    		set
    		{
    			if (_longitude != value)
    			{
    				ChangeTracker.RecordOriginalValue("Longitude", _longitude);
    				_longitude = value;
    				LongitudeChanged();
    				OnPropertyChanged("Longitude");
    			}
    		}
    	}
    	private Nullable<double> _longitude;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void AddressNumberChanged();
    	public string AddressNumber
    	{
    		get { return _addressNumber; }
    		set
    		{
    			if (_addressNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("AddressNumber", _addressNumber);
    				_addressNumber = value;
    				AddressNumberChanged();
    				OnPropertyChanged("AddressNumber");
    			}
    		}
    	}
    	private string _addressNumber;
    	partial void PhoneTypeIDChanged();
    	public Nullable<int> PhoneTypeID
    	{
    		get { return _phoneTypeID; }
    		set
    		{
    			if (_phoneTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PhoneTypeID", _phoneTypeID);
    				if (!IsDeserializing)
    				{
    					if (PhoneType != null && PhoneType.PhoneTypeID != value)
    					{
    						PhoneType = null;
    					}
    				}
    				_phoneTypeID = value;
    				PhoneTypeIDChanged();
    				OnPropertyChanged("PhoneTypeID");
    			}
    		}
    	}
    	private Nullable<int> _phoneTypeID;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;
    	partial void StreetChanged();
    	public string Street
    	{
    		get { return _street; }
    		set
    		{
    			if (_street != value)
    			{
    				ChangeTracker.RecordOriginalValue("Street", _street);
    				_street = value;
    				StreetChanged();
    				OnPropertyChanged("Street");
    			}
    		}
    	}
    	private string _street;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<AccountPaymentMethod> AccountPaymentMethods
    	{
    		get
    		{
    			if (_accountPaymentMethods == null)
    			{
    				_accountPaymentMethods = new TrackableCollection<AccountPaymentMethod>();
    				_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    				_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    			}
    			return _accountPaymentMethods;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPaymentMethods, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPaymentMethods != null)
    				{
    					_accountPaymentMethods.CollectionChanged -= FixupAccountPaymentMethods;
    					_accountPaymentMethods.CollectionChanged -= RaiseAccountPaymentMethodsChanged;
    				}
    				_accountPaymentMethods = value;
    				if (_accountPaymentMethods != null)
    				{
    					_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    					_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    				}
    				OnNavigationPropertyChanged("AccountPaymentMethods");
    			}
    		}
    	}
    	private TrackableCollection<AccountPaymentMethod> _accountPaymentMethods;
    	partial void AccountPaymentMethodsChanged();
    	private void RaiseAccountPaymentMethodsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPaymentMethodsChanged();
    	}
    
    	public AddressType AddressType
    	{
    		get { return _addressType; }
    		set
    		{
    			if (!ReferenceEquals(_addressType, value))
    			{
    				var previousValue = _addressType;
    				_addressType = value;
    				FixupAddressType(previousValue);
    				OnNavigationPropertyChanged("AddressType");
    			}
    		}
    	}
    	private AddressType _addressType;
    
    	public Country Country
    	{
    		get { return _country; }
    		set
    		{
    			if (!ReferenceEquals(_country, value))
    			{
    				var previousValue = _country;
    				_country = value;
    				FixupCountry(previousValue);
    				OnNavigationPropertyChanged("Country");
    			}
    		}
    	}
    	private Country _country;
    
    	public StateProvince StateProvince
    	{
    		get { return _stateProvince; }
    		set
    		{
    			if (!ReferenceEquals(_stateProvince, value))
    			{
    				var previousValue = _stateProvince;
    				_stateProvince = value;
    				FixupStateProvince(previousValue);
    				OnNavigationPropertyChanged("StateProvince");
    			}
    		}
    	}
    	private StateProvince _stateProvince;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<CalendarEvent> CalendarEvents
    	{
    		get
    		{
    			if (_calendarEvents == null)
    			{
    				_calendarEvents = new TrackableCollection<CalendarEvent>();
    				_calendarEvents.CollectionChanged += FixupCalendarEvents;
    				_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    			}
    			return _calendarEvents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    					_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    				}
    				_calendarEvents = value;
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged += FixupCalendarEvents;
    					_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    				}
    				OnNavigationPropertyChanged("CalendarEvents");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents;
    	partial void CalendarEventsChanged();
    	private void RaiseCalendarEventsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEventsChanged();
    	}
    
    	public TrackableCollection<TaxCache> TaxCaches
    	{
    		get
    		{
    			if (_taxCaches == null)
    			{
    				_taxCaches = new TrackableCollection<TaxCache>();
    				_taxCaches.CollectionChanged += FixupTaxCaches;
    				_taxCaches.CollectionChanged += RaiseTaxCachesChanged;
    			}
    			return _taxCaches;
    		}
    		set
    		{
    			if (!ReferenceEquals(_taxCaches, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_taxCaches != null)
    				{
    					_taxCaches.CollectionChanged -= FixupTaxCaches;
    					_taxCaches.CollectionChanged -= RaiseTaxCachesChanged;
    				}
    				_taxCaches = value;
    				if (_taxCaches != null)
    				{
    					_taxCaches.CollectionChanged += FixupTaxCaches;
    					_taxCaches.CollectionChanged += RaiseTaxCachesChanged;
    				}
    				OnNavigationPropertyChanged("TaxCaches");
    			}
    		}
    	}
    	private TrackableCollection<TaxCache> _taxCaches;
    	partial void TaxCachesChanged();
    	private void RaiseTaxCachesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TaxCachesChanged();
    	}
    
    	public TrackableCollection<Warehouse> Warehouses
    	{
    		get
    		{
    			if (_warehouses == null)
    			{
    				_warehouses = new TrackableCollection<Warehouse>();
    				_warehouses.CollectionChanged += FixupWarehouses;
    				_warehouses.CollectionChanged += RaiseWarehousesChanged;
    			}
    			return _warehouses;
    		}
    		set
    		{
    			if (!ReferenceEquals(_warehouses, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_warehouses != null)
    				{
    					_warehouses.CollectionChanged -= FixupWarehouses;
    					_warehouses.CollectionChanged -= RaiseWarehousesChanged;
    				}
    				_warehouses = value;
    				if (_warehouses != null)
    				{
    					_warehouses.CollectionChanged += FixupWarehouses;
    					_warehouses.CollectionChanged += RaiseWarehousesChanged;
    				}
    				OnNavigationPropertyChanged("Warehouses");
    			}
    		}
    	}
    	private TrackableCollection<Warehouse> _warehouses;
    	partial void WarehousesChanged();
    	private void RaiseWarehousesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		WarehousesChanged();
    	}
    
    	public TrackableCollection<Account> Accounts
    	{
    		get
    		{
    			if (_accounts == null)
    			{
    				_accounts = new TrackableCollection<Account>();
    				_accounts.CollectionChanged += FixupAccounts;
    				_accounts.CollectionChanged += RaiseAccountsChanged;
    			}
    			return _accounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged -= FixupAccounts;
    					_accounts.CollectionChanged -= RaiseAccountsChanged;
    				}
    				_accounts = value;
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged += FixupAccounts;
    					_accounts.CollectionChanged += RaiseAccountsChanged;
    				}
    				OnNavigationPropertyChanged("Accounts");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts;
    	partial void AccountsChanged();
    	private void RaiseAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountsChanged();
    	}
    
    	public TrackableCollection<Party> Parties
    	{
    		get
    		{
    			if (_parties == null)
    			{
    				_parties = new TrackableCollection<Party>();
    				_parties.CollectionChanged += FixupParties;
    				_parties.CollectionChanged += RaisePartiesChanged;
    			}
    			return _parties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_parties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_parties != null)
    				{
    					_parties.CollectionChanged -= FixupParties;
    					_parties.CollectionChanged -= RaisePartiesChanged;
    				}
    				_parties = value;
    				if (_parties != null)
    				{
    					_parties.CollectionChanged += FixupParties;
    					_parties.CollectionChanged += RaisePartiesChanged;
    				}
    				OnNavigationPropertyChanged("Parties");
    			}
    		}
    	}
    	private TrackableCollection<Party> _parties;
    	partial void PartiesChanged();
    	private void RaisePartiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PartiesChanged();
    	}
    
    	public TrackableCollection<LogisticsProvider> LogisticsProviders
    	{
    		get
    		{
    			if (_logisticsProviders == null)
    			{
    				_logisticsProviders = new TrackableCollection<LogisticsProvider>();
    				_logisticsProviders.CollectionChanged += FixupLogisticsProviders;
    				_logisticsProviders.CollectionChanged += RaiseLogisticsProvidersChanged;
    			}
    			return _logisticsProviders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_logisticsProviders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_logisticsProviders != null)
    				{
    					_logisticsProviders.CollectionChanged -= FixupLogisticsProviders;
    					_logisticsProviders.CollectionChanged -= RaiseLogisticsProvidersChanged;
    				}
    				_logisticsProviders = value;
    				if (_logisticsProviders != null)
    				{
    					_logisticsProviders.CollectionChanged += FixupLogisticsProviders;
    					_logisticsProviders.CollectionChanged += RaiseLogisticsProvidersChanged;
    				}
    				OnNavigationPropertyChanged("LogisticsProviders");
    			}
    		}
    	}
    	private TrackableCollection<LogisticsProvider> _logisticsProviders;
    	partial void LogisticsProvidersChanged();
    	private void RaiseLogisticsProvidersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		LogisticsProvidersChanged();
    	}
    
    	public TrackableCollection<AddressTaxOverride> AddressTaxOverrides
    	{
    		get
    		{
    			if (_addressTaxOverrides == null)
    			{
    				_addressTaxOverrides = new TrackableCollection<AddressTaxOverride>();
    				_addressTaxOverrides.CollectionChanged += FixupAddressTaxOverrides;
    				_addressTaxOverrides.CollectionChanged += RaiseAddressTaxOverridesChanged;
    			}
    			return _addressTaxOverrides;
    		}
    		set
    		{
    			if (!ReferenceEquals(_addressTaxOverrides, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_addressTaxOverrides != null)
    				{
    					_addressTaxOverrides.CollectionChanged -= FixupAddressTaxOverrides;
    					_addressTaxOverrides.CollectionChanged -= RaiseAddressTaxOverridesChanged;
    				}
    				_addressTaxOverrides = value;
    				if (_addressTaxOverrides != null)
    				{
    					_addressTaxOverrides.CollectionChanged += FixupAddressTaxOverrides;
    					_addressTaxOverrides.CollectionChanged += RaiseAddressTaxOverridesChanged;
    				}
    				OnNavigationPropertyChanged("AddressTaxOverrides");
    			}
    		}
    	}
    	private TrackableCollection<AddressTaxOverride> _addressTaxOverrides;
    	partial void AddressTaxOverridesChanged();
    	private void RaiseAddressTaxOverridesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AddressTaxOverridesChanged();
    	}
    
    	public TrackableCollection<Merchant> Merchants
    	{
    		get
    		{
    			if (_merchants == null)
    			{
    				_merchants = new TrackableCollection<Merchant>();
    				_merchants.CollectionChanged += FixupMerchants;
    				_merchants.CollectionChanged += RaiseMerchantsChanged;
    			}
    			return _merchants;
    		}
    		set
    		{
    			if (!ReferenceEquals(_merchants, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_merchants != null)
    				{
    					_merchants.CollectionChanged -= FixupMerchants;
    					_merchants.CollectionChanged -= RaiseMerchantsChanged;
    				}
    				_merchants = value;
    				if (_merchants != null)
    				{
    					_merchants.CollectionChanged += FixupMerchants;
    					_merchants.CollectionChanged += RaiseMerchantsChanged;
    				}
    				OnNavigationPropertyChanged("Merchants");
    			}
    		}
    	}
    	private TrackableCollection<Merchant> _merchants;
    	partial void MerchantsChanged();
    	private void RaiseMerchantsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		MerchantsChanged();
    	}
    
    	public TrackableCollection<AddressProperty> AddressProperties
    	{
    		get
    		{
    			if (_addressProperties == null)
    			{
    				_addressProperties = new TrackableCollection<AddressProperty>();
    				_addressProperties.CollectionChanged += FixupAddressProperties;
    				_addressProperties.CollectionChanged += RaiseAddressPropertiesChanged;
    			}
    			return _addressProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_addressProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_addressProperties != null)
    				{
    					_addressProperties.CollectionChanged -= FixupAddressProperties;
    					_addressProperties.CollectionChanged -= RaiseAddressPropertiesChanged;
    				}
    				_addressProperties = value;
    				if (_addressProperties != null)
    				{
    					_addressProperties.CollectionChanged += FixupAddressProperties;
    					_addressProperties.CollectionChanged += RaiseAddressPropertiesChanged;
    				}
    				OnNavigationPropertyChanged("AddressProperties");
    			}
    		}
    	}
    	private TrackableCollection<AddressProperty> _addressProperties;
    	partial void AddressPropertiesChanged();
    	private void RaiseAddressPropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AddressPropertiesChanged();
    	}
    
    	public PhoneType PhoneType
    	{
    		get { return _phoneType; }
    		set
    		{
    			if (!ReferenceEquals(_phoneType, value))
    			{
    				var previousValue = _phoneType;
    				_phoneType = value;
    				FixupPhoneType(previousValue);
    				OnNavigationPropertyChanged("PhoneType");
    			}
    		}
    	}
    	private PhoneType _phoneType;
    
    	public TrackableCollection<PickupPoint> PickupPoints
    	{
    		get
    		{
    			if (_pickupPoints == null)
    			{
    				_pickupPoints = new TrackableCollection<PickupPoint>();
    				_pickupPoints.CollectionChanged += FixupPickupPoints;
    				_pickupPoints.CollectionChanged += RaisePickupPointsChanged;
    			}
    			return _pickupPoints;
    		}
    		set
    		{
    			if (!ReferenceEquals(_pickupPoints, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_pickupPoints != null)
    				{
    					_pickupPoints.CollectionChanged -= FixupPickupPoints;
    					_pickupPoints.CollectionChanged -= RaisePickupPointsChanged;
    				}
    				_pickupPoints = value;
    				if (_pickupPoints != null)
    				{
    					_pickupPoints.CollectionChanged += FixupPickupPoints;
    					_pickupPoints.CollectionChanged += RaisePickupPointsChanged;
    				}
    				OnNavigationPropertyChanged("PickupPoints");
    			}
    		}
    	}
    	private TrackableCollection<PickupPoint> _pickupPoints;
    	partial void PickupPointsChanged();
    	private void RaisePickupPointsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PickupPointsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_accountPaymentMethods != null)
    		{
    			_accountPaymentMethods.CollectionChanged -= FixupAccountPaymentMethods;
    			_accountPaymentMethods.CollectionChanged -= RaiseAccountPaymentMethodsChanged;
    			_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    			_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    		}
    		if (_calendarEvents != null)
    		{
    			_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    			_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    			_calendarEvents.CollectionChanged += FixupCalendarEvents;
    			_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    		}
    		if (_taxCaches != null)
    		{
    			_taxCaches.CollectionChanged -= FixupTaxCaches;
    			_taxCaches.CollectionChanged -= RaiseTaxCachesChanged;
    			_taxCaches.CollectionChanged += FixupTaxCaches;
    			_taxCaches.CollectionChanged += RaiseTaxCachesChanged;
    		}
    		if (_warehouses != null)
    		{
    			_warehouses.CollectionChanged -= FixupWarehouses;
    			_warehouses.CollectionChanged -= RaiseWarehousesChanged;
    			_warehouses.CollectionChanged += FixupWarehouses;
    			_warehouses.CollectionChanged += RaiseWarehousesChanged;
    		}
    		if (_accounts != null)
    		{
    			_accounts.CollectionChanged -= FixupAccounts;
    			_accounts.CollectionChanged -= RaiseAccountsChanged;
    			_accounts.CollectionChanged += FixupAccounts;
    			_accounts.CollectionChanged += RaiseAccountsChanged;
    		}
    		if (_parties != null)
    		{
    			_parties.CollectionChanged -= FixupParties;
    			_parties.CollectionChanged -= RaisePartiesChanged;
    			_parties.CollectionChanged += FixupParties;
    			_parties.CollectionChanged += RaisePartiesChanged;
    		}
    		if (_logisticsProviders != null)
    		{
    			_logisticsProviders.CollectionChanged -= FixupLogisticsProviders;
    			_logisticsProviders.CollectionChanged -= RaiseLogisticsProvidersChanged;
    			_logisticsProviders.CollectionChanged += FixupLogisticsProviders;
    			_logisticsProviders.CollectionChanged += RaiseLogisticsProvidersChanged;
    		}
    		if (_addressTaxOverrides != null)
    		{
    			_addressTaxOverrides.CollectionChanged -= FixupAddressTaxOverrides;
    			_addressTaxOverrides.CollectionChanged -= RaiseAddressTaxOverridesChanged;
    			_addressTaxOverrides.CollectionChanged += FixupAddressTaxOverrides;
    			_addressTaxOverrides.CollectionChanged += RaiseAddressTaxOverridesChanged;
    		}
    		if (_merchants != null)
    		{
    			_merchants.CollectionChanged -= FixupMerchants;
    			_merchants.CollectionChanged -= RaiseMerchantsChanged;
    			_merchants.CollectionChanged += FixupMerchants;
    			_merchants.CollectionChanged += RaiseMerchantsChanged;
    		}
    		if (_addressProperties != null)
    		{
    			_addressProperties.CollectionChanged -= FixupAddressProperties;
    			_addressProperties.CollectionChanged -= RaiseAddressPropertiesChanged;
    			_addressProperties.CollectionChanged += FixupAddressProperties;
    			_addressProperties.CollectionChanged += RaiseAddressPropertiesChanged;
    		}
    		if (_pickupPoints != null)
    		{
    			_pickupPoints.CollectionChanged -= FixupPickupPoints;
    			_pickupPoints.CollectionChanged -= RaisePickupPointsChanged;
    			_pickupPoints.CollectionChanged += FixupPickupPoints;
    			_pickupPoints.CollectionChanged += RaisePickupPointsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountPaymentMethods.Clear();
    		AddressType = null;
    		Country = null;
    		StateProvince = null;
    		User = null;
    		CalendarEvents.Clear();
    		TaxCaches.Clear();
    		Warehouses.Clear();
    		Accounts.Clear();
    		Parties.Clear();
    		LogisticsProviders.Clear();
    		AddressTaxOverrides.Clear();
    		Merchants.Clear();
    		AddressProperties.Clear();
    		PhoneType = null;
    		PickupPoints.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAddressType(AddressType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Addresses.Contains(this))
    		{
    			previousValue.Addresses.Remove(this);
    		}
    
    		if (AddressType != null)
    		{
    			if (!AddressType.Addresses.Contains(this))
    			{
    				AddressType.Addresses.Add(this);
    			}
    
    			AddressTypeID = AddressType.AddressTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AddressType")
    				&& (ChangeTracker.OriginalValues["AddressType"] == AddressType))
    			{
    				ChangeTracker.OriginalValues.Remove("AddressType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AddressType", previousValue);
    			}
    			if (AddressType != null && !AddressType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AddressType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCountry(Country previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Addresses.Contains(this))
    		{
    			previousValue.Addresses.Remove(this);
    		}
    
    		if (Country != null)
    		{
    			if (!Country.Addresses.Contains(this))
    			{
    				Country.Addresses.Add(this);
    			}
    
    			CountryID = Country.CountryID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Country")
    				&& (ChangeTracker.OriginalValues["Country"] == Country))
    			{
    				ChangeTracker.OriginalValues.Remove("Country");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Country", previousValue);
    			}
    			if (Country != null && !Country.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Country.StartTracking();
    			}
    		}
    	}
    
    	private void FixupStateProvince(StateProvince previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Addresses.Contains(this))
    		{
    			previousValue.Addresses.Remove(this);
    		}
    
    		if (StateProvince != null)
    		{
    			if (!StateProvince.Addresses.Contains(this))
    			{
    				StateProvince.Addresses.Add(this);
    			}
    
    			StateProvinceID = StateProvince.StateProvinceID;
    		}
    		else if (!skipKeys)
    		{
    			StateProvinceID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("StateProvince")
    				&& (ChangeTracker.OriginalValues["StateProvince"] == StateProvince))
    			{
    				ChangeTracker.OriginalValues.Remove("StateProvince");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("StateProvince", previousValue);
    			}
    			if (StateProvince != null && !StateProvince.ChangeTracker.ChangeTrackingEnabled)
    			{
    				StateProvince.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Addresses.Contains(this))
    		{
    			previousValue.Addresses.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Addresses.Contains(this))
    			{
    				User.Addresses.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPhoneType(PhoneType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Addresses.Contains(this))
    		{
    			previousValue.Addresses.Remove(this);
    		}
    
    		if (PhoneType != null)
    		{
    			if (!PhoneType.Addresses.Contains(this))
    			{
    				PhoneType.Addresses.Add(this);
    			}
    
    			PhoneTypeID = PhoneType.PhoneTypeID;
    		}
    		else if (!skipKeys)
    		{
    			PhoneTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("PhoneType")
    				&& (ChangeTracker.OriginalValues["PhoneType"] == PhoneType))
    			{
    				ChangeTracker.OriginalValues.Remove("PhoneType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("PhoneType", previousValue);
    			}
    			if (PhoneType != null && !PhoneType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				PhoneType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountPaymentMethods(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPaymentMethod item in e.NewItems)
    			{
    				item.BillingAddress = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPaymentMethods", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPaymentMethod item in e.OldItems)
    			{
    				if (ReferenceEquals(item.BillingAddress, this))
    				{
    					item.BillingAddress = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPaymentMethods", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.Address = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Address, this))
    				{
    					item.Address = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTaxCaches(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (TaxCache item in e.NewItems)
    			{
    				item.Address = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("TaxCaches", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (TaxCache item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Address, this))
    				{
    					item.Address = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("TaxCaches", item);
    				}
    			}
    		}
    	}
    
    	private void FixupWarehouses(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Warehouse item in e.NewItems)
    			{
    				item.Address = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Warehouses", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Warehouse item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Address, this))
    				{
    					item.Address = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Warehouses", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				if (!item.Addresses.Contains(this))
    				{
    					item.Addresses.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (item.Addresses.Contains(this))
    				{
    					item.Addresses.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupParties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Party item in e.NewItems)
    			{
    				item.Address = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Parties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Party item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Address, this))
    				{
    					item.Address = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Parties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupLogisticsProviders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (LogisticsProvider item in e.NewItems)
    			{
    				item.Address = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("LogisticsProviders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (LogisticsProvider item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Address, this))
    				{
    					item.Address = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("LogisticsProviders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAddressTaxOverrides(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AddressTaxOverride item in e.NewItems)
    			{
    				item.Address = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AddressTaxOverrides", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AddressTaxOverride item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Address, this))
    				{
    					item.Address = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AddressTaxOverrides", item);
    				}
    			}
    		}
    	}
    
    	private void FixupMerchants(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Merchant item in e.NewItems)
    			{
    				if (!item.Addresses.Contains(this))
    				{
    					item.Addresses.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Merchants", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Merchant item in e.OldItems)
    			{
    				if (item.Addresses.Contains(this))
    				{
    					item.Addresses.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Merchants", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAddressProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AddressProperty item in e.NewItems)
    			{
    				item.Address = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AddressProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AddressProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Address, this))
    				{
    					item.Address = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AddressProperties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPickupPoints(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PickupPoint item in e.NewItems)
    			{
    				item.Address = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PickupPoints", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PickupPoint item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Address, this))
    				{
    					item.Address = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PickupPoints", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

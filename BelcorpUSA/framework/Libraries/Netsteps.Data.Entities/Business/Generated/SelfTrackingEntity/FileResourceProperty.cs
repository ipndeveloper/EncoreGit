//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(FileResourcePropertyType))]
    [KnownType(typeof(FileResource))]
    [Serializable]
    public partial class FileResourceProperty: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void FileResourcePropertyIDChanged();
    	public int FileResourcePropertyID
    	{
    		get { return _fileResourcePropertyID; }
    		set
    		{
    			if (_fileResourcePropertyID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'FileResourcePropertyID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_fileResourcePropertyID = value;
    				FileResourcePropertyIDChanged();
    				OnPropertyChanged("FileResourcePropertyID");
    			}
    		}
    	}
    	private int _fileResourcePropertyID;
    	partial void FileResourceIDChanged();
    	public int FileResourceID
    	{
    		get { return _fileResourceID; }
    		set
    		{
    			if (_fileResourceID != value)
    			{
    				ChangeTracker.RecordOriginalValue("FileResourceID", _fileResourceID);
    				if (!IsDeserializing)
    				{
    					if (FileResource != null && FileResource.FileResourceID != value)
    					{
    						FileResource = null;
    					}
    				}
    				_fileResourceID = value;
    				FileResourceIDChanged();
    				OnPropertyChanged("FileResourceID");
    			}
    		}
    	}
    	private int _fileResourceID;
    	partial void FileResourcePropertyTypeIDChanged();
    	public int FileResourcePropertyTypeID
    	{
    		get { return _fileResourcePropertyTypeID; }
    		set
    		{
    			if (_fileResourcePropertyTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("FileResourcePropertyTypeID", _fileResourcePropertyTypeID);
    				if (!IsDeserializing)
    				{
    					if (FileResourcePropertyType != null && FileResourcePropertyType.FileResourcePropertyTypeID != value)
    					{
    						FileResourcePropertyType = null;
    					}
    				}
    				_fileResourcePropertyTypeID = value;
    				FileResourcePropertyTypeIDChanged();
    				OnPropertyChanged("FileResourcePropertyTypeID");
    			}
    		}
    	}
    	private int _fileResourcePropertyTypeID;
    	partial void PropertyValueChanged();
    	public string PropertyValue
    	{
    		get { return _propertyValue; }
    		set
    		{
    			if (_propertyValue != value)
    			{
    				ChangeTracker.RecordOriginalValue("PropertyValue", _propertyValue);
    				_propertyValue = value;
    				PropertyValueChanged();
    				OnPropertyChanged("PropertyValue");
    			}
    		}
    	}
    	private string _propertyValue;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public FileResourcePropertyType FileResourcePropertyType
    	{
    		get { return _fileResourcePropertyType; }
    		set
    		{
    			if (!ReferenceEquals(_fileResourcePropertyType, value))
    			{
    				var previousValue = _fileResourcePropertyType;
    				_fileResourcePropertyType = value;
    				FixupFileResourcePropertyType(previousValue);
    				OnNavigationPropertyChanged("FileResourcePropertyType");
    			}
    		}
    	}
    	private FileResourcePropertyType _fileResourcePropertyType;
    
    	public FileResource FileResource
    	{
    		get { return _fileResource; }
    		set
    		{
    			if (!ReferenceEquals(_fileResource, value))
    			{
    				var previousValue = _fileResource;
    				_fileResource = value;
    				FixupFileResource(previousValue);
    				OnNavigationPropertyChanged("FileResource");
    			}
    		}
    	}
    	private FileResource _fileResource;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		FileResourcePropertyType = null;
    		FileResource = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupFileResourcePropertyType(FileResourcePropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.FileResourceProperties.Contains(this))
    		{
    			previousValue.FileResourceProperties.Remove(this);
    		}
    
    		if (FileResourcePropertyType != null)
    		{
    			if (!FileResourcePropertyType.FileResourceProperties.Contains(this))
    			{
    				FileResourcePropertyType.FileResourceProperties.Add(this);
    			}
    
    			FileResourcePropertyTypeID = FileResourcePropertyType.FileResourcePropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("FileResourcePropertyType")
    				&& (ChangeTracker.OriginalValues["FileResourcePropertyType"] == FileResourcePropertyType))
    			{
    				ChangeTracker.OriginalValues.Remove("FileResourcePropertyType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("FileResourcePropertyType", previousValue);
    			}
    			if (FileResourcePropertyType != null && !FileResourcePropertyType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				FileResourcePropertyType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupFileResource(FileResource previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.FileResourceProperties.Contains(this))
    		{
    			previousValue.FileResourceProperties.Remove(this);
    		}
    
    		if (FileResource != null)
    		{
    			if (!FileResource.FileResourceProperties.Contains(this))
    			{
    				FileResource.FileResourceProperties.Add(this);
    			}
    
    			FileResourceID = FileResource.FileResourceID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("FileResource")
    				&& (ChangeTracker.OriginalValues["FileResource"] == FileResource))
    			{
    				ChangeTracker.OriginalValues.Remove("FileResource");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("FileResource", previousValue);
    			}
    			if (FileResource != null && !FileResource.ChangeTracker.ChangeTrackingEnabled)
    			{
    				FileResource.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

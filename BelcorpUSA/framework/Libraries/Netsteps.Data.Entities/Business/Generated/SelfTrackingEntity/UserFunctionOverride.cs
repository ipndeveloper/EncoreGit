//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Function))]
    [KnownType(typeof(User))]
    [Serializable]
    public partial class UserFunctionOverride: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void UserFunctionOverrideIDChanged();
    	public int UserFunctionOverrideID
    	{
    		get { return _userFunctionOverrideID; }
    		set
    		{
    			if (_userFunctionOverrideID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'UserFunctionOverrideID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_userFunctionOverrideID = value;
    				UserFunctionOverrideIDChanged();
    				OnPropertyChanged("UserFunctionOverrideID");
    			}
    		}
    	}
    	private int _userFunctionOverrideID;
    	partial void UserIDChanged();
    	public int UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserID", _userID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private int _userID;
    	partial void FunctionIDChanged();
    	public int FunctionID
    	{
    		get { return _functionID; }
    		set
    		{
    			if (_functionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("FunctionID", _functionID);
    				if (!IsDeserializing)
    				{
    					if (Function != null && Function.FunctionID != value)
    					{
    						Function = null;
    					}
    				}
    				_functionID = value;
    				FunctionIDChanged();
    				OnPropertyChanged("FunctionID");
    			}
    		}
    	}
    	private int _functionID;
    	partial void AllowChanged();
    	public bool Allow
    	{
    		get { return _allow; }
    		set
    		{
    			if (_allow != value)
    			{
    				ChangeTracker.RecordOriginalValue("Allow", _allow);
    				_allow = value;
    				AllowChanged();
    				OnPropertyChanged("Allow");
    			}
    		}
    	}
    	private bool _allow;

        #endregion
        #region Navigation Properties
    
    	public Function Function
    	{
    		get { return _function; }
    		set
    		{
    			if (!ReferenceEquals(_function, value))
    			{
    				var previousValue = _function;
    				_function = value;
    				FixupFunction(previousValue);
    				OnNavigationPropertyChanged("Function");
    			}
    		}
    	}
    	private Function _function;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Function = null;
    		User = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupFunction(Function previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.UserFunctionOverrides.Contains(this))
    		{
    			previousValue.UserFunctionOverrides.Remove(this);
    		}
    
    		if (Function != null)
    		{
    			if (!Function.UserFunctionOverrides.Contains(this))
    			{
    				Function.UserFunctionOverrides.Add(this);
    			}
    
    			FunctionID = Function.FunctionID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Function")
    				&& (ChangeTracker.OriginalValues["Function"] == Function))
    			{
    				ChangeTracker.OriginalValues.Remove("Function");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Function", previousValue);
    			}
    			if (Function != null && !Function.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Function.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.UserFunctionOverrides.Contains(this))
    		{
    			previousValue.UserFunctionOverrides.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.UserFunctionOverrides.Contains(this))
    			{
    				User.UserFunctionOverrides.Add(this);
    			}
    
    			UserID = User.UserID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

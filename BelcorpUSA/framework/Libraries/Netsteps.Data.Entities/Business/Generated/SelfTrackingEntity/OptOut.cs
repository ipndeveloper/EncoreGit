//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OptOutType))]
    [Serializable]
    public partial class OptOut: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OptOutIDChanged();
    	public int OptOutID
    	{
    		get { return _optOutID; }
    		set
    		{
    			if (_optOutID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OptOutID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_optOutID = value;
    				OptOutIDChanged();
    				OnPropertyChanged("OptOutID");
    			}
    		}
    	}
    	private int _optOutID;
    	partial void OptOutTypeIDChanged();
    	public short OptOutTypeID
    	{
    		get { return _optOutTypeID; }
    		set
    		{
    			if (_optOutTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OptOutTypeID", _optOutTypeID);
    				if (!IsDeserializing)
    				{
    					if (OptOutType != null && OptOutType.OptOutTypeID != value)
    					{
    						OptOutType = null;
    					}
    				}
    				_optOutTypeID = value;
    				OptOutTypeIDChanged();
    				OnPropertyChanged("OptOutTypeID");
    			}
    		}
    	}
    	private short _optOutTypeID;
    	partial void EmailAddressChanged();
    	public string EmailAddress
    	{
    		get { return _emailAddress; }
    		set
    		{
    			if (_emailAddress != value)
    			{
    				ChangeTracker.RecordOriginalValue("EmailAddress", _emailAddress);
    				_emailAddress = value;
    				EmailAddressChanged();
    				OnPropertyChanged("EmailAddress");
    			}
    		}
    	}
    	private string _emailAddress;

        #endregion
        #region Navigation Properties
    
    	public OptOutType OptOutType
    	{
    		get { return _optOutType; }
    		set
    		{
    			if (!ReferenceEquals(_optOutType, value))
    			{
    				var previousValue = _optOutType;
    				_optOutType = value;
    				FixupOptOutType(previousValue);
    				OnNavigationPropertyChanged("OptOutType");
    			}
    		}
    	}
    	private OptOutType _optOutType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OptOutType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOptOutType(OptOutType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OptOuts.Contains(this))
    		{
    			previousValue.OptOuts.Remove(this);
    		}
    
    		if (OptOutType != null)
    		{
    			if (!OptOutType.OptOuts.Contains(this))
    			{
    				OptOutType.OptOuts.Add(this);
    			}
    
    			OptOutTypeID = OptOutType.OptOutTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OptOutType")
    				&& (ChangeTracker.OriginalValues["OptOutType"] == OptOutType))
    			{
    				ChangeTracker.OriginalValues.Remove("OptOutType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OptOutType", previousValue);
    			}
    			if (OptOutType != null && !OptOutType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OptOutType.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

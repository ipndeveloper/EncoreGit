//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderItem))]
    [KnownType(typeof(ReturnReason))]
    [Serializable]
    public partial class OrderItemReturn: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderItemReturnIDChanged();
    	public int OrderItemReturnID
    	{
    		get { return _orderItemReturnID; }
    		set
    		{
    			if (_orderItemReturnID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderItemReturnID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderItemReturnID = value;
    				OrderItemReturnIDChanged();
    				OnPropertyChanged("OrderItemReturnID");
    			}
    		}
    	}
    	private int _orderItemReturnID;
    	partial void OrderItemIDChanged();
    	public int OrderItemID
    	{
    		get { return _orderItemID; }
    		set
    		{
    			if (_orderItemID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemID", _orderItemID);
    				if (!IsDeserializing)
    				{
    					if (OrderItem != null && OrderItem.OrderItemID != value)
    					{
    						OrderItem = null;
    					}
    				}
    				_orderItemID = value;
    				OrderItemIDChanged();
    				OnPropertyChanged("OrderItemID");
    			}
    		}
    	}
    	private int _orderItemID;
    	partial void IsDestroyedChanged();
    	public bool IsDestroyed
    	{
    		get { return _isDestroyed; }
    		set
    		{
    			if (_isDestroyed != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsDestroyed", _isDestroyed);
    				_isDestroyed = value;
    				IsDestroyedChanged();
    				OnPropertyChanged("IsDestroyed");
    			}
    		}
    	}
    	private bool _isDestroyed;
    	partial void IsRestockedChanged();
    	public bool IsRestocked
    	{
    		get { return _isRestocked; }
    		set
    		{
    			if (_isRestocked != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsRestocked", _isRestocked);
    				_isRestocked = value;
    				IsRestockedChanged();
    				OnPropertyChanged("IsRestocked");
    			}
    		}
    	}
    	private bool _isRestocked;
    	partial void HasBeenReceivedChanged();
    	public bool HasBeenReceived
    	{
    		get { return _hasBeenReceived; }
    		set
    		{
    			if (_hasBeenReceived != value)
    			{
    				ChangeTracker.RecordOriginalValue("HasBeenReceived", _hasBeenReceived);
    				_hasBeenReceived = value;
    				HasBeenReceivedChanged();
    				OnPropertyChanged("HasBeenReceived");
    			}
    		}
    	}
    	private bool _hasBeenReceived;
    	partial void ReturnReasonIDChanged();
    	public int ReturnReasonID
    	{
    		get { return _returnReasonID; }
    		set
    		{
    			if (_returnReasonID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ReturnReasonID", _returnReasonID);
    				if (!IsDeserializing)
    				{
    					if (ReturnReason != null && ReturnReason.ReturnReasonID != value)
    					{
    						ReturnReason = null;
    					}
    				}
    				_returnReasonID = value;
    				ReturnReasonIDChanged();
    				OnPropertyChanged("ReturnReasonID");
    			}
    		}
    	}
    	private int _returnReasonID;
    	partial void QuantityChanged();
    	public int Quantity
    	{
    		get { return _quantity; }
    		set
    		{
    			if (_quantity != value)
    			{
    				ChangeTracker.RecordOriginalValue("Quantity", _quantity);
    				_quantity = value;
    				QuantityChanged();
    				OnPropertyChanged("Quantity");
    			}
    		}
    	}
    	private int _quantity;
    	partial void OriginalOrderItemIDChanged();
    	public Nullable<int> OriginalOrderItemID
    	{
    		get { return _originalOrderItemID; }
    		set
    		{
    			if (_originalOrderItemID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OriginalOrderItemID", _originalOrderItemID);
    				if (!IsDeserializing)
    				{
    					if (OriginalOrderItem != null && OriginalOrderItem.OrderItemID != value)
    					{
    						OriginalOrderItem = null;
    					}
    				}
    				_originalOrderItemID = value;
    				OriginalOrderItemIDChanged();
    				OnPropertyChanged("OriginalOrderItemID");
    			}
    		}
    	}
    	private Nullable<int> _originalOrderItemID;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;

        #endregion
        #region Navigation Properties
    
    	public OrderItem OrderItem
    	{
    		get { return _orderItem; }
    		set
    		{
    			if (!ReferenceEquals(_orderItem, value))
    			{
    				var previousValue = _orderItem;
    				_orderItem = value;
    				FixupOrderItem(previousValue);
    				OnNavigationPropertyChanged("OrderItem");
    			}
    		}
    	}
    	private OrderItem _orderItem;
    
    	public ReturnReason ReturnReason
    	{
    		get { return _returnReason; }
    		set
    		{
    			if (!ReferenceEquals(_returnReason, value))
    			{
    				var previousValue = _returnReason;
    				_returnReason = value;
    				FixupReturnReason(previousValue);
    				OnNavigationPropertyChanged("ReturnReason");
    			}
    		}
    	}
    	private ReturnReason _returnReason;
    
    	public OrderItem OriginalOrderItem
    	{
    		get { return _originalOrderItem; }
    		set
    		{
    			if (!ReferenceEquals(_originalOrderItem, value))
    			{
    				var previousValue = _originalOrderItem;
    				_originalOrderItem = value;
    				FixupOriginalOrderItem(previousValue);
    				OnNavigationPropertyChanged("OriginalOrderItem");
    			}
    		}
    	}
    	private OrderItem _originalOrderItem;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderItem = null;
    		ReturnReason = null;
    		OriginalOrderItem = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderItem(OrderItem previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItemReturns.Contains(this))
    		{
    			previousValue.OrderItemReturns.Remove(this);
    		}
    
    		if (OrderItem != null)
    		{
    			if (!OrderItem.OrderItemReturns.Contains(this))
    			{
    				OrderItem.OrderItemReturns.Add(this);
    			}
    
    			OrderItemID = OrderItem.OrderItemID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItem")
    				&& (ChangeTracker.OriginalValues["OrderItem"] == OrderItem))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItem");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItem", previousValue);
    			}
    			if (OrderItem != null && !OrderItem.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItem.StartTracking();
    			}
    		}
    	}
    
    	private void FixupReturnReason(ReturnReason previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItemReturns.Contains(this))
    		{
    			previousValue.OrderItemReturns.Remove(this);
    		}
    
    		if (ReturnReason != null)
    		{
    			if (!ReturnReason.OrderItemReturns.Contains(this))
    			{
    				ReturnReason.OrderItemReturns.Add(this);
    			}
    
    			ReturnReasonID = ReturnReason.ReturnReasonID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ReturnReason")
    				&& (ChangeTracker.OriginalValues["ReturnReason"] == ReturnReason))
    			{
    				ChangeTracker.OriginalValues.Remove("ReturnReason");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ReturnReason", previousValue);
    			}
    			if (ReturnReason != null && !ReturnReason.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ReturnReason.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOriginalOrderItem(OrderItem previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OriginalOrderItemReturns.Contains(this))
    		{
    			previousValue.OriginalOrderItemReturns.Remove(this);
    		}
    
    		if (OriginalOrderItem != null)
    		{
    			if (!OriginalOrderItem.OriginalOrderItemReturns.Contains(this))
    			{
    				OriginalOrderItem.OriginalOrderItemReturns.Add(this);
    			}
    
    			OriginalOrderItemID = OriginalOrderItem.OrderItemID;
    		}
    		else if (!skipKeys)
    		{
    			OriginalOrderItemID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OriginalOrderItem")
    				&& (ChangeTracker.OriginalValues["OriginalOrderItem"] == OriginalOrderItem))
    			{
    				ChangeTracker.OriginalValues.Remove("OriginalOrderItem");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OriginalOrderItem", previousValue);
    			}
    			if (OriginalOrderItem != null && !OriginalOrderItem.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OriginalOrderItem.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

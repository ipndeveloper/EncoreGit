//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(StatisticType))]
    [KnownType(typeof(StatisticValue))]
    [Serializable]
    public partial class Statistic: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void StatisticIDChanged();
    	public long StatisticID
    	{
    		get { return _statisticID; }
    		set
    		{
    			if (_statisticID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'StatisticID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_statisticID = value;
    				StatisticIDChanged();
    				OnPropertyChanged("StatisticID");
    			}
    		}
    	}
    	private long _statisticID;
    	partial void OccuredDateTimeUTCChanged();
    	public System.DateTime OccuredDateTimeUTC
    	{
    		get { return _occuredDateTimeUTC; }
    		set
    		{
    			if (_occuredDateTimeUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("OccuredDateTimeUTC", _occuredDateTimeUTC);
    				_occuredDateTimeUTC = value;
    				OccuredDateTimeUTCChanged();
    				OnPropertyChanged("OccuredDateTimeUTC");
    			}
    		}
    	}
    	private System.DateTime _occuredDateTimeUTC;
    	partial void StatisticTypeIDChanged();
    	public short StatisticTypeID
    	{
    		get { return _statisticTypeID; }
    		set
    		{
    			if (_statisticTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("StatisticTypeID", _statisticTypeID);
    				if (!IsDeserializing)
    				{
    					if (StatisticType != null && StatisticType.StatisticTypeID != value)
    					{
    						StatisticType = null;
    					}
    				}
    				_statisticTypeID = value;
    				StatisticTypeIDChanged();
    				OnPropertyChanged("StatisticTypeID");
    			}
    		}
    	}
    	private short _statisticTypeID;
    	partial void HasBeenReportedChanged();
    	public bool HasBeenReported
    	{
    		get { return _hasBeenReported; }
    		set
    		{
    			if (_hasBeenReported != value)
    			{
    				ChangeTracker.RecordOriginalValue("HasBeenReported", _hasBeenReported);
    				_hasBeenReported = value;
    				HasBeenReportedChanged();
    				OnPropertyChanged("HasBeenReported");
    			}
    		}
    	}
    	private bool _hasBeenReported;

        #endregion
        #region Navigation Properties
    
    	public StatisticType StatisticType
    	{
    		get { return _statisticType; }
    		set
    		{
    			if (!ReferenceEquals(_statisticType, value))
    			{
    				var previousValue = _statisticType;
    				_statisticType = value;
    				FixupStatisticType(previousValue);
    				OnNavigationPropertyChanged("StatisticType");
    			}
    		}
    	}
    	private StatisticType _statisticType;
    
    	public TrackableCollection<StatisticValue> StatisticValues
    	{
    		get
    		{
    			if (_statisticValues == null)
    			{
    				_statisticValues = new TrackableCollection<StatisticValue>();
    				_statisticValues.CollectionChanged += FixupStatisticValues;
    				_statisticValues.CollectionChanged += RaiseStatisticValuesChanged;
    			}
    			return _statisticValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_statisticValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_statisticValues != null)
    				{
    					_statisticValues.CollectionChanged -= FixupStatisticValues;
    					_statisticValues.CollectionChanged -= RaiseStatisticValuesChanged;
    				}
    				_statisticValues = value;
    				if (_statisticValues != null)
    				{
    					_statisticValues.CollectionChanged += FixupStatisticValues;
    					_statisticValues.CollectionChanged += RaiseStatisticValuesChanged;
    				}
    				OnNavigationPropertyChanged("StatisticValues");
    			}
    		}
    	}
    	private TrackableCollection<StatisticValue> _statisticValues;
    	partial void StatisticValuesChanged();
    	private void RaiseStatisticValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		StatisticValuesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_statisticValues != null)
    		{
    			_statisticValues.CollectionChanged -= FixupStatisticValues;
    			_statisticValues.CollectionChanged -= RaiseStatisticValuesChanged;
    			_statisticValues.CollectionChanged += FixupStatisticValues;
    			_statisticValues.CollectionChanged += RaiseStatisticValuesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		StatisticType = null;
    		StatisticValues.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupStatisticType(StatisticType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Statistics.Contains(this))
    		{
    			previousValue.Statistics.Remove(this);
    		}
    
    		if (StatisticType != null)
    		{
    			if (!StatisticType.Statistics.Contains(this))
    			{
    				StatisticType.Statistics.Add(this);
    			}
    
    			StatisticTypeID = StatisticType.StatisticTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("StatisticType")
    				&& (ChangeTracker.OriginalValues["StatisticType"] == StatisticType))
    			{
    				ChangeTracker.OriginalValues.Remove("StatisticType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("StatisticType", previousValue);
    			}
    			if (StatisticType != null && !StatisticType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				StatisticType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupStatisticValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (StatisticValue item in e.NewItems)
    			{
    				item.Statistic = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("StatisticValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (StatisticValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Statistic, this))
    				{
    					item.Statistic = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("StatisticValues", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

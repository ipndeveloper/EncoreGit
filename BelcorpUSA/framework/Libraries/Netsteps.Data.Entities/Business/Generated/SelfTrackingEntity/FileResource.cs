//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(FileResourceType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(FileResourceProperty))]
    [Serializable]
    public partial class FileResource: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void FileResourceIDChanged();
    	public int FileResourceID
    	{
    		get { return _fileResourceID; }
    		set
    		{
    			if (_fileResourceID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'FileResourceID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_fileResourceID = value;
    				FileResourceIDChanged();
    				OnPropertyChanged("FileResourceID");
    			}
    		}
    	}
    	private int _fileResourceID;
    	partial void FileResourceTypeIDChanged();
    	public int FileResourceTypeID
    	{
    		get { return _fileResourceTypeID; }
    		set
    		{
    			if (_fileResourceTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("FileResourceTypeID", _fileResourceTypeID);
    				if (!IsDeserializing)
    				{
    					if (FileResourceType != null && FileResourceType.FileResourceTypeID != value)
    					{
    						FileResourceType = null;
    					}
    				}
    				_fileResourceTypeID = value;
    				FileResourceTypeIDChanged();
    				OnPropertyChanged("FileResourceTypeID");
    			}
    		}
    	}
    	private int _fileResourceTypeID;
    	partial void FileResourcePathChanged();
    	public string FileResourcePath
    	{
    		get { return _fileResourcePath; }
    		set
    		{
    			if (_fileResourcePath != value)
    			{
    				ChangeTracker.RecordOriginalValue("FileResourcePath", _fileResourcePath);
    				_fileResourcePath = value;
    				FileResourcePathChanged();
    				OnPropertyChanged("FileResourcePath");
    			}
    		}
    	}
    	private string _fileResourcePath;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;

        #endregion
        #region Navigation Properties
    
    	public FileResourceType FileResourceType
    	{
    		get { return _fileResourceType; }
    		set
    		{
    			if (!ReferenceEquals(_fileResourceType, value))
    			{
    				var previousValue = _fileResourceType;
    				_fileResourceType = value;
    				FixupFileResourceType(previousValue);
    				OnNavigationPropertyChanged("FileResourceType");
    			}
    		}
    	}
    	private FileResourceType _fileResourceType;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<Account> Accounts
    	{
    		get
    		{
    			if (_accounts == null)
    			{
    				_accounts = new TrackableCollection<Account>();
    				_accounts.CollectionChanged += FixupAccounts;
    				_accounts.CollectionChanged += RaiseAccountsChanged;
    			}
    			return _accounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged -= FixupAccounts;
    					_accounts.CollectionChanged -= RaiseAccountsChanged;
    				}
    				_accounts = value;
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged += FixupAccounts;
    					_accounts.CollectionChanged += RaiseAccountsChanged;
    				}
    				OnNavigationPropertyChanged("Accounts");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts;
    	partial void AccountsChanged();
    	private void RaiseAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountsChanged();
    	}
    
    	public TrackableCollection<FileResourceProperty> FileResourceProperties
    	{
    		get
    		{
    			if (_fileResourceProperties == null)
    			{
    				_fileResourceProperties = new TrackableCollection<FileResourceProperty>();
    				_fileResourceProperties.CollectionChanged += FixupFileResourceProperties;
    				_fileResourceProperties.CollectionChanged += RaiseFileResourcePropertiesChanged;
    			}
    			return _fileResourceProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_fileResourceProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_fileResourceProperties != null)
    				{
    					_fileResourceProperties.CollectionChanged -= FixupFileResourceProperties;
    					_fileResourceProperties.CollectionChanged -= RaiseFileResourcePropertiesChanged;
    				}
    				_fileResourceProperties = value;
    				if (_fileResourceProperties != null)
    				{
    					_fileResourceProperties.CollectionChanged += FixupFileResourceProperties;
    					_fileResourceProperties.CollectionChanged += RaiseFileResourcePropertiesChanged;
    				}
    				OnNavigationPropertyChanged("FileResourceProperties");
    			}
    		}
    	}
    	private TrackableCollection<FileResourceProperty> _fileResourceProperties;
    	partial void FileResourcePropertiesChanged();
    	private void RaiseFileResourcePropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		FileResourcePropertiesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_accounts != null)
    		{
    			_accounts.CollectionChanged -= FixupAccounts;
    			_accounts.CollectionChanged -= RaiseAccountsChanged;
    			_accounts.CollectionChanged += FixupAccounts;
    			_accounts.CollectionChanged += RaiseAccountsChanged;
    		}
    		if (_fileResourceProperties != null)
    		{
    			_fileResourceProperties.CollectionChanged -= FixupFileResourceProperties;
    			_fileResourceProperties.CollectionChanged -= RaiseFileResourcePropertiesChanged;
    			_fileResourceProperties.CollectionChanged += FixupFileResourceProperties;
    			_fileResourceProperties.CollectionChanged += RaiseFileResourcePropertiesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		FileResourceType = null;
    		User = null;
    		Accounts.Clear();
    		FileResourceProperties.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupFileResourceType(FileResourceType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.FileResources.Contains(this))
    		{
    			previousValue.FileResources.Remove(this);
    		}
    
    		if (FileResourceType != null)
    		{
    			if (!FileResourceType.FileResources.Contains(this))
    			{
    				FileResourceType.FileResources.Add(this);
    			}
    
    			FileResourceTypeID = FileResourceType.FileResourceTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("FileResourceType")
    				&& (ChangeTracker.OriginalValues["FileResourceType"] == FileResourceType))
    			{
    				ChangeTracker.OriginalValues.Remove("FileResourceType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("FileResourceType", previousValue);
    			}
    			if (FileResourceType != null && !FileResourceType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				FileResourceType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.FileResources.Contains(this))
    		{
    			previousValue.FileResources.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.FileResources.Contains(this))
    			{
    				User.FileResources.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				if (!item.FileResources.Contains(this))
    				{
    					item.FileResources.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (item.FileResources.Contains(this))
    				{
    					item.FileResources.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupFileResourceProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (FileResourceProperty item in e.NewItems)
    			{
    				item.FileResource = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("FileResourceProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (FileResourceProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.FileResource, this))
    				{
    					item.FileResource = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("FileResourceProperties", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(HostessRewardRuleType))]
    [KnownType(typeof(HostessRewardType))]
    [KnownType(typeof(Market))]
    [KnownType(typeof(OrderItemType))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(OrderItem))]
    [Serializable]
    public partial class HostessRewardRule: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void HostessRewardRuleIDChanged();
    	public int HostessRewardRuleID
    	{
    		get { return _hostessRewardRuleID; }
    		set
    		{
    			if (_hostessRewardRuleID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'HostessRewardRuleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_hostessRewardRuleID = value;
    				HostessRewardRuleIDChanged();
    				OnPropertyChanged("HostessRewardRuleID");
    			}
    		}
    	}
    	private int _hostessRewardRuleID;
    	partial void HostessRewardTypeIDChanged();
    	public int HostessRewardTypeID
    	{
    		get { return _hostessRewardTypeID; }
    		set
    		{
    			if (_hostessRewardTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HostessRewardTypeID", _hostessRewardTypeID);
    				if (!IsDeserializing)
    				{
    					if (HostessRewardType != null && HostessRewardType.HostessRewardTypeID != value)
    					{
    						HostessRewardType = null;
    					}
    				}
    				_hostessRewardTypeID = value;
    				HostessRewardTypeIDChanged();
    				OnPropertyChanged("HostessRewardTypeID");
    			}
    		}
    	}
    	private int _hostessRewardTypeID;
    	partial void HostessRewardRuleTypeIDChanged();
    	public int HostessRewardRuleTypeID
    	{
    		get { return _hostessRewardRuleTypeID; }
    		set
    		{
    			if (_hostessRewardRuleTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HostessRewardRuleTypeID", _hostessRewardRuleTypeID);
    				if (!IsDeserializing)
    				{
    					if (HostessRewardRuleType != null && HostessRewardRuleType.HostessRewardRuleTypeID != value)
    					{
    						HostessRewardRuleType = null;
    					}
    				}
    				_hostessRewardRuleTypeID = value;
    				HostessRewardRuleTypeIDChanged();
    				OnPropertyChanged("HostessRewardRuleTypeID");
    			}
    		}
    	}
    	private int _hostessRewardRuleTypeID;
    	partial void MinChanged();
    	public Nullable<decimal> Min
    	{
    		get { return _min; }
    		set
    		{
    			if (_min != value)
    			{
    				ChangeTracker.RecordOriginalValue("Min", _min);
    				_min = value;
    				MinChanged();
    				OnPropertyChanged("Min");
    			}
    		}
    	}
    	private Nullable<decimal> _min;
    	partial void MaxChanged();
    	public Nullable<decimal> Max
    	{
    		get { return _max; }
    		set
    		{
    			if (_max != value)
    			{
    				ChangeTracker.RecordOriginalValue("Max", _max);
    				_max = value;
    				MaxChanged();
    				OnPropertyChanged("Max");
    			}
    		}
    	}
    	private Nullable<decimal> _max;
    	partial void RewardChanged();
    	public Nullable<decimal> Reward
    	{
    		get { return _reward; }
    		set
    		{
    			if (_reward != value)
    			{
    				ChangeTracker.RecordOriginalValue("Reward", _reward);
    				_reward = value;
    				RewardChanged();
    				OnPropertyChanged("Reward");
    			}
    		}
    	}
    	private Nullable<decimal> _reward;
    	partial void CreditPercentChanged();
    	public Nullable<decimal> CreditPercent
    	{
    		get { return _creditPercent; }
    		set
    		{
    			if (_creditPercent != value)
    			{
    				ChangeTracker.RecordOriginalValue("CreditPercent", _creditPercent);
    				_creditPercent = value;
    				CreditPercentChanged();
    				OnPropertyChanged("CreditPercent");
    			}
    		}
    	}
    	private Nullable<decimal> _creditPercent;
    	partial void ProductsChanged();
    	public Nullable<int> Products
    	{
    		get { return _products; }
    		set
    		{
    			if (_products != value)
    			{
    				ChangeTracker.RecordOriginalValue("Products", _products);
    				_products = value;
    				ProductsChanged();
    				OnPropertyChanged("Products");
    			}
    		}
    	}
    	private Nullable<int> _products;
    	partial void ProductDiscountChanged();
    	public Nullable<decimal> ProductDiscount
    	{
    		get { return _productDiscount; }
    		set
    		{
    			if (_productDiscount != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductDiscount", _productDiscount);
    				_productDiscount = value;
    				ProductDiscountChanged();
    				OnPropertyChanged("ProductDiscount");
    			}
    		}
    	}
    	private Nullable<decimal> _productDiscount;
    	partial void OrderItemTypeIDChanged();
    	public Nullable<short> OrderItemTypeID
    	{
    		get { return _orderItemTypeID; }
    		set
    		{
    			if (_orderItemTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemTypeID", _orderItemTypeID);
    				if (!IsDeserializing)
    				{
    					if (OrderItemType != null && OrderItemType.OrderItemTypeID != value)
    					{
    						OrderItemType = null;
    					}
    				}
    				_orderItemTypeID = value;
    				OrderItemTypeIDChanged();
    				OnPropertyChanged("OrderItemTypeID");
    			}
    		}
    	}
    	private Nullable<short> _orderItemTypeID;
    	partial void DiscountCapChanged();
    	public Nullable<decimal> DiscountCap
    	{
    		get { return _discountCap; }
    		set
    		{
    			if (_discountCap != value)
    			{
    				ChangeTracker.RecordOriginalValue("DiscountCap", _discountCap);
    				_discountCap = value;
    				DiscountCapChanged();
    				OnPropertyChanged("DiscountCap");
    			}
    		}
    	}
    	private Nullable<decimal> _discountCap;
    	partial void StartDateUTCChanged();
    	public Nullable<System.DateTime> StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void DaysOffsetChanged();
    	public Nullable<int> DaysOffset
    	{
    		get { return _daysOffset; }
    		set
    		{
    			if (_daysOffset != value)
    			{
    				ChangeTracker.RecordOriginalValue("DaysOffset", _daysOffset);
    				_daysOffset = value;
    				DaysOffsetChanged();
    				OnPropertyChanged("DaysOffset");
    			}
    		}
    	}
    	private Nullable<int> _daysOffset;
    	partial void ProductIDChanged();
    	public Nullable<int> ProductID
    	{
    		get { return _productID; }
    		set
    		{
    			if (_productID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductID", _productID);
    				if (!IsDeserializing)
    				{
    					if (Product != null && Product.ProductID != value)
    					{
    						Product = null;
    					}
    				}
    				_productID = value;
    				ProductIDChanged();
    				OnPropertyChanged("ProductID");
    			}
    		}
    	}
    	private Nullable<int> _productID;
    	partial void MarketIDChanged();
    	public Nullable<int> MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				if (!IsDeserializing)
    				{
    					if (Market != null && Market.MarketID != value)
    					{
    						Market = null;
    					}
    				}
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private Nullable<int> _marketID;
    	partial void MinCustomersChanged();
    	public Nullable<int> MinCustomers
    	{
    		get { return _minCustomers; }
    		set
    		{
    			if (_minCustomers != value)
    			{
    				ChangeTracker.RecordOriginalValue("MinCustomers", _minCustomers);
    				_minCustomers = value;
    				MinCustomersChanged();
    				OnPropertyChanged("MinCustomers");
    			}
    		}
    	}
    	private Nullable<int> _minCustomers;
    	partial void IsRedeemedAtChildPartyChanged();
    	public bool IsRedeemedAtChildParty
    	{
    		get { return _isRedeemedAtChildParty; }
    		set
    		{
    			if (_isRedeemedAtChildParty != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsRedeemedAtChildParty", _isRedeemedAtChildParty);
    				_isRedeemedAtChildParty = value;
    				IsRedeemedAtChildPartyChanged();
    				OnPropertyChanged("IsRedeemedAtChildParty");
    			}
    		}
    	}
    	private bool _isRedeemedAtChildParty;
    	partial void MinOrderSubTotalChanged();
    	public Nullable<decimal> MinOrderSubTotal
    	{
    		get { return _minOrderSubTotal; }
    		set
    		{
    			if (_minOrderSubTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("MinOrderSubTotal", _minOrderSubTotal);
    				_minOrderSubTotal = value;
    				MinOrderSubTotalChanged();
    				OnPropertyChanged("MinOrderSubTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _minOrderSubTotal;

        #endregion
        #region Navigation Properties
    
    	public HostessRewardRuleType HostessRewardRuleType
    	{
    		get { return _hostessRewardRuleType; }
    		set
    		{
    			if (!ReferenceEquals(_hostessRewardRuleType, value))
    			{
    				var previousValue = _hostessRewardRuleType;
    				_hostessRewardRuleType = value;
    				FixupHostessRewardRuleType(previousValue);
    				OnNavigationPropertyChanged("HostessRewardRuleType");
    			}
    		}
    	}
    	private HostessRewardRuleType _hostessRewardRuleType;
    
    	public HostessRewardType HostessRewardType
    	{
    		get { return _hostessRewardType; }
    		set
    		{
    			if (!ReferenceEquals(_hostessRewardType, value))
    			{
    				var previousValue = _hostessRewardType;
    				_hostessRewardType = value;
    				FixupHostessRewardType(previousValue);
    				OnNavigationPropertyChanged("HostessRewardType");
    			}
    		}
    	}
    	private HostessRewardType _hostessRewardType;
    
    	public Market Market
    	{
    		get { return _market; }
    		set
    		{
    			if (!ReferenceEquals(_market, value))
    			{
    				var previousValue = _market;
    				_market = value;
    				FixupMarket(previousValue);
    				OnNavigationPropertyChanged("Market");
    			}
    		}
    	}
    	private Market _market;
    
    	public OrderItemType OrderItemType
    	{
    		get { return _orderItemType; }
    		set
    		{
    			if (!ReferenceEquals(_orderItemType, value))
    			{
    				var previousValue = _orderItemType;
    				_orderItemType = value;
    				FixupOrderItemType(previousValue);
    				OnNavigationPropertyChanged("OrderItemType");
    			}
    		}
    	}
    	private OrderItemType _orderItemType;
    
    	public Product Product
    	{
    		get { return _product; }
    		set
    		{
    			if (!ReferenceEquals(_product, value))
    			{
    				var previousValue = _product;
    				_product = value;
    				FixupProduct(previousValue);
    				OnNavigationPropertyChanged("Product");
    			}
    		}
    	}
    	private Product _product;
    
    	public TrackableCollection<OrderItem> OrderItems
    	{
    		get
    		{
    			if (_orderItems == null)
    			{
    				_orderItems = new TrackableCollection<OrderItem>();
    				_orderItems.CollectionChanged += FixupOrderItems;
    				_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    			}
    			return _orderItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged -= FixupOrderItems;
    					_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    				}
    				_orderItems = value;
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged += FixupOrderItems;
    					_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    				}
    				OnNavigationPropertyChanged("OrderItems");
    			}
    		}
    	}
    	private TrackableCollection<OrderItem> _orderItems;
    	partial void OrderItemsChanged();
    	private void RaiseOrderItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderItems != null)
    		{
    			_orderItems.CollectionChanged -= FixupOrderItems;
    			_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    			_orderItems.CollectionChanged += FixupOrderItems;
    			_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		HostessRewardRuleType = null;
    		HostessRewardType = null;
    		Market = null;
    		OrderItemType = null;
    		Product = null;
    		OrderItems.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHostessRewardRuleType(HostessRewardRuleType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HostessRewardRules.Contains(this))
    		{
    			previousValue.HostessRewardRules.Remove(this);
    		}
    
    		if (HostessRewardRuleType != null)
    		{
    			if (!HostessRewardRuleType.HostessRewardRules.Contains(this))
    			{
    				HostessRewardRuleType.HostessRewardRules.Add(this);
    			}
    
    			HostessRewardRuleTypeID = HostessRewardRuleType.HostessRewardRuleTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HostessRewardRuleType")
    				&& (ChangeTracker.OriginalValues["HostessRewardRuleType"] == HostessRewardRuleType))
    			{
    				ChangeTracker.OriginalValues.Remove("HostessRewardRuleType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HostessRewardRuleType", previousValue);
    			}
    			if (HostessRewardRuleType != null && !HostessRewardRuleType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HostessRewardRuleType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupHostessRewardType(HostessRewardType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HostessRewardRules.Contains(this))
    		{
    			previousValue.HostessRewardRules.Remove(this);
    		}
    
    		if (HostessRewardType != null)
    		{
    			if (!HostessRewardType.HostessRewardRules.Contains(this))
    			{
    				HostessRewardType.HostessRewardRules.Add(this);
    			}
    
    			HostessRewardTypeID = HostessRewardType.HostessRewardTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HostessRewardType")
    				&& (ChangeTracker.OriginalValues["HostessRewardType"] == HostessRewardType))
    			{
    				ChangeTracker.OriginalValues.Remove("HostessRewardType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HostessRewardType", previousValue);
    			}
    			if (HostessRewardType != null && !HostessRewardType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HostessRewardType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMarket(Market previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HostessRewardRules.Contains(this))
    		{
    			previousValue.HostessRewardRules.Remove(this);
    		}
    
    		if (Market != null)
    		{
    			if (!Market.HostessRewardRules.Contains(this))
    			{
    				Market.HostessRewardRules.Add(this);
    			}
    
    			MarketID = Market.MarketID;
    		}
    		else if (!skipKeys)
    		{
    			MarketID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Market")
    				&& (ChangeTracker.OriginalValues["Market"] == Market))
    			{
    				ChangeTracker.OriginalValues.Remove("Market");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Market", previousValue);
    			}
    			if (Market != null && !Market.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Market.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderItemType(OrderItemType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HostessRewardRules.Contains(this))
    		{
    			previousValue.HostessRewardRules.Remove(this);
    		}
    
    		if (OrderItemType != null)
    		{
    			if (!OrderItemType.HostessRewardRules.Contains(this))
    			{
    				OrderItemType.HostessRewardRules.Add(this);
    			}
    
    			OrderItemTypeID = OrderItemType.OrderItemTypeID;
    		}
    		else if (!skipKeys)
    		{
    			OrderItemTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItemType")
    				&& (ChangeTracker.OriginalValues["OrderItemType"] == OrderItemType))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItemType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemType", previousValue);
    			}
    			if (OrderItemType != null && !OrderItemType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItemType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProduct(Product previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HostessRewardRules.Contains(this))
    		{
    			previousValue.HostessRewardRules.Remove(this);
    		}
    
    		if (Product != null)
    		{
    			if (!Product.HostessRewardRules.Contains(this))
    			{
    				Product.HostessRewardRules.Add(this);
    			}
    
    			ProductID = Product.ProductID;
    		}
    		else if (!skipKeys)
    		{
    			ProductID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Product")
    				&& (ChangeTracker.OriginalValues["Product"] == Product))
    			{
    				ChangeTracker.OriginalValues.Remove("Product");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Product", previousValue);
    			}
    			if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Product.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItem item in e.NewItems)
    			{
    				item.HostessRewardRule = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HostessRewardRule, this))
    				{
    					item.HostessRewardRule = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

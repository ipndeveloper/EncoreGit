//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountProperty))]
    [KnownType(typeof(AccountPropertyType))]
    [Serializable]
    public partial class AccountPropertyValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountPropertyValueIDChanged();
    	public int AccountPropertyValueID
    	{
    		get { return _accountPropertyValueID; }
    		set
    		{
    			if (_accountPropertyValueID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountPropertyValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountPropertyValueID = value;
    				AccountPropertyValueIDChanged();
    				OnPropertyChanged("AccountPropertyValueID");
    			}
    		}
    	}
    	private int _accountPropertyValueID;
    	partial void AccountPropertyTypeIDChanged();
    	public int AccountPropertyTypeID
    	{
    		get { return _accountPropertyTypeID; }
    		set
    		{
    			if (_accountPropertyTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountPropertyTypeID", _accountPropertyTypeID);
    				if (!IsDeserializing)
    				{
    					if (AccountPropertyType != null && AccountPropertyType.AccountPropertyTypeID != value)
    					{
    						AccountPropertyType = null;
    					}
    				}
    				_accountPropertyTypeID = value;
    				AccountPropertyTypeIDChanged();
    				OnPropertyChanged("AccountPropertyTypeID");
    			}
    		}
    	}
    	private int _accountPropertyTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<AccountProperty> AccountProperties
    	{
    		get
    		{
    			if (_accountProperties == null)
    			{
    				_accountProperties = new TrackableCollection<AccountProperty>();
    				_accountProperties.CollectionChanged += FixupAccountProperties;
    				_accountProperties.CollectionChanged += RaiseAccountPropertiesChanged;
    			}
    			return _accountProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountProperties != null)
    				{
    					_accountProperties.CollectionChanged -= FixupAccountProperties;
    					_accountProperties.CollectionChanged -= RaiseAccountPropertiesChanged;
    				}
    				_accountProperties = value;
    				if (_accountProperties != null)
    				{
    					_accountProperties.CollectionChanged += FixupAccountProperties;
    					_accountProperties.CollectionChanged += RaiseAccountPropertiesChanged;
    				}
    				OnNavigationPropertyChanged("AccountProperties");
    			}
    		}
    	}
    	private TrackableCollection<AccountProperty> _accountProperties;
    	partial void AccountPropertiesChanged();
    	private void RaiseAccountPropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPropertiesChanged();
    	}
    
    	public AccountPropertyType AccountPropertyType
    	{
    		get { return _accountPropertyType; }
    		set
    		{
    			if (!ReferenceEquals(_accountPropertyType, value))
    			{
    				var previousValue = _accountPropertyType;
    				_accountPropertyType = value;
    				FixupAccountPropertyType(previousValue);
    				OnNavigationPropertyChanged("AccountPropertyType");
    			}
    		}
    	}
    	private AccountPropertyType _accountPropertyType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_accountProperties != null)
    		{
    			_accountProperties.CollectionChanged -= FixupAccountProperties;
    			_accountProperties.CollectionChanged -= RaiseAccountPropertiesChanged;
    			_accountProperties.CollectionChanged += FixupAccountProperties;
    			_accountProperties.CollectionChanged += RaiseAccountPropertiesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountProperties.Clear();
    		AccountPropertyType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccountPropertyType(AccountPropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPropertyValues.Contains(this))
    		{
    			previousValue.AccountPropertyValues.Remove(this);
    		}
    
    		if (AccountPropertyType != null)
    		{
    			if (!AccountPropertyType.AccountPropertyValues.Contains(this))
    			{
    				AccountPropertyType.AccountPropertyValues.Add(this);
    			}
    
    			AccountPropertyTypeID = AccountPropertyType.AccountPropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountPropertyType")
    				&& (ChangeTracker.OriginalValues["AccountPropertyType"] == AccountPropertyType))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountPropertyType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountPropertyType", previousValue);
    			}
    			if (AccountPropertyType != null && !AccountPropertyType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountPropertyType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountProperty item in e.NewItems)
    			{
    				item.AccountPropertyValue = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountPropertyValue, this))
    				{
    					item.AccountPropertyValue = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountProperties", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(CampaignActionQueueItem))]
    [KnownType(typeof(QueueItemStatus))]
    [Serializable]
    public partial class CampaignActionQueueHistory: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CampaignActionQueueHistoryIDChanged();
    	public long CampaignActionQueueHistoryID
    	{
    		get { return _campaignActionQueueHistoryID; }
    		set
    		{
    			if (_campaignActionQueueHistoryID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CampaignActionQueueHistoryID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_campaignActionQueueHistoryID = value;
    				CampaignActionQueueHistoryIDChanged();
    				OnPropertyChanged("CampaignActionQueueHistoryID");
    			}
    		}
    	}
    	private long _campaignActionQueueHistoryID;
    	partial void CampaignActionQueueItemIDChanged();
    	public long CampaignActionQueueItemID
    	{
    		get { return _campaignActionQueueItemID; }
    		set
    		{
    			if (_campaignActionQueueItemID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CampaignActionQueueItemID", _campaignActionQueueItemID);
    				if (!IsDeserializing)
    				{
    					if (CampaignActionQueueItem != null && CampaignActionQueueItem.CampaignActionQueueItemID != value)
    					{
    						CampaignActionQueueItem = null;
    					}
    				}
    				_campaignActionQueueItemID = value;
    				CampaignActionQueueItemIDChanged();
    				OnPropertyChanged("CampaignActionQueueItemID");
    			}
    		}
    	}
    	private long _campaignActionQueueItemID;
    	partial void QueueItemStatusIDChanged();
    	public short QueueItemStatusID
    	{
    		get { return _queueItemStatusID; }
    		set
    		{
    			if (_queueItemStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("QueueItemStatusID", _queueItemStatusID);
    				if (!IsDeserializing)
    				{
    					if (QueueItemStatus != null && QueueItemStatus.QueueItemStatusID != value)
    					{
    						QueueItemStatus = null;
    					}
    				}
    				_queueItemStatusID = value;
    				QueueItemStatusIDChanged();
    				OnPropertyChanged("QueueItemStatusID");
    			}
    		}
    	}
    	private short _queueItemStatusID;
    	partial void RunDateUTCChanged();
    	public System.DateTime RunDateUTC
    	{
    		get { return _runDateUTC; }
    		set
    		{
    			if (_runDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("RunDateUTC", _runDateUTC);
    				_runDateUTC = value;
    				RunDateUTCChanged();
    				OnPropertyChanged("RunDateUTC");
    			}
    		}
    	}
    	private System.DateTime _runDateUTC;
    	partial void ResultChanged();
    	public string Result
    	{
    		get { return _result; }
    		set
    		{
    			if (_result != value)
    			{
    				ChangeTracker.RecordOriginalValue("Result", _result);
    				_result = value;
    				ResultChanged();
    				OnPropertyChanged("Result");
    			}
    		}
    	}
    	private string _result;

        #endregion
        #region Navigation Properties
    
    	public CampaignActionQueueItem CampaignActionQueueItem
    	{
    		get { return _campaignActionQueueItem; }
    		set
    		{
    			if (!ReferenceEquals(_campaignActionQueueItem, value))
    			{
    				var previousValue = _campaignActionQueueItem;
    				_campaignActionQueueItem = value;
    				FixupCampaignActionQueueItem(previousValue);
    				OnNavigationPropertyChanged("CampaignActionQueueItem");
    			}
    		}
    	}
    	private CampaignActionQueueItem _campaignActionQueueItem;
    
    	public QueueItemStatus QueueItemStatus
    	{
    		get { return _queueItemStatus; }
    		set
    		{
    			if (!ReferenceEquals(_queueItemStatus, value))
    			{
    				var previousValue = _queueItemStatus;
    				_queueItemStatus = value;
    				FixupQueueItemStatus(previousValue);
    				OnNavigationPropertyChanged("QueueItemStatus");
    			}
    		}
    	}
    	private QueueItemStatus _queueItemStatus;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		CampaignActionQueueItem = null;
    		QueueItemStatus = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCampaignActionQueueItem(CampaignActionQueueItem previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignActionQueueHistories.Contains(this))
    		{
    			previousValue.CampaignActionQueueHistories.Remove(this);
    		}
    
    		if (CampaignActionQueueItem != null)
    		{
    			if (!CampaignActionQueueItem.CampaignActionQueueHistories.Contains(this))
    			{
    				CampaignActionQueueItem.CampaignActionQueueHistories.Add(this);
    			}
    
    			CampaignActionQueueItemID = CampaignActionQueueItem.CampaignActionQueueItemID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CampaignActionQueueItem")
    				&& (ChangeTracker.OriginalValues["CampaignActionQueueItem"] == CampaignActionQueueItem))
    			{
    				ChangeTracker.OriginalValues.Remove("CampaignActionQueueItem");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CampaignActionQueueItem", previousValue);
    			}
    			if (CampaignActionQueueItem != null && !CampaignActionQueueItem.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CampaignActionQueueItem.StartTracking();
    			}
    		}
    	}
    
    	private void FixupQueueItemStatus(QueueItemStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignActionQueueHistories.Contains(this))
    		{
    			previousValue.CampaignActionQueueHistories.Remove(this);
    		}
    
    		if (QueueItemStatus != null)
    		{
    			if (!QueueItemStatus.CampaignActionQueueHistories.Contains(this))
    			{
    				QueueItemStatus.CampaignActionQueueHistories.Add(this);
    			}
    
    			QueueItemStatusID = QueueItemStatus.QueueItemStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("QueueItemStatus")
    				&& (ChangeTracker.OriginalValues["QueueItemStatus"] == QueueItemStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("QueueItemStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("QueueItemStatus", previousValue);
    			}
    			if (QueueItemStatus != null && !QueueItemStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				QueueItemStatus.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

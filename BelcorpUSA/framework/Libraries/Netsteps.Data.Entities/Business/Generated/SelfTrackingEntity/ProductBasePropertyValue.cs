//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductBase))]
    [KnownType(typeof(ProductPropertyValue))]
    [Serializable]
    public partial class ProductBasePropertyValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductBasePropertyValueIDChanged();
    	public int ProductBasePropertyValueID
    	{
    		get { return _productBasePropertyValueID; }
    		set
    		{
    			if (_productBasePropertyValueID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductBasePropertyValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productBasePropertyValueID = value;
    				ProductBasePropertyValueIDChanged();
    				OnPropertyChanged("ProductBasePropertyValueID");
    			}
    		}
    	}
    	private int _productBasePropertyValueID;
    	partial void ProductBaseIDChanged();
    	public int ProductBaseID
    	{
    		get { return _productBaseID; }
    		set
    		{
    			if (_productBaseID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductBaseID", _productBaseID);
    				if (!IsDeserializing)
    				{
    					if (ProductBas != null && ProductBas.ProductBaseID != value)
    					{
    						ProductBas = null;
    					}
    				}
    				_productBaseID = value;
    				ProductBaseIDChanged();
    				OnPropertyChanged("ProductBaseID");
    			}
    		}
    	}
    	private int _productBaseID;
    	partial void ProductPropertyValueIDChanged();
    	public int ProductPropertyValueID
    	{
    		get { return _productPropertyValueID; }
    		set
    		{
    			if (_productPropertyValueID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductPropertyValueID", _productPropertyValueID);
    				if (!IsDeserializing)
    				{
    					if (ProductPropertyValue != null && ProductPropertyValue.ProductPropertyValueID != value)
    					{
    						ProductPropertyValue = null;
    					}
    				}
    				_productPropertyValueID = value;
    				ProductPropertyValueIDChanged();
    				OnPropertyChanged("ProductPropertyValueID");
    			}
    		}
    	}
    	private int _productPropertyValueID;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;
    	partial void FilePathChanged();
    	public string FilePath
    	{
    		get { return _filePath; }
    		set
    		{
    			if (_filePath != value)
    			{
    				ChangeTracker.RecordOriginalValue("FilePath", _filePath);
    				_filePath = value;
    				FilePathChanged();
    				OnPropertyChanged("FilePath");
    			}
    		}
    	}
    	private string _filePath;

        #endregion
        #region Navigation Properties
    
    	public ProductBase ProductBas
    	{
    		get { return _productBas; }
    		set
    		{
    			if (!ReferenceEquals(_productBas, value))
    			{
    				var previousValue = _productBas;
    				_productBas = value;
    				FixupProductBas(previousValue);
    				OnNavigationPropertyChanged("ProductBas");
    			}
    		}
    	}
    	private ProductBase _productBas;
    
    	public ProductPropertyValue ProductPropertyValue
    	{
    		get { return _productPropertyValue; }
    		set
    		{
    			if (!ReferenceEquals(_productPropertyValue, value))
    			{
    				var previousValue = _productPropertyValue;
    				_productPropertyValue = value;
    				FixupProductPropertyValue(previousValue);
    				OnNavigationPropertyChanged("ProductPropertyValue");
    			}
    		}
    	}
    	private ProductPropertyValue _productPropertyValue;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductBas = null;
    		ProductPropertyValue = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductBas(ProductBase previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductBasePropertyValues.Contains(this))
    		{
    			previousValue.ProductBasePropertyValues.Remove(this);
    		}
    
    		if (ProductBas != null)
    		{
    			if (!ProductBas.ProductBasePropertyValues.Contains(this))
    			{
    				ProductBas.ProductBasePropertyValues.Add(this);
    			}
    
    			ProductBaseID = ProductBas.ProductBaseID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductBas")
    				&& (ChangeTracker.OriginalValues["ProductBas"] == ProductBas))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductBas");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductBas", previousValue);
    			}
    			if (ProductBas != null && !ProductBas.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductBas.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductPropertyValue(ProductPropertyValue previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductBasePropertyValues.Contains(this))
    		{
    			previousValue.ProductBasePropertyValues.Remove(this);
    		}
    
    		if (ProductPropertyValue != null)
    		{
    			if (!ProductPropertyValue.ProductBasePropertyValues.Contains(this))
    			{
    				ProductPropertyValue.ProductBasePropertyValues.Add(this);
    			}
    
    			ProductPropertyValueID = ProductPropertyValue.ProductPropertyValueID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductPropertyValue")
    				&& (ChangeTracker.OriginalValues["ProductPropertyValue"] == ProductPropertyValue))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductPropertyValue");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductPropertyValue", previousValue);
    			}
    			if (ProductPropertyValue != null && !ProductPropertyValue.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductPropertyValue.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

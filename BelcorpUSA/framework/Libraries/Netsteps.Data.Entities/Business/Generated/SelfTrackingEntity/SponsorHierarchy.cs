//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [Serializable]
    public partial class SponsorHierarchy: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountIdChanged();
    	public int AccountId
    	{
    		get { return _accountId; }
    		set
    		{
    			if (_accountId != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountId", _accountId);
    				_accountId = value;
    				AccountIdChanged();
    				OnPropertyChanged("AccountId");
    			}
    		}
    	}
    	private int _accountId;
    	partial void SponsorIdChanged();
    	public Nullable<int> SponsorId
    	{
    		get { return _sponsorId; }
    		set
    		{
    			if (_sponsorId != value)
    			{
    				ChangeTracker.RecordOriginalValue("SponsorId", _sponsorId);
    				_sponsorId = value;
    				SponsorIdChanged();
    				OnPropertyChanged("SponsorId");
    			}
    		}
    	}
    	private Nullable<int> _sponsorId;
    	partial void TreeLevelChanged();
    	public int TreeLevel
    	{
    		get { return _treeLevel; }
    		set
    		{
    			if (_treeLevel != value)
    			{
    				ChangeTracker.RecordOriginalValue("TreeLevel", _treeLevel);
    				_treeLevel = value;
    				TreeLevelChanged();
    				OnPropertyChanged("TreeLevel");
    			}
    		}
    	}
    	private int _treeLevel;
    	partial void LeftAnchorChanged();
    	public int LeftAnchor
    	{
    		get { return _leftAnchor; }
    		set
    		{
    			if (_leftAnchor != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'LeftAnchor' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_leftAnchor = value;
    				LeftAnchorChanged();
    				OnPropertyChanged("LeftAnchor");
    			}
    		}
    	}
    	private int _leftAnchor;
    	partial void RightAnchorChanged();
    	public int RightAnchor
    	{
    		get { return _rightAnchor; }
    		set
    		{
    			if (_rightAnchor != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'RightAnchor' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_rightAnchor = value;
    				RightAnchorChanged();
    				OnPropertyChanged("RightAnchor");
    			}
    		}
    	}
    	private int _rightAnchor;
    	partial void NodeNumberChanged();
    	public int NodeNumber
    	{
    		get { return _nodeNumber; }
    		set
    		{
    			if (_nodeNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("NodeNumber", _nodeNumber);
    				_nodeNumber = value;
    				NodeNumberChanged();
    				OnPropertyChanged("NodeNumber");
    			}
    		}
    	}
    	private int _nodeNumber;
    	partial void NodeCountChanged();
    	public int NodeCount
    	{
    		get { return _nodeCount; }
    		set
    		{
    			if (_nodeCount != value)
    			{
    				ChangeTracker.RecordOriginalValue("NodeCount", _nodeCount);
    				_nodeCount = value;
    				NodeCountChanged();
    				OnPropertyChanged("NodeCount");
    			}
    		}
    	}
    	private int _nodeCount;
    	partial void UplineChanged();
    	public byte[] Upline
    	{
    		get { return _upline; }
    		set
    		{
    			if (_upline != value)
    			{
    				ChangeTracker.RecordOriginalValue("Upline", _upline);
    				_upline = value;
    				UplineChanged();
    				OnPropertyChanged("Upline");
    			}
    		}
    	}
    	private byte[] _upline;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    	}

        #endregion
    }
}

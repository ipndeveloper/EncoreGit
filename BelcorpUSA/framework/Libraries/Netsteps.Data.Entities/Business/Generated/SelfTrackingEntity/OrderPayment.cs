//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Country))]
    [KnownType(typeof(OrderCustomer))]
    [KnownType(typeof(OrderPaymentStatus))]
    [KnownType(typeof(PaymentType))]
    [KnownType(typeof(StateProvince))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(OrderPaymentResult))]
    [KnownType(typeof(CreditCardType))]
    [KnownType(typeof(PaymentGateway))]
    [KnownType(typeof(BankAccountType))]
    [Serializable]
    public partial class OrderPayment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderPaymentIDChanged();
    	public int OrderPaymentID
    	{
    		get { return _orderPaymentID; }
    		set
    		{
    			if (_orderPaymentID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderPaymentID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderPaymentID = value;
    				OrderPaymentIDChanged();
    				OnPropertyChanged("OrderPaymentID");
    			}
    		}
    	}
    	private int _orderPaymentID;
    	partial void OrderIDChanged();
    	public int OrderID
    	{
    		get { return _orderID; }
    		set
    		{
    			if (_orderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderID", _orderID);
    				if (!IsDeserializing)
    				{
    					if (Order != null && Order.OrderID != value)
    					{
    						Order = null;
    					}
    				}
    				_orderID = value;
    				OrderIDChanged();
    				OnPropertyChanged("OrderID");
    			}
    		}
    	}
    	private int _orderID;
    	partial void OrderCustomerIDChanged();
    	public Nullable<int> OrderCustomerID
    	{
    		get { return _orderCustomerID; }
    		set
    		{
    			if (_orderCustomerID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderCustomerID", _orderCustomerID);
    				if (!IsDeserializing)
    				{
    					if (OrderCustomer != null && OrderCustomer.OrderCustomerID != value)
    					{
    						OrderCustomer = null;
    					}
    				}
    				_orderCustomerID = value;
    				OrderCustomerIDChanged();
    				OnPropertyChanged("OrderCustomerID");
    			}
    		}
    	}
    	private Nullable<int> _orderCustomerID;
    	partial void PaymentTypeIDChanged();
    	public int PaymentTypeID
    	{
    		get { return _paymentTypeID; }
    		set
    		{
    			if (_paymentTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PaymentTypeID", _paymentTypeID);
    				if (!IsDeserializing)
    				{
    					if (PaymentType != null && PaymentType.PaymentTypeID != value)
    					{
    						PaymentType = null;
    					}
    				}
    				_paymentTypeID = value;
    				PaymentTypeIDChanged();
    				OnPropertyChanged("PaymentTypeID");
    			}
    		}
    	}
    	private int _paymentTypeID;
    	partial void AccountNumberChanged();
    	public string AccountNumber
    	{
    		get { return _accountNumber; }
    		internal set
    		{
    			if (_accountNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountNumber", _accountNumber);
    				_accountNumber = value;
    				AccountNumberChanged();
    				OnPropertyChanged("AccountNumber");
    			}
    		}
    	}
    	private string _accountNumber;
    	partial void BillingFirstNameChanged();
    	public string BillingFirstName
    	{
    		get { return _billingFirstName; }
    		set
    		{
    			if (_billingFirstName != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingFirstName", _billingFirstName);
    				_billingFirstName = value;
    				BillingFirstNameChanged();
    				OnPropertyChanged("BillingFirstName");
    			}
    		}
    	}
    	private string _billingFirstName;
    	partial void BillingLastNameChanged();
    	public string BillingLastName
    	{
    		get { return _billingLastName; }
    		set
    		{
    			if (_billingLastName != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingLastName", _billingLastName);
    				_billingLastName = value;
    				BillingLastNameChanged();
    				OnPropertyChanged("BillingLastName");
    			}
    		}
    	}
    	private string _billingLastName;
    	partial void BillingNameChanged();
    	public string BillingName
    	{
    		get { return _billingName; }
    		set
    		{
    			if (_billingName != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingName", _billingName);
    				_billingName = value;
    				BillingNameChanged();
    				OnPropertyChanged("BillingName");
    			}
    		}
    	}
    	private string _billingName;
    	partial void BillingAddress1Changed();
    	public string BillingAddress1
    	{
    		get { return _billingAddress1; }
    		set
    		{
    			if (_billingAddress1 != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingAddress1", _billingAddress1);
    				_billingAddress1 = value;
    				BillingAddress1Changed();
    				OnPropertyChanged("BillingAddress1");
    			}
    		}
    	}
    	private string _billingAddress1;
    	partial void BillingAddress2Changed();
    	public string BillingAddress2
    	{
    		get { return _billingAddress2; }
    		set
    		{
    			if (_billingAddress2 != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingAddress2", _billingAddress2);
    				_billingAddress2 = value;
    				BillingAddress2Changed();
    				OnPropertyChanged("BillingAddress2");
    			}
    		}
    	}
    	private string _billingAddress2;
    	partial void BillingAddress3Changed();
    	public string BillingAddress3
    	{
    		get { return _billingAddress3; }
    		set
    		{
    			if (_billingAddress3 != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingAddress3", _billingAddress3);
    				_billingAddress3 = value;
    				BillingAddress3Changed();
    				OnPropertyChanged("BillingAddress3");
    			}
    		}
    	}
    	private string _billingAddress3;
    	partial void BillingCityChanged();
    	public string BillingCity
    	{
    		get { return _billingCity; }
    		set
    		{
    			if (_billingCity != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingCity", _billingCity);
    				_billingCity = value;
    				BillingCityChanged();
    				OnPropertyChanged("BillingCity");
    			}
    		}
    	}
    	private string _billingCity;
    	partial void BillingCountyChanged();
    	public string BillingCounty
    	{
    		get { return _billingCounty; }
    		set
    		{
    			if (_billingCounty != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingCounty", _billingCounty);
    				_billingCounty = value;
    				BillingCountyChanged();
    				OnPropertyChanged("BillingCounty");
    			}
    		}
    	}
    	private string _billingCounty;
    	partial void BillingStateChanged();
    	public string BillingState
    	{
    		get { return _billingState; }
    		set
    		{
    			if (_billingState != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingState", _billingState);
    				_billingState = value;
    				BillingStateChanged();
    				OnPropertyChanged("BillingState");
    			}
    		}
    	}
    	private string _billingState;
    	partial void BillingStateProvinceIDChanged();
    	public Nullable<int> BillingStateProvinceID
    	{
    		get { return _billingStateProvinceID; }
    		set
    		{
    			if (_billingStateProvinceID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingStateProvinceID", _billingStateProvinceID);
    				if (!IsDeserializing)
    				{
    					if (StateProvince != null && StateProvince.StateProvinceID != value)
    					{
    						StateProvince = null;
    					}
    				}
    				_billingStateProvinceID = value;
    				BillingStateProvinceIDChanged();
    				OnPropertyChanged("BillingStateProvinceID");
    			}
    		}
    	}
    	private Nullable<int> _billingStateProvinceID;
    	partial void BillingPostalCodeChanged();
    	public string BillingPostalCode
    	{
    		get { return _billingPostalCode; }
    		set
    		{
    			if (_billingPostalCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingPostalCode", _billingPostalCode);
    				_billingPostalCode = value;
    				BillingPostalCodeChanged();
    				OnPropertyChanged("BillingPostalCode");
    			}
    		}
    	}
    	private string _billingPostalCode;
    	partial void BillingCountryIDChanged();
    	public Nullable<int> BillingCountryID
    	{
    		get { return _billingCountryID; }
    		set
    		{
    			if (_billingCountryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingCountryID", _billingCountryID);
    				if (!IsDeserializing)
    				{
    					if (BillingCountry != null && BillingCountry.CountryID != value)
    					{
    						BillingCountry = null;
    					}
    				}
    				_billingCountryID = value;
    				BillingCountryIDChanged();
    				OnPropertyChanged("BillingCountryID");
    			}
    		}
    	}
    	private Nullable<int> _billingCountryID;
    	partial void BillingPhoneNumberChanged();
    	public string BillingPhoneNumber
    	{
    		get { return _billingPhoneNumber; }
    		set
    		{
    			if (_billingPhoneNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingPhoneNumber", _billingPhoneNumber);
    				_billingPhoneNumber = value;
    				BillingPhoneNumberChanged();
    				OnPropertyChanged("BillingPhoneNumber");
    			}
    		}
    	}
    	private string _billingPhoneNumber;
    	partial void IdentityNumberChanged();
    	public string IdentityNumber
    	{
    		get { return _identityNumber; }
    		set
    		{
    			if (_identityNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("IdentityNumber", _identityNumber);
    				_identityNumber = value;
    				IdentityNumberChanged();
    				OnPropertyChanged("IdentityNumber");
    			}
    		}
    	}
    	private string _identityNumber;
    	partial void IdentityStateChanged();
    	public string IdentityState
    	{
    		get { return _identityState; }
    		set
    		{
    			if (_identityState != value)
    			{
    				ChangeTracker.RecordOriginalValue("IdentityState", _identityState);
    				_identityState = value;
    				IdentityStateChanged();
    				OnPropertyChanged("IdentityState");
    			}
    		}
    	}
    	private string _identityState;
    	partial void AmountChanged();
    	public decimal Amount
    	{
    		get { return _amount; }
    		set
    		{
    			if (_amount != value)
    			{
    				ChangeTracker.RecordOriginalValue("Amount", _amount);
    				_amount = value;
    				AmountChanged();
    				OnPropertyChanged("Amount");
    			}
    		}
    	}
    	private decimal _amount;
    	partial void RoutingNumberChanged();
    	public string RoutingNumber
    	{
    		get { return _routingNumber; }
    		set
    		{
    			if (_routingNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("RoutingNumber", _routingNumber);
    				_routingNumber = value;
    				RoutingNumberChanged();
    				OnPropertyChanged("RoutingNumber");
    			}
    		}
    	}
    	private string _routingNumber;
    	partial void OrderPaymentStatusIDChanged();
    	public short OrderPaymentStatusID
    	{
    		get { return _orderPaymentStatusID; }
    		set
    		{
    			if (_orderPaymentStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderPaymentStatusID", _orderPaymentStatusID);
    				if (!IsDeserializing)
    				{
    					if (OrderPaymentStatus != null && OrderPaymentStatus.OrderPaymentStatusID != value)
    					{
    						OrderPaymentStatus = null;
    					}
    				}
    				_orderPaymentStatusID = value;
    				OrderPaymentStatusIDChanged();
    				OnPropertyChanged("OrderPaymentStatusID");
    			}
    		}
    	}
    	private short _orderPaymentStatusID;
    	partial void IsDeferredChanged();
    	public bool IsDeferred
    	{
    		get { return _isDeferred; }
    		set
    		{
    			if (_isDeferred != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsDeferred", _isDeferred);
    				_isDeferred = value;
    				IsDeferredChanged();
    				OnPropertyChanged("IsDeferred");
    			}
    		}
    	}
    	private bool _isDeferred;
    	partial void ProcessOnDateUTCChanged();
    	public Nullable<System.DateTime> ProcessOnDateUTC
    	{
    		get { return _processOnDateUTC; }
    		set
    		{
    			if (_processOnDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProcessOnDateUTC", _processOnDateUTC);
    				_processOnDateUTC = value;
    				ProcessOnDateUTCChanged();
    				OnPropertyChanged("ProcessOnDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _processOnDateUTC;
    	partial void ProcessedDateUTCChanged();
    	public Nullable<System.DateTime> ProcessedDateUTC
    	{
    		get { return _processedDateUTC; }
    		set
    		{
    			if (_processedDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProcessedDateUTC", _processedDateUTC);
    				_processedDateUTC = value;
    				ProcessedDateUTCChanged();
    				OnPropertyChanged("ProcessedDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _processedDateUTC;
    	partial void TransactionIDChanged();
    	public string TransactionID
    	{
    		get { return _transactionID; }
    		set
    		{
    			if (_transactionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TransactionID", _transactionID);
    				_transactionID = value;
    				TransactionIDChanged();
    				OnPropertyChanged("TransactionID");
    			}
    		}
    	}
    	private string _transactionID;
    	partial void DeferredAmountChanged();
    	public Nullable<decimal> DeferredAmount
    	{
    		get { return _deferredAmount; }
    		set
    		{
    			if (_deferredAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("DeferredAmount", _deferredAmount);
    				_deferredAmount = value;
    				DeferredAmountChanged();
    				OnPropertyChanged("DeferredAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _deferredAmount;
    	partial void DeferredTransactionIDChanged();
    	public string DeferredTransactionID
    	{
    		get { return _deferredTransactionID; }
    		set
    		{
    			if (_deferredTransactionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DeferredTransactionID", _deferredTransactionID);
    				_deferredTransactionID = value;
    				DeferredTransactionIDChanged();
    				OnPropertyChanged("DeferredTransactionID");
    			}
    		}
    	}
    	private string _deferredTransactionID;
    	partial void ExpirationDateUTCChanged();
    	public Nullable<System.DateTime> ExpirationDateUTC
    	{
    		get { return _expirationDateUTC; }
    		set
    		{
    			if (_expirationDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpirationDateUTC", _expirationDateUTC);
    				_expirationDateUTC = value;
    				ExpirationDateUTCChanged();
    				OnPropertyChanged("ExpirationDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _expirationDateUTC;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void CurrencyIDChanged();
    	public int CurrencyID
    	{
    		get { return _currencyID; }
    		set
    		{
    			if (_currencyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CurrencyID", _currencyID);
    				if (!IsDeserializing)
    				{
    					if (Currency != null && Currency.CurrencyID != value)
    					{
    						Currency = null;
    					}
    				}
    				_currencyID = value;
    				CurrencyIDChanged();
    				OnPropertyChanged("CurrencyID");
    			}
    		}
    	}
    	private int _currencyID;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void NameOnCardChanged();
    	public string NameOnCard
    	{
    		get { return _nameOnCard; }
    		set
    		{
    			if (_nameOnCard != value)
    			{
    				ChangeTracker.RecordOriginalValue("NameOnCard", _nameOnCard);
    				_nameOnCard = value;
    				NameOnCardChanged();
    				OnPropertyChanged("NameOnCard");
    			}
    		}
    	}
    	private string _nameOnCard;
    	partial void CreditCardTypeIDChanged();
    	public Nullable<short> CreditCardTypeID
    	{
    		get { return _creditCardTypeID; }
    		set
    		{
    			if (_creditCardTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CreditCardTypeID", _creditCardTypeID);
    				if (!IsDeserializing)
    				{
    					if (CreditCardType != null && CreditCardType.CreditCardTypeID != value)
    					{
    						CreditCardType = null;
    					}
    				}
    				_creditCardTypeID = value;
    				CreditCardTypeIDChanged();
    				OnPropertyChanged("CreditCardTypeID");
    			}
    		}
    	}
    	private Nullable<short> _creditCardTypeID;
    	partial void RequestChanged();
    	public string Request
    	{
    		get { return _request; }
    		set
    		{
    			if (_request != value)
    			{
    				ChangeTracker.RecordOriginalValue("Request", _request);
    				_request = value;
    				RequestChanged();
    				OnPropertyChanged("Request");
    			}
    		}
    	}
    	private string _request;
    	partial void AccountNumberLastFourChanged();
    	public string AccountNumberLastFour
    	{
    		get { return _accountNumberLastFour; }
    		set
    		{
    			if (_accountNumberLastFour != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountNumberLastFour", _accountNumberLastFour);
    				_accountNumberLastFour = value;
    				AccountNumberLastFourChanged();
    				OnPropertyChanged("AccountNumberLastFour");
    			}
    		}
    	}
    	private string _accountNumberLastFour;
    	partial void PaymentGatewayIDChanged();
    	public Nullable<short> PaymentGatewayID
    	{
    		get { return _paymentGatewayID; }
    		set
    		{
    			if (_paymentGatewayID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PaymentGatewayID", _paymentGatewayID);
    				if (!IsDeserializing)
    				{
    					if (PaymentGateway != null && PaymentGateway.PaymentGatewayID != value)
    					{
    						PaymentGateway = null;
    					}
    				}
    				_paymentGatewayID = value;
    				PaymentGatewayIDChanged();
    				OnPropertyChanged("PaymentGatewayID");
    			}
    		}
    	}
    	private Nullable<short> _paymentGatewayID;
    	partial void SourceAccountPaymentMethodIDChanged();
    	public Nullable<int> SourceAccountPaymentMethodID
    	{
    		get { return _sourceAccountPaymentMethodID; }
    		set
    		{
    			if (_sourceAccountPaymentMethodID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SourceAccountPaymentMethodID", _sourceAccountPaymentMethodID);
    				_sourceAccountPaymentMethodID = value;
    				SourceAccountPaymentMethodIDChanged();
    				OnPropertyChanged("SourceAccountPaymentMethodID");
    			}
    		}
    	}
    	private Nullable<int> _sourceAccountPaymentMethodID;
    	partial void BankAccountTypeIDChanged();
    	public Nullable<short> BankAccountTypeID
    	{
    		get { return _bankAccountTypeID; }
    		set
    		{
    			if (_bankAccountTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BankAccountTypeID", _bankAccountTypeID);
    				if (!IsDeserializing)
    				{
    					if (BankAccountType != null && BankAccountType.BankAccountTypeID != value)
    					{
    						BankAccountType = null;
    					}
    				}
    				_bankAccountTypeID = value;
    				BankAccountTypeIDChanged();
    				OnPropertyChanged("BankAccountTypeID");
    			}
    		}
    	}
    	private Nullable<short> _bankAccountTypeID;
    	partial void BankNameChanged();
    	public string BankName
    	{
    		get { return _bankName; }
    		set
    		{
    			if (_bankName != value)
    			{
    				ChangeTracker.RecordOriginalValue("BankName", _bankName);
    				_bankName = value;
    				BankNameChanged();
    				OnPropertyChanged("BankName");
    			}
    		}
    	}
    	private string _bankName;
    	partial void NachaClassTypeChanged();
    	public string NachaClassType
    	{
    		get { return _nachaClassType; }
    		set
    		{
    			if (_nachaClassType != value)
    			{
    				ChangeTracker.RecordOriginalValue("NachaClassType", _nachaClassType);
    				_nachaClassType = value;
    				NachaClassTypeChanged();
    				OnPropertyChanged("NachaClassType");
    			}
    		}
    	}
    	private string _nachaClassType;
    	partial void NachaSentDateChanged();
    	public Nullable<System.DateTime> NachaSentDate
    	{
    		get { return _nachaSentDate; }
    		set
    		{
    			if (_nachaSentDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("NachaSentDate", _nachaSentDate);
    				_nachaSentDate = value;
    				NachaSentDateChanged();
    				OnPropertyChanged("NachaSentDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _nachaSentDate;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;
    	partial void BillingStreetChanged();
    	public string BillingStreet
    	{
    		get { return _billingStreet; }
    		set
    		{
    			if (_billingStreet != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingStreet", _billingStreet);
    				_billingStreet = value;
    				BillingStreetChanged();
    				OnPropertyChanged("BillingStreet");
    			}
    		}
    	}
    	private string _billingStreet;
    	partial void NegotiationLevelIDChanged();
    	public Nullable<int> NegotiationLevelID
    	{
    		get { return _negotiationLevelID; }
    		set
    		{
    			if (_negotiationLevelID != value)
    			{
    				ChangeTracker.RecordOriginalValue("NegotiationLevelID", _negotiationLevelID);
    				_negotiationLevelID = value;
    				NegotiationLevelIDChanged();
    				OnPropertyChanged("NegotiationLevelID");
    			}
    		}
    	}
    	private Nullable<int> _negotiationLevelID;
    	partial void OrderExpirationStatusIDChanged();
    	public Nullable<int> OrderExpirationStatusID
    	{
    		get { return _orderExpirationStatusID; }
    		set
    		{
    			if (_orderExpirationStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderExpirationStatusID", _orderExpirationStatusID);
    				_orderExpirationStatusID = value;
    				OrderExpirationStatusIDChanged();
    				OnPropertyChanged("OrderExpirationStatusID");
    			}
    		}
    	}
    	private Nullable<int> _orderExpirationStatusID;
    	partial void PaymentConfigurationIDChanged();
    	public Nullable<int> PaymentConfigurationID
    	{
    		get { return _paymentConfigurationID; }
    		set
    		{
    			if (_paymentConfigurationID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PaymentConfigurationID", _paymentConfigurationID);
    				_paymentConfigurationID = value;
    				PaymentConfigurationIDChanged();
    				OnPropertyChanged("PaymentConfigurationID");
    			}
    		}
    	}
    	private Nullable<int> _paymentConfigurationID;
    	partial void FineAndInterestsRulesIDChanged();
    	public Nullable<int> FineAndInterestsRulesID
    	{
    		get { return _fineAndInterestsRulesID; }
    		set
    		{
    			if (_fineAndInterestsRulesID != value)
    			{
    				ChangeTracker.RecordOriginalValue("FineAndInterestsRulesID", _fineAndInterestsRulesID);
    				_fineAndInterestsRulesID = value;
    				FineAndInterestsRulesIDChanged();
    				OnPropertyChanged("FineAndInterestsRulesID");
    			}
    		}
    	}
    	private Nullable<int> _fineAndInterestsRulesID;
    	partial void TicketNumberChanged();
    	public Nullable<int> TicketNumber
    	{
    		get { return _ticketNumber; }
    		set
    		{
    			if (_ticketNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("TicketNumber", _ticketNumber);
    				_ticketNumber = value;
    				TicketNumberChanged();
    				OnPropertyChanged("TicketNumber");
    			}
    		}
    	}
    	private Nullable<int> _ticketNumber;
    	partial void OriginalExpirationDateChanged();
    	public Nullable<System.DateTime> OriginalExpirationDate
    	{
    		get { return _originalExpirationDate; }
    		set
    		{
    			if (_originalExpirationDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("OriginalExpirationDate", _originalExpirationDate);
    				_originalExpirationDate = value;
    				OriginalExpirationDateChanged();
    				OnPropertyChanged("OriginalExpirationDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _originalExpirationDate;
    	partial void CurrentExpirationDateUTCChanged();
    	public Nullable<System.DateTime> CurrentExpirationDateUTC
    	{
    		get { return _currentExpirationDateUTC; }
    		set
    		{
    			if (_currentExpirationDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("CurrentExpirationDateUTC", _currentExpirationDateUTC);
    				_currentExpirationDateUTC = value;
    				CurrentExpirationDateUTCChanged();
    				OnPropertyChanged("CurrentExpirationDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _currentExpirationDateUTC;
    	partial void InitialAmountChanged();
    	public Nullable<decimal> InitialAmount
    	{
    		get { return _initialAmount; }
    		set
    		{
    			if (_initialAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("InitialAmount", _initialAmount);
    				_initialAmount = value;
    				InitialAmountChanged();
    				OnPropertyChanged("InitialAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _initialAmount;
    	partial void FinancialAmountChanged();
    	public Nullable<decimal> FinancialAmount
    	{
    		get { return _financialAmount; }
    		set
    		{
    			if (_financialAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("FinancialAmount", _financialAmount);
    				_financialAmount = value;
    				FinancialAmountChanged();
    				OnPropertyChanged("FinancialAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _financialAmount;
    	partial void DiscountedAmountChanged();
    	public Nullable<decimal> DiscountedAmount
    	{
    		get { return _discountedAmount; }
    		set
    		{
    			if (_discountedAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("DiscountedAmount", _discountedAmount);
    				_discountedAmount = value;
    				DiscountedAmountChanged();
    				OnPropertyChanged("DiscountedAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _discountedAmount;
    	partial void TotalAmountChanged();
    	public Nullable<decimal> TotalAmount
    	{
    		get { return _totalAmount; }
    		set
    		{
    			if (_totalAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("TotalAmount", _totalAmount);
    				_totalAmount = value;
    				TotalAmountChanged();
    				OnPropertyChanged("TotalAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _totalAmount;
    	partial void DateLastTotalAmountUTCChanged();
    	public Nullable<System.DateTime> DateLastTotalAmountUTC
    	{
    		get { return _dateLastTotalAmountUTC; }
    		set
    		{
    			if (_dateLastTotalAmountUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastTotalAmountUTC", _dateLastTotalAmountUTC);
    				_dateLastTotalAmountUTC = value;
    				DateLastTotalAmountUTCChanged();
    				OnPropertyChanged("DateLastTotalAmountUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateLastTotalAmountUTC;
    	partial void AcceptedChanged();
    	public Nullable<bool> Accepted
    	{
    		get { return _accepted; }
    		set
    		{
    			if (_accepted != value)
    			{
    				ChangeTracker.RecordOriginalValue("Accepted", _accepted);
    				_accepted = value;
    				AcceptedChanged();
    				OnPropertyChanged("Accepted");
    			}
    		}
    	}
    	private Nullable<bool> _accepted;
    	partial void ForefitChanged();
    	public Nullable<bool> Forefit
    	{
    		get { return _forefit; }
    		set
    		{
    			if (_forefit != value)
    			{
    				ChangeTracker.RecordOriginalValue("Forefit", _forefit);
    				_forefit = value;
    				ForefitChanged();
    				OnPropertyChanged("Forefit");
    			}
    		}
    	}
    	private Nullable<bool> _forefit;
    	partial void ExpirationStatusIDChanged();
    	public int ExpirationStatusID
    	{
    		get { return _expirationStatusID; }
    		set
    		{
    			if (_expirationStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpirationStatusID", _expirationStatusID);
    				_expirationStatusID = value;
    				ExpirationStatusIDChanged();
    				OnPropertyChanged("ExpirationStatusID");
    			}
    		}
    	}
    	private int _expirationStatusID;
    	partial void DateValidityChanged();
    	public Nullable<System.DateTime> DateValidity
    	{
    		get { return _dateValidity; }
    		set
    		{
    			if (_dateValidity != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateValidity", _dateValidity);
    				_dateValidity = value;
    				DateValidityChanged();
    				OnPropertyChanged("DateValidity");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateValidity;
    	partial void RenegotiationConfigurationIDChanged();
    	public Nullable<int> RenegotiationConfigurationID
    	{
    		get { return _renegotiationConfigurationID; }
    		set
    		{
    			if (_renegotiationConfigurationID != value)
    			{
    				ChangeTracker.RecordOriginalValue("RenegotiationConfigurationID", _renegotiationConfigurationID);
    				_renegotiationConfigurationID = value;
    				RenegotiationConfigurationIDChanged();
    				OnPropertyChanged("RenegotiationConfigurationID");
    			}
    		}
    	}
    	private Nullable<int> _renegotiationConfigurationID;
    	partial void ExpirationDaysChanged();
    	public Nullable<int> ExpirationDays
    	{
    		get { return _expirationDays; }
    		set
    		{
    			if (_expirationDays != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpirationDays", _expirationDays);
    				_expirationDays = value;
    				ExpirationDaysChanged();
    				OnPropertyChanged("ExpirationDays");
    			}
    		}
    	}
    	private Nullable<int> _expirationDays;

        #endregion
        #region Navigation Properties
    
    	public Country BillingCountry
    	{
    		get { return _billingCountry; }
    		set
    		{
    			if (!ReferenceEquals(_billingCountry, value))
    			{
    				var previousValue = _billingCountry;
    				_billingCountry = value;
    				FixupBillingCountry(previousValue);
    				OnNavigationPropertyChanged("BillingCountry");
    			}
    		}
    	}
    	private Country _billingCountry;
    
    	public OrderCustomer OrderCustomer
    	{
    		get { return _orderCustomer; }
    		set
    		{
    			if (!ReferenceEquals(_orderCustomer, value))
    			{
    				var previousValue = _orderCustomer;
    				_orderCustomer = value;
    				FixupOrderCustomer(previousValue);
    				OnNavigationPropertyChanged("OrderCustomer");
    			}
    		}
    	}
    	private OrderCustomer _orderCustomer;
    
    	public OrderPaymentStatus OrderPaymentStatus
    	{
    		get { return _orderPaymentStatus; }
    		set
    		{
    			if (!ReferenceEquals(_orderPaymentStatus, value))
    			{
    				var previousValue = _orderPaymentStatus;
    				_orderPaymentStatus = value;
    				FixupOrderPaymentStatus(previousValue);
    				OnNavigationPropertyChanged("OrderPaymentStatus");
    			}
    		}
    	}
    	private OrderPaymentStatus _orderPaymentStatus;
    
    	public PaymentType PaymentType
    	{
    		get { return _paymentType; }
    		set
    		{
    			if (!ReferenceEquals(_paymentType, value))
    			{
    				var previousValue = _paymentType;
    				_paymentType = value;
    				FixupPaymentType(previousValue);
    				OnNavigationPropertyChanged("PaymentType");
    			}
    		}
    	}
    	private PaymentType _paymentType;
    
    	public StateProvince StateProvince
    	{
    		get { return _stateProvince; }
    		set
    		{
    			if (!ReferenceEquals(_stateProvince, value))
    			{
    				var previousValue = _stateProvince;
    				_stateProvince = value;
    				FixupStateProvince(previousValue);
    				OnNavigationPropertyChanged("StateProvince");
    			}
    		}
    	}
    	private StateProvince _stateProvince;
    
    	public Currency Currency
    	{
    		get { return _currency; }
    		set
    		{
    			if (!ReferenceEquals(_currency, value))
    			{
    				var previousValue = _currency;
    				_currency = value;
    				FixupCurrency(previousValue);
    				OnNavigationPropertyChanged("Currency");
    			}
    		}
    	}
    	private Currency _currency;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public Order Order
    	{
    		get { return _order; }
    		set
    		{
    			if (!ReferenceEquals(_order, value))
    			{
    				var previousValue = _order;
    				_order = value;
    				FixupOrder(previousValue);
    				OnNavigationPropertyChanged("Order");
    			}
    		}
    	}
    	private Order _order;
    
    	public TrackableCollection<OrderPaymentResult> OrderPaymentResults
    	{
    		get
    		{
    			if (_orderPaymentResults == null)
    			{
    				_orderPaymentResults = new TrackableCollection<OrderPaymentResult>();
    				_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    				_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    			}
    			return _orderPaymentResults;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPaymentResults, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPaymentResults != null)
    				{
    					_orderPaymentResults.CollectionChanged -= FixupOrderPaymentResults;
    					_orderPaymentResults.CollectionChanged -= RaiseOrderPaymentResultsChanged;
    				}
    				_orderPaymentResults = value;
    				if (_orderPaymentResults != null)
    				{
    					_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    					_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPaymentResults");
    			}
    		}
    	}
    	private TrackableCollection<OrderPaymentResult> _orderPaymentResults;
    	partial void OrderPaymentResultsChanged();
    	private void RaiseOrderPaymentResultsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentResultsChanged();
    	}
    
    	public CreditCardType CreditCardType
    	{
    		get { return _creditCardType; }
    		set
    		{
    			if (!ReferenceEquals(_creditCardType, value))
    			{
    				var previousValue = _creditCardType;
    				_creditCardType = value;
    				FixupCreditCardType(previousValue);
    				OnNavigationPropertyChanged("CreditCardType");
    			}
    		}
    	}
    	private CreditCardType _creditCardType;
    
    	public PaymentGateway PaymentGateway
    	{
    		get { return _paymentGateway; }
    		set
    		{
    			if (!ReferenceEquals(_paymentGateway, value))
    			{
    				var previousValue = _paymentGateway;
    				_paymentGateway = value;
    				FixupPaymentGateway(previousValue);
    				OnNavigationPropertyChanged("PaymentGateway");
    			}
    		}
    	}
    	private PaymentGateway _paymentGateway;
    
    	public BankAccountType BankAccountType
    	{
    		get { return _bankAccountType; }
    		set
    		{
    			if (!ReferenceEquals(_bankAccountType, value))
    			{
    				var previousValue = _bankAccountType;
    				_bankAccountType = value;
    				FixupBankAccountType(previousValue);
    				OnNavigationPropertyChanged("BankAccountType");
    			}
    		}
    	}
    	private BankAccountType _bankAccountType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderPaymentResults != null)
    		{
    			_orderPaymentResults.CollectionChanged -= FixupOrderPaymentResults;
    			_orderPaymentResults.CollectionChanged -= RaiseOrderPaymentResultsChanged;
    			_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    			_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		BillingCountry = null;
    		OrderCustomer = null;
    		OrderPaymentStatus = null;
    		PaymentType = null;
    		StateProvince = null;
    		Currency = null;
    		User = null;
    		Order = null;
    		OrderPaymentResults.Clear();
    		CreditCardType = null;
    		PaymentGateway = null;
    		BankAccountType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupBillingCountry(Country previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (BillingCountry != null)
    		{
    			if (!BillingCountry.OrderPayments.Contains(this))
    			{
    				BillingCountry.OrderPayments.Add(this);
    			}
    
    			BillingCountryID = BillingCountry.CountryID;
    		}
    		else if (!skipKeys)
    		{
    			BillingCountryID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("BillingCountry")
    				&& (ChangeTracker.OriginalValues["BillingCountry"] == BillingCountry))
    			{
    				ChangeTracker.OriginalValues.Remove("BillingCountry");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("BillingCountry", previousValue);
    			}
    			if (BillingCountry != null && !BillingCountry.ChangeTracker.ChangeTrackingEnabled)
    			{
    				BillingCountry.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderCustomer(OrderCustomer previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (OrderCustomer != null)
    		{
    			if (!OrderCustomer.OrderPayments.Contains(this))
    			{
    				OrderCustomer.OrderPayments.Add(this);
    			}
    
    			OrderCustomerID = OrderCustomer.OrderCustomerID;
    		}
    		else if (!skipKeys)
    		{
    			OrderCustomerID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderCustomer")
    				&& (ChangeTracker.OriginalValues["OrderCustomer"] == OrderCustomer))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderCustomer");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderCustomer", previousValue);
    			}
    			if (OrderCustomer != null && !OrderCustomer.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderCustomer.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderPaymentStatus(OrderPaymentStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (OrderPaymentStatus != null)
    		{
    			if (!OrderPaymentStatus.OrderPayments.Contains(this))
    			{
    				OrderPaymentStatus.OrderPayments.Add(this);
    			}
    
    			OrderPaymentStatusID = OrderPaymentStatus.OrderPaymentStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderPaymentStatus")
    				&& (ChangeTracker.OriginalValues["OrderPaymentStatus"] == OrderPaymentStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderPaymentStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderPaymentStatus", previousValue);
    			}
    			if (OrderPaymentStatus != null && !OrderPaymentStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderPaymentStatus.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPaymentType(PaymentType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (PaymentType != null)
    		{
    			if (!PaymentType.OrderPayments.Contains(this))
    			{
    				PaymentType.OrderPayments.Add(this);
    			}
    
    			PaymentTypeID = PaymentType.PaymentTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("PaymentType")
    				&& (ChangeTracker.OriginalValues["PaymentType"] == PaymentType))
    			{
    				ChangeTracker.OriginalValues.Remove("PaymentType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("PaymentType", previousValue);
    			}
    			if (PaymentType != null && !PaymentType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				PaymentType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupStateProvince(StateProvince previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (StateProvince != null)
    		{
    			if (!StateProvince.OrderPayments.Contains(this))
    			{
    				StateProvince.OrderPayments.Add(this);
    			}
    
    			BillingStateProvinceID = StateProvince.StateProvinceID;
    		}
    		else if (!skipKeys)
    		{
    			BillingStateProvinceID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("StateProvince")
    				&& (ChangeTracker.OriginalValues["StateProvince"] == StateProvince))
    			{
    				ChangeTracker.OriginalValues.Remove("StateProvince");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("StateProvince", previousValue);
    			}
    			if (StateProvince != null && !StateProvince.ChangeTracker.ChangeTrackingEnabled)
    			{
    				StateProvince.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCurrency(Currency previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (Currency != null)
    		{
    			if (!Currency.OrderPayments.Contains(this))
    			{
    				Currency.OrderPayments.Add(this);
    			}
    
    			CurrencyID = Currency.CurrencyID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Currency")
    				&& (ChangeTracker.OriginalValues["Currency"] == Currency))
    			{
    				ChangeTracker.OriginalValues.Remove("Currency");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Currency", previousValue);
    			}
    			if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Currency.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.OrderPayments.Contains(this))
    			{
    				User.OrderPayments.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrder(Order previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (Order != null)
    		{
    			if (!Order.OrderPayments.Contains(this))
    			{
    				Order.OrderPayments.Add(this);
    			}
    
    			OrderID = Order.OrderID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Order")
    				&& (ChangeTracker.OriginalValues["Order"] == Order))
    			{
    				ChangeTracker.OriginalValues.Remove("Order");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Order", previousValue);
    			}
    			if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Order.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCreditCardType(CreditCardType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (CreditCardType != null)
    		{
    			if (!CreditCardType.OrderPayments.Contains(this))
    			{
    				CreditCardType.OrderPayments.Add(this);
    			}
    
    			CreditCardTypeID = CreditCardType.CreditCardTypeID;
    		}
    		else if (!skipKeys)
    		{
    			CreditCardTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CreditCardType")
    				&& (ChangeTracker.OriginalValues["CreditCardType"] == CreditCardType))
    			{
    				ChangeTracker.OriginalValues.Remove("CreditCardType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CreditCardType", previousValue);
    			}
    			if (CreditCardType != null && !CreditCardType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CreditCardType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPaymentGateway(PaymentGateway previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (PaymentGateway != null)
    		{
    			if (!PaymentGateway.OrderPayments.Contains(this))
    			{
    				PaymentGateway.OrderPayments.Add(this);
    			}
    
    			PaymentGatewayID = PaymentGateway.PaymentGatewayID;
    		}
    		else if (!skipKeys)
    		{
    			PaymentGatewayID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("PaymentGateway")
    				&& (ChangeTracker.OriginalValues["PaymentGateway"] == PaymentGateway))
    			{
    				ChangeTracker.OriginalValues.Remove("PaymentGateway");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("PaymentGateway", previousValue);
    			}
    			if (PaymentGateway != null && !PaymentGateway.ChangeTracker.ChangeTrackingEnabled)
    			{
    				PaymentGateway.StartTracking();
    			}
    		}
    	}
    
    	private void FixupBankAccountType(BankAccountType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderPayments.Contains(this))
    		{
    			previousValue.OrderPayments.Remove(this);
    		}
    
    		if (BankAccountType != null)
    		{
    			if (!BankAccountType.OrderPayments.Contains(this))
    			{
    				BankAccountType.OrderPayments.Add(this);
    			}
    
    			BankAccountTypeID = BankAccountType.BankAccountTypeID;
    		}
    		else if (!skipKeys)
    		{
    			BankAccountTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("BankAccountType")
    				&& (ChangeTracker.OriginalValues["BankAccountType"] == BankAccountType))
    			{
    				ChangeTracker.OriginalValues.Remove("BankAccountType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("BankAccountType", previousValue);
    			}
    			if (BankAccountType != null && !BankAccountType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				BankAccountType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderPaymentResults(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPaymentResult item in e.NewItems)
    			{
    				item.OrderPayment = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPaymentResults", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPaymentResult item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderPayment, this))
    				{
    					item.OrderPayment = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPaymentResults", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(CampaignActionTokenValue))]
    [KnownType(typeof(EmailTemplateType))]
    [KnownType(typeof(AlertTemplate))]
    [Serializable]
    public partial class Token: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void TokenIDChanged();
    	public int TokenID
    	{
    		get { return _tokenID; }
    		set
    		{
    			if (_tokenID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'TokenID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_tokenID = value;
    				TokenIDChanged();
    				OnPropertyChanged("TokenID");
    			}
    		}
    	}
    	private int _tokenID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void PlaceholderChanged();
    	public string Placeholder
    	{
    		get { return _placeholder; }
    		set
    		{
    			if (_placeholder != value)
    			{
    				ChangeTracker.RecordOriginalValue("Placeholder", _placeholder);
    				_placeholder = value;
    				PlaceholderChanged();
    				OnPropertyChanged("Placeholder");
    			}
    		}
    	}
    	private string _placeholder;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<CampaignActionTokenValue> CampaignActionTokenValues
    	{
    		get
    		{
    			if (_campaignActionTokenValues == null)
    			{
    				_campaignActionTokenValues = new TrackableCollection<CampaignActionTokenValue>();
    				_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    				_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    			}
    			return _campaignActionTokenValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignActionTokenValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignActionTokenValues != null)
    				{
    					_campaignActionTokenValues.CollectionChanged -= FixupCampaignActionTokenValues;
    					_campaignActionTokenValues.CollectionChanged -= RaiseCampaignActionTokenValuesChanged;
    				}
    				_campaignActionTokenValues = value;
    				if (_campaignActionTokenValues != null)
    				{
    					_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    					_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    				}
    				OnNavigationPropertyChanged("CampaignActionTokenValues");
    			}
    		}
    	}
    	private TrackableCollection<CampaignActionTokenValue> _campaignActionTokenValues;
    	partial void CampaignActionTokenValuesChanged();
    	private void RaiseCampaignActionTokenValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignActionTokenValuesChanged();
    	}
    
    	public TrackableCollection<EmailTemplateType> EmailTemplateTypes
    	{
    		get
    		{
    			if (_emailTemplateTypes == null)
    			{
    				_emailTemplateTypes = new TrackableCollection<EmailTemplateType>();
    				_emailTemplateTypes.CollectionChanged += FixupEmailTemplateTypes;
    				_emailTemplateTypes.CollectionChanged += RaiseEmailTemplateTypesChanged;
    			}
    			return _emailTemplateTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_emailTemplateTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_emailTemplateTypes != null)
    				{
    					_emailTemplateTypes.CollectionChanged -= FixupEmailTemplateTypes;
    					_emailTemplateTypes.CollectionChanged -= RaiseEmailTemplateTypesChanged;
    				}
    				_emailTemplateTypes = value;
    				if (_emailTemplateTypes != null)
    				{
    					_emailTemplateTypes.CollectionChanged += FixupEmailTemplateTypes;
    					_emailTemplateTypes.CollectionChanged += RaiseEmailTemplateTypesChanged;
    				}
    				OnNavigationPropertyChanged("EmailTemplateTypes");
    			}
    		}
    	}
    	private TrackableCollection<EmailTemplateType> _emailTemplateTypes;
    	partial void EmailTemplateTypesChanged();
    	private void RaiseEmailTemplateTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		EmailTemplateTypesChanged();
    	}
    
    	public TrackableCollection<AlertTemplate> AlertTemplates
    	{
    		get
    		{
    			if (_alertTemplates == null)
    			{
    				_alertTemplates = new TrackableCollection<AlertTemplate>();
    				_alertTemplates.CollectionChanged += FixupAlertTemplates;
    				_alertTemplates.CollectionChanged += RaiseAlertTemplatesChanged;
    			}
    			return _alertTemplates;
    		}
    		set
    		{
    			if (!ReferenceEquals(_alertTemplates, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_alertTemplates != null)
    				{
    					_alertTemplates.CollectionChanged -= FixupAlertTemplates;
    					_alertTemplates.CollectionChanged -= RaiseAlertTemplatesChanged;
    				}
    				_alertTemplates = value;
    				if (_alertTemplates != null)
    				{
    					_alertTemplates.CollectionChanged += FixupAlertTemplates;
    					_alertTemplates.CollectionChanged += RaiseAlertTemplatesChanged;
    				}
    				OnNavigationPropertyChanged("AlertTemplates");
    			}
    		}
    	}
    	private TrackableCollection<AlertTemplate> _alertTemplates;
    	partial void AlertTemplatesChanged();
    	private void RaiseAlertTemplatesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AlertTemplatesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_campaignActionTokenValues != null)
    		{
    			_campaignActionTokenValues.CollectionChanged -= FixupCampaignActionTokenValues;
    			_campaignActionTokenValues.CollectionChanged -= RaiseCampaignActionTokenValuesChanged;
    			_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    			_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    		}
    		if (_emailTemplateTypes != null)
    		{
    			_emailTemplateTypes.CollectionChanged -= FixupEmailTemplateTypes;
    			_emailTemplateTypes.CollectionChanged -= RaiseEmailTemplateTypesChanged;
    			_emailTemplateTypes.CollectionChanged += FixupEmailTemplateTypes;
    			_emailTemplateTypes.CollectionChanged += RaiseEmailTemplateTypesChanged;
    		}
    		if (_alertTemplates != null)
    		{
    			_alertTemplates.CollectionChanged -= FixupAlertTemplates;
    			_alertTemplates.CollectionChanged -= RaiseAlertTemplatesChanged;
    			_alertTemplates.CollectionChanged += FixupAlertTemplates;
    			_alertTemplates.CollectionChanged += RaiseAlertTemplatesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		CampaignActionTokenValues.Clear();
    		EmailTemplateTypes.Clear();
    		AlertTemplates.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCampaignActionTokenValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignActionTokenValue item in e.NewItems)
    			{
    				item.Token = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignActionTokenValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignActionTokenValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Token, this))
    				{
    					item.Token = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignActionTokenValues", item);
    				}
    			}
    		}
    	}
    
    	private void FixupEmailTemplateTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (EmailTemplateType item in e.NewItems)
    			{
    				if (!item.Tokens.Contains(this))
    				{
    					item.Tokens.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("EmailTemplateTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (EmailTemplateType item in e.OldItems)
    			{
    				if (item.Tokens.Contains(this))
    				{
    					item.Tokens.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("EmailTemplateTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAlertTemplates(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AlertTemplate item in e.NewItems)
    			{
    				if (!item.Tokens.Contains(this))
    				{
    					item.Tokens.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AlertTemplates", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AlertTemplate item in e.OldItems)
    			{
    				if (item.Tokens.Contains(this))
    				{
    					item.Tokens.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AlertTemplates", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

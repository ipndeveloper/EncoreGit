//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(CalendarEvent))]
    [KnownType(typeof(User))]
    [KnownType(typeof(ListValueType))]
    [KnownType(typeof(AccountContactTag))]
    [KnownType(typeof(AccountTag))]
    [Serializable]
    public partial class AccountListValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountListValueIDChanged();
    	public int AccountListValueID
    	{
    		get { return _accountListValueID; }
    		set
    		{
    			if (_accountListValueID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountListValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountListValueID = value;
    				AccountListValueIDChanged();
    				OnPropertyChanged("AccountListValueID");
    			}
    		}
    	}
    	private int _accountListValueID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void ListValueTypeIDChanged();
    	public short ListValueTypeID
    	{
    		get { return _listValueTypeID; }
    		set
    		{
    			if (_listValueTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ListValueTypeID", _listValueTypeID);
    				if (!IsDeserializing)
    				{
    					if (ListValueType != null && ListValueType.ListValueTypeID != value)
    					{
    						ListValueType = null;
    					}
    				}
    				_listValueTypeID = value;
    				ListValueTypeIDChanged();
    				OnPropertyChanged("ListValueTypeID");
    			}
    		}
    	}
    	private short _listValueTypeID;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void IsCorporateChanged();
    	public bool IsCorporate
    	{
    		get { return _isCorporate; }
    		set
    		{
    			if (_isCorporate != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsCorporate", _isCorporate);
    				_isCorporate = value;
    				IsCorporateChanged();
    				OnPropertyChanged("IsCorporate");
    			}
    		}
    	}
    	private bool _isCorporate;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void EditableChanged();
    	public bool Editable
    	{
    		get { return _editable; }
    		set
    		{
    			if (_editable != value)
    			{
    				ChangeTracker.RecordOriginalValue("Editable", _editable);
    				_editable = value;
    				EditableChanged();
    				OnPropertyChanged("Editable");
    			}
    		}
    	}
    	private bool _editable;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public TrackableCollection<CalendarEvent> CalendarEvents
    	{
    		get
    		{
    			if (_calendarEvents == null)
    			{
    				_calendarEvents = new TrackableCollection<CalendarEvent>();
    				_calendarEvents.CollectionChanged += FixupCalendarEvents;
    				_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    			}
    			return _calendarEvents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    					_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    				}
    				_calendarEvents = value;
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged += FixupCalendarEvents;
    					_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    				}
    				OnNavigationPropertyChanged("CalendarEvents");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents;
    	partial void CalendarEventsChanged();
    	private void RaiseCalendarEventsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEventsChanged();
    	}
    
    	public TrackableCollection<CalendarEvent> CalendarEvents1
    	{
    		get
    		{
    			if (_calendarEvents1 == null)
    			{
    				_calendarEvents1 = new TrackableCollection<CalendarEvent>();
    				_calendarEvents1.CollectionChanged += FixupCalendarEvents1;
    				_calendarEvents1.CollectionChanged += RaiseCalendarEvents1Changed;
    			}
    			return _calendarEvents1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents1 != null)
    				{
    					_calendarEvents1.CollectionChanged -= FixupCalendarEvents1;
    					_calendarEvents1.CollectionChanged -= RaiseCalendarEvents1Changed;
    				}
    				_calendarEvents1 = value;
    				if (_calendarEvents1 != null)
    				{
    					_calendarEvents1.CollectionChanged += FixupCalendarEvents1;
    					_calendarEvents1.CollectionChanged += RaiseCalendarEvents1Changed;
    				}
    				OnNavigationPropertyChanged("CalendarEvents1");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents1;
    	partial void CalendarEvents1Changed();
    	private void RaiseCalendarEvents1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEvents1Changed();
    	}
    
    	public TrackableCollection<CalendarEvent> CalendarEvents2
    	{
    		get
    		{
    			if (_calendarEvents2 == null)
    			{
    				_calendarEvents2 = new TrackableCollection<CalendarEvent>();
    				_calendarEvents2.CollectionChanged += FixupCalendarEvents2;
    				_calendarEvents2.CollectionChanged += RaiseCalendarEvents2Changed;
    			}
    			return _calendarEvents2;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents2, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents2 != null)
    				{
    					_calendarEvents2.CollectionChanged -= FixupCalendarEvents2;
    					_calendarEvents2.CollectionChanged -= RaiseCalendarEvents2Changed;
    				}
    				_calendarEvents2 = value;
    				if (_calendarEvents2 != null)
    				{
    					_calendarEvents2.CollectionChanged += FixupCalendarEvents2;
    					_calendarEvents2.CollectionChanged += RaiseCalendarEvents2Changed;
    				}
    				OnNavigationPropertyChanged("CalendarEvents2");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents2;
    	partial void CalendarEvents2Changed();
    	private void RaiseCalendarEvents2Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEvents2Changed();
    	}
    
    	public TrackableCollection<CalendarEvent> CalendarEvents3
    	{
    		get
    		{
    			if (_calendarEvents3 == null)
    			{
    				_calendarEvents3 = new TrackableCollection<CalendarEvent>();
    				_calendarEvents3.CollectionChanged += FixupCalendarEvents3;
    				_calendarEvents3.CollectionChanged += RaiseCalendarEvents3Changed;
    			}
    			return _calendarEvents3;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents3, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents3 != null)
    				{
    					_calendarEvents3.CollectionChanged -= FixupCalendarEvents3;
    					_calendarEvents3.CollectionChanged -= RaiseCalendarEvents3Changed;
    				}
    				_calendarEvents3 = value;
    				if (_calendarEvents3 != null)
    				{
    					_calendarEvents3.CollectionChanged += FixupCalendarEvents3;
    					_calendarEvents3.CollectionChanged += RaiseCalendarEvents3Changed;
    				}
    				OnNavigationPropertyChanged("CalendarEvents3");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents3;
    	partial void CalendarEvents3Changed();
    	private void RaiseCalendarEvents3Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEvents3Changed();
    	}
    
    	public TrackableCollection<CalendarEvent> CalendarEvents4
    	{
    		get
    		{
    			if (_calendarEvents4 == null)
    			{
    				_calendarEvents4 = new TrackableCollection<CalendarEvent>();
    				_calendarEvents4.CollectionChanged += FixupCalendarEvents4;
    				_calendarEvents4.CollectionChanged += RaiseCalendarEvents4Changed;
    			}
    			return _calendarEvents4;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents4, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents4 != null)
    				{
    					_calendarEvents4.CollectionChanged -= FixupCalendarEvents4;
    					_calendarEvents4.CollectionChanged -= RaiseCalendarEvents4Changed;
    				}
    				_calendarEvents4 = value;
    				if (_calendarEvents4 != null)
    				{
    					_calendarEvents4.CollectionChanged += FixupCalendarEvents4;
    					_calendarEvents4.CollectionChanged += RaiseCalendarEvents4Changed;
    				}
    				OnNavigationPropertyChanged("CalendarEvents4");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents4;
    	partial void CalendarEvents4Changed();
    	private void RaiseCalendarEvents4Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEvents4Changed();
    	}
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public ListValueType ListValueType
    	{
    		get { return _listValueType; }
    		set
    		{
    			if (!ReferenceEquals(_listValueType, value))
    			{
    				var previousValue = _listValueType;
    				_listValueType = value;
    				FixupListValueType(previousValue);
    				OnNavigationPropertyChanged("ListValueType");
    			}
    		}
    	}
    	private ListValueType _listValueType;
    
    	public TrackableCollection<AccountContactTag> AccountContactTags
    	{
    		get
    		{
    			if (_accountContactTags == null)
    			{
    				_accountContactTags = new TrackableCollection<AccountContactTag>();
    				_accountContactTags.CollectionChanged += FixupAccountContactTags;
    				_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    			}
    			return _accountContactTags;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountContactTags, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountContactTags != null)
    				{
    					_accountContactTags.CollectionChanged -= FixupAccountContactTags;
    					_accountContactTags.CollectionChanged -= RaiseAccountContactTagsChanged;
    				}
    				_accountContactTags = value;
    				if (_accountContactTags != null)
    				{
    					_accountContactTags.CollectionChanged += FixupAccountContactTags;
    					_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    				}
    				OnNavigationPropertyChanged("AccountContactTags");
    			}
    		}
    	}
    	private TrackableCollection<AccountContactTag> _accountContactTags;
    	partial void AccountContactTagsChanged();
    	private void RaiseAccountContactTagsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountContactTagsChanged();
    	}
    
    	public TrackableCollection<AccountContactTag> AccountContactTags1
    	{
    		get
    		{
    			if (_accountContactTags1 == null)
    			{
    				_accountContactTags1 = new TrackableCollection<AccountContactTag>();
    				_accountContactTags1.CollectionChanged += FixupAccountContactTags1;
    				_accountContactTags1.CollectionChanged += RaiseAccountContactTags1Changed;
    			}
    			return _accountContactTags1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountContactTags1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountContactTags1 != null)
    				{
    					_accountContactTags1.CollectionChanged -= FixupAccountContactTags1;
    					_accountContactTags1.CollectionChanged -= RaiseAccountContactTags1Changed;
    				}
    				_accountContactTags1 = value;
    				if (_accountContactTags1 != null)
    				{
    					_accountContactTags1.CollectionChanged += FixupAccountContactTags1;
    					_accountContactTags1.CollectionChanged += RaiseAccountContactTags1Changed;
    				}
    				OnNavigationPropertyChanged("AccountContactTags1");
    			}
    		}
    	}
    	private TrackableCollection<AccountContactTag> _accountContactTags1;
    	partial void AccountContactTags1Changed();
    	private void RaiseAccountContactTags1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountContactTags1Changed();
    	}
    
    	public TrackableCollection<AccountContactTag> AccountContactTags2
    	{
    		get
    		{
    			if (_accountContactTags2 == null)
    			{
    				_accountContactTags2 = new TrackableCollection<AccountContactTag>();
    				_accountContactTags2.CollectionChanged += FixupAccountContactTags2;
    				_accountContactTags2.CollectionChanged += RaiseAccountContactTags2Changed;
    			}
    			return _accountContactTags2;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountContactTags2, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountContactTags2 != null)
    				{
    					_accountContactTags2.CollectionChanged -= FixupAccountContactTags2;
    					_accountContactTags2.CollectionChanged -= RaiseAccountContactTags2Changed;
    				}
    				_accountContactTags2 = value;
    				if (_accountContactTags2 != null)
    				{
    					_accountContactTags2.CollectionChanged += FixupAccountContactTags2;
    					_accountContactTags2.CollectionChanged += RaiseAccountContactTags2Changed;
    				}
    				OnNavigationPropertyChanged("AccountContactTags2");
    			}
    		}
    	}
    	private TrackableCollection<AccountContactTag> _accountContactTags2;
    	partial void AccountContactTags2Changed();
    	private void RaiseAccountContactTags2Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountContactTags2Changed();
    	}
    
    	public TrackableCollection<Account> Accounts
    	{
    		get
    		{
    			if (_accounts == null)
    			{
    				_accounts = new TrackableCollection<Account>();
    				_accounts.CollectionChanged += FixupAccounts;
    				_accounts.CollectionChanged += RaiseAccountsChanged;
    			}
    			return _accounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged -= FixupAccounts;
    					_accounts.CollectionChanged -= RaiseAccountsChanged;
    				}
    				_accounts = value;
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged += FixupAccounts;
    					_accounts.CollectionChanged += RaiseAccountsChanged;
    				}
    				OnNavigationPropertyChanged("Accounts");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts;
    	partial void AccountsChanged();
    	private void RaiseAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountsChanged();
    	}
    
    	public TrackableCollection<AccountTag> AccountTags
    	{
    		get
    		{
    			if (_accountTags == null)
    			{
    				_accountTags = new TrackableCollection<AccountTag>();
    				_accountTags.CollectionChanged += FixupAccountTags;
    				_accountTags.CollectionChanged += RaiseAccountTagsChanged;
    			}
    			return _accountTags;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountTags, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountTags != null)
    				{
    					_accountTags.CollectionChanged -= FixupAccountTags;
    					_accountTags.CollectionChanged -= RaiseAccountTagsChanged;
    				}
    				_accountTags = value;
    				if (_accountTags != null)
    				{
    					_accountTags.CollectionChanged += FixupAccountTags;
    					_accountTags.CollectionChanged += RaiseAccountTagsChanged;
    				}
    				OnNavigationPropertyChanged("AccountTags");
    			}
    		}
    	}
    	private TrackableCollection<AccountTag> _accountTags;
    	partial void AccountTagsChanged();
    	private void RaiseAccountTagsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountTagsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_calendarEvents != null)
    		{
    			_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    			_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    			_calendarEvents.CollectionChanged += FixupCalendarEvents;
    			_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    		}
    		if (_calendarEvents1 != null)
    		{
    			_calendarEvents1.CollectionChanged -= FixupCalendarEvents1;
    			_calendarEvents1.CollectionChanged -= RaiseCalendarEvents1Changed;
    			_calendarEvents1.CollectionChanged += FixupCalendarEvents1;
    			_calendarEvents1.CollectionChanged += RaiseCalendarEvents1Changed;
    		}
    		if (_calendarEvents2 != null)
    		{
    			_calendarEvents2.CollectionChanged -= FixupCalendarEvents2;
    			_calendarEvents2.CollectionChanged -= RaiseCalendarEvents2Changed;
    			_calendarEvents2.CollectionChanged += FixupCalendarEvents2;
    			_calendarEvents2.CollectionChanged += RaiseCalendarEvents2Changed;
    		}
    		if (_calendarEvents3 != null)
    		{
    			_calendarEvents3.CollectionChanged -= FixupCalendarEvents3;
    			_calendarEvents3.CollectionChanged -= RaiseCalendarEvents3Changed;
    			_calendarEvents3.CollectionChanged += FixupCalendarEvents3;
    			_calendarEvents3.CollectionChanged += RaiseCalendarEvents3Changed;
    		}
    		if (_calendarEvents4 != null)
    		{
    			_calendarEvents4.CollectionChanged -= FixupCalendarEvents4;
    			_calendarEvents4.CollectionChanged -= RaiseCalendarEvents4Changed;
    			_calendarEvents4.CollectionChanged += FixupCalendarEvents4;
    			_calendarEvents4.CollectionChanged += RaiseCalendarEvents4Changed;
    		}
    		if (_accountContactTags != null)
    		{
    			_accountContactTags.CollectionChanged -= FixupAccountContactTags;
    			_accountContactTags.CollectionChanged -= RaiseAccountContactTagsChanged;
    			_accountContactTags.CollectionChanged += FixupAccountContactTags;
    			_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    		}
    		if (_accountContactTags1 != null)
    		{
    			_accountContactTags1.CollectionChanged -= FixupAccountContactTags1;
    			_accountContactTags1.CollectionChanged -= RaiseAccountContactTags1Changed;
    			_accountContactTags1.CollectionChanged += FixupAccountContactTags1;
    			_accountContactTags1.CollectionChanged += RaiseAccountContactTags1Changed;
    		}
    		if (_accountContactTags2 != null)
    		{
    			_accountContactTags2.CollectionChanged -= FixupAccountContactTags2;
    			_accountContactTags2.CollectionChanged -= RaiseAccountContactTags2Changed;
    			_accountContactTags2.CollectionChanged += FixupAccountContactTags2;
    			_accountContactTags2.CollectionChanged += RaiseAccountContactTags2Changed;
    		}
    		if (_accounts != null)
    		{
    			_accounts.CollectionChanged -= FixupAccounts;
    			_accounts.CollectionChanged -= RaiseAccountsChanged;
    			_accounts.CollectionChanged += FixupAccounts;
    			_accounts.CollectionChanged += RaiseAccountsChanged;
    		}
    		if (_accountTags != null)
    		{
    			_accountTags.CollectionChanged -= FixupAccountTags;
    			_accountTags.CollectionChanged -= RaiseAccountTagsChanged;
    			_accountTags.CollectionChanged += FixupAccountTags;
    			_accountTags.CollectionChanged += RaiseAccountTagsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		CalendarEvents.Clear();
    		CalendarEvents1.Clear();
    		CalendarEvents2.Clear();
    		CalendarEvents3.Clear();
    		CalendarEvents4.Clear();
    		User = null;
    		ListValueType = null;
    		AccountContactTags.Clear();
    		AccountContactTags1.Clear();
    		AccountContactTags2.Clear();
    		Accounts.Clear();
    		AccountTags.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountListValues.Contains(this))
    		{
    			previousValue.AccountListValues.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AccountListValues.Contains(this))
    			{
    				Account.AccountListValues.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			AccountID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountListValues.Contains(this))
    		{
    			previousValue.AccountListValues.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.AccountListValues.Contains(this))
    			{
    				User.AccountListValues.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupListValueType(ListValueType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountListValues.Contains(this))
    		{
    			previousValue.AccountListValues.Remove(this);
    		}
    
    		if (ListValueType != null)
    		{
    			if (!ListValueType.AccountListValues.Contains(this))
    			{
    				ListValueType.AccountListValues.Add(this);
    			}
    
    			ListValueTypeID = ListValueType.ListValueTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ListValueType")
    				&& (ChangeTracker.OriginalValues["ListValueType"] == ListValueType))
    			{
    				ChangeTracker.OriginalValues.Remove("ListValueType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ListValueType", previousValue);
    			}
    			if (ListValueType != null && !ListValueType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ListValueType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCalendarEvents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.AccountListValue = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue, this))
    				{
    					item.AccountListValue = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.AccountListValue1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue1, this))
    				{
    					item.AccountListValue1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents2(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.AccountListValue2 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents2", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue2, this))
    				{
    					item.AccountListValue2 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents2", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents3(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.AccountListValue3 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents3", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue3, this))
    				{
    					item.AccountListValue3 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents3", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents4(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.AccountListValue4 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents4", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue4, this))
    				{
    					item.AccountListValue4 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents4", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountContactTags(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountContactTag item in e.NewItems)
    			{
    				item.AccountListValue = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountContactTags", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountContactTag item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue, this))
    				{
    					item.AccountListValue = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountContactTags", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountContactTags1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountContactTag item in e.NewItems)
    			{
    				item.AccountListValue1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountContactTags1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountContactTag item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue1, this))
    				{
    					item.AccountListValue1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountContactTags1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountContactTags2(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountContactTag item in e.NewItems)
    			{
    				item.AccountListValue2 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountContactTags2", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountContactTag item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue2, this))
    				{
    					item.AccountListValue2 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountContactTags2", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				item.AccountListValue = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue, this))
    				{
    					item.AccountListValue = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountTags(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountTag item in e.NewItems)
    			{
    				item.AccountListValue = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountTags", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountTag item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountListValue, this))
    				{
    					item.AccountListValue = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountTags", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

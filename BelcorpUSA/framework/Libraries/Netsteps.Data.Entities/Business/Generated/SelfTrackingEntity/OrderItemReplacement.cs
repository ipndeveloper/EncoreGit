//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderItem))]
    [KnownType(typeof(ReplacementReason))]
    [Serializable]
    public partial class OrderItemReplacement: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderItemIDChanged();
    	public int OrderItemID
    	{
    		get { return _orderItemID; }
    		set
    		{
    			if (_orderItemID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderItemID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				if (!IsDeserializing)
    				{
    					if (OrderItem != null && OrderItem.OrderItemID != value)
    					{
    						OrderItem = null;
    					}
    				}
    				_orderItemID = value;
    				OrderItemIDChanged();
    				OnPropertyChanged("OrderItemID");
    			}
    		}
    	}
    	private int _orderItemID;
    	partial void ReplacementReasonIDChanged();
    	public int ReplacementReasonID
    	{
    		get { return _replacementReasonID; }
    		set
    		{
    			if (_replacementReasonID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ReplacementReasonID", _replacementReasonID);
    				if (!IsDeserializing)
    				{
    					if (ReplacementReason != null && ReplacementReason.ReplacementReasonID != value)
    					{
    						ReplacementReason = null;
    					}
    				}
    				_replacementReasonID = value;
    				ReplacementReasonIDChanged();
    				OnPropertyChanged("ReplacementReasonID");
    			}
    		}
    	}
    	private int _replacementReasonID;
    	partial void NotesChanged();
    	public string Notes
    	{
    		get { return _notes; }
    		set
    		{
    			if (_notes != value)
    			{
    				ChangeTracker.RecordOriginalValue("Notes", _notes);
    				_notes = value;
    				NotesChanged();
    				OnPropertyChanged("Notes");
    			}
    		}
    	}
    	private string _notes;

        #endregion
        #region Navigation Properties
    
    	public OrderItem OrderItem
    	{
    		get { return _orderItem; }
    		set
    		{
    			if (!ReferenceEquals(_orderItem, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
    				{
    					// This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
    					// otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
    					if (OrderItemID != value.OrderItemID)
    					{
    						throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
    					}
    				}
    				var previousValue = _orderItem;
    				_orderItem = value;
    				FixupOrderItem(previousValue);
    				OnNavigationPropertyChanged("OrderItem");
    			}
    		}
    	}
    	private OrderItem _orderItem;
    
    	public ReplacementReason ReplacementReason
    	{
    		get { return _replacementReason; }
    		set
    		{
    			if (!ReferenceEquals(_replacementReason, value))
    			{
    				var previousValue = _replacementReason;
    				_replacementReason = value;
    				FixupReplacementReason(previousValue);
    				OnNavigationPropertyChanged("ReplacementReason");
    			}
    		}
    	}
    	private ReplacementReason _replacementReason;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	// This entity type is the dependent end in at least one association that performs cascade deletes.
    	// This event handler will process notifications that occur when the principal end is deleted.
    	internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			this.MarkAsDeleted();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderItem = null;
    		ReplacementReason = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderItem(OrderItem previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && ReferenceEquals(previousValue.OrderItemReplacement, this))
    		{
    			previousValue.OrderItemReplacement = null;
    		}
    
    		if (OrderItem != null)
    		{
    			OrderItem.OrderItemReplacement = this;
    			OrderItemID = OrderItem.OrderItemID;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItem")
    				&& (ChangeTracker.OriginalValues["OrderItem"] == OrderItem))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItem");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItem", previousValue);
    			}
    			if (OrderItem != null && !OrderItem.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItem.StartTracking();
    			}
    		}
    	}
    
    	private void FixupReplacementReason(ReplacementReason previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItemReplacements.Contains(this))
    		{
    			previousValue.OrderItemReplacements.Remove(this);
    		}
    
    		if (ReplacementReason != null)
    		{
    			if (!ReplacementReason.OrderItemReplacements.Contains(this))
    			{
    				ReplacementReason.OrderItemReplacements.Add(this);
    			}
    
    			ReplacementReasonID = ReplacementReason.ReplacementReasonID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ReplacementReason")
    				&& (ChangeTracker.OriginalValues["ReplacementReason"] == ReplacementReason))
    			{
    				ChangeTracker.OriginalValues.Remove("ReplacementReason");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ReplacementReason", previousValue);
    			}
    			if (ReplacementReason != null && !ReplacementReason.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ReplacementReason.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

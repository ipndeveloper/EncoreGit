//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AutoshipScheduleDay))]
    [KnownType(typeof(OrderType))]
    [KnownType(typeof(AccountType))]
    [KnownType(typeof(IntervalType))]
    [KnownType(typeof(AutoshipScheduleProduct))]
    [KnownType(typeof(AutoshipScheduleType))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(AutoshipOrder))]
    [Serializable]
    public partial class AutoshipSchedule: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AutoshipScheduleIDChanged();
    	public int AutoshipScheduleID
    	{
    		get { return _autoshipScheduleID; }
    		set
    		{
    			if (_autoshipScheduleID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AutoshipScheduleID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_autoshipScheduleID = value;
    				AutoshipScheduleIDChanged();
    				OnPropertyChanged("AutoshipScheduleID");
    			}
    		}
    	}
    	private int _autoshipScheduleID;
    	partial void OrderTypeIDChanged();
    	public short OrderTypeID
    	{
    		get { return _orderTypeID; }
    		set
    		{
    			if (_orderTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderTypeID", _orderTypeID);
    				if (!IsDeserializing)
    				{
    					if (OrderType != null && OrderType.OrderTypeID != value)
    					{
    						OrderType = null;
    					}
    				}
    				_orderTypeID = value;
    				OrderTypeIDChanged();
    				OnPropertyChanged("OrderTypeID");
    			}
    		}
    	}
    	private short _orderTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void IntervalTypeIDChanged();
    	public int IntervalTypeID
    	{
    		get { return _intervalTypeID; }
    		set
    		{
    			if (_intervalTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("IntervalTypeID", _intervalTypeID);
    				if (!IsDeserializing)
    				{
    					if (IntervalType != null && IntervalType.IntervalTypeID != value)
    					{
    						IntervalType = null;
    					}
    				}
    				_intervalTypeID = value;
    				IntervalTypeIDChanged();
    				OnPropertyChanged("IntervalTypeID");
    			}
    		}
    	}
    	private int _intervalTypeID;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void AutoshipScheduleTypeIDChanged();
    	public int AutoshipScheduleTypeID
    	{
    		get { return _autoshipScheduleTypeID; }
    		set
    		{
    			if (_autoshipScheduleTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipScheduleTypeID", _autoshipScheduleTypeID);
    				if (!IsDeserializing)
    				{
    					if (AutoshipScheduleType != null && AutoshipScheduleType.AutoshipScheduleTypeID != value)
    					{
    						AutoshipScheduleType = null;
    					}
    				}
    				_autoshipScheduleTypeID = value;
    				AutoshipScheduleTypeIDChanged();
    				OnPropertyChanged("AutoshipScheduleTypeID");
    			}
    		}
    	}
    	private int _autoshipScheduleTypeID;
    	partial void BaseSiteIDChanged();
    	public Nullable<int> BaseSiteID
    	{
    		get { return _baseSiteID; }
    		set
    		{
    			if (_baseSiteID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BaseSiteID", _baseSiteID);
    				if (!IsDeserializing)
    				{
    					if (Site != null && Site.SiteID != value)
    					{
    						Site = null;
    					}
    				}
    				_baseSiteID = value;
    				BaseSiteIDChanged();
    				OnPropertyChanged("BaseSiteID");
    			}
    		}
    	}
    	private Nullable<int> _baseSiteID;
    	partial void MinimumCommissionableTotalChanged();
    	public Nullable<decimal> MinimumCommissionableTotal
    	{
    		get { return _minimumCommissionableTotal; }
    		set
    		{
    			if (_minimumCommissionableTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("MinimumCommissionableTotal", _minimumCommissionableTotal);
    				_minimumCommissionableTotal = value;
    				MinimumCommissionableTotalChanged();
    				OnPropertyChanged("MinimumCommissionableTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _minimumCommissionableTotal;
    	partial void LastRunDateChanged();
    	public Nullable<System.DateTime> LastRunDate
    	{
    		get { return _lastRunDate; }
    		set
    		{
    			if (_lastRunDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastRunDate", _lastRunDate);
    				_lastRunDate = value;
    				LastRunDateChanged();
    				OnPropertyChanged("LastRunDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _lastRunDate;
    	partial void NextRunDateChanged();
    	public Nullable<System.DateTime> NextRunDate
    	{
    		get { return _nextRunDate; }
    		set
    		{
    			if (_nextRunDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("NextRunDate", _nextRunDate);
    				_nextRunDate = value;
    				NextRunDateChanged();
    				OnPropertyChanged("NextRunDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _nextRunDate;
    	partial void MaximumAttemptsPerIntervalChanged();
    	public Nullable<int> MaximumAttemptsPerInterval
    	{
    		get { return _maximumAttemptsPerInterval; }
    		set
    		{
    			if (_maximumAttemptsPerInterval != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaximumAttemptsPerInterval", _maximumAttemptsPerInterval);
    				_maximumAttemptsPerInterval = value;
    				MaximumAttemptsPerIntervalChanged();
    				OnPropertyChanged("MaximumAttemptsPerInterval");
    			}
    		}
    	}
    	private Nullable<int> _maximumAttemptsPerInterval;
    	partial void MaximumFailedIntervalsChanged();
    	public Nullable<int> MaximumFailedIntervals
    	{
    		get { return _maximumFailedIntervals; }
    		set
    		{
    			if (_maximumFailedIntervals != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaximumFailedIntervals", _maximumFailedIntervals);
    				_maximumFailedIntervals = value;
    				MaximumFailedIntervalsChanged();
    				OnPropertyChanged("MaximumFailedIntervals");
    			}
    		}
    	}
    	private Nullable<int> _maximumFailedIntervals;
    	partial void AutoshipReminderDayOffSetChanged();
    	public Nullable<int> AutoshipReminderDayOffSet
    	{
    		get { return _autoshipReminderDayOffSet; }
    		set
    		{
    			if (_autoshipReminderDayOffSet != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipReminderDayOffSet", _autoshipReminderDayOffSet);
    				_autoshipReminderDayOffSet = value;
    				AutoshipReminderDayOffSetChanged();
    				OnPropertyChanged("AutoshipReminderDayOffSet");
    			}
    		}
    	}
    	private Nullable<int> _autoshipReminderDayOffSet;
    	partial void IsTemplateEditableChanged();
    	public bool IsTemplateEditable
    	{
    		get { return _isTemplateEditable; }
    		set
    		{
    			if (_isTemplateEditable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsTemplateEditable", _isTemplateEditable);
    				_isTemplateEditable = value;
    				IsTemplateEditableChanged();
    				OnPropertyChanged("IsTemplateEditable");
    			}
    		}
    	}
    	private bool _isTemplateEditable;
    	partial void IsEnrollableChanged();
    	public bool IsEnrollable
    	{
    		get { return _isEnrollable; }
    		set
    		{
    			if (_isEnrollable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsEnrollable", _isEnrollable);
    				_isEnrollable = value;
    				IsEnrollableChanged();
    				OnPropertyChanged("IsEnrollable");
    			}
    		}
    	}
    	private bool _isEnrollable;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<AutoshipScheduleDay> AutoshipScheduleDays
    	{
    		get
    		{
    			if (_autoshipScheduleDays == null)
    			{
    				_autoshipScheduleDays = new TrackableCollection<AutoshipScheduleDay>();
    				_autoshipScheduleDays.CollectionChanged += FixupAutoshipScheduleDays;
    				_autoshipScheduleDays.CollectionChanged += RaiseAutoshipScheduleDaysChanged;
    			}
    			return _autoshipScheduleDays;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipScheduleDays, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipScheduleDays != null)
    				{
    					_autoshipScheduleDays.CollectionChanged -= FixupAutoshipScheduleDays;
    					_autoshipScheduleDays.CollectionChanged -= RaiseAutoshipScheduleDaysChanged;
    				}
    				_autoshipScheduleDays = value;
    				if (_autoshipScheduleDays != null)
    				{
    					_autoshipScheduleDays.CollectionChanged += FixupAutoshipScheduleDays;
    					_autoshipScheduleDays.CollectionChanged += RaiseAutoshipScheduleDaysChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipScheduleDays");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipScheduleDay> _autoshipScheduleDays;
    	partial void AutoshipScheduleDaysChanged();
    	private void RaiseAutoshipScheduleDaysChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipScheduleDaysChanged();
    	}
    
    	public OrderType OrderType
    	{
    		get { return _orderType; }
    		set
    		{
    			if (!ReferenceEquals(_orderType, value))
    			{
    				var previousValue = _orderType;
    				_orderType = value;
    				FixupOrderType(previousValue);
    				OnNavigationPropertyChanged("OrderType");
    			}
    		}
    	}
    	private OrderType _orderType;
    
    	public TrackableCollection<AccountType> AccountTypes
    	{
    		get
    		{
    			if (_accountTypes == null)
    			{
    				_accountTypes = new TrackableCollection<AccountType>();
    				_accountTypes.CollectionChanged += FixupAccountTypes;
    				_accountTypes.CollectionChanged += RaiseAccountTypesChanged;
    			}
    			return _accountTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountTypes != null)
    				{
    					_accountTypes.CollectionChanged -= FixupAccountTypes;
    					_accountTypes.CollectionChanged -= RaiseAccountTypesChanged;
    				}
    				_accountTypes = value;
    				if (_accountTypes != null)
    				{
    					_accountTypes.CollectionChanged += FixupAccountTypes;
    					_accountTypes.CollectionChanged += RaiseAccountTypesChanged;
    				}
    				OnNavigationPropertyChanged("AccountTypes");
    			}
    		}
    	}
    	private TrackableCollection<AccountType> _accountTypes;
    	partial void AccountTypesChanged();
    	private void RaiseAccountTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountTypesChanged();
    	}
    
    	public IntervalType IntervalType
    	{
    		get { return _intervalType; }
    		set
    		{
    			if (!ReferenceEquals(_intervalType, value))
    			{
    				var previousValue = _intervalType;
    				_intervalType = value;
    				FixupIntervalType(previousValue);
    				OnNavigationPropertyChanged("IntervalType");
    			}
    		}
    	}
    	private IntervalType _intervalType;
    
    	public TrackableCollection<AutoshipScheduleProduct> AutoshipScheduleProducts
    	{
    		get
    		{
    			if (_autoshipScheduleProducts == null)
    			{
    				_autoshipScheduleProducts = new TrackableCollection<AutoshipScheduleProduct>();
    				_autoshipScheduleProducts.CollectionChanged += FixupAutoshipScheduleProducts;
    				_autoshipScheduleProducts.CollectionChanged += RaiseAutoshipScheduleProductsChanged;
    			}
    			return _autoshipScheduleProducts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipScheduleProducts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipScheduleProducts != null)
    				{
    					_autoshipScheduleProducts.CollectionChanged -= FixupAutoshipScheduleProducts;
    					_autoshipScheduleProducts.CollectionChanged -= RaiseAutoshipScheduleProductsChanged;
    				}
    				_autoshipScheduleProducts = value;
    				if (_autoshipScheduleProducts != null)
    				{
    					_autoshipScheduleProducts.CollectionChanged += FixupAutoshipScheduleProducts;
    					_autoshipScheduleProducts.CollectionChanged += RaiseAutoshipScheduleProductsChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipScheduleProducts");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipScheduleProduct> _autoshipScheduleProducts;
    	partial void AutoshipScheduleProductsChanged();
    	private void RaiseAutoshipScheduleProductsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipScheduleProductsChanged();
    	}
    
    	public AutoshipScheduleType AutoshipScheduleType
    	{
    		get { return _autoshipScheduleType; }
    		set
    		{
    			if (!ReferenceEquals(_autoshipScheduleType, value))
    			{
    				var previousValue = _autoshipScheduleType;
    				_autoshipScheduleType = value;
    				FixupAutoshipScheduleType(previousValue);
    				OnNavigationPropertyChanged("AutoshipScheduleType");
    			}
    		}
    	}
    	private AutoshipScheduleType _autoshipScheduleType;
    
    	public Site Site
    	{
    		get { return _site; }
    		set
    		{
    			if (!ReferenceEquals(_site, value))
    			{
    				var previousValue = _site;
    				_site = value;
    				FixupSite(previousValue);
    				OnNavigationPropertyChanged("Site");
    			}
    		}
    	}
    	private Site _site;
    
    	public TrackableCollection<AutoshipOrder> AutoshipOrders
    	{
    		get
    		{
    			if (_autoshipOrders == null)
    			{
    				_autoshipOrders = new TrackableCollection<AutoshipOrder>();
    				_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    				_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    			}
    			return _autoshipOrders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipOrders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipOrders != null)
    				{
    					_autoshipOrders.CollectionChanged -= FixupAutoshipOrders;
    					_autoshipOrders.CollectionChanged -= RaiseAutoshipOrdersChanged;
    				}
    				_autoshipOrders = value;
    				if (_autoshipOrders != null)
    				{
    					_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    					_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipOrders");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipOrder> _autoshipOrders;
    	partial void AutoshipOrdersChanged();
    	private void RaiseAutoshipOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipOrdersChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_autoshipScheduleDays != null)
    		{
    			_autoshipScheduleDays.CollectionChanged -= FixupAutoshipScheduleDays;
    			_autoshipScheduleDays.CollectionChanged -= RaiseAutoshipScheduleDaysChanged;
    			_autoshipScheduleDays.CollectionChanged += FixupAutoshipScheduleDays;
    			_autoshipScheduleDays.CollectionChanged += RaiseAutoshipScheduleDaysChanged;
    		}
    		if (_accountTypes != null)
    		{
    			_accountTypes.CollectionChanged -= FixupAccountTypes;
    			_accountTypes.CollectionChanged -= RaiseAccountTypesChanged;
    			_accountTypes.CollectionChanged += FixupAccountTypes;
    			_accountTypes.CollectionChanged += RaiseAccountTypesChanged;
    		}
    		if (_autoshipScheduleProducts != null)
    		{
    			_autoshipScheduleProducts.CollectionChanged -= FixupAutoshipScheduleProducts;
    			_autoshipScheduleProducts.CollectionChanged -= RaiseAutoshipScheduleProductsChanged;
    			_autoshipScheduleProducts.CollectionChanged += FixupAutoshipScheduleProducts;
    			_autoshipScheduleProducts.CollectionChanged += RaiseAutoshipScheduleProductsChanged;
    		}
    		if (_autoshipOrders != null)
    		{
    			_autoshipOrders.CollectionChanged -= FixupAutoshipOrders;
    			_autoshipOrders.CollectionChanged -= RaiseAutoshipOrdersChanged;
    			_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    			_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AutoshipScheduleDays.Clear();
    		OrderType = null;
    		AccountTypes.Clear();
    		IntervalType = null;
    		AutoshipScheduleProducts.Clear();
    		AutoshipScheduleType = null;
    		Site = null;
    		AutoshipOrders.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderType(OrderType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipSchedules.Contains(this))
    		{
    			previousValue.AutoshipSchedules.Remove(this);
    		}
    
    		if (OrderType != null)
    		{
    			if (!OrderType.AutoshipSchedules.Contains(this))
    			{
    				OrderType.AutoshipSchedules.Add(this);
    			}
    
    			OrderTypeID = OrderType.OrderTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderType")
    				&& (ChangeTracker.OriginalValues["OrderType"] == OrderType))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderType", previousValue);
    			}
    			if (OrderType != null && !OrderType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupIntervalType(IntervalType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipSchedules.Contains(this))
    		{
    			previousValue.AutoshipSchedules.Remove(this);
    		}
    
    		if (IntervalType != null)
    		{
    			if (!IntervalType.AutoshipSchedules.Contains(this))
    			{
    				IntervalType.AutoshipSchedules.Add(this);
    			}
    
    			IntervalTypeID = IntervalType.IntervalTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("IntervalType")
    				&& (ChangeTracker.OriginalValues["IntervalType"] == IntervalType))
    			{
    				ChangeTracker.OriginalValues.Remove("IntervalType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("IntervalType", previousValue);
    			}
    			if (IntervalType != null && !IntervalType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				IntervalType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoshipScheduleType(AutoshipScheduleType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipSchedules.Contains(this))
    		{
    			previousValue.AutoshipSchedules.Remove(this);
    		}
    
    		if (AutoshipScheduleType != null)
    		{
    			if (!AutoshipScheduleType.AutoshipSchedules.Contains(this))
    			{
    				AutoshipScheduleType.AutoshipSchedules.Add(this);
    			}
    
    			AutoshipScheduleTypeID = AutoshipScheduleType.AutoshipScheduleTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AutoshipScheduleType")
    				&& (ChangeTracker.OriginalValues["AutoshipScheduleType"] == AutoshipScheduleType))
    			{
    				ChangeTracker.OriginalValues.Remove("AutoshipScheduleType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipScheduleType", previousValue);
    			}
    			if (AutoshipScheduleType != null && !AutoshipScheduleType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AutoshipScheduleType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSite(Site previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipSchedules.Contains(this))
    		{
    			previousValue.AutoshipSchedules.Remove(this);
    		}
    
    		if (Site != null)
    		{
    			if (!Site.AutoshipSchedules.Contains(this))
    			{
    				Site.AutoshipSchedules.Add(this);
    			}
    
    			BaseSiteID = Site.SiteID;
    		}
    		else if (!skipKeys)
    		{
    			BaseSiteID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Site")
    				&& (ChangeTracker.OriginalValues["Site"] == Site))
    			{
    				ChangeTracker.OriginalValues.Remove("Site");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Site", previousValue);
    			}
    			if (Site != null && !Site.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Site.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoshipScheduleDays(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipScheduleDay item in e.NewItems)
    			{
    				item.AutoshipSchedule = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipScheduleDays", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipScheduleDay item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AutoshipSchedule, this))
    				{
    					item.AutoshipSchedule = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipScheduleDays", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountType item in e.NewItems)
    			{
    				if (!item.AutoshipSchedules.Contains(this))
    				{
    					item.AutoshipSchedules.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountType item in e.OldItems)
    			{
    				if (item.AutoshipSchedules.Contains(this))
    				{
    					item.AutoshipSchedules.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipScheduleProducts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipScheduleProduct item in e.NewItems)
    			{
    				item.AutoshipSchedule = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipScheduleProducts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipScheduleProduct item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AutoshipSchedule, this))
    				{
    					item.AutoshipSchedule = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipScheduleProducts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipOrder item in e.NewItems)
    			{
    				item.AutoshipSchedule = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipOrders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipOrder item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AutoshipSchedule, this))
    				{
    					item.AutoshipSchedule = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipOrders", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

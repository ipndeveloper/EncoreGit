//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Catalog))]
    [KnownType(typeof(Category))]
    [KnownType(typeof(CategoryTranslation))]
    [KnownType(typeof(ProductBase))]
    [KnownType(typeof(Archive))]
    [KnownType(typeof(CategoryType))]
    [Serializable]
    public partial class Category: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CategoryIDChanged();
    	public int CategoryID
    	{
    		get { return _categoryID; }
    		set
    		{
    			if (_categoryID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CategoryID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_categoryID = value;
    				CategoryIDChanged();
    				OnPropertyChanged("CategoryID");
    			}
    		}
    	}
    	private int _categoryID;
    	partial void ParentCategoryIDChanged();
    	public Nullable<int> ParentCategoryID
    	{
    		get { return _parentCategoryID; }
    		set
    		{
    			if (_parentCategoryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParentCategoryID", _parentCategoryID);
    				if (!IsDeserializing)
    				{
    					if (ParentCategory != null && ParentCategory.CategoryID != value)
    					{
    						ParentCategory = null;
    					}
    				}
    				_parentCategoryID = value;
    				ParentCategoryIDChanged();
    				OnPropertyChanged("ParentCategoryID");
    			}
    		}
    	}
    	private Nullable<int> _parentCategoryID;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;
    	partial void SlotCountChanged();
    	public Nullable<int> SlotCount
    	{
    		get { return _slotCount; }
    		set
    		{
    			if (_slotCount != value)
    			{
    				ChangeTracker.RecordOriginalValue("SlotCount", _slotCount);
    				_slotCount = value;
    				SlotCountChanged();
    				OnPropertyChanged("SlotCount");
    			}
    		}
    	}
    	private Nullable<int> _slotCount;
    	partial void CategoryTypeIDChanged();
    	public short CategoryTypeID
    	{
    		get { return _categoryTypeID; }
    		set
    		{
    			if (_categoryTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CategoryTypeID", _categoryTypeID);
    				if (!IsDeserializing)
    				{
    					if (CategoryType != null && CategoryType.CategoryTypeID != value)
    					{
    						CategoryType = null;
    					}
    				}
    				_categoryTypeID = value;
    				CategoryTypeIDChanged();
    				OnPropertyChanged("CategoryTypeID");
    			}
    		}
    	}
    	private short _categoryTypeID;
    	partial void CategoryNumberChanged();
    	public string CategoryNumber
    	{
    		get { return _categoryNumber; }
    		set
    		{
    			if (_categoryNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("CategoryNumber", _categoryNumber);
    				_categoryNumber = value;
    				CategoryNumberChanged();
    				OnPropertyChanged("CategoryNumber");
    			}
    		}
    	}
    	private string _categoryNumber;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<Catalog> Catalogs
    	{
    		get
    		{
    			if (_catalogs == null)
    			{
    				_catalogs = new TrackableCollection<Catalog>();
    				_catalogs.CollectionChanged += FixupCatalogs;
    				_catalogs.CollectionChanged += RaiseCatalogsChanged;
    			}
    			return _catalogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_catalogs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_catalogs != null)
    				{
    					_catalogs.CollectionChanged -= FixupCatalogs;
    					_catalogs.CollectionChanged -= RaiseCatalogsChanged;
    				}
    				_catalogs = value;
    				if (_catalogs != null)
    				{
    					_catalogs.CollectionChanged += FixupCatalogs;
    					_catalogs.CollectionChanged += RaiseCatalogsChanged;
    				}
    				OnNavigationPropertyChanged("Catalogs");
    			}
    		}
    	}
    	private TrackableCollection<Catalog> _catalogs;
    	partial void CatalogsChanged();
    	private void RaiseCatalogsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CatalogsChanged();
    	}
    
    	public TrackableCollection<Category> ChildCategories
    	{
    		get
    		{
    			if (_childCategories == null)
    			{
    				_childCategories = new TrackableCollection<Category>();
    				_childCategories.CollectionChanged += FixupChildCategories;
    				_childCategories.CollectionChanged += RaiseChildCategoriesChanged;
    			}
    			return _childCategories;
    		}
    		set
    		{
    			if (!ReferenceEquals(_childCategories, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_childCategories != null)
    				{
    					_childCategories.CollectionChanged -= FixupChildCategories;
    					_childCategories.CollectionChanged -= RaiseChildCategoriesChanged;
    				}
    				_childCategories = value;
    				if (_childCategories != null)
    				{
    					_childCategories.CollectionChanged += FixupChildCategories;
    					_childCategories.CollectionChanged += RaiseChildCategoriesChanged;
    				}
    				OnNavigationPropertyChanged("ChildCategories");
    			}
    		}
    	}
    	private TrackableCollection<Category> _childCategories;
    	partial void ChildCategoriesChanged();
    	private void RaiseChildCategoriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ChildCategoriesChanged();
    	}
    
    	public Category ParentCategory
    	{
    		get { return _parentCategory; }
    		set
    		{
    			if (!ReferenceEquals(_parentCategory, value))
    			{
    				var previousValue = _parentCategory;
    				_parentCategory = value;
    				FixupParentCategory(previousValue);
    				OnNavigationPropertyChanged("ParentCategory");
    			}
    		}
    	}
    	private Category _parentCategory;
    
    	public TrackableCollection<CategoryTranslation> Translations
    	{
    		get
    		{
    			if (_translations == null)
    			{
    				_translations = new TrackableCollection<CategoryTranslation>();
    				_translations.CollectionChanged += FixupTranslations;
    				_translations.CollectionChanged += RaiseTranslationsChanged;
    			}
    			return _translations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_translations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_translations != null)
    				{
    					_translations.CollectionChanged -= FixupTranslations;
    					_translations.CollectionChanged -= RaiseTranslationsChanged;
    				}
    				_translations = value;
    				if (_translations != null)
    				{
    					_translations.CollectionChanged += FixupTranslations;
    					_translations.CollectionChanged += RaiseTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("Translations");
    			}
    		}
    	}
    	private TrackableCollection<CategoryTranslation> _translations;
    	partial void TranslationsChanged();
    	private void RaiseTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TranslationsChanged();
    	}
    
    	public TrackableCollection<ProductBase> ProductBases
    	{
    		get
    		{
    			if (_productBases == null)
    			{
    				_productBases = new TrackableCollection<ProductBase>();
    				_productBases.CollectionChanged += FixupProductBases;
    				_productBases.CollectionChanged += RaiseProductBasesChanged;
    			}
    			return _productBases;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productBases, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productBases != null)
    				{
    					_productBases.CollectionChanged -= FixupProductBases;
    					_productBases.CollectionChanged -= RaiseProductBasesChanged;
    				}
    				_productBases = value;
    				if (_productBases != null)
    				{
    					_productBases.CollectionChanged += FixupProductBases;
    					_productBases.CollectionChanged += RaiseProductBasesChanged;
    				}
    				OnNavigationPropertyChanged("ProductBases");
    			}
    		}
    	}
    	private TrackableCollection<ProductBase> _productBases;
    	partial void ProductBasesChanged();
    	private void RaiseProductBasesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductBasesChanged();
    	}
    
    	public TrackableCollection<Archive> Archives
    	{
    		get
    		{
    			if (_archives == null)
    			{
    				_archives = new TrackableCollection<Archive>();
    				_archives.CollectionChanged += FixupArchives;
    				_archives.CollectionChanged += RaiseArchivesChanged;
    			}
    			return _archives;
    		}
    		set
    		{
    			if (!ReferenceEquals(_archives, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_archives != null)
    				{
    					_archives.CollectionChanged -= FixupArchives;
    					_archives.CollectionChanged -= RaiseArchivesChanged;
    				}
    				_archives = value;
    				if (_archives != null)
    				{
    					_archives.CollectionChanged += FixupArchives;
    					_archives.CollectionChanged += RaiseArchivesChanged;
    				}
    				OnNavigationPropertyChanged("Archives");
    			}
    		}
    	}
    	private TrackableCollection<Archive> _archives;
    	partial void ArchivesChanged();
    	private void RaiseArchivesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ArchivesChanged();
    	}
    
    	public CategoryType CategoryType
    	{
    		get { return _categoryType; }
    		set
    		{
    			if (!ReferenceEquals(_categoryType, value))
    			{
    				var previousValue = _categoryType;
    				_categoryType = value;
    				FixupCategoryType(previousValue);
    				OnNavigationPropertyChanged("CategoryType");
    			}
    		}
    	}
    	private CategoryType _categoryType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_catalogs != null)
    		{
    			_catalogs.CollectionChanged -= FixupCatalogs;
    			_catalogs.CollectionChanged -= RaiseCatalogsChanged;
    			_catalogs.CollectionChanged += FixupCatalogs;
    			_catalogs.CollectionChanged += RaiseCatalogsChanged;
    		}
    		if (_childCategories != null)
    		{
    			_childCategories.CollectionChanged -= FixupChildCategories;
    			_childCategories.CollectionChanged -= RaiseChildCategoriesChanged;
    			_childCategories.CollectionChanged += FixupChildCategories;
    			_childCategories.CollectionChanged += RaiseChildCategoriesChanged;
    		}
    		if (_translations != null)
    		{
    			_translations.CollectionChanged -= FixupTranslations;
    			_translations.CollectionChanged -= RaiseTranslationsChanged;
    			_translations.CollectionChanged += FixupTranslations;
    			_translations.CollectionChanged += RaiseTranslationsChanged;
    		}
    		if (_productBases != null)
    		{
    			_productBases.CollectionChanged -= FixupProductBases;
    			_productBases.CollectionChanged -= RaiseProductBasesChanged;
    			_productBases.CollectionChanged += FixupProductBases;
    			_productBases.CollectionChanged += RaiseProductBasesChanged;
    		}
    		if (_archives != null)
    		{
    			_archives.CollectionChanged -= FixupArchives;
    			_archives.CollectionChanged -= RaiseArchivesChanged;
    			_archives.CollectionChanged += FixupArchives;
    			_archives.CollectionChanged += RaiseArchivesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Catalogs.Clear();
    		ChildCategories.Clear();
    		ParentCategory = null;
    		Translations.Clear();
    		ProductBases.Clear();
    		Archives.Clear();
    		CategoryType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupParentCategory(Category previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ChildCategories.Contains(this))
    		{
    			previousValue.ChildCategories.Remove(this);
    		}
    
    		if (ParentCategory != null)
    		{
    			if (!ParentCategory.ChildCategories.Contains(this))
    			{
    				ParentCategory.ChildCategories.Add(this);
    			}
    
    			ParentCategoryID = ParentCategory.CategoryID;
    		}
    		else if (!skipKeys)
    		{
    			ParentCategoryID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ParentCategory")
    				&& (ChangeTracker.OriginalValues["ParentCategory"] == ParentCategory))
    			{
    				ChangeTracker.OriginalValues.Remove("ParentCategory");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ParentCategory", previousValue);
    			}
    			if (ParentCategory != null && !ParentCategory.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ParentCategory.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCategoryType(CategoryType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Categories.Contains(this))
    		{
    			previousValue.Categories.Remove(this);
    		}
    
    		if (CategoryType != null)
    		{
    			if (!CategoryType.Categories.Contains(this))
    			{
    				CategoryType.Categories.Add(this);
    			}
    
    			CategoryTypeID = CategoryType.CategoryTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CategoryType")
    				&& (ChangeTracker.OriginalValues["CategoryType"] == CategoryType))
    			{
    				ChangeTracker.OriginalValues.Remove("CategoryType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CategoryType", previousValue);
    			}
    			if (CategoryType != null && !CategoryType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CategoryType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCatalogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Catalog item in e.NewItems)
    			{
    				item.Category = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Catalogs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Catalog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Category, this))
    				{
    					item.Category = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Catalogs", item);
    				}
    			}
    		}
    	}
    
    	private void FixupChildCategories(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Category item in e.NewItems)
    			{
    				item.ParentCategory = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ChildCategories", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Category item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ParentCategory, this))
    				{
    					item.ParentCategory = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ChildCategories", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CategoryTranslation item in e.NewItems)
    			{
    				item.Category = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Translations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CategoryTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Category, this))
    				{
    					item.Category = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Translations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductBases(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductBase item in e.NewItems)
    			{
    				if (!item.Categories.Contains(this))
    				{
    					item.Categories.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductBases", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductBase item in e.OldItems)
    			{
    				if (item.Categories.Contains(this))
    				{
    					item.Categories.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductBases", item);
    				}
    			}
    		}
    	}
    
    	private void FixupArchives(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Archive item in e.NewItems)
    			{
    				if (!item.Categories.Contains(this))
    				{
    					item.Categories.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Archives", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Archive item in e.OldItems)
    			{
    				if (item.Categories.Contains(this))
    				{
    					item.Categories.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Archives", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

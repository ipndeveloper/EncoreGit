//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(Party))]
    [Serializable]
    public partial class EmailTemplateToken: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void EmailTemplateTokenIDChanged();
    	public int EmailTemplateTokenID
    	{
    		get { return _emailTemplateTokenID; }
    		set
    		{
    			if (_emailTemplateTokenID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'EmailTemplateTokenID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_emailTemplateTokenID = value;
    				EmailTemplateTokenIDChanged();
    				OnPropertyChanged("EmailTemplateTokenID");
    			}
    		}
    	}
    	private int _emailTemplateTokenID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void TokenChanged();
    	public string Token
    	{
    		get { return _token; }
    		set
    		{
    			if (_token != value)
    			{
    				ChangeTracker.RecordOriginalValue("Token", _token);
    				_token = value;
    				TokenChanged();
    				OnPropertyChanged("Token");
    			}
    		}
    	}
    	private string _token;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;
    	partial void PartyIDChanged();
    	public Nullable<int> PartyID
    	{
    		get { return _partyID; }
    		set
    		{
    			if (_partyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PartyID", _partyID);
    				if (!IsDeserializing)
    				{
    					if (Party != null && Party.PartyID != value)
    					{
    						Party = null;
    					}
    				}
    				_partyID = value;
    				PartyIDChanged();
    				OnPropertyChanged("PartyID");
    			}
    		}
    	}
    	private Nullable<int> _partyID;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public Party Party
    	{
    		get { return _party; }
    		set
    		{
    			if (!ReferenceEquals(_party, value))
    			{
    				var previousValue = _party;
    				_party = value;
    				FixupParty(previousValue);
    				OnNavigationPropertyChanged("Party");
    			}
    		}
    	}
    	private Party _party;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		Party = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.EmailTemplateTokens.Contains(this))
    		{
    			previousValue.EmailTemplateTokens.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.EmailTemplateTokens.Contains(this))
    			{
    				Account.EmailTemplateTokens.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			AccountID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupParty(Party previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.EmailTemplateTokens.Contains(this))
    		{
    			previousValue.EmailTemplateTokens.Remove(this);
    		}
    
    		if (Party != null)
    		{
    			if (!Party.EmailTemplateTokens.Contains(this))
    			{
    				Party.EmailTemplateTokens.Add(this);
    			}
    
    			PartyID = Party.PartyID;
    		}
    		else if (!skipKeys)
    		{
    			PartyID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Party")
    				&& (ChangeTracker.OriginalValues["Party"] == Party))
    			{
    				ChangeTracker.OriginalValues.Remove("Party");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Party", previousValue);
    			}
    			if (Party != null && !Party.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Party.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

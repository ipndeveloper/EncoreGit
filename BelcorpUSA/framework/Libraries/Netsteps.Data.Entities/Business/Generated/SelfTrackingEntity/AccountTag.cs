//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountListValue))]
    [KnownType(typeof(Account))]
    [Serializable]
    public partial class AccountTag: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountTagIDChanged();
    	public long AccountTagID
    	{
    		get { return _accountTagID; }
    		set
    		{
    			if (_accountTagID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountTagID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountTagID = value;
    				AccountTagIDChanged();
    				OnPropertyChanged("AccountTagID");
    			}
    		}
    	}
    	private long _accountTagID;
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void TaggedByAccountIDChanged();
    	public int TaggedByAccountID
    	{
    		get { return _taggedByAccountID; }
    		set
    		{
    			if (_taggedByAccountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaggedByAccountID", _taggedByAccountID);
    				if (!IsDeserializing)
    				{
    					if (Account1 != null && Account1.AccountID != value)
    					{
    						Account1 = null;
    					}
    				}
    				_taggedByAccountID = value;
    				TaggedByAccountIDChanged();
    				OnPropertyChanged("TaggedByAccountID");
    			}
    		}
    	}
    	private int _taggedByAccountID;
    	partial void AccountListValueIDChanged();
    	public int AccountListValueID
    	{
    		get { return _accountListValueID; }
    		set
    		{
    			if (_accountListValueID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountListValueID", _accountListValueID);
    				if (!IsDeserializing)
    				{
    					if (AccountListValue != null && AccountListValue.AccountListValueID != value)
    					{
    						AccountListValue = null;
    					}
    				}
    				_accountListValueID = value;
    				AccountListValueIDChanged();
    				OnPropertyChanged("AccountListValueID");
    			}
    		}
    	}
    	private int _accountListValueID;

        #endregion
        #region Navigation Properties
    
    	public AccountListValue AccountListValue
    	{
    		get { return _accountListValue; }
    		set
    		{
    			if (!ReferenceEquals(_accountListValue, value))
    			{
    				var previousValue = _accountListValue;
    				_accountListValue = value;
    				FixupAccountListValue(previousValue);
    				OnNavigationPropertyChanged("AccountListValue");
    			}
    		}
    	}
    	private AccountListValue _accountListValue;
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public Account Account1
    	{
    		get { return _account1; }
    		set
    		{
    			if (!ReferenceEquals(_account1, value))
    			{
    				var previousValue = _account1;
    				_account1 = value;
    				FixupAccount1(previousValue);
    				OnNavigationPropertyChanged("Account1");
    			}
    		}
    	}
    	private Account _account1;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountListValue = null;
    		Account = null;
    		Account1 = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccountListValue(AccountListValue previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountTags.Contains(this))
    		{
    			previousValue.AccountTags.Remove(this);
    		}
    
    		if (AccountListValue != null)
    		{
    			if (!AccountListValue.AccountTags.Contains(this))
    			{
    				AccountListValue.AccountTags.Add(this);
    			}
    
    			AccountListValueID = AccountListValue.AccountListValueID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountListValue")
    				&& (ChangeTracker.OriginalValues["AccountListValue"] == AccountListValue))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountListValue");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountListValue", previousValue);
    			}
    			if (AccountListValue != null && !AccountListValue.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountListValue.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccount(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountTags.Contains(this))
    		{
    			previousValue.AccountTags.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AccountTags.Contains(this))
    			{
    				Account.AccountTags.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccount1(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountTags1.Contains(this))
    		{
    			previousValue.AccountTags1.Remove(this);
    		}
    
    		if (Account1 != null)
    		{
    			if (!Account1.AccountTags1.Contains(this))
    			{
    				Account1.AccountTags1.Add(this);
    			}
    
    			TaggedByAccountID = Account1.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account1")
    				&& (ChangeTracker.OriginalValues["Account1"] == Account1))
    			{
    				ChangeTracker.OriginalValues.Remove("Account1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account1", previousValue);
    			}
    			if (Account1 != null && !Account1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account1.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

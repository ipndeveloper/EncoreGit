//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(CampaignAction))]
    [KnownType(typeof(Language))]
    [KnownType(typeof(Token))]
    [Serializable]
    public partial class CampaignActionTokenValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CampaignActionTokenValueIDChanged();
    	public long CampaignActionTokenValueID
    	{
    		get { return _campaignActionTokenValueID; }
    		set
    		{
    			if (_campaignActionTokenValueID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CampaignActionTokenValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_campaignActionTokenValueID = value;
    				CampaignActionTokenValueIDChanged();
    				OnPropertyChanged("CampaignActionTokenValueID");
    			}
    		}
    	}
    	private long _campaignActionTokenValueID;
    	partial void TokenIDChanged();
    	public int TokenID
    	{
    		get { return _tokenID; }
    		set
    		{
    			if (_tokenID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TokenID", _tokenID);
    				if (!IsDeserializing)
    				{
    					if (Token != null && Token.TokenID != value)
    					{
    						Token = null;
    					}
    				}
    				_tokenID = value;
    				TokenIDChanged();
    				OnPropertyChanged("TokenID");
    			}
    		}
    	}
    	private int _tokenID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void LanguageIDChanged();
    	public int LanguageID
    	{
    		get { return _languageID; }
    		set
    		{
    			if (_languageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("LanguageID", _languageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_languageID = value;
    				LanguageIDChanged();
    				OnPropertyChanged("LanguageID");
    			}
    		}
    	}
    	private int _languageID;
    	partial void PlaceholderValueChanged();
    	public string PlaceholderValue
    	{
    		get { return _placeholderValue; }
    		set
    		{
    			if (_placeholderValue != value)
    			{
    				ChangeTracker.RecordOriginalValue("PlaceholderValue", _placeholderValue);
    				_placeholderValue = value;
    				PlaceholderValueChanged();
    				OnPropertyChanged("PlaceholderValue");
    			}
    		}
    	}
    	private string _placeholderValue;
    	partial void CampaignActionIDChanged();
    	public int CampaignActionID
    	{
    		get { return _campaignActionID; }
    		set
    		{
    			if (_campaignActionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CampaignActionID", _campaignActionID);
    				if (!IsDeserializing)
    				{
    					if (CampaignAction != null && CampaignAction.CampaignActionID != value)
    					{
    						CampaignAction = null;
    					}
    				}
    				_campaignActionID = value;
    				CampaignActionIDChanged();
    				OnPropertyChanged("CampaignActionID");
    			}
    		}
    	}
    	private int _campaignActionID;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public CampaignAction CampaignAction
    	{
    		get { return _campaignAction; }
    		set
    		{
    			if (!ReferenceEquals(_campaignAction, value))
    			{
    				var previousValue = _campaignAction;
    				_campaignAction = value;
    				FixupCampaignAction(previousValue);
    				OnNavigationPropertyChanged("CampaignAction");
    			}
    		}
    	}
    	private CampaignAction _campaignAction;
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public Token Token
    	{
    		get { return _token; }
    		set
    		{
    			if (!ReferenceEquals(_token, value))
    			{
    				var previousValue = _token;
    				_token = value;
    				FixupToken(previousValue);
    				OnNavigationPropertyChanged("Token");
    			}
    		}
    	}
    	private Token _token;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		CampaignAction = null;
    		Language = null;
    		Token = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignActionTokenValues.Contains(this))
    		{
    			previousValue.CampaignActionTokenValues.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.CampaignActionTokenValues.Contains(this))
    			{
    				Account.CampaignActionTokenValues.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			AccountID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCampaignAction(CampaignAction previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignActionTokenValues.Contains(this))
    		{
    			previousValue.CampaignActionTokenValues.Remove(this);
    		}
    
    		if (CampaignAction != null)
    		{
    			if (!CampaignAction.CampaignActionTokenValues.Contains(this))
    			{
    				CampaignAction.CampaignActionTokenValues.Add(this);
    			}
    
    			CampaignActionID = CampaignAction.CampaignActionID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CampaignAction")
    				&& (ChangeTracker.OriginalValues["CampaignAction"] == CampaignAction))
    			{
    				ChangeTracker.OriginalValues.Remove("CampaignAction");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CampaignAction", previousValue);
    			}
    			if (CampaignAction != null && !CampaignAction.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CampaignAction.StartTracking();
    			}
    		}
    	}
    
    	private void FixupLanguage(Language previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignActionTokenValues.Contains(this))
    		{
    			previousValue.CampaignActionTokenValues.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.CampaignActionTokenValues.Contains(this))
    			{
    				Language.CampaignActionTokenValues.Add(this);
    			}
    
    			LanguageID = Language.LanguageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupToken(Token previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CampaignActionTokenValues.Contains(this))
    		{
    			previousValue.CampaignActionTokenValues.Remove(this);
    		}
    
    		if (Token != null)
    		{
    			if (!Token.CampaignActionTokenValues.Contains(this))
    			{
    				Token.CampaignActionTokenValues.Add(this);
    			}
    
    			TokenID = Token.TokenID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Token")
    				&& (ChangeTracker.OriginalValues["Token"] == Token))
    			{
    				ChangeTracker.OriginalValues.Remove("Token");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Token", previousValue);
    			}
    			if (Token != null && !Token.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Token.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

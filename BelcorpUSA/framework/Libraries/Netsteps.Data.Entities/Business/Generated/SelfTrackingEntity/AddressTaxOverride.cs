//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Address))]
    [Serializable]
    public partial class AddressTaxOverride: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AddressTaxOverrideIdChanged();
    	public int AddressTaxOverrideId
    	{
    		get { return _addressTaxOverrideId; }
    		set
    		{
    			if (_addressTaxOverrideId != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AddressTaxOverrideId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_addressTaxOverrideId = value;
    				AddressTaxOverrideIdChanged();
    				OnPropertyChanged("AddressTaxOverrideId");
    			}
    		}
    	}
    	private int _addressTaxOverrideId;
    	partial void AddressIDChanged();
    	public int AddressID
    	{
    		get { return _addressID; }
    		set
    		{
    			if (_addressID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AddressID", _addressID);
    				if (!IsDeserializing)
    				{
    					if (Address != null && Address.AddressID != value)
    					{
    						Address = null;
    					}
    				}
    				_addressID = value;
    				AddressIDChanged();
    				OnPropertyChanged("AddressID");
    			}
    		}
    	}
    	private int _addressID;
    	partial void TaxPercentChanged();
    	public Nullable<decimal> TaxPercent
    	{
    		get { return _taxPercent; }
    		set
    		{
    			if (_taxPercent != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercent", _taxPercent);
    				_taxPercent = value;
    				TaxPercentChanged();
    				OnPropertyChanged("TaxPercent");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercent;
    	partial void TaxPercentCityChanged();
    	public Nullable<decimal> TaxPercentCity
    	{
    		get { return _taxPercentCity; }
    		set
    		{
    			if (_taxPercentCity != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentCity", _taxPercentCity);
    				_taxPercentCity = value;
    				TaxPercentCityChanged();
    				OnPropertyChanged("TaxPercentCity");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentCity;
    	partial void TaxPercentStateChanged();
    	public Nullable<decimal> TaxPercentState
    	{
    		get { return _taxPercentState; }
    		set
    		{
    			if (_taxPercentState != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentState", _taxPercentState);
    				_taxPercentState = value;
    				TaxPercentStateChanged();
    				OnPropertyChanged("TaxPercentState");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentState;
    	partial void TaxPercentCountyChanged();
    	public Nullable<decimal> TaxPercentCounty
    	{
    		get { return _taxPercentCounty; }
    		set
    		{
    			if (_taxPercentCounty != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentCounty", _taxPercentCounty);
    				_taxPercentCounty = value;
    				TaxPercentCountyChanged();
    				OnPropertyChanged("TaxPercentCounty");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentCounty;
    	partial void TaxPercentDistrictChanged();
    	public Nullable<decimal> TaxPercentDistrict
    	{
    		get { return _taxPercentDistrict; }
    		set
    		{
    			if (_taxPercentDistrict != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentDistrict", _taxPercentDistrict);
    				_taxPercentDistrict = value;
    				TaxPercentDistrictChanged();
    				OnPropertyChanged("TaxPercentDistrict");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentDistrict;
    	partial void TaxPercentCountryChanged();
    	public Nullable<decimal> TaxPercentCountry
    	{
    		get { return _taxPercentCountry; }
    		set
    		{
    			if (_taxPercentCountry != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentCountry", _taxPercentCountry);
    				_taxPercentCountry = value;
    				TaxPercentCountryChanged();
    				OnPropertyChanged("TaxPercentCountry");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentCountry;
    	partial void TaxPercentSpecialChanged();
    	public Nullable<decimal> TaxPercentSpecial
    	{
    		get { return _taxPercentSpecial; }
    		set
    		{
    			if (_taxPercentSpecial != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentSpecial", _taxPercentSpecial);
    				_taxPercentSpecial = value;
    				TaxPercentSpecialChanged();
    				OnPropertyChanged("TaxPercentSpecial");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentSpecial;
    	partial void TaxPercentMiscChanged();
    	public Nullable<decimal> TaxPercentMisc
    	{
    		get { return _taxPercentMisc; }
    		set
    		{
    			if (_taxPercentMisc != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentMisc", _taxPercentMisc);
    				_taxPercentMisc = value;
    				TaxPercentMiscChanged();
    				OnPropertyChanged("TaxPercentMisc");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentMisc;
    	partial void DateCreatedUTCChanged();
    	public Nullable<System.DateTime> DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateCreatedUTC;
    	partial void ExpirationDateUTCChanged();
    	public Nullable<System.DateTime> ExpirationDateUTC
    	{
    		get { return _expirationDateUTC; }
    		set
    		{
    			if (_expirationDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpirationDateUTC", _expirationDateUTC);
    				_expirationDateUTC = value;
    				ExpirationDateUTCChanged();
    				OnPropertyChanged("ExpirationDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _expirationDateUTC;

        #endregion
        #region Navigation Properties
    
    	public Address Address
    	{
    		get { return _address; }
    		set
    		{
    			if (!ReferenceEquals(_address, value))
    			{
    				var previousValue = _address;
    				_address = value;
    				FixupAddress(previousValue);
    				OnNavigationPropertyChanged("Address");
    			}
    		}
    	}
    	private Address _address;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Address = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAddress(Address previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AddressTaxOverrides.Contains(this))
    		{
    			previousValue.AddressTaxOverrides.Remove(this);
    		}
    
    		if (Address != null)
    		{
    			if (!Address.AddressTaxOverrides.Contains(this))
    			{
    				Address.AddressTaxOverrides.Add(this);
    			}
    
    			AddressID = Address.AddressID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Address")
    				&& (ChangeTracker.OriginalValues["Address"] == Address))
    			{
    				ChangeTracker.OriginalValues.Remove("Address");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Address", previousValue);
    			}
    			if (Address != null && !Address.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Address.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

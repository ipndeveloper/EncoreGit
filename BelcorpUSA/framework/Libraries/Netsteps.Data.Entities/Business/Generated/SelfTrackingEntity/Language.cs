//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Country))]
    [KnownType(typeof(AccountLanguage))]
    [KnownType(typeof(SiteUrl))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(TermTranslation))]
    [KnownType(typeof(CategoryTranslation))]
    [KnownType(typeof(DescriptionTranslation))]
    [KnownType(typeof(User))]
    [KnownType(typeof(PageTranslation))]
    [KnownType(typeof(Archive))]
    [KnownType(typeof(NavigationTranslation))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(HtmlContent))]
    [KnownType(typeof(Policy))]
    [KnownType(typeof(CampaignActionTokenValue))]
    [KnownType(typeof(EmailTemplateTranslation))]
    [KnownType(typeof(AutoresponderTranslation))]
    [KnownType(typeof(Newsletter))]
    [KnownType(typeof(AlertTemplateTranslation))]
    [KnownType(typeof(NewsTypeLanguageSort))]
    [Serializable]
    public partial class Language: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void LanguageIDChanged();
    	public int LanguageID
    	{
    		get { return _languageID; }
    		set
    		{
    			if (_languageID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'LanguageID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_languageID = value;
    				LanguageIDChanged();
    				OnPropertyChanged("LanguageID");
    			}
    		}
    	}
    	private int _languageID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void CultureInfoChanged();
    	public string CultureInfo
    	{
    		get { return _cultureInfo; }
    		set
    		{
    			if (_cultureInfo != value)
    			{
    				ChangeTracker.RecordOriginalValue("CultureInfo", _cultureInfo);
    				_cultureInfo = value;
    				CultureInfoChanged();
    				OnPropertyChanged("CultureInfo");
    			}
    		}
    	}
    	private string _cultureInfo;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void IsBaseChanged();
    	public Nullable<bool> IsBase
    	{
    		get { return _isBase; }
    		set
    		{
    			if (_isBase != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsBase", _isBase);
    				_isBase = value;
    				IsBaseChanged();
    				OnPropertyChanged("IsBase");
    			}
    		}
    	}
    	private Nullable<bool> _isBase;
    	partial void LanguageCodeChanged();
    	public string LanguageCode
    	{
    		get { return _languageCode; }
    		set
    		{
    			if (_languageCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("LanguageCode", _languageCode);
    				_languageCode = value;
    				LanguageCodeChanged();
    				OnPropertyChanged("LanguageCode");
    			}
    		}
    	}
    	private string _languageCode;
    	partial void LanguageCode3Changed();
    	public string LanguageCode3
    	{
    		get { return _languageCode3; }
    		set
    		{
    			if (_languageCode3 != value)
    			{
    				ChangeTracker.RecordOriginalValue("LanguageCode3", _languageCode3);
    				_languageCode3 = value;
    				LanguageCode3Changed();
    				OnPropertyChanged("LanguageCode3");
    			}
    		}
    	}
    	private string _languageCode3;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<Country> Countries
    	{
    		get
    		{
    			if (_countries == null)
    			{
    				_countries = new TrackableCollection<Country>();
    				_countries.CollectionChanged += FixupCountries;
    				_countries.CollectionChanged += RaiseCountriesChanged;
    			}
    			return _countries;
    		}
    		set
    		{
    			if (!ReferenceEquals(_countries, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_countries != null)
    				{
    					_countries.CollectionChanged -= FixupCountries;
    					_countries.CollectionChanged -= RaiseCountriesChanged;
    				}
    				_countries = value;
    				if (_countries != null)
    				{
    					_countries.CollectionChanged += FixupCountries;
    					_countries.CollectionChanged += RaiseCountriesChanged;
    				}
    				OnNavigationPropertyChanged("Countries");
    			}
    		}
    	}
    	private TrackableCollection<Country> _countries;
    	partial void CountriesChanged();
    	private void RaiseCountriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CountriesChanged();
    	}
    
    	public TrackableCollection<AccountLanguage> AccountLanguages
    	{
    		get
    		{
    			if (_accountLanguages == null)
    			{
    				_accountLanguages = new TrackableCollection<AccountLanguage>();
    				_accountLanguages.CollectionChanged += FixupAccountLanguages;
    				_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    			}
    			return _accountLanguages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountLanguages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountLanguages != null)
    				{
    					_accountLanguages.CollectionChanged -= FixupAccountLanguages;
    					_accountLanguages.CollectionChanged -= RaiseAccountLanguagesChanged;
    				}
    				_accountLanguages = value;
    				if (_accountLanguages != null)
    				{
    					_accountLanguages.CollectionChanged += FixupAccountLanguages;
    					_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    				}
    				OnNavigationPropertyChanged("AccountLanguages");
    			}
    		}
    	}
    	private TrackableCollection<AccountLanguage> _accountLanguages;
    	partial void AccountLanguagesChanged();
    	private void RaiseAccountLanguagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountLanguagesChanged();
    	}
    
    	public TrackableCollection<SiteUrl> SiteUrls
    	{
    		get
    		{
    			if (_siteUrls == null)
    			{
    				_siteUrls = new TrackableCollection<SiteUrl>();
    				_siteUrls.CollectionChanged += FixupSiteUrls;
    				_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    			}
    			return _siteUrls;
    		}
    		set
    		{
    			if (!ReferenceEquals(_siteUrls, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_siteUrls != null)
    				{
    					_siteUrls.CollectionChanged -= FixupSiteUrls;
    					_siteUrls.CollectionChanged -= RaiseSiteUrlsChanged;
    				}
    				_siteUrls = value;
    				if (_siteUrls != null)
    				{
    					_siteUrls.CollectionChanged += FixupSiteUrls;
    					_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    				}
    				OnNavigationPropertyChanged("SiteUrls");
    			}
    		}
    	}
    	private TrackableCollection<SiteUrl> _siteUrls;
    	partial void SiteUrlsChanged();
    	private void RaiseSiteUrlsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SiteUrlsChanged();
    	}
    
    	public TrackableCollection<Country> Countries1
    	{
    		get
    		{
    			if (_countries1 == null)
    			{
    				_countries1 = new TrackableCollection<Country>();
    				_countries1.CollectionChanged += FixupCountries1;
    				_countries1.CollectionChanged += RaiseCountries1Changed;
    			}
    			return _countries1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_countries1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_countries1 != null)
    				{
    					_countries1.CollectionChanged -= FixupCountries1;
    					_countries1.CollectionChanged -= RaiseCountries1Changed;
    				}
    				_countries1 = value;
    				if (_countries1 != null)
    				{
    					_countries1.CollectionChanged += FixupCountries1;
    					_countries1.CollectionChanged += RaiseCountries1Changed;
    				}
    				OnNavigationPropertyChanged("Countries1");
    			}
    		}
    	}
    	private TrackableCollection<Country> _countries1;
    	partial void Countries1Changed();
    	private void RaiseCountries1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Countries1Changed();
    	}
    
    	public TrackableCollection<Account> Accounts
    	{
    		get
    		{
    			if (_accounts == null)
    			{
    				_accounts = new TrackableCollection<Account>();
    				_accounts.CollectionChanged += FixupAccounts;
    				_accounts.CollectionChanged += RaiseAccountsChanged;
    			}
    			return _accounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged -= FixupAccounts;
    					_accounts.CollectionChanged -= RaiseAccountsChanged;
    				}
    				_accounts = value;
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged += FixupAccounts;
    					_accounts.CollectionChanged += RaiseAccountsChanged;
    				}
    				OnNavigationPropertyChanged("Accounts");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts;
    	partial void AccountsChanged();
    	private void RaiseAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountsChanged();
    	}
    
    	public TrackableCollection<TermTranslation> TermTranslations
    	{
    		get
    		{
    			if (_termTranslations == null)
    			{
    				_termTranslations = new TrackableCollection<TermTranslation>();
    				_termTranslations.CollectionChanged += FixupTermTranslations;
    				_termTranslations.CollectionChanged += RaiseTermTranslationsChanged;
    			}
    			return _termTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_termTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_termTranslations != null)
    				{
    					_termTranslations.CollectionChanged -= FixupTermTranslations;
    					_termTranslations.CollectionChanged -= RaiseTermTranslationsChanged;
    				}
    				_termTranslations = value;
    				if (_termTranslations != null)
    				{
    					_termTranslations.CollectionChanged += FixupTermTranslations;
    					_termTranslations.CollectionChanged += RaiseTermTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("TermTranslations");
    			}
    		}
    	}
    	private TrackableCollection<TermTranslation> _termTranslations;
    	partial void TermTranslationsChanged();
    	private void RaiseTermTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TermTranslationsChanged();
    	}
    
    	public TrackableCollection<CategoryTranslation> CategoryTranslations
    	{
    		get
    		{
    			if (_categoryTranslations == null)
    			{
    				_categoryTranslations = new TrackableCollection<CategoryTranslation>();
    				_categoryTranslations.CollectionChanged += FixupCategoryTranslations;
    				_categoryTranslations.CollectionChanged += RaiseCategoryTranslationsChanged;
    			}
    			return _categoryTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_categoryTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_categoryTranslations != null)
    				{
    					_categoryTranslations.CollectionChanged -= FixupCategoryTranslations;
    					_categoryTranslations.CollectionChanged -= RaiseCategoryTranslationsChanged;
    				}
    				_categoryTranslations = value;
    				if (_categoryTranslations != null)
    				{
    					_categoryTranslations.CollectionChanged += FixupCategoryTranslations;
    					_categoryTranslations.CollectionChanged += RaiseCategoryTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("CategoryTranslations");
    			}
    		}
    	}
    	private TrackableCollection<CategoryTranslation> _categoryTranslations;
    	partial void CategoryTranslationsChanged();
    	private void RaiseCategoryTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CategoryTranslationsChanged();
    	}
    
    	public TrackableCollection<DescriptionTranslation> DescriptionTranslations
    	{
    		get
    		{
    			if (_descriptionTranslations == null)
    			{
    				_descriptionTranslations = new TrackableCollection<DescriptionTranslation>();
    				_descriptionTranslations.CollectionChanged += FixupDescriptionTranslations;
    				_descriptionTranslations.CollectionChanged += RaiseDescriptionTranslationsChanged;
    			}
    			return _descriptionTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_descriptionTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_descriptionTranslations != null)
    				{
    					_descriptionTranslations.CollectionChanged -= FixupDescriptionTranslations;
    					_descriptionTranslations.CollectionChanged -= RaiseDescriptionTranslationsChanged;
    				}
    				_descriptionTranslations = value;
    				if (_descriptionTranslations != null)
    				{
    					_descriptionTranslations.CollectionChanged += FixupDescriptionTranslations;
    					_descriptionTranslations.CollectionChanged += RaiseDescriptionTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("DescriptionTranslations");
    			}
    		}
    	}
    	private TrackableCollection<DescriptionTranslation> _descriptionTranslations;
    	partial void DescriptionTranslationsChanged();
    	private void RaiseDescriptionTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		DescriptionTranslationsChanged();
    	}
    
    	public TrackableCollection<User> Users
    	{
    		get
    		{
    			if (_users == null)
    			{
    				_users = new TrackableCollection<User>();
    				_users.CollectionChanged += FixupUsers;
    				_users.CollectionChanged += RaiseUsersChanged;
    			}
    			return _users;
    		}
    		set
    		{
    			if (!ReferenceEquals(_users, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_users != null)
    				{
    					_users.CollectionChanged -= FixupUsers;
    					_users.CollectionChanged -= RaiseUsersChanged;
    				}
    				_users = value;
    				if (_users != null)
    				{
    					_users.CollectionChanged += FixupUsers;
    					_users.CollectionChanged += RaiseUsersChanged;
    				}
    				OnNavigationPropertyChanged("Users");
    			}
    		}
    	}
    	private TrackableCollection<User> _users;
    	partial void UsersChanged();
    	private void RaiseUsersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		UsersChanged();
    	}
    
    	public TrackableCollection<PageTranslation> PageTranslations
    	{
    		get
    		{
    			if (_pageTranslations == null)
    			{
    				_pageTranslations = new TrackableCollection<PageTranslation>();
    				_pageTranslations.CollectionChanged += FixupPageTranslations;
    				_pageTranslations.CollectionChanged += RaisePageTranslationsChanged;
    			}
    			return _pageTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_pageTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_pageTranslations != null)
    				{
    					_pageTranslations.CollectionChanged -= FixupPageTranslations;
    					_pageTranslations.CollectionChanged -= RaisePageTranslationsChanged;
    				}
    				_pageTranslations = value;
    				if (_pageTranslations != null)
    				{
    					_pageTranslations.CollectionChanged += FixupPageTranslations;
    					_pageTranslations.CollectionChanged += RaisePageTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("PageTranslations");
    			}
    		}
    	}
    	private TrackableCollection<PageTranslation> _pageTranslations;
    	partial void PageTranslationsChanged();
    	private void RaisePageTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PageTranslationsChanged();
    	}
    
    	public TrackableCollection<Archive> Archives
    	{
    		get
    		{
    			if (_archives == null)
    			{
    				_archives = new TrackableCollection<Archive>();
    				_archives.CollectionChanged += FixupArchives;
    				_archives.CollectionChanged += RaiseArchivesChanged;
    			}
    			return _archives;
    		}
    		set
    		{
    			if (!ReferenceEquals(_archives, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_archives != null)
    				{
    					_archives.CollectionChanged -= FixupArchives;
    					_archives.CollectionChanged -= RaiseArchivesChanged;
    				}
    				_archives = value;
    				if (_archives != null)
    				{
    					_archives.CollectionChanged += FixupArchives;
    					_archives.CollectionChanged += RaiseArchivesChanged;
    				}
    				OnNavigationPropertyChanged("Archives");
    			}
    		}
    	}
    	private TrackableCollection<Archive> _archives;
    	partial void ArchivesChanged();
    	private void RaiseArchivesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ArchivesChanged();
    	}
    
    	public TrackableCollection<NavigationTranslation> NavigationTranslations
    	{
    		get
    		{
    			if (_navigationTranslations == null)
    			{
    				_navigationTranslations = new TrackableCollection<NavigationTranslation>();
    				_navigationTranslations.CollectionChanged += FixupNavigationTranslations;
    				_navigationTranslations.CollectionChanged += RaiseNavigationTranslationsChanged;
    			}
    			return _navigationTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_navigationTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_navigationTranslations != null)
    				{
    					_navigationTranslations.CollectionChanged -= FixupNavigationTranslations;
    					_navigationTranslations.CollectionChanged -= RaiseNavigationTranslationsChanged;
    				}
    				_navigationTranslations = value;
    				if (_navigationTranslations != null)
    				{
    					_navigationTranslations.CollectionChanged += FixupNavigationTranslations;
    					_navigationTranslations.CollectionChanged += RaiseNavigationTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("NavigationTranslations");
    			}
    		}
    	}
    	private TrackableCollection<NavigationTranslation> _navigationTranslations;
    	partial void NavigationTranslationsChanged();
    	private void RaiseNavigationTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NavigationTranslationsChanged();
    	}
    
    	public TrackableCollection<Site> Sites
    	{
    		get
    		{
    			if (_sites == null)
    			{
    				_sites = new TrackableCollection<Site>();
    				_sites.CollectionChanged += FixupSites;
    				_sites.CollectionChanged += RaiseSitesChanged;
    			}
    			return _sites;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites != null)
    				{
    					_sites.CollectionChanged -= FixupSites;
    					_sites.CollectionChanged -= RaiseSitesChanged;
    				}
    				_sites = value;
    				if (_sites != null)
    				{
    					_sites.CollectionChanged += FixupSites;
    					_sites.CollectionChanged += RaiseSitesChanged;
    				}
    				OnNavigationPropertyChanged("Sites");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites;
    	partial void SitesChanged();
    	private void RaiseSitesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SitesChanged();
    	}
    
    	public TrackableCollection<Site> Sites1
    	{
    		get
    		{
    			if (_sites1 == null)
    			{
    				_sites1 = new TrackableCollection<Site>();
    				_sites1.CollectionChanged += FixupSites1;
    				_sites1.CollectionChanged += RaiseSites1Changed;
    			}
    			return _sites1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites1 != null)
    				{
    					_sites1.CollectionChanged -= FixupSites1;
    					_sites1.CollectionChanged -= RaiseSites1Changed;
    				}
    				_sites1 = value;
    				if (_sites1 != null)
    				{
    					_sites1.CollectionChanged += FixupSites1;
    					_sites1.CollectionChanged += RaiseSites1Changed;
    				}
    				OnNavigationPropertyChanged("Sites1");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites1;
    	partial void Sites1Changed();
    	private void RaiseSites1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Sites1Changed();
    	}
    
    	public TrackableCollection<HtmlContent> HtmlContents
    	{
    		get
    		{
    			if (_htmlContents == null)
    			{
    				_htmlContents = new TrackableCollection<HtmlContent>();
    				_htmlContents.CollectionChanged += FixupHtmlContents;
    				_htmlContents.CollectionChanged += RaiseHtmlContentsChanged;
    			}
    			return _htmlContents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlContents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlContents != null)
    				{
    					_htmlContents.CollectionChanged -= FixupHtmlContents;
    					_htmlContents.CollectionChanged -= RaiseHtmlContentsChanged;
    				}
    				_htmlContents = value;
    				if (_htmlContents != null)
    				{
    					_htmlContents.CollectionChanged += FixupHtmlContents;
    					_htmlContents.CollectionChanged += RaiseHtmlContentsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlContents");
    			}
    		}
    	}
    	private TrackableCollection<HtmlContent> _htmlContents;
    	partial void HtmlContentsChanged();
    	private void RaiseHtmlContentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlContentsChanged();
    	}
    
    	public TrackableCollection<Policy> Policies
    	{
    		get
    		{
    			if (_policies == null)
    			{
    				_policies = new TrackableCollection<Policy>();
    				_policies.CollectionChanged += FixupPolicies;
    				_policies.CollectionChanged += RaisePoliciesChanged;
    			}
    			return _policies;
    		}
    		set
    		{
    			if (!ReferenceEquals(_policies, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_policies != null)
    				{
    					_policies.CollectionChanged -= FixupPolicies;
    					_policies.CollectionChanged -= RaisePoliciesChanged;
    				}
    				_policies = value;
    				if (_policies != null)
    				{
    					_policies.CollectionChanged += FixupPolicies;
    					_policies.CollectionChanged += RaisePoliciesChanged;
    				}
    				OnNavigationPropertyChanged("Policies");
    			}
    		}
    	}
    	private TrackableCollection<Policy> _policies;
    	partial void PoliciesChanged();
    	private void RaisePoliciesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PoliciesChanged();
    	}
    
    	public TrackableCollection<CampaignActionTokenValue> CampaignActionTokenValues
    	{
    		get
    		{
    			if (_campaignActionTokenValues == null)
    			{
    				_campaignActionTokenValues = new TrackableCollection<CampaignActionTokenValue>();
    				_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    				_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    			}
    			return _campaignActionTokenValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignActionTokenValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignActionTokenValues != null)
    				{
    					_campaignActionTokenValues.CollectionChanged -= FixupCampaignActionTokenValues;
    					_campaignActionTokenValues.CollectionChanged -= RaiseCampaignActionTokenValuesChanged;
    				}
    				_campaignActionTokenValues = value;
    				if (_campaignActionTokenValues != null)
    				{
    					_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    					_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    				}
    				OnNavigationPropertyChanged("CampaignActionTokenValues");
    			}
    		}
    	}
    	private TrackableCollection<CampaignActionTokenValue> _campaignActionTokenValues;
    	partial void CampaignActionTokenValuesChanged();
    	private void RaiseCampaignActionTokenValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignActionTokenValuesChanged();
    	}
    
    	public TrackableCollection<EmailTemplateTranslation> EmailTemplateTranslations
    	{
    		get
    		{
    			if (_emailTemplateTranslations == null)
    			{
    				_emailTemplateTranslations = new TrackableCollection<EmailTemplateTranslation>();
    				_emailTemplateTranslations.CollectionChanged += FixupEmailTemplateTranslations;
    				_emailTemplateTranslations.CollectionChanged += RaiseEmailTemplateTranslationsChanged;
    			}
    			return _emailTemplateTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_emailTemplateTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_emailTemplateTranslations != null)
    				{
    					_emailTemplateTranslations.CollectionChanged -= FixupEmailTemplateTranslations;
    					_emailTemplateTranslations.CollectionChanged -= RaiseEmailTemplateTranslationsChanged;
    				}
    				_emailTemplateTranslations = value;
    				if (_emailTemplateTranslations != null)
    				{
    					_emailTemplateTranslations.CollectionChanged += FixupEmailTemplateTranslations;
    					_emailTemplateTranslations.CollectionChanged += RaiseEmailTemplateTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("EmailTemplateTranslations");
    			}
    		}
    	}
    	private TrackableCollection<EmailTemplateTranslation> _emailTemplateTranslations;
    	partial void EmailTemplateTranslationsChanged();
    	private void RaiseEmailTemplateTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		EmailTemplateTranslationsChanged();
    	}
    
    	public TrackableCollection<AutoresponderTranslation> AutoresponderTranslations
    	{
    		get
    		{
    			if (_autoresponderTranslations == null)
    			{
    				_autoresponderTranslations = new TrackableCollection<AutoresponderTranslation>();
    				_autoresponderTranslations.CollectionChanged += FixupAutoresponderTranslations;
    				_autoresponderTranslations.CollectionChanged += RaiseAutoresponderTranslationsChanged;
    			}
    			return _autoresponderTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoresponderTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoresponderTranslations != null)
    				{
    					_autoresponderTranslations.CollectionChanged -= FixupAutoresponderTranslations;
    					_autoresponderTranslations.CollectionChanged -= RaiseAutoresponderTranslationsChanged;
    				}
    				_autoresponderTranslations = value;
    				if (_autoresponderTranslations != null)
    				{
    					_autoresponderTranslations.CollectionChanged += FixupAutoresponderTranslations;
    					_autoresponderTranslations.CollectionChanged += RaiseAutoresponderTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("AutoresponderTranslations");
    			}
    		}
    	}
    	private TrackableCollection<AutoresponderTranslation> _autoresponderTranslations;
    	partial void AutoresponderTranslationsChanged();
    	private void RaiseAutoresponderTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoresponderTranslationsChanged();
    	}
    
    	public TrackableCollection<Newsletter> Newsletters
    	{
    		get
    		{
    			if (_newsletters == null)
    			{
    				_newsletters = new TrackableCollection<Newsletter>();
    				_newsletters.CollectionChanged += FixupNewsletters;
    				_newsletters.CollectionChanged += RaiseNewslettersChanged;
    			}
    			return _newsletters;
    		}
    		set
    		{
    			if (!ReferenceEquals(_newsletters, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_newsletters != null)
    				{
    					_newsletters.CollectionChanged -= FixupNewsletters;
    					_newsletters.CollectionChanged -= RaiseNewslettersChanged;
    				}
    				_newsletters = value;
    				if (_newsletters != null)
    				{
    					_newsletters.CollectionChanged += FixupNewsletters;
    					_newsletters.CollectionChanged += RaiseNewslettersChanged;
    				}
    				OnNavigationPropertyChanged("Newsletters");
    			}
    		}
    	}
    	private TrackableCollection<Newsletter> _newsletters;
    	partial void NewslettersChanged();
    	private void RaiseNewslettersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewslettersChanged();
    	}
    
    	public TrackableCollection<AlertTemplateTranslation> AlertTemplateTranslations
    	{
    		get
    		{
    			if (_alertTemplateTranslations == null)
    			{
    				_alertTemplateTranslations = new TrackableCollection<AlertTemplateTranslation>();
    				_alertTemplateTranslations.CollectionChanged += FixupAlertTemplateTranslations;
    				_alertTemplateTranslations.CollectionChanged += RaiseAlertTemplateTranslationsChanged;
    			}
    			return _alertTemplateTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_alertTemplateTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_alertTemplateTranslations != null)
    				{
    					_alertTemplateTranslations.CollectionChanged -= FixupAlertTemplateTranslations;
    					_alertTemplateTranslations.CollectionChanged -= RaiseAlertTemplateTranslationsChanged;
    				}
    				_alertTemplateTranslations = value;
    				if (_alertTemplateTranslations != null)
    				{
    					_alertTemplateTranslations.CollectionChanged += FixupAlertTemplateTranslations;
    					_alertTemplateTranslations.CollectionChanged += RaiseAlertTemplateTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("AlertTemplateTranslations");
    			}
    		}
    	}
    	private TrackableCollection<AlertTemplateTranslation> _alertTemplateTranslations;
    	partial void AlertTemplateTranslationsChanged();
    	private void RaiseAlertTemplateTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AlertTemplateTranslationsChanged();
    	}
    
    	public TrackableCollection<NewsTypeLanguageSort> NewsTypeLanguageSorts
    	{
    		get
    		{
    			if (_newsTypeLanguageSorts == null)
    			{
    				_newsTypeLanguageSorts = new TrackableCollection<NewsTypeLanguageSort>();
    				_newsTypeLanguageSorts.CollectionChanged += FixupNewsTypeLanguageSorts;
    				_newsTypeLanguageSorts.CollectionChanged += RaiseNewsTypeLanguageSortsChanged;
    			}
    			return _newsTypeLanguageSorts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_newsTypeLanguageSorts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_newsTypeLanguageSorts != null)
    				{
    					_newsTypeLanguageSorts.CollectionChanged -= FixupNewsTypeLanguageSorts;
    					_newsTypeLanguageSorts.CollectionChanged -= RaiseNewsTypeLanguageSortsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Remove the cascade delete event handler for any entities in the current collection.
    					foreach (NewsTypeLanguageSort item in _newsTypeLanguageSorts)
    					{
    						ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    					}
    				}
    				_newsTypeLanguageSorts = value;
    				if (_newsTypeLanguageSorts != null)
    				{
    					_newsTypeLanguageSorts.CollectionChanged += FixupNewsTypeLanguageSorts;
    					_newsTypeLanguageSorts.CollectionChanged += RaiseNewsTypeLanguageSortsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Add the cascade delete event handler for any entities that are already in the new collection.
    					foreach (NewsTypeLanguageSort item in _newsTypeLanguageSorts)
    					{
    						ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    					}
    				}
    				OnNavigationPropertyChanged("NewsTypeLanguageSorts");
    			}
    		}
    	}
    	private TrackableCollection<NewsTypeLanguageSort> _newsTypeLanguageSorts;
    	partial void NewsTypeLanguageSortsChanged();
    	private void RaiseNewsTypeLanguageSortsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewsTypeLanguageSortsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_countries != null)
    		{
    			_countries.CollectionChanged -= FixupCountries;
    			_countries.CollectionChanged -= RaiseCountriesChanged;
    			_countries.CollectionChanged += FixupCountries;
    			_countries.CollectionChanged += RaiseCountriesChanged;
    		}
    		if (_accountLanguages != null)
    		{
    			_accountLanguages.CollectionChanged -= FixupAccountLanguages;
    			_accountLanguages.CollectionChanged -= RaiseAccountLanguagesChanged;
    			_accountLanguages.CollectionChanged += FixupAccountLanguages;
    			_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    		}
    		if (_siteUrls != null)
    		{
    			_siteUrls.CollectionChanged -= FixupSiteUrls;
    			_siteUrls.CollectionChanged -= RaiseSiteUrlsChanged;
    			_siteUrls.CollectionChanged += FixupSiteUrls;
    			_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    		}
    		if (_countries1 != null)
    		{
    			_countries1.CollectionChanged -= FixupCountries1;
    			_countries1.CollectionChanged -= RaiseCountries1Changed;
    			_countries1.CollectionChanged += FixupCountries1;
    			_countries1.CollectionChanged += RaiseCountries1Changed;
    		}
    		if (_accounts != null)
    		{
    			_accounts.CollectionChanged -= FixupAccounts;
    			_accounts.CollectionChanged -= RaiseAccountsChanged;
    			_accounts.CollectionChanged += FixupAccounts;
    			_accounts.CollectionChanged += RaiseAccountsChanged;
    		}
    		if (_termTranslations != null)
    		{
    			_termTranslations.CollectionChanged -= FixupTermTranslations;
    			_termTranslations.CollectionChanged -= RaiseTermTranslationsChanged;
    			_termTranslations.CollectionChanged += FixupTermTranslations;
    			_termTranslations.CollectionChanged += RaiseTermTranslationsChanged;
    		}
    		if (_categoryTranslations != null)
    		{
    			_categoryTranslations.CollectionChanged -= FixupCategoryTranslations;
    			_categoryTranslations.CollectionChanged -= RaiseCategoryTranslationsChanged;
    			_categoryTranslations.CollectionChanged += FixupCategoryTranslations;
    			_categoryTranslations.CollectionChanged += RaiseCategoryTranslationsChanged;
    		}
    		if (_descriptionTranslations != null)
    		{
    			_descriptionTranslations.CollectionChanged -= FixupDescriptionTranslations;
    			_descriptionTranslations.CollectionChanged -= RaiseDescriptionTranslationsChanged;
    			_descriptionTranslations.CollectionChanged += FixupDescriptionTranslations;
    			_descriptionTranslations.CollectionChanged += RaiseDescriptionTranslationsChanged;
    		}
    		if (_users != null)
    		{
    			_users.CollectionChanged -= FixupUsers;
    			_users.CollectionChanged -= RaiseUsersChanged;
    			_users.CollectionChanged += FixupUsers;
    			_users.CollectionChanged += RaiseUsersChanged;
    		}
    		if (_pageTranslations != null)
    		{
    			_pageTranslations.CollectionChanged -= FixupPageTranslations;
    			_pageTranslations.CollectionChanged -= RaisePageTranslationsChanged;
    			_pageTranslations.CollectionChanged += FixupPageTranslations;
    			_pageTranslations.CollectionChanged += RaisePageTranslationsChanged;
    		}
    		if (_archives != null)
    		{
    			_archives.CollectionChanged -= FixupArchives;
    			_archives.CollectionChanged -= RaiseArchivesChanged;
    			_archives.CollectionChanged += FixupArchives;
    			_archives.CollectionChanged += RaiseArchivesChanged;
    		}
    		if (_navigationTranslations != null)
    		{
    			_navigationTranslations.CollectionChanged -= FixupNavigationTranslations;
    			_navigationTranslations.CollectionChanged -= RaiseNavigationTranslationsChanged;
    			_navigationTranslations.CollectionChanged += FixupNavigationTranslations;
    			_navigationTranslations.CollectionChanged += RaiseNavigationTranslationsChanged;
    		}
    		if (_sites != null)
    		{
    			_sites.CollectionChanged -= FixupSites;
    			_sites.CollectionChanged -= RaiseSitesChanged;
    			_sites.CollectionChanged += FixupSites;
    			_sites.CollectionChanged += RaiseSitesChanged;
    		}
    		if (_sites1 != null)
    		{
    			_sites1.CollectionChanged -= FixupSites1;
    			_sites1.CollectionChanged -= RaiseSites1Changed;
    			_sites1.CollectionChanged += FixupSites1;
    			_sites1.CollectionChanged += RaiseSites1Changed;
    		}
    		if (_htmlContents != null)
    		{
    			_htmlContents.CollectionChanged -= FixupHtmlContents;
    			_htmlContents.CollectionChanged -= RaiseHtmlContentsChanged;
    			_htmlContents.CollectionChanged += FixupHtmlContents;
    			_htmlContents.CollectionChanged += RaiseHtmlContentsChanged;
    		}
    		if (_policies != null)
    		{
    			_policies.CollectionChanged -= FixupPolicies;
    			_policies.CollectionChanged -= RaisePoliciesChanged;
    			_policies.CollectionChanged += FixupPolicies;
    			_policies.CollectionChanged += RaisePoliciesChanged;
    		}
    		if (_campaignActionTokenValues != null)
    		{
    			_campaignActionTokenValues.CollectionChanged -= FixupCampaignActionTokenValues;
    			_campaignActionTokenValues.CollectionChanged -= RaiseCampaignActionTokenValuesChanged;
    			_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    			_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    		}
    		if (_emailTemplateTranslations != null)
    		{
    			_emailTemplateTranslations.CollectionChanged -= FixupEmailTemplateTranslations;
    			_emailTemplateTranslations.CollectionChanged -= RaiseEmailTemplateTranslationsChanged;
    			_emailTemplateTranslations.CollectionChanged += FixupEmailTemplateTranslations;
    			_emailTemplateTranslations.CollectionChanged += RaiseEmailTemplateTranslationsChanged;
    		}
    		if (_autoresponderTranslations != null)
    		{
    			_autoresponderTranslations.CollectionChanged -= FixupAutoresponderTranslations;
    			_autoresponderTranslations.CollectionChanged -= RaiseAutoresponderTranslationsChanged;
    			_autoresponderTranslations.CollectionChanged += FixupAutoresponderTranslations;
    			_autoresponderTranslations.CollectionChanged += RaiseAutoresponderTranslationsChanged;
    		}
    		if (_newsletters != null)
    		{
    			_newsletters.CollectionChanged -= FixupNewsletters;
    			_newsletters.CollectionChanged -= RaiseNewslettersChanged;
    			_newsletters.CollectionChanged += FixupNewsletters;
    			_newsletters.CollectionChanged += RaiseNewslettersChanged;
    		}
    		if (_alertTemplateTranslations != null)
    		{
    			_alertTemplateTranslations.CollectionChanged -= FixupAlertTemplateTranslations;
    			_alertTemplateTranslations.CollectionChanged -= RaiseAlertTemplateTranslationsChanged;
    			_alertTemplateTranslations.CollectionChanged += FixupAlertTemplateTranslations;
    			_alertTemplateTranslations.CollectionChanged += RaiseAlertTemplateTranslationsChanged;
    		}
    		if (_newsTypeLanguageSorts != null)
    		{
    			_newsTypeLanguageSorts.CollectionChanged -= FixupNewsTypeLanguageSorts;
    			_newsTypeLanguageSorts.CollectionChanged -= RaiseNewsTypeLanguageSortsChanged;
    			_newsTypeLanguageSorts.CollectionChanged += FixupNewsTypeLanguageSorts;
    			_newsTypeLanguageSorts.CollectionChanged += RaiseNewsTypeLanguageSortsChanged;
    			// This is the principal end in an association that performs cascade deletes.
    			// Add the cascade delete event handler for any entities that are 
    			// already in the collection.
    			foreach (var item in _newsTypeLanguageSorts)
    			{
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Countries.Clear();
    		AccountLanguages.Clear();
    		SiteUrls.Clear();
    		Countries1.Clear();
    		Accounts.Clear();
    		TermTranslations.Clear();
    		CategoryTranslations.Clear();
    		DescriptionTranslations.Clear();
    		Users.Clear();
    		PageTranslations.Clear();
    		Archives.Clear();
    		NavigationTranslations.Clear();
    		Sites.Clear();
    		Sites1.Clear();
    		HtmlContents.Clear();
    		Policies.Clear();
    		CampaignActionTokenValues.Clear();
    		EmailTemplateTranslations.Clear();
    		AutoresponderTranslations.Clear();
    		Newsletters.Clear();
    		AlertTemplateTranslations.Clear();
    		NewsTypeLanguageSorts.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCountries(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Country item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Countries", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Country item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Countries", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountLanguages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountLanguage item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountLanguages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountLanguage item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountLanguages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSiteUrls(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SiteUrl item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SiteUrls", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SiteUrl item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SiteUrls", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCountries1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Country item in e.NewItems)
    			{
    				if (!item.Languages.Contains(this))
    				{
    					item.Languages.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Countries1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Country item in e.OldItems)
    			{
    				if (item.Languages.Contains(this))
    				{
    					item.Languages.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Countries1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTermTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (TermTranslation item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("TermTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (TermTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("TermTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCategoryTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CategoryTranslation item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CategoryTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CategoryTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CategoryTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupDescriptionTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DescriptionTranslation item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("DescriptionTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DescriptionTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("DescriptionTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupUsers(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (User item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Users", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (User item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Users", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPageTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PageTranslation item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PageTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PageTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PageTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupArchives(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Archive item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Archives", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Archive item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Archives", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNavigationTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (NavigationTranslation item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("NavigationTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (NavigationTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("NavigationTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				if (!item.Languages.Contains(this))
    				{
    					item.Languages.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (item.Languages.Contains(this))
    				{
    					item.Languages.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlContents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlContent item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlContents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlContent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlContents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPolicies(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Policy item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Policies", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Policy item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Policies", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaignActionTokenValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignActionTokenValue item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignActionTokenValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignActionTokenValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignActionTokenValues", item);
    				}
    			}
    		}
    	}
    
    	private void FixupEmailTemplateTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (EmailTemplateTranslation item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("EmailTemplateTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (EmailTemplateTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("EmailTemplateTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoresponderTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoresponderTranslation item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoresponderTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoresponderTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoresponderTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNewsletters(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Newsletter item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Newsletters", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Newsletter item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Newsletters", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAlertTemplateTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AlertTemplateTranslation item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AlertTemplateTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AlertTemplateTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AlertTemplateTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNewsTypeLanguageSorts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (NewsTypeLanguageSort item in e.NewItems)
    			{
    				item.Language = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("NewsTypeLanguageSorts", item);
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Update the event listener to refer to the new dependent.
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (NewsTypeLanguageSort item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Language, this))
    				{
    					item.Language = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("NewsTypeLanguageSorts", item);
    					// Delete the dependent end of this identifying association. If the current state is Added,
    					// allow the relationship to be changed without causing the dependent to be deleted.
    					if (item.ChangeTracker.State != ObjectState.Added)
    					{
    						item.MarkAsDeleted();
    					}
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Remove the previous dependent from the event listener.
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    			}
    		}
    	}

        #endregion
    }
}

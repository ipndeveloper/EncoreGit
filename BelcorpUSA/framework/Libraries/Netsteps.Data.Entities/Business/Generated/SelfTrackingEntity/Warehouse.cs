//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(WarehouseProduct))]
    [KnownType(typeof(Address))]
    [KnownType(typeof(ShippingRegion))]
    [KnownType(typeof(ShippingOrderType))]
    [KnownType(typeof(WarehouseMaterial))]
    [Serializable]
    public partial class Warehouse: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void WarehouseIDChanged();
    	public int WarehouseID
    	{
    		get { return _warehouseID; }
    		set
    		{
    			if (_warehouseID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'WarehouseID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_warehouseID = value;
    				WarehouseIDChanged();
    				OnPropertyChanged("WarehouseID");
    			}
    		}
    	}
    	private int _warehouseID;
    	partial void AddressIDChanged();
    	public Nullable<int> AddressID
    	{
    		get { return _addressID; }
    		set
    		{
    			if (_addressID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AddressID", _addressID);
    				if (!IsDeserializing)
    				{
    					if (Address != null && Address.AddressID != value)
    					{
    						Address = null;
    					}
    				}
    				_addressID = value;
    				AddressIDChanged();
    				OnPropertyChanged("AddressID");
    			}
    		}
    	}
    	private Nullable<int> _addressID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void DaysForPickingChanged();
    	public int DaysForPicking
    	{
    		get { return _daysForPicking; }
    		set
    		{
    			if (_daysForPicking != value)
    			{
    				ChangeTracker.RecordOriginalValue("DaysForPicking", _daysForPicking);
    				_daysForPicking = value;
    				DaysForPickingChanged();
    				OnPropertyChanged("DaysForPicking");
    			}
    		}
    	}
    	private int _daysForPicking;
    	partial void ExternalCodeChanged();
    	public string ExternalCode
    	{
    		get { return _externalCode; }
    		set
    		{
    			if (_externalCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExternalCode", _externalCode);
    				_externalCode = value;
    				ExternalCodeChanged();
    				OnPropertyChanged("ExternalCode");
    			}
    		}
    	}
    	private string _externalCode;
    	partial void WorkInSaturdaysChanged();
    	public bool WorkInSaturdays
    	{
    		get { return _workInSaturdays; }
    		set
    		{
    			if (_workInSaturdays != value)
    			{
    				ChangeTracker.RecordOriginalValue("WorkInSaturdays", _workInSaturdays);
    				_workInSaturdays = value;
    				WorkInSaturdaysChanged();
    				OnPropertyChanged("WorkInSaturdays");
    			}
    		}
    	}
    	private bool _workInSaturdays;
    	partial void WorkInSundaysChanged();
    	public bool WorkInSundays
    	{
    		get { return _workInSundays; }
    		set
    		{
    			if (_workInSundays != value)
    			{
    				ChangeTracker.RecordOriginalValue("WorkInSundays", _workInSundays);
    				_workInSundays = value;
    				WorkInSundaysChanged();
    				OnPropertyChanged("WorkInSundays");
    			}
    		}
    	}
    	private bool _workInSundays;
    	partial void WorkInHollydaysChanged();
    	public bool WorkInHollydays
    	{
    		get { return _workInHollydays; }
    		set
    		{
    			if (_workInHollydays != value)
    			{
    				ChangeTracker.RecordOriginalValue("WorkInHollydays", _workInHollydays);
    				_workInHollydays = value;
    				WorkInHollydaysChanged();
    				OnPropertyChanged("WorkInHollydays");
    			}
    		}
    	}
    	private bool _workInHollydays;
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;
    	partial void CompanyIDChanged();
    	public Nullable<int> CompanyID
    	{
    		get { return _companyID; }
    		set
    		{
    			if (_companyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CompanyID", _companyID);
    				_companyID = value;
    				CompanyIDChanged();
    				OnPropertyChanged("CompanyID");
    			}
    		}
    	}
    	private Nullable<int> _companyID;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<WarehouseProduct> WarehouseProducts
    	{
    		get
    		{
    			if (_warehouseProducts == null)
    			{
    				_warehouseProducts = new TrackableCollection<WarehouseProduct>();
    				_warehouseProducts.CollectionChanged += FixupWarehouseProducts;
    				_warehouseProducts.CollectionChanged += RaiseWarehouseProductsChanged;
    			}
    			return _warehouseProducts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_warehouseProducts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_warehouseProducts != null)
    				{
    					_warehouseProducts.CollectionChanged -= FixupWarehouseProducts;
    					_warehouseProducts.CollectionChanged -= RaiseWarehouseProductsChanged;
    				}
    				_warehouseProducts = value;
    				if (_warehouseProducts != null)
    				{
    					_warehouseProducts.CollectionChanged += FixupWarehouseProducts;
    					_warehouseProducts.CollectionChanged += RaiseWarehouseProductsChanged;
    				}
    				OnNavigationPropertyChanged("WarehouseProducts");
    			}
    		}
    	}
    	private TrackableCollection<WarehouseProduct> _warehouseProducts;
    	partial void WarehouseProductsChanged();
    	private void RaiseWarehouseProductsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		WarehouseProductsChanged();
    	}
    
    	public Address Address
    	{
    		get { return _address; }
    		set
    		{
    			if (!ReferenceEquals(_address, value))
    			{
    				var previousValue = _address;
    				_address = value;
    				FixupAddress(previousValue);
    				OnNavigationPropertyChanged("Address");
    			}
    		}
    	}
    	private Address _address;
    
    	public TrackableCollection<ShippingRegion> ShippingRegions
    	{
    		get
    		{
    			if (_shippingRegions == null)
    			{
    				_shippingRegions = new TrackableCollection<ShippingRegion>();
    				_shippingRegions.CollectionChanged += FixupShippingRegions;
    				_shippingRegions.CollectionChanged += RaiseShippingRegionsChanged;
    			}
    			return _shippingRegions;
    		}
    		set
    		{
    			if (!ReferenceEquals(_shippingRegions, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_shippingRegions != null)
    				{
    					_shippingRegions.CollectionChanged -= FixupShippingRegions;
    					_shippingRegions.CollectionChanged -= RaiseShippingRegionsChanged;
    				}
    				_shippingRegions = value;
    				if (_shippingRegions != null)
    				{
    					_shippingRegions.CollectionChanged += FixupShippingRegions;
    					_shippingRegions.CollectionChanged += RaiseShippingRegionsChanged;
    				}
    				OnNavigationPropertyChanged("ShippingRegions");
    			}
    		}
    	}
    	private TrackableCollection<ShippingRegion> _shippingRegions;
    	partial void ShippingRegionsChanged();
    	private void RaiseShippingRegionsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ShippingRegionsChanged();
    	}
    
    	public TrackableCollection<ShippingOrderType> ShippingOrderTypes
    	{
    		get
    		{
    			if (_shippingOrderTypes == null)
    			{
    				_shippingOrderTypes = new TrackableCollection<ShippingOrderType>();
    				_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    				_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    			}
    			return _shippingOrderTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_shippingOrderTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_shippingOrderTypes != null)
    				{
    					_shippingOrderTypes.CollectionChanged -= FixupShippingOrderTypes;
    					_shippingOrderTypes.CollectionChanged -= RaiseShippingOrderTypesChanged;
    				}
    				_shippingOrderTypes = value;
    				if (_shippingOrderTypes != null)
    				{
    					_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    					_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    				}
    				OnNavigationPropertyChanged("ShippingOrderTypes");
    			}
    		}
    	}
    	private TrackableCollection<ShippingOrderType> _shippingOrderTypes;
    	partial void ShippingOrderTypesChanged();
    	private void RaiseShippingOrderTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ShippingOrderTypesChanged();
    	}
    
    	public TrackableCollection<WarehouseMaterial> WarehouseMaterials
    	{
    		get
    		{
    			if (_warehouseMaterials == null)
    			{
    				_warehouseMaterials = new TrackableCollection<WarehouseMaterial>();
    				_warehouseMaterials.CollectionChanged += FixupWarehouseMaterials;
    				_warehouseMaterials.CollectionChanged += RaiseWarehouseMaterialsChanged;
    			}
    			return _warehouseMaterials;
    		}
    		set
    		{
    			if (!ReferenceEquals(_warehouseMaterials, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_warehouseMaterials != null)
    				{
    					_warehouseMaterials.CollectionChanged -= FixupWarehouseMaterials;
    					_warehouseMaterials.CollectionChanged -= RaiseWarehouseMaterialsChanged;
    				}
    				_warehouseMaterials = value;
    				if (_warehouseMaterials != null)
    				{
    					_warehouseMaterials.CollectionChanged += FixupWarehouseMaterials;
    					_warehouseMaterials.CollectionChanged += RaiseWarehouseMaterialsChanged;
    				}
    				OnNavigationPropertyChanged("WarehouseMaterials");
    			}
    		}
    	}
    	private TrackableCollection<WarehouseMaterial> _warehouseMaterials;
    	partial void WarehouseMaterialsChanged();
    	private void RaiseWarehouseMaterialsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		WarehouseMaterialsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_warehouseProducts != null)
    		{
    			_warehouseProducts.CollectionChanged -= FixupWarehouseProducts;
    			_warehouseProducts.CollectionChanged -= RaiseWarehouseProductsChanged;
    			_warehouseProducts.CollectionChanged += FixupWarehouseProducts;
    			_warehouseProducts.CollectionChanged += RaiseWarehouseProductsChanged;
    		}
    		if (_shippingRegions != null)
    		{
    			_shippingRegions.CollectionChanged -= FixupShippingRegions;
    			_shippingRegions.CollectionChanged -= RaiseShippingRegionsChanged;
    			_shippingRegions.CollectionChanged += FixupShippingRegions;
    			_shippingRegions.CollectionChanged += RaiseShippingRegionsChanged;
    		}
    		if (_shippingOrderTypes != null)
    		{
    			_shippingOrderTypes.CollectionChanged -= FixupShippingOrderTypes;
    			_shippingOrderTypes.CollectionChanged -= RaiseShippingOrderTypesChanged;
    			_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    			_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    		}
    		if (_warehouseMaterials != null)
    		{
    			_warehouseMaterials.CollectionChanged -= FixupWarehouseMaterials;
    			_warehouseMaterials.CollectionChanged -= RaiseWarehouseMaterialsChanged;
    			_warehouseMaterials.CollectionChanged += FixupWarehouseMaterials;
    			_warehouseMaterials.CollectionChanged += RaiseWarehouseMaterialsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		WarehouseProducts.Clear();
    		Address = null;
    		ShippingRegions.Clear();
    		ShippingOrderTypes.Clear();
    		WarehouseMaterials.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAddress(Address previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Warehouses.Contains(this))
    		{
    			previousValue.Warehouses.Remove(this);
    		}
    
    		if (Address != null)
    		{
    			if (!Address.Warehouses.Contains(this))
    			{
    				Address.Warehouses.Add(this);
    			}
    
    			AddressID = Address.AddressID;
    		}
    		else if (!skipKeys)
    		{
    			AddressID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Address")
    				&& (ChangeTracker.OriginalValues["Address"] == Address))
    			{
    				ChangeTracker.OriginalValues.Remove("Address");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Address", previousValue);
    			}
    			if (Address != null && !Address.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Address.StartTracking();
    			}
    		}
    	}
    
    	private void FixupWarehouseProducts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (WarehouseProduct item in e.NewItems)
    			{
    				item.Warehouse = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("WarehouseProducts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (WarehouseProduct item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Warehouse, this))
    				{
    					item.Warehouse = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseProducts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupShippingRegions(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ShippingRegion item in e.NewItems)
    			{
    				item.Warehouse = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ShippingRegions", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ShippingRegion item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Warehouse, this))
    				{
    					item.Warehouse = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ShippingRegions", item);
    				}
    			}
    		}
    	}
    
    	private void FixupShippingOrderTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ShippingOrderType item in e.NewItems)
    			{
    				item.Warehouse = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ShippingOrderTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ShippingOrderType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Warehouse, this))
    				{
    					item.Warehouse = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ShippingOrderTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupWarehouseMaterials(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (WarehouseMaterial item in e.NewItems)
    			{
    				item.Warehouse = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("WarehouseMaterials", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (WarehouseMaterial item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Warehouse, this))
    				{
    					item.Warehouse = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseMaterials", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

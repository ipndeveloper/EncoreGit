//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AlertTemplateTranslation))]
    [KnownType(typeof(Token))]
    [KnownType(typeof(AlertPriority))]
    [KnownType(typeof(AccountAlert))]
    [Serializable]
    public partial class AlertTemplate: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AlertTemplateIDChanged();
    	public int AlertTemplateID
    	{
    		get { return _alertTemplateID; }
    		set
    		{
    			if (_alertTemplateID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AlertTemplateID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_alertTemplateID = value;
    				AlertTemplateIDChanged();
    				OnPropertyChanged("AlertTemplateID");
    			}
    		}
    	}
    	private int _alertTemplateID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void StoredProcedureNameChanged();
    	public string StoredProcedureName
    	{
    		get { return _storedProcedureName; }
    		set
    		{
    			if (_storedProcedureName != value)
    			{
    				ChangeTracker.RecordOriginalValue("StoredProcedureName", _storedProcedureName);
    				_storedProcedureName = value;
    				StoredProcedureNameChanged();
    				OnPropertyChanged("StoredProcedureName");
    			}
    		}
    	}
    	private string _storedProcedureName;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void AlertPriorityIDChanged();
    	public short AlertPriorityID
    	{
    		get { return _alertPriorityID; }
    		set
    		{
    			if (_alertPriorityID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AlertPriorityID", _alertPriorityID);
    				if (!IsDeserializing)
    				{
    					if (AlertPriority != null && AlertPriority.AlertPriorityID != value)
    					{
    						AlertPriority = null;
    					}
    				}
    				_alertPriorityID = value;
    				AlertPriorityIDChanged();
    				OnPropertyChanged("AlertPriorityID");
    			}
    		}
    	}
    	private short _alertPriorityID;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<AlertTemplateTranslation> AlertTemplateTranslations
    	{
    		get
    		{
    			if (_alertTemplateTranslations == null)
    			{
    				_alertTemplateTranslations = new TrackableCollection<AlertTemplateTranslation>();
    				_alertTemplateTranslations.CollectionChanged += FixupAlertTemplateTranslations;
    				_alertTemplateTranslations.CollectionChanged += RaiseAlertTemplateTranslationsChanged;
    			}
    			return _alertTemplateTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_alertTemplateTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_alertTemplateTranslations != null)
    				{
    					_alertTemplateTranslations.CollectionChanged -= FixupAlertTemplateTranslations;
    					_alertTemplateTranslations.CollectionChanged -= RaiseAlertTemplateTranslationsChanged;
    				}
    				_alertTemplateTranslations = value;
    				if (_alertTemplateTranslations != null)
    				{
    					_alertTemplateTranslations.CollectionChanged += FixupAlertTemplateTranslations;
    					_alertTemplateTranslations.CollectionChanged += RaiseAlertTemplateTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("AlertTemplateTranslations");
    			}
    		}
    	}
    	private TrackableCollection<AlertTemplateTranslation> _alertTemplateTranslations;
    	partial void AlertTemplateTranslationsChanged();
    	private void RaiseAlertTemplateTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AlertTemplateTranslationsChanged();
    	}
    
    	public TrackableCollection<Token> Tokens
    	{
    		get
    		{
    			if (_tokens == null)
    			{
    				_tokens = new TrackableCollection<Token>();
    				_tokens.CollectionChanged += FixupTokens;
    				_tokens.CollectionChanged += RaiseTokensChanged;
    			}
    			return _tokens;
    		}
    		set
    		{
    			if (!ReferenceEquals(_tokens, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_tokens != null)
    				{
    					_tokens.CollectionChanged -= FixupTokens;
    					_tokens.CollectionChanged -= RaiseTokensChanged;
    				}
    				_tokens = value;
    				if (_tokens != null)
    				{
    					_tokens.CollectionChanged += FixupTokens;
    					_tokens.CollectionChanged += RaiseTokensChanged;
    				}
    				OnNavigationPropertyChanged("Tokens");
    			}
    		}
    	}
    	private TrackableCollection<Token> _tokens;
    	partial void TokensChanged();
    	private void RaiseTokensChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TokensChanged();
    	}
    
    	public AlertPriority AlertPriority
    	{
    		get { return _alertPriority; }
    		set
    		{
    			if (!ReferenceEquals(_alertPriority, value))
    			{
    				var previousValue = _alertPriority;
    				_alertPriority = value;
    				FixupAlertPriority(previousValue);
    				OnNavigationPropertyChanged("AlertPriority");
    			}
    		}
    	}
    	private AlertPriority _alertPriority;
    
    	public TrackableCollection<AccountAlert> AccountAlerts
    	{
    		get
    		{
    			if (_accountAlerts == null)
    			{
    				_accountAlerts = new TrackableCollection<AccountAlert>();
    				_accountAlerts.CollectionChanged += FixupAccountAlerts;
    				_accountAlerts.CollectionChanged += RaiseAccountAlertsChanged;
    			}
    			return _accountAlerts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountAlerts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountAlerts != null)
    				{
    					_accountAlerts.CollectionChanged -= FixupAccountAlerts;
    					_accountAlerts.CollectionChanged -= RaiseAccountAlertsChanged;
    				}
    				_accountAlerts = value;
    				if (_accountAlerts != null)
    				{
    					_accountAlerts.CollectionChanged += FixupAccountAlerts;
    					_accountAlerts.CollectionChanged += RaiseAccountAlertsChanged;
    				}
    				OnNavigationPropertyChanged("AccountAlerts");
    			}
    		}
    	}
    	private TrackableCollection<AccountAlert> _accountAlerts;
    	partial void AccountAlertsChanged();
    	private void RaiseAccountAlertsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountAlertsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_alertTemplateTranslations != null)
    		{
    			_alertTemplateTranslations.CollectionChanged -= FixupAlertTemplateTranslations;
    			_alertTemplateTranslations.CollectionChanged -= RaiseAlertTemplateTranslationsChanged;
    			_alertTemplateTranslations.CollectionChanged += FixupAlertTemplateTranslations;
    			_alertTemplateTranslations.CollectionChanged += RaiseAlertTemplateTranslationsChanged;
    		}
    		if (_tokens != null)
    		{
    			_tokens.CollectionChanged -= FixupTokens;
    			_tokens.CollectionChanged -= RaiseTokensChanged;
    			_tokens.CollectionChanged += FixupTokens;
    			_tokens.CollectionChanged += RaiseTokensChanged;
    		}
    		if (_accountAlerts != null)
    		{
    			_accountAlerts.CollectionChanged -= FixupAccountAlerts;
    			_accountAlerts.CollectionChanged -= RaiseAccountAlertsChanged;
    			_accountAlerts.CollectionChanged += FixupAccountAlerts;
    			_accountAlerts.CollectionChanged += RaiseAccountAlertsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AlertTemplateTranslations.Clear();
    		Tokens.Clear();
    		AlertPriority = null;
    		AccountAlerts.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAlertPriority(AlertPriority previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AlertTemplates.Contains(this))
    		{
    			previousValue.AlertTemplates.Remove(this);
    		}
    
    		if (AlertPriority != null)
    		{
    			if (!AlertPriority.AlertTemplates.Contains(this))
    			{
    				AlertPriority.AlertTemplates.Add(this);
    			}
    
    			AlertPriorityID = AlertPriority.AlertPriorityID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AlertPriority")
    				&& (ChangeTracker.OriginalValues["AlertPriority"] == AlertPriority))
    			{
    				ChangeTracker.OriginalValues.Remove("AlertPriority");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AlertPriority", previousValue);
    			}
    			if (AlertPriority != null && !AlertPriority.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AlertPriority.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAlertTemplateTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AlertTemplateTranslation item in e.NewItems)
    			{
    				item.AlertTemplate = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AlertTemplateTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AlertTemplateTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AlertTemplate, this))
    				{
    					item.AlertTemplate = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AlertTemplateTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTokens(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Token item in e.NewItems)
    			{
    				if (!item.AlertTemplates.Contains(this))
    				{
    					item.AlertTemplates.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Tokens", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Token item in e.OldItems)
    			{
    				if (item.AlertTemplates.Contains(this))
    				{
    					item.AlertTemplates.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Tokens", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountAlerts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountAlert item in e.NewItems)
    			{
    				item.AlertTemplate = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountAlerts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountAlert item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AlertTemplate, this))
    				{
    					item.AlertTemplate = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountAlerts", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

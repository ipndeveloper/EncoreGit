//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Party))]
    [KnownType(typeof(PartyGuest))]
    [Serializable]
    public partial class PartyRsvp: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void PartyRsvpIDChanged();
    	public int PartyRsvpID
    	{
    		get { return _partyRsvpID; }
    		set
    		{
    			if (_partyRsvpID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'PartyRsvpID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_partyRsvpID = value;
    				PartyRsvpIDChanged();
    				OnPropertyChanged("PartyRsvpID");
    			}
    		}
    	}
    	private int _partyRsvpID;
    	partial void PartyIDChanged();
    	public int PartyID
    	{
    		get { return _partyID; }
    		set
    		{
    			if (_partyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PartyID", _partyID);
    				if (!IsDeserializing)
    				{
    					if (Party != null && Party.PartyID != value)
    					{
    						Party = null;
    					}
    				}
    				_partyID = value;
    				PartyIDChanged();
    				OnPropertyChanged("PartyID");
    			}
    		}
    	}
    	private int _partyID;
    	partial void IsComingChanged();
    	public bool IsComing
    	{
    		get { return _isComing; }
    		set
    		{
    			if (_isComing != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsComing", _isComing);
    				_isComing = value;
    				IsComingChanged();
    				OnPropertyChanged("IsComing");
    			}
    		}
    	}
    	private bool _isComing;
    	partial void PartyGuestIDChanged();
    	public int PartyGuestID
    	{
    		get { return _partyGuestID; }
    		set
    		{
    			if (_partyGuestID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PartyGuestID", _partyGuestID);
    				if (!IsDeserializing)
    				{
    					if (PartyGuest != null && PartyGuest.PartyGuestID != value)
    					{
    						PartyGuest = null;
    					}
    				}
    				_partyGuestID = value;
    				PartyGuestIDChanged();
    				OnPropertyChanged("PartyGuestID");
    			}
    		}
    	}
    	private int _partyGuestID;
    	partial void ResponseDateUTCChanged();
    	public System.DateTime ResponseDateUTC
    	{
    		get { return _responseDateUTC; }
    		set
    		{
    			if (_responseDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ResponseDateUTC", _responseDateUTC);
    				_responseDateUTC = value;
    				ResponseDateUTCChanged();
    				OnPropertyChanged("ResponseDateUTC");
    			}
    		}
    	}
    	private System.DateTime _responseDateUTC;

        #endregion
        #region Navigation Properties
    
    	public Party Party
    	{
    		get { return _party; }
    		set
    		{
    			if (!ReferenceEquals(_party, value))
    			{
    				var previousValue = _party;
    				_party = value;
    				FixupParty(previousValue);
    				OnNavigationPropertyChanged("Party");
    			}
    		}
    	}
    	private Party _party;
    
    	public PartyGuest PartyGuest
    	{
    		get { return _partyGuest; }
    		set
    		{
    			if (!ReferenceEquals(_partyGuest, value))
    			{
    				var previousValue = _partyGuest;
    				_partyGuest = value;
    				FixupPartyGuest(previousValue);
    				OnNavigationPropertyChanged("PartyGuest");
    			}
    		}
    	}
    	private PartyGuest _partyGuest;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Party = null;
    		PartyGuest = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupParty(Party previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.PartyRsvps.Contains(this))
    		{
    			previousValue.PartyRsvps.Remove(this);
    		}
    
    		if (Party != null)
    		{
    			if (!Party.PartyRsvps.Contains(this))
    			{
    				Party.PartyRsvps.Add(this);
    			}
    
    			PartyID = Party.PartyID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Party")
    				&& (ChangeTracker.OriginalValues["Party"] == Party))
    			{
    				ChangeTracker.OriginalValues.Remove("Party");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Party", previousValue);
    			}
    			if (Party != null && !Party.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Party.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPartyGuest(PartyGuest previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.PartyRsvps.Contains(this))
    		{
    			previousValue.PartyRsvps.Remove(this);
    		}
    
    		if (PartyGuest != null)
    		{
    			if (!PartyGuest.PartyRsvps.Contains(this))
    			{
    				PartyGuest.PartyRsvps.Add(this);
    			}
    
    			PartyGuestID = PartyGuest.PartyGuestID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("PartyGuest")
    				&& (ChangeTracker.OriginalValues["PartyGuest"] == PartyGuest))
    			{
    				ChangeTracker.OriginalValues.Remove("PartyGuest");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("PartyGuest", previousValue);
    			}
    			if (PartyGuest != null && !PartyGuest.ChangeTracker.ChangeTrackingEnabled)
    			{
    				PartyGuest.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

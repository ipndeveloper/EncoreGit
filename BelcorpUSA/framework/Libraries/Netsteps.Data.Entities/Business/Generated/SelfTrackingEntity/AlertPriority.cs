//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AlertTemplate))]
    [Serializable]
    public partial class AlertPriority: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AlertPriorityIDChanged();
    	public short AlertPriorityID
    	{
    		get { return _alertPriorityID; }
    		set
    		{
    			if (_alertPriorityID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AlertPriorityID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_alertPriorityID = value;
    				AlertPriorityIDChanged();
    				OnPropertyChanged("AlertPriorityID");
    			}
    		}
    	}
    	private short _alertPriorityID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void SortIndexChanged();
    	public short SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private short _sortIndex;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<AlertTemplate> AlertTemplates
    	{
    		get
    		{
    			if (_alertTemplates == null)
    			{
    				_alertTemplates = new TrackableCollection<AlertTemplate>();
    				_alertTemplates.CollectionChanged += FixupAlertTemplates;
    				_alertTemplates.CollectionChanged += RaiseAlertTemplatesChanged;
    			}
    			return _alertTemplates;
    		}
    		set
    		{
    			if (!ReferenceEquals(_alertTemplates, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_alertTemplates != null)
    				{
    					_alertTemplates.CollectionChanged -= FixupAlertTemplates;
    					_alertTemplates.CollectionChanged -= RaiseAlertTemplatesChanged;
    				}
    				_alertTemplates = value;
    				if (_alertTemplates != null)
    				{
    					_alertTemplates.CollectionChanged += FixupAlertTemplates;
    					_alertTemplates.CollectionChanged += RaiseAlertTemplatesChanged;
    				}
    				OnNavigationPropertyChanged("AlertTemplates");
    			}
    		}
    	}
    	private TrackableCollection<AlertTemplate> _alertTemplates;
    	partial void AlertTemplatesChanged();
    	private void RaiseAlertTemplatesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AlertTemplatesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_alertTemplates != null)
    		{
    			_alertTemplates.CollectionChanged -= FixupAlertTemplates;
    			_alertTemplates.CollectionChanged -= RaiseAlertTemplatesChanged;
    			_alertTemplates.CollectionChanged += FixupAlertTemplates;
    			_alertTemplates.CollectionChanged += RaiseAlertTemplatesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AlertTemplates.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAlertTemplates(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AlertTemplate item in e.NewItems)
    			{
    				item.AlertPriority = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AlertTemplates", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AlertTemplate item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AlertPriority, this))
    				{
    					item.AlertPriority = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AlertTemplates", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(HtmlElementType))]
    [KnownType(typeof(HtmlContent))]
    [Serializable]
    public partial class HtmlElement: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void HtmlElementIDChanged();
    	public long HtmlElementID
    	{
    		get { return _htmlElementID; }
    		set
    		{
    			if (_htmlElementID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'HtmlElementID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_htmlElementID = value;
    				HtmlElementIDChanged();
    				OnPropertyChanged("HtmlElementID");
    			}
    		}
    	}
    	private long _htmlElementID;
    	partial void HtmlElementTypeIDChanged();
    	public byte HtmlElementTypeID
    	{
    		get { return _htmlElementTypeID; }
    		set
    		{
    			if (_htmlElementTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlElementTypeID", _htmlElementTypeID);
    				if (!IsDeserializing)
    				{
    					if (HtmlElementType != null && HtmlElementType.HtmlElementTypeID != value)
    					{
    						HtmlElementType = null;
    					}
    				}
    				_htmlElementTypeID = value;
    				HtmlElementTypeIDChanged();
    				OnPropertyChanged("HtmlElementTypeID");
    			}
    		}
    	}
    	private byte _htmlElementTypeID;
    	partial void HtmlContentIDChanged();
    	public int HtmlContentID
    	{
    		get { return _htmlContentID; }
    		set
    		{
    			if (_htmlContentID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContentID", _htmlContentID);
    				if (!IsDeserializing)
    				{
    					if (HtmlContent != null && HtmlContent.HtmlContentID != value)
    					{
    						HtmlContent = null;
    					}
    				}
    				_htmlContentID = value;
    				HtmlContentIDChanged();
    				OnPropertyChanged("HtmlContentID");
    			}
    		}
    	}
    	private int _htmlContentID;
    	partial void ContentsChanged();
    	public string Contents
    	{
    		get { return _contents; }
    		set
    		{
    			if (_contents != value)
    			{
    				ChangeTracker.RecordOriginalValue("Contents", _contents);
    				_contents = value;
    				ContentsChanged();
    				OnPropertyChanged("Contents");
    			}
    		}
    	}
    	private string _contents;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void SortIndexChanged();
    	public byte SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private byte _sortIndex;

        #endregion
        #region Navigation Properties
    
    	public HtmlElementType HtmlElementType
    	{
    		get { return _htmlElementType; }
    		set
    		{
    			if (!ReferenceEquals(_htmlElementType, value))
    			{
    				var previousValue = _htmlElementType;
    				_htmlElementType = value;
    				FixupHtmlElementType(previousValue);
    				OnNavigationPropertyChanged("HtmlElementType");
    			}
    		}
    	}
    	private HtmlElementType _htmlElementType;
    
    	public HtmlContent HtmlContent
    	{
    		get { return _htmlContent; }
    		set
    		{
    			if (!ReferenceEquals(_htmlContent, value))
    			{
    				var previousValue = _htmlContent;
    				_htmlContent = value;
    				FixupHtmlContent(previousValue);
    				OnNavigationPropertyChanged("HtmlContent");
    			}
    		}
    	}
    	private HtmlContent _htmlContent;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		HtmlElementType = null;
    		HtmlContent = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHtmlElementType(HtmlElementType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlElements.Contains(this))
    		{
    			previousValue.HtmlElements.Remove(this);
    		}
    
    		if (HtmlElementType != null)
    		{
    			if (!HtmlElementType.HtmlElements.Contains(this))
    			{
    				HtmlElementType.HtmlElements.Add(this);
    			}
    
    			HtmlElementTypeID = HtmlElementType.HtmlElementTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlElementType")
    				&& (ChangeTracker.OriginalValues["HtmlElementType"] == HtmlElementType))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlElementType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlElementType", previousValue);
    			}
    			if (HtmlElementType != null && !HtmlElementType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlElementType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupHtmlContent(HtmlContent previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlElements.Contains(this))
    		{
    			previousValue.HtmlElements.Remove(this);
    		}
    
    		if (HtmlContent != null)
    		{
    			if (!HtmlContent.HtmlElements.Contains(this))
    			{
    				HtmlContent.HtmlElements.Add(this);
    			}
    
    			HtmlContentID = HtmlContent.HtmlContentID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlContent")
    				&& (ChangeTracker.OriginalValues["HtmlContent"] == HtmlContent))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlContent");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContent", previousValue);
    			}
    			if (HtmlContent != null && !HtmlContent.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlContent.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

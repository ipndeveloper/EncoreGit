//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Newsletter))]
    [Serializable]
    public partial class NewsletterTrackingStatistic: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void NewsletterTrackingStatisticIDChanged();
    	public int NewsletterTrackingStatisticID
    	{
    		get { return _newsletterTrackingStatisticID; }
    		set
    		{
    			if (_newsletterTrackingStatisticID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'NewsletterTrackingStatisticID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_newsletterTrackingStatisticID = value;
    				NewsletterTrackingStatisticIDChanged();
    				OnPropertyChanged("NewsletterTrackingStatisticID");
    			}
    		}
    	}
    	private int _newsletterTrackingStatisticID;
    	partial void NewsletterIDChanged();
    	public int NewsletterID
    	{
    		get { return _newsletterID; }
    		set
    		{
    			if (_newsletterID != value)
    			{
    				ChangeTracker.RecordOriginalValue("NewsletterID", _newsletterID);
    				if (!IsDeserializing)
    				{
    					if (Newsletter != null && Newsletter.NewsletterID != value)
    					{
    						Newsletter = null;
    					}
    				}
    				_newsletterID = value;
    				NewsletterIDChanged();
    				OnPropertyChanged("NewsletterID");
    			}
    		}
    	}
    	private int _newsletterID;
    	partial void MailMessageIDChanged();
    	public int MailMessageID
    	{
    		get { return _mailMessageID; }
    		set
    		{
    			if (_mailMessageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MailMessageID", _mailMessageID);
    				_mailMessageID = value;
    				MailMessageIDChanged();
    				OnPropertyChanged("MailMessageID");
    			}
    		}
    	}
    	private int _mailMessageID;
    	partial void DateUTCChanged();
    	public System.DateTime DateUTC
    	{
    		get { return _dateUTC; }
    		set
    		{
    			if (_dateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateUTC", _dateUTC);
    				_dateUTC = value;
    				DateUTCChanged();
    				OnPropertyChanged("DateUTC");
    			}
    		}
    	}
    	private System.DateTime _dateUTC;

        #endregion
        #region Navigation Properties
    
    	public Newsletter Newsletter
    	{
    		get { return _newsletter; }
    		set
    		{
    			if (!ReferenceEquals(_newsletter, value))
    			{
    				var previousValue = _newsletter;
    				_newsletter = value;
    				FixupNewsletter(previousValue);
    				OnNavigationPropertyChanged("Newsletter");
    			}
    		}
    	}
    	private Newsletter _newsletter;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Newsletter = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupNewsletter(Newsletter previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.NewsletterTrackingStatistics.Contains(this))
    		{
    			previousValue.NewsletterTrackingStatistics.Remove(this);
    		}
    
    		if (Newsletter != null)
    		{
    			if (!Newsletter.NewsletterTrackingStatistics.Contains(this))
    			{
    				Newsletter.NewsletterTrackingStatistics.Add(this);
    			}
    
    			NewsletterID = Newsletter.NewsletterID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Newsletter")
    				&& (ChangeTracker.OriginalValues["Newsletter"] == Newsletter))
    			{
    				ChangeTracker.OriginalValues.Remove("Newsletter");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Newsletter", previousValue);
    			}
    			if (Newsletter != null && !Newsletter.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Newsletter.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

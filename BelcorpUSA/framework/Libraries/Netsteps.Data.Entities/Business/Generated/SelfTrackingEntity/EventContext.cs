//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(CampaignActionQueueItem))]
    [KnownType(typeof(DomainEventQueueItem))]
    [KnownType(typeof(News))]
    [KnownType(typeof(AccountAlert))]
    [Serializable]
    public partial class EventContext: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void EventContextIDChanged();
    	public int EventContextID
    	{
    		get { return _eventContextID; }
    		set
    		{
    			if (_eventContextID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'EventContextID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_eventContextID = value;
    				EventContextIDChanged();
    				OnPropertyChanged("EventContextID");
    			}
    		}
    	}
    	private int _eventContextID;
    	partial void OrderIDChanged();
    	public Nullable<int> OrderID
    	{
    		get { return _orderID; }
    		set
    		{
    			if (_orderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderID", _orderID);
    				_orderID = value;
    				OrderIDChanged();
    				OnPropertyChanged("OrderID");
    			}
    		}
    	}
    	private Nullable<int> _orderID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void PartyIDChanged();
    	public Nullable<int> PartyID
    	{
    		get { return _partyID; }
    		set
    		{
    			if (_partyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PartyID", _partyID);
    				_partyID = value;
    				PartyIDChanged();
    				OnPropertyChanged("PartyID");
    			}
    		}
    	}
    	private Nullable<int> _partyID;
    	partial void SupportTicketIDChanged();
    	public Nullable<int> SupportTicketID
    	{
    		get { return _supportTicketID; }
    		set
    		{
    			if (_supportTicketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SupportTicketID", _supportTicketID);
    				_supportTicketID = value;
    				SupportTicketIDChanged();
    				OnPropertyChanged("SupportTicketID");
    			}
    		}
    	}
    	private Nullable<int> _supportTicketID;
    	partial void NewsIDChanged();
    	public Nullable<int> NewsID
    	{
    		get { return _newsID; }
    		set
    		{
    			if (_newsID != value)
    			{
    				ChangeTracker.RecordOriginalValue("NewsID", _newsID);
    				if (!IsDeserializing)
    				{
    					if (News != null && News.NewsID != value)
    					{
    						News = null;
    					}
    				}
    				_newsID = value;
    				NewsIDChanged();
    				OnPropertyChanged("NewsID");
    			}
    		}
    	}
    	private Nullable<int> _newsID;
    	partial void IncentiveIDChanged();
    	public Nullable<int> IncentiveID
    	{
    		get { return _incentiveID; }
    		set
    		{
    			if (_incentiveID != value)
    			{
    				ChangeTracker.RecordOriginalValue("IncentiveID", _incentiveID);
    				_incentiveID = value;
    				IncentiveIDChanged();
    				OnPropertyChanged("IncentiveID");
    			}
    		}
    	}
    	private Nullable<int> _incentiveID;
    	partial void ReferenceAccountIDChanged();
    	public Nullable<int> ReferenceAccountID
    	{
    		get { return _referenceAccountID; }
    		set
    		{
    			if (_referenceAccountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ReferenceAccountID", _referenceAccountID);
    				_referenceAccountID = value;
    				ReferenceAccountIDChanged();
    				OnPropertyChanged("ReferenceAccountID");
    			}
    		}
    	}
    	private Nullable<int> _referenceAccountID;
    	partial void PromotionIDChanged();
    	public Nullable<int> PromotionID
    	{
    		get { return _promotionID; }
    		set
    		{
    			if (_promotionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PromotionID", _promotionID);
    				_promotionID = value;
    				PromotionIDChanged();
    				OnPropertyChanged("PromotionID");
    			}
    		}
    	}
    	private Nullable<int> _promotionID;
    	partial void TitleIDChanged();
    	public Nullable<int> TitleID
    	{
    		get { return _titleID; }
    		set
    		{
    			if (_titleID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TitleID", _titleID);
    				_titleID = value;
    				TitleIDChanged();
    				OnPropertyChanged("TitleID");
    			}
    		}
    	}
    	private Nullable<int> _titleID;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<CampaignActionQueueItem> CampaignActionQueueItems
    	{
    		get
    		{
    			if (_campaignActionQueueItems == null)
    			{
    				_campaignActionQueueItems = new TrackableCollection<CampaignActionQueueItem>();
    				_campaignActionQueueItems.CollectionChanged += FixupCampaignActionQueueItems;
    				_campaignActionQueueItems.CollectionChanged += RaiseCampaignActionQueueItemsChanged;
    			}
    			return _campaignActionQueueItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignActionQueueItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignActionQueueItems != null)
    				{
    					_campaignActionQueueItems.CollectionChanged -= FixupCampaignActionQueueItems;
    					_campaignActionQueueItems.CollectionChanged -= RaiseCampaignActionQueueItemsChanged;
    				}
    				_campaignActionQueueItems = value;
    				if (_campaignActionQueueItems != null)
    				{
    					_campaignActionQueueItems.CollectionChanged += FixupCampaignActionQueueItems;
    					_campaignActionQueueItems.CollectionChanged += RaiseCampaignActionQueueItemsChanged;
    				}
    				OnNavigationPropertyChanged("CampaignActionQueueItems");
    			}
    		}
    	}
    	private TrackableCollection<CampaignActionQueueItem> _campaignActionQueueItems;
    	partial void CampaignActionQueueItemsChanged();
    	private void RaiseCampaignActionQueueItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignActionQueueItemsChanged();
    	}
    
    	public TrackableCollection<DomainEventQueueItem> DomainEventQueueItems
    	{
    		get
    		{
    			if (_domainEventQueueItems == null)
    			{
    				_domainEventQueueItems = new TrackableCollection<DomainEventQueueItem>();
    				_domainEventQueueItems.CollectionChanged += FixupDomainEventQueueItems;
    				_domainEventQueueItems.CollectionChanged += RaiseDomainEventQueueItemsChanged;
    			}
    			return _domainEventQueueItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_domainEventQueueItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_domainEventQueueItems != null)
    				{
    					_domainEventQueueItems.CollectionChanged -= FixupDomainEventQueueItems;
    					_domainEventQueueItems.CollectionChanged -= RaiseDomainEventQueueItemsChanged;
    				}
    				_domainEventQueueItems = value;
    				if (_domainEventQueueItems != null)
    				{
    					_domainEventQueueItems.CollectionChanged += FixupDomainEventQueueItems;
    					_domainEventQueueItems.CollectionChanged += RaiseDomainEventQueueItemsChanged;
    				}
    				OnNavigationPropertyChanged("DomainEventQueueItems");
    			}
    		}
    	}
    	private TrackableCollection<DomainEventQueueItem> _domainEventQueueItems;
    	partial void DomainEventQueueItemsChanged();
    	private void RaiseDomainEventQueueItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		DomainEventQueueItemsChanged();
    	}
    
    	public News News
    	{
    		get { return _news; }
    		set
    		{
    			if (!ReferenceEquals(_news, value))
    			{
    				var previousValue = _news;
    				_news = value;
    				FixupNews(previousValue);
    				OnNavigationPropertyChanged("News");
    			}
    		}
    	}
    	private News _news;
    
    	public TrackableCollection<AccountAlert> AccountAlerts
    	{
    		get
    		{
    			if (_accountAlerts == null)
    			{
    				_accountAlerts = new TrackableCollection<AccountAlert>();
    				_accountAlerts.CollectionChanged += FixupAccountAlerts;
    				_accountAlerts.CollectionChanged += RaiseAccountAlertsChanged;
    			}
    			return _accountAlerts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountAlerts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountAlerts != null)
    				{
    					_accountAlerts.CollectionChanged -= FixupAccountAlerts;
    					_accountAlerts.CollectionChanged -= RaiseAccountAlertsChanged;
    				}
    				_accountAlerts = value;
    				if (_accountAlerts != null)
    				{
    					_accountAlerts.CollectionChanged += FixupAccountAlerts;
    					_accountAlerts.CollectionChanged += RaiseAccountAlertsChanged;
    				}
    				OnNavigationPropertyChanged("AccountAlerts");
    			}
    		}
    	}
    	private TrackableCollection<AccountAlert> _accountAlerts;
    	partial void AccountAlertsChanged();
    	private void RaiseAccountAlertsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountAlertsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_campaignActionQueueItems != null)
    		{
    			_campaignActionQueueItems.CollectionChanged -= FixupCampaignActionQueueItems;
    			_campaignActionQueueItems.CollectionChanged -= RaiseCampaignActionQueueItemsChanged;
    			_campaignActionQueueItems.CollectionChanged += FixupCampaignActionQueueItems;
    			_campaignActionQueueItems.CollectionChanged += RaiseCampaignActionQueueItemsChanged;
    		}
    		if (_domainEventQueueItems != null)
    		{
    			_domainEventQueueItems.CollectionChanged -= FixupDomainEventQueueItems;
    			_domainEventQueueItems.CollectionChanged -= RaiseDomainEventQueueItemsChanged;
    			_domainEventQueueItems.CollectionChanged += FixupDomainEventQueueItems;
    			_domainEventQueueItems.CollectionChanged += RaiseDomainEventQueueItemsChanged;
    		}
    		if (_accountAlerts != null)
    		{
    			_accountAlerts.CollectionChanged -= FixupAccountAlerts;
    			_accountAlerts.CollectionChanged -= RaiseAccountAlertsChanged;
    			_accountAlerts.CollectionChanged += FixupAccountAlerts;
    			_accountAlerts.CollectionChanged += RaiseAccountAlertsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		CampaignActionQueueItems.Clear();
    		DomainEventQueueItems.Clear();
    		News = null;
    		AccountAlerts.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupNews(News previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.EventContexts.Contains(this))
    		{
    			previousValue.EventContexts.Remove(this);
    		}
    
    		if (News != null)
    		{
    			if (!News.EventContexts.Contains(this))
    			{
    				News.EventContexts.Add(this);
    			}
    
    			NewsID = News.NewsID;
    		}
    		else if (!skipKeys)
    		{
    			NewsID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("News")
    				&& (ChangeTracker.OriginalValues["News"] == News))
    			{
    				ChangeTracker.OriginalValues.Remove("News");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("News", previousValue);
    			}
    			if (News != null && !News.ChangeTracker.ChangeTrackingEnabled)
    			{
    				News.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCampaignActionQueueItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignActionQueueItem item in e.NewItems)
    			{
    				item.EventContext = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignActionQueueItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignActionQueueItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.EventContext, this))
    				{
    					item.EventContext = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignActionQueueItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupDomainEventQueueItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DomainEventQueueItem item in e.NewItems)
    			{
    				item.EventContext = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("DomainEventQueueItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DomainEventQueueItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.EventContext, this))
    				{
    					item.EventContext = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("DomainEventQueueItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountAlerts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountAlert item in e.NewItems)
    			{
    				item.EventContext = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountAlerts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountAlert item in e.OldItems)
    			{
    				if (ReferenceEquals(item.EventContext, this))
    				{
    					item.EventContext = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountAlerts", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

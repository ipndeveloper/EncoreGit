//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Market))]
    [KnownType(typeof(SiteType))]
    [KnownType(typeof(StoreFront))]
    [Serializable]
    public partial class MarketStoreFront: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				if (!IsDeserializing)
    				{
    					if (Market != null && Market.MarketID != value)
    					{
    						Market = null;
    					}
    				}
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;
    	partial void StoreFrontIDChanged();
    	public int StoreFrontID
    	{
    		get { return _storeFrontID; }
    		set
    		{
    			if (_storeFrontID != value)
    			{
    				ChangeTracker.RecordOriginalValue("StoreFrontID", _storeFrontID);
    				if (!IsDeserializing)
    				{
    					if (StoreFront != null && StoreFront.StoreFrontID != value)
    					{
    						StoreFront = null;
    					}
    				}
    				_storeFrontID = value;
    				StoreFrontIDChanged();
    				OnPropertyChanged("StoreFrontID");
    			}
    		}
    	}
    	private int _storeFrontID;
    	partial void SiteTypeIDChanged();
    	public short SiteTypeID
    	{
    		get { return _siteTypeID; }
    		set
    		{
    			if (_siteTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteTypeID", _siteTypeID);
    				if (!IsDeserializing)
    				{
    					if (SiteType != null && SiteType.SiteTypeID != value)
    					{
    						SiteType = null;
    					}
    				}
    				_siteTypeID = value;
    				SiteTypeIDChanged();
    				OnPropertyChanged("SiteTypeID");
    			}
    		}
    	}
    	private short _siteTypeID;
    	partial void MarketStoreFrontIDChanged();
    	public int MarketStoreFrontID
    	{
    		get { return _marketStoreFrontID; }
    		set
    		{
    			if (_marketStoreFrontID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'MarketStoreFrontID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_marketStoreFrontID = value;
    				MarketStoreFrontIDChanged();
    				OnPropertyChanged("MarketStoreFrontID");
    			}
    		}
    	}
    	private int _marketStoreFrontID;

        #endregion
        #region Navigation Properties
    
    	public Market Market
    	{
    		get { return _market; }
    		set
    		{
    			if (!ReferenceEquals(_market, value))
    			{
    				var previousValue = _market;
    				_market = value;
    				FixupMarket(previousValue);
    				OnNavigationPropertyChanged("Market");
    			}
    		}
    	}
    	private Market _market;
    
    	public SiteType SiteType
    	{
    		get { return _siteType; }
    		set
    		{
    			if (!ReferenceEquals(_siteType, value))
    			{
    				var previousValue = _siteType;
    				_siteType = value;
    				FixupSiteType(previousValue);
    				OnNavigationPropertyChanged("SiteType");
    			}
    		}
    	}
    	private SiteType _siteType;
    
    	public StoreFront StoreFront
    	{
    		get { return _storeFront; }
    		set
    		{
    			if (!ReferenceEquals(_storeFront, value))
    			{
    				var previousValue = _storeFront;
    				_storeFront = value;
    				FixupStoreFront(previousValue);
    				OnNavigationPropertyChanged("StoreFront");
    			}
    		}
    	}
    	private StoreFront _storeFront;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Market = null;
    		SiteType = null;
    		StoreFront = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupMarket(Market previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.MarketStoreFronts.Contains(this))
    		{
    			previousValue.MarketStoreFronts.Remove(this);
    		}
    
    		if (Market != null)
    		{
    			if (!Market.MarketStoreFronts.Contains(this))
    			{
    				Market.MarketStoreFronts.Add(this);
    			}
    
    			MarketID = Market.MarketID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Market")
    				&& (ChangeTracker.OriginalValues["Market"] == Market))
    			{
    				ChangeTracker.OriginalValues.Remove("Market");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Market", previousValue);
    			}
    			if (Market != null && !Market.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Market.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSiteType(SiteType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.MarketStoreFronts.Contains(this))
    		{
    			previousValue.MarketStoreFronts.Remove(this);
    		}
    
    		if (SiteType != null)
    		{
    			if (!SiteType.MarketStoreFronts.Contains(this))
    			{
    				SiteType.MarketStoreFronts.Add(this);
    			}
    
    			SiteTypeID = SiteType.SiteTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("SiteType")
    				&& (ChangeTracker.OriginalValues["SiteType"] == SiteType))
    			{
    				ChangeTracker.OriginalValues.Remove("SiteType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("SiteType", previousValue);
    			}
    			if (SiteType != null && !SiteType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				SiteType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupStoreFront(StoreFront previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.MarketStoreFronts.Contains(this))
    		{
    			previousValue.MarketStoreFronts.Remove(this);
    		}
    
    		if (StoreFront != null)
    		{
    			if (!StoreFront.MarketStoreFronts.Contains(this))
    			{
    				StoreFront.MarketStoreFronts.Add(this);
    			}
    
    			StoreFrontID = StoreFront.StoreFrontID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("StoreFront")
    				&& (ChangeTracker.OriginalValues["StoreFront"] == StoreFront))
    			{
    				ChangeTracker.OriginalValues.Remove("StoreFront");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("StoreFront", previousValue);
    			}
    			if (StoreFront != null && !StoreFront.ChangeTracker.ChangeTrackingEnabled)
    			{
    				StoreFront.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

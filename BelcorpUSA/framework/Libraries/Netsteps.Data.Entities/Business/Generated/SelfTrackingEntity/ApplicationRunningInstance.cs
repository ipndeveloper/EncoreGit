//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Application))]
    [Serializable]
    public partial class ApplicationRunningInstance: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ApplicationRunningInstanceIDChanged();
    	public int ApplicationRunningInstanceID
    	{
    		get { return _applicationRunningInstanceID; }
    		set
    		{
    			if (_applicationRunningInstanceID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ApplicationRunningInstanceID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_applicationRunningInstanceID = value;
    				ApplicationRunningInstanceIDChanged();
    				OnPropertyChanged("ApplicationRunningInstanceID");
    			}
    		}
    	}
    	private int _applicationRunningInstanceID;
    	partial void ApplicationIDChanged();
    	public short ApplicationID
    	{
    		get { return _applicationID; }
    		set
    		{
    			if (_applicationID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ApplicationID", _applicationID);
    				if (!IsDeserializing)
    				{
    					if (Application != null && Application.ApplicationID != value)
    					{
    						Application = null;
    					}
    				}
    				_applicationID = value;
    				ApplicationIDChanged();
    				OnPropertyChanged("ApplicationID");
    			}
    		}
    	}
    	private short _applicationID;
    	partial void MachineNameChanged();
    	public string MachineName
    	{
    		get { return _machineName; }
    		set
    		{
    			if (_machineName != value)
    			{
    				ChangeTracker.RecordOriginalValue("MachineName", _machineName);
    				_machineName = value;
    				MachineNameChanged();
    				OnPropertyChanged("MachineName");
    			}
    		}
    	}
    	private string _machineName;
    	partial void IpAddressChanged();
    	public string IpAddress
    	{
    		get { return _ipAddress; }
    		set
    		{
    			if (_ipAddress != value)
    			{
    				ChangeTracker.RecordOriginalValue("IpAddress", _ipAddress);
    				_ipAddress = value;
    				IpAddressChanged();
    				OnPropertyChanged("IpAddress");
    			}
    		}
    	}
    	private string _ipAddress;
    	partial void StartDateUTCChanged();
    	public System.DateTime StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private System.DateTime _startDateUTC;
    	partial void LastPingDateUTCChanged();
    	public System.DateTime LastPingDateUTC
    	{
    		get { return _lastPingDateUTC; }
    		set
    		{
    			if (_lastPingDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastPingDateUTC", _lastPingDateUTC);
    				_lastPingDateUTC = value;
    				LastPingDateUTCChanged();
    				OnPropertyChanged("LastPingDateUTC");
    			}
    		}
    	}
    	private System.DateTime _lastPingDateUTC;

        #endregion
        #region Navigation Properties
    
    	public Application Application
    	{
    		get { return _application; }
    		set
    		{
    			if (!ReferenceEquals(_application, value))
    			{
    				var previousValue = _application;
    				_application = value;
    				FixupApplication(previousValue);
    				OnNavigationPropertyChanged("Application");
    			}
    		}
    	}
    	private Application _application;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Application = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupApplication(Application previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ApplicationRunningInstances.Contains(this))
    		{
    			previousValue.ApplicationRunningInstances.Remove(this);
    		}
    
    		if (Application != null)
    		{
    			if (!Application.ApplicationRunningInstances.Contains(this))
    			{
    				Application.ApplicationRunningInstances.Add(this);
    			}
    
    			ApplicationID = Application.ApplicationID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Application")
    				&& (ChangeTracker.OriginalValues["Application"] == Application))
    			{
    				ChangeTracker.OriginalValues.Remove("Application");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Application", previousValue);
    			}
    			if (Application != null && !Application.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Application.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

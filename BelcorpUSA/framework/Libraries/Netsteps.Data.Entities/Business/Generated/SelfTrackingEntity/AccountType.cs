//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(AccountPriceType))]
    [KnownType(typeof(AutoshipSchedule))]
    [KnownType(typeof(Policy))]
    [KnownType(typeof(Role))]
    [KnownType(typeof(Catalog))]
    [Serializable]
    public partial class AccountType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountTypeIDChanged();
    	public short AccountTypeID
    	{
    		get { return _accountTypeID; }
    		set
    		{
    			if (_accountTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountTypeID = value;
    				AccountTypeIDChanged();
    				OnPropertyChanged("AccountTypeID");
    			}
    		}
    	}
    	private short _accountTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void CodeChanged();
    	public string Code
    	{
    		get { return _code; }
    		set
    		{
    			if (_code != value)
    			{
    				ChangeTracker.RecordOriginalValue("Code", _code);
    				_code = value;
    				CodeChanged();
    				OnPropertyChanged("Code");
    			}
    		}
    	}
    	private string _code;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<Account> Accounts
    	{
    		get
    		{
    			if (_accounts == null)
    			{
    				_accounts = new TrackableCollection<Account>();
    				_accounts.CollectionChanged += FixupAccounts;
    				_accounts.CollectionChanged += RaiseAccountsChanged;
    			}
    			return _accounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged -= FixupAccounts;
    					_accounts.CollectionChanged -= RaiseAccountsChanged;
    				}
    				_accounts = value;
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged += FixupAccounts;
    					_accounts.CollectionChanged += RaiseAccountsChanged;
    				}
    				OnNavigationPropertyChanged("Accounts");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts;
    	partial void AccountsChanged();
    	private void RaiseAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountsChanged();
    	}
    
    	public TrackableCollection<AccountPriceType> AccountPriceTypes
    	{
    		get
    		{
    			if (_accountPriceTypes == null)
    			{
    				_accountPriceTypes = new TrackableCollection<AccountPriceType>();
    				_accountPriceTypes.CollectionChanged += FixupAccountPriceTypes;
    				_accountPriceTypes.CollectionChanged += RaiseAccountPriceTypesChanged;
    			}
    			return _accountPriceTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPriceTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPriceTypes != null)
    				{
    					_accountPriceTypes.CollectionChanged -= FixupAccountPriceTypes;
    					_accountPriceTypes.CollectionChanged -= RaiseAccountPriceTypesChanged;
    				}
    				_accountPriceTypes = value;
    				if (_accountPriceTypes != null)
    				{
    					_accountPriceTypes.CollectionChanged += FixupAccountPriceTypes;
    					_accountPriceTypes.CollectionChanged += RaiseAccountPriceTypesChanged;
    				}
    				OnNavigationPropertyChanged("AccountPriceTypes");
    			}
    		}
    	}
    	private TrackableCollection<AccountPriceType> _accountPriceTypes;
    	partial void AccountPriceTypesChanged();
    	private void RaiseAccountPriceTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPriceTypesChanged();
    	}
    
    	public TrackableCollection<AutoshipSchedule> AutoshipSchedules
    	{
    		get
    		{
    			if (_autoshipSchedules == null)
    			{
    				_autoshipSchedules = new TrackableCollection<AutoshipSchedule>();
    				_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    				_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    			}
    			return _autoshipSchedules;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipSchedules, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipSchedules != null)
    				{
    					_autoshipSchedules.CollectionChanged -= FixupAutoshipSchedules;
    					_autoshipSchedules.CollectionChanged -= RaiseAutoshipSchedulesChanged;
    				}
    				_autoshipSchedules = value;
    				if (_autoshipSchedules != null)
    				{
    					_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    					_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipSchedules");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipSchedule> _autoshipSchedules;
    	partial void AutoshipSchedulesChanged();
    	private void RaiseAutoshipSchedulesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipSchedulesChanged();
    	}
    
    	public TrackableCollection<Policy> Policies
    	{
    		get
    		{
    			if (_policies == null)
    			{
    				_policies = new TrackableCollection<Policy>();
    				_policies.CollectionChanged += FixupPolicies;
    				_policies.CollectionChanged += RaisePoliciesChanged;
    			}
    			return _policies;
    		}
    		set
    		{
    			if (!ReferenceEquals(_policies, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_policies != null)
    				{
    					_policies.CollectionChanged -= FixupPolicies;
    					_policies.CollectionChanged -= RaisePoliciesChanged;
    				}
    				_policies = value;
    				if (_policies != null)
    				{
    					_policies.CollectionChanged += FixupPolicies;
    					_policies.CollectionChanged += RaisePoliciesChanged;
    				}
    				OnNavigationPropertyChanged("Policies");
    			}
    		}
    	}
    	private TrackableCollection<Policy> _policies;
    	partial void PoliciesChanged();
    	private void RaisePoliciesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PoliciesChanged();
    	}
    
    	public TrackableCollection<Role> Roles
    	{
    		get
    		{
    			if (_roles == null)
    			{
    				_roles = new TrackableCollection<Role>();
    				_roles.CollectionChanged += FixupRoles;
    				_roles.CollectionChanged += RaiseRolesChanged;
    			}
    			return _roles;
    		}
    		set
    		{
    			if (!ReferenceEquals(_roles, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_roles != null)
    				{
    					_roles.CollectionChanged -= FixupRoles;
    					_roles.CollectionChanged -= RaiseRolesChanged;
    				}
    				_roles = value;
    				if (_roles != null)
    				{
    					_roles.CollectionChanged += FixupRoles;
    					_roles.CollectionChanged += RaiseRolesChanged;
    				}
    				OnNavigationPropertyChanged("Roles");
    			}
    		}
    	}
    	private TrackableCollection<Role> _roles;
    	partial void RolesChanged();
    	private void RaiseRolesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		RolesChanged();
    	}
    
    	public TrackableCollection<Catalog> Catalogs
    	{
    		get
    		{
    			if (_catalogs == null)
    			{
    				_catalogs = new TrackableCollection<Catalog>();
    				_catalogs.CollectionChanged += FixupCatalogs;
    				_catalogs.CollectionChanged += RaiseCatalogsChanged;
    			}
    			return _catalogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_catalogs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_catalogs != null)
    				{
    					_catalogs.CollectionChanged -= FixupCatalogs;
    					_catalogs.CollectionChanged -= RaiseCatalogsChanged;
    				}
    				_catalogs = value;
    				if (_catalogs != null)
    				{
    					_catalogs.CollectionChanged += FixupCatalogs;
    					_catalogs.CollectionChanged += RaiseCatalogsChanged;
    				}
    				OnNavigationPropertyChanged("Catalogs");
    			}
    		}
    	}
    	private TrackableCollection<Catalog> _catalogs;
    	partial void CatalogsChanged();
    	private void RaiseCatalogsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CatalogsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_accounts != null)
    		{
    			_accounts.CollectionChanged -= FixupAccounts;
    			_accounts.CollectionChanged -= RaiseAccountsChanged;
    			_accounts.CollectionChanged += FixupAccounts;
    			_accounts.CollectionChanged += RaiseAccountsChanged;
    		}
    		if (_accountPriceTypes != null)
    		{
    			_accountPriceTypes.CollectionChanged -= FixupAccountPriceTypes;
    			_accountPriceTypes.CollectionChanged -= RaiseAccountPriceTypesChanged;
    			_accountPriceTypes.CollectionChanged += FixupAccountPriceTypes;
    			_accountPriceTypes.CollectionChanged += RaiseAccountPriceTypesChanged;
    		}
    		if (_autoshipSchedules != null)
    		{
    			_autoshipSchedules.CollectionChanged -= FixupAutoshipSchedules;
    			_autoshipSchedules.CollectionChanged -= RaiseAutoshipSchedulesChanged;
    			_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    			_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    		}
    		if (_policies != null)
    		{
    			_policies.CollectionChanged -= FixupPolicies;
    			_policies.CollectionChanged -= RaisePoliciesChanged;
    			_policies.CollectionChanged += FixupPolicies;
    			_policies.CollectionChanged += RaisePoliciesChanged;
    		}
    		if (_roles != null)
    		{
    			_roles.CollectionChanged -= FixupRoles;
    			_roles.CollectionChanged -= RaiseRolesChanged;
    			_roles.CollectionChanged += FixupRoles;
    			_roles.CollectionChanged += RaiseRolesChanged;
    		}
    		if (_catalogs != null)
    		{
    			_catalogs.CollectionChanged -= FixupCatalogs;
    			_catalogs.CollectionChanged -= RaiseCatalogsChanged;
    			_catalogs.CollectionChanged += FixupCatalogs;
    			_catalogs.CollectionChanged += RaiseCatalogsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Accounts.Clear();
    		AccountPriceTypes.Clear();
    		AutoshipSchedules.Clear();
    		Policies.Clear();
    		Roles.Clear();
    		Catalogs.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				item.AccountType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountType, this))
    				{
    					item.AccountType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPriceTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPriceType item in e.NewItems)
    			{
    				item.AccountType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPriceTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPriceType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountType, this))
    				{
    					item.AccountType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPriceTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipSchedules(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipSchedule item in e.NewItems)
    			{
    				if (!item.AccountTypes.Contains(this))
    				{
    					item.AccountTypes.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipSchedules", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipSchedule item in e.OldItems)
    			{
    				if (item.AccountTypes.Contains(this))
    				{
    					item.AccountTypes.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipSchedules", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPolicies(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Policy item in e.NewItems)
    			{
    				item.AccountType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Policies", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Policy item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountType, this))
    				{
    					item.AccountType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Policies", item);
    				}
    			}
    		}
    	}
    
    	private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Role item in e.NewItems)
    			{
    				if (!item.AccountTypes.Contains(this))
    				{
    					item.AccountTypes.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Roles", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Role item in e.OldItems)
    			{
    				if (item.AccountTypes.Contains(this))
    				{
    					item.AccountTypes.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Roles", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCatalogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Catalog item in e.NewItems)
    			{
    				if (!item.AccountTypes.Contains(this))
    				{
    					item.AccountTypes.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Catalogs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Catalog item in e.OldItems)
    			{
    				if (item.AccountTypes.Contains(this))
    				{
    					item.AccountTypes.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Catalogs", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

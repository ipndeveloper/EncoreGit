//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductBase))]
    [KnownType(typeof(ProductFile))]
    [KnownType(typeof(ProductPrice))]
    [KnownType(typeof(ProductProperty))]
    [KnownType(typeof(ProductRelation))]
    [KnownType(typeof(WarehouseProduct))]
    [KnownType(typeof(TaxCategory))]
    [KnownType(typeof(DescriptionTranslation))]
    [KnownType(typeof(CatalogItem))]
    [KnownType(typeof(AutoshipScheduleProduct))]
    [KnownType(typeof(OrderItem))]
    [KnownType(typeof(ProductBackOrderBehavior))]
    [KnownType(typeof(DynamicKitGroupRule))]
    [KnownType(typeof(DynamicKit))]
    [KnownType(typeof(HostessRewardRule))]
    [KnownType(typeof(ProductVariantInfo))]
    [KnownType(typeof(ShippingMethod))]
    [KnownType(typeof(User))]
    [KnownType(typeof(PromotionProduct))]
    [KnownType(typeof(WarehouseMaterialAllocation))]
    [Serializable]
    public partial class Product: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductIDChanged();
    	public int ProductID
    	{
    		get { return _productID; }
    		set
    		{
    			if (_productID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productID = value;
    				ProductIDChanged();
    				OnPropertyChanged("ProductID");
    			}
    		}
    	}
    	private int _productID;
    	partial void ProductBaseIDChanged();
    	public int ProductBaseID
    	{
    		get { return _productBaseID; }
    		set
    		{
    			if (_productBaseID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductBaseID", _productBaseID);
    				if (!IsDeserializing)
    				{
    					if (ProductBase != null && ProductBase.ProductBaseID != value)
    					{
    						ProductBase = null;
    					}
    				}
    				_productBaseID = value;
    				ProductBaseIDChanged();
    				OnPropertyChanged("ProductBaseID");
    			}
    		}
    	}
    	private int _productBaseID;
    	partial void SKUChanged();
    	public string SKU
    	{
    		get { return _sKU; }
    		set
    		{
    			if (_sKU != value)
    			{
    				ChangeTracker.RecordOriginalValue("SKU", _sKU);
    				_sKU = value;
    				SKUChanged();
    				OnPropertyChanged("SKU");
    			}
    		}
    	}
    	private string _sKU;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void WeightChanged();
    	public Nullable<double> Weight
    	{
    		get { return _weight; }
    		set
    		{
    			if (_weight != value)
    			{
    				ChangeTracker.RecordOriginalValue("Weight", _weight);
    				_weight = value;
    				WeightChanged();
    				OnPropertyChanged("Weight");
    			}
    		}
    	}
    	private Nullable<double> _weight;
    	partial void WarehouseStickyShipChanged();
    	public bool WarehouseStickyShip
    	{
    		get { return _warehouseStickyShip; }
    		set
    		{
    			if (_warehouseStickyShip != value)
    			{
    				ChangeTracker.RecordOriginalValue("WarehouseStickyShip", _warehouseStickyShip);
    				_warehouseStickyShip = value;
    				WarehouseStickyShipChanged();
    				OnPropertyChanged("WarehouseStickyShip");
    			}
    		}
    	}
    	private bool _warehouseStickyShip;
    	partial void ProductBackOrderBehaviorIDChanged();
    	public short ProductBackOrderBehaviorID
    	{
    		get { return _productBackOrderBehaviorID; }
    		set
    		{
    			if (_productBackOrderBehaviorID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductBackOrderBehaviorID", _productBackOrderBehaviorID);
    				if (!IsDeserializing)
    				{
    					if (ProductBackOrderBehavior != null && ProductBackOrderBehavior.ProductBackOrderBehaviorID != value)
    					{
    						ProductBackOrderBehavior = null;
    					}
    				}
    				_productBackOrderBehaviorID = value;
    				ProductBackOrderBehaviorIDChanged();
    				OnPropertyChanged("ProductBackOrderBehaviorID");
    			}
    		}
    	}
    	private short _productBackOrderBehaviorID;
    	partial void ShowKitContentsChanged();
    	public bool ShowKitContents
    	{
    		get { return _showKitContents; }
    		set
    		{
    			if (_showKitContents != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShowKitContents", _showKitContents);
    				_showKitContents = value;
    				ShowKitContentsChanged();
    				OnPropertyChanged("ShowKitContents");
    			}
    		}
    	}
    	private bool _showKitContents;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void ProductNumberChanged();
    	public string ProductNumber
    	{
    		get { return _productNumber; }
    		set
    		{
    			if (_productNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductNumber", _productNumber);
    				_productNumber = value;
    				ProductNumberChanged();
    				OnPropertyChanged("ProductNumber");
    			}
    		}
    	}
    	private string _productNumber;
    	partial void IsVariantTemplateChanged();
    	public bool IsVariantTemplate
    	{
    		get { return _isVariantTemplate; }
    		set
    		{
    			if (_isVariantTemplate != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsVariantTemplate", _isVariantTemplate);
    				_isVariantTemplate = value;
    				IsVariantTemplateChanged();
    				OnPropertyChanged("IsVariantTemplate");
    			}
    		}
    	}
    	private bool _isVariantTemplate;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public ProductBase ProductBase
    	{
    		get { return _productBase; }
    		set
    		{
    			if (!ReferenceEquals(_productBase, value))
    			{
    				var previousValue = _productBase;
    				_productBase = value;
    				FixupProductBase(previousValue);
    				OnNavigationPropertyChanged("ProductBase");
    			}
    		}
    	}
    	private ProductBase _productBase;
    
    	public TrackableCollection<ProductFile> Files
    	{
    		get
    		{
    			if (_files == null)
    			{
    				_files = new TrackableCollection<ProductFile>();
    				_files.CollectionChanged += FixupFiles;
    				_files.CollectionChanged += RaiseFilesChanged;
    			}
    			return _files;
    		}
    		set
    		{
    			if (!ReferenceEquals(_files, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_files != null)
    				{
    					_files.CollectionChanged -= FixupFiles;
    					_files.CollectionChanged -= RaiseFilesChanged;
    				}
    				_files = value;
    				if (_files != null)
    				{
    					_files.CollectionChanged += FixupFiles;
    					_files.CollectionChanged += RaiseFilesChanged;
    				}
    				OnNavigationPropertyChanged("Files");
    			}
    		}
    	}
    	private TrackableCollection<ProductFile> _files;
    	partial void FilesChanged();
    	private void RaiseFilesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		FilesChanged();
    	}
    
    	public TrackableCollection<ProductPrice> Prices
    	{
    		get
    		{
    			if (_prices == null)
    			{
    				_prices = new TrackableCollection<ProductPrice>();
    				_prices.CollectionChanged += FixupPrices;
    				_prices.CollectionChanged += RaisePricesChanged;
    			}
    			return _prices;
    		}
    		set
    		{
    			if (!ReferenceEquals(_prices, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_prices != null)
    				{
    					_prices.CollectionChanged -= FixupPrices;
    					_prices.CollectionChanged -= RaisePricesChanged;
    				}
    				_prices = value;
    				if (_prices != null)
    				{
    					_prices.CollectionChanged += FixupPrices;
    					_prices.CollectionChanged += RaisePricesChanged;
    				}
    				OnNavigationPropertyChanged("Prices");
    			}
    		}
    	}
    	private TrackableCollection<ProductPrice> _prices;
    	partial void PricesChanged();
    	private void RaisePricesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PricesChanged();
    	}
    
    	public TrackableCollection<ProductProperty> Properties
    	{
    		get
    		{
    			if (_properties == null)
    			{
    				_properties = new TrackableCollection<ProductProperty>();
    				_properties.CollectionChanged += FixupProperties;
    				_properties.CollectionChanged += RaisePropertiesChanged;
    			}
    			return _properties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_properties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_properties != null)
    				{
    					_properties.CollectionChanged -= FixupProperties;
    					_properties.CollectionChanged -= RaisePropertiesChanged;
    				}
    				_properties = value;
    				if (_properties != null)
    				{
    					_properties.CollectionChanged += FixupProperties;
    					_properties.CollectionChanged += RaisePropertiesChanged;
    				}
    				OnNavigationPropertyChanged("Properties");
    			}
    		}
    	}
    	private TrackableCollection<ProductProperty> _properties;
    	partial void PropertiesChanged();
    	private void RaisePropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PropertiesChanged();
    	}
    
    	public TrackableCollection<ProductRelation> ParentProductRelations
    	{
    		get
    		{
    			if (_parentProductRelations == null)
    			{
    				_parentProductRelations = new TrackableCollection<ProductRelation>();
    				_parentProductRelations.CollectionChanged += FixupParentProductRelations;
    				_parentProductRelations.CollectionChanged += RaiseParentProductRelationsChanged;
    			}
    			return _parentProductRelations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_parentProductRelations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_parentProductRelations != null)
    				{
    					_parentProductRelations.CollectionChanged -= FixupParentProductRelations;
    					_parentProductRelations.CollectionChanged -= RaiseParentProductRelationsChanged;
    				}
    				_parentProductRelations = value;
    				if (_parentProductRelations != null)
    				{
    					_parentProductRelations.CollectionChanged += FixupParentProductRelations;
    					_parentProductRelations.CollectionChanged += RaiseParentProductRelationsChanged;
    				}
    				OnNavigationPropertyChanged("ParentProductRelations");
    			}
    		}
    	}
    	private TrackableCollection<ProductRelation> _parentProductRelations;
    	partial void ParentProductRelationsChanged();
    	private void RaiseParentProductRelationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ParentProductRelationsChanged();
    	}
    
    	public TrackableCollection<ProductRelation> ChildProductRelations
    	{
    		get
    		{
    			if (_childProductRelations == null)
    			{
    				_childProductRelations = new TrackableCollection<ProductRelation>();
    				_childProductRelations.CollectionChanged += FixupChildProductRelations;
    				_childProductRelations.CollectionChanged += RaiseChildProductRelationsChanged;
    			}
    			return _childProductRelations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_childProductRelations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_childProductRelations != null)
    				{
    					_childProductRelations.CollectionChanged -= FixupChildProductRelations;
    					_childProductRelations.CollectionChanged -= RaiseChildProductRelationsChanged;
    				}
    				_childProductRelations = value;
    				if (_childProductRelations != null)
    				{
    					_childProductRelations.CollectionChanged += FixupChildProductRelations;
    					_childProductRelations.CollectionChanged += RaiseChildProductRelationsChanged;
    				}
    				OnNavigationPropertyChanged("ChildProductRelations");
    			}
    		}
    	}
    	private TrackableCollection<ProductRelation> _childProductRelations;
    	partial void ChildProductRelationsChanged();
    	private void RaiseChildProductRelationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ChildProductRelationsChanged();
    	}
    
    	public TrackableCollection<WarehouseProduct> WarehouseProducts
    	{
    		get
    		{
    			if (_warehouseProducts == null)
    			{
    				_warehouseProducts = new TrackableCollection<WarehouseProduct>();
    				_warehouseProducts.CollectionChanged += FixupWarehouseProducts;
    				_warehouseProducts.CollectionChanged += RaiseWarehouseProductsChanged;
    			}
    			return _warehouseProducts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_warehouseProducts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_warehouseProducts != null)
    				{
    					_warehouseProducts.CollectionChanged -= FixupWarehouseProducts;
    					_warehouseProducts.CollectionChanged -= RaiseWarehouseProductsChanged;
    				}
    				_warehouseProducts = value;
    				if (_warehouseProducts != null)
    				{
    					_warehouseProducts.CollectionChanged += FixupWarehouseProducts;
    					_warehouseProducts.CollectionChanged += RaiseWarehouseProductsChanged;
    				}
    				OnNavigationPropertyChanged("WarehouseProducts");
    			}
    		}
    	}
    	private TrackableCollection<WarehouseProduct> _warehouseProducts;
    	partial void WarehouseProductsChanged();
    	private void RaiseWarehouseProductsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		WarehouseProductsChanged();
    	}
    
    	public TrackableCollection<TaxCategory> TaxCategories
    	{
    		get
    		{
    			if (_taxCategories == null)
    			{
    				_taxCategories = new TrackableCollection<TaxCategory>();
    				_taxCategories.CollectionChanged += FixupTaxCategories;
    				_taxCategories.CollectionChanged += RaiseTaxCategoriesChanged;
    			}
    			return _taxCategories;
    		}
    		set
    		{
    			if (!ReferenceEquals(_taxCategories, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_taxCategories != null)
    				{
    					_taxCategories.CollectionChanged -= FixupTaxCategories;
    					_taxCategories.CollectionChanged -= RaiseTaxCategoriesChanged;
    				}
    				_taxCategories = value;
    				if (_taxCategories != null)
    				{
    					_taxCategories.CollectionChanged += FixupTaxCategories;
    					_taxCategories.CollectionChanged += RaiseTaxCategoriesChanged;
    				}
    				OnNavigationPropertyChanged("TaxCategories");
    			}
    		}
    	}
    	private TrackableCollection<TaxCategory> _taxCategories;
    	partial void TaxCategoriesChanged();
    	private void RaiseTaxCategoriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TaxCategoriesChanged();
    	}
    
    	public TrackableCollection<DescriptionTranslation> Translations
    	{
    		get
    		{
    			if (_translations == null)
    			{
    				_translations = new TrackableCollection<DescriptionTranslation>();
    				_translations.CollectionChanged += FixupTranslations;
    				_translations.CollectionChanged += RaiseTranslationsChanged;
    			}
    			return _translations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_translations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_translations != null)
    				{
    					_translations.CollectionChanged -= FixupTranslations;
    					_translations.CollectionChanged -= RaiseTranslationsChanged;
    				}
    				_translations = value;
    				if (_translations != null)
    				{
    					_translations.CollectionChanged += FixupTranslations;
    					_translations.CollectionChanged += RaiseTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("Translations");
    			}
    		}
    	}
    	private TrackableCollection<DescriptionTranslation> _translations;
    	partial void TranslationsChanged();
    	private void RaiseTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TranslationsChanged();
    	}
    
    	public TrackableCollection<CatalogItem> CatalogItems
    	{
    		get
    		{
    			if (_catalogItems == null)
    			{
    				_catalogItems = new TrackableCollection<CatalogItem>();
    				_catalogItems.CollectionChanged += FixupCatalogItems;
    				_catalogItems.CollectionChanged += RaiseCatalogItemsChanged;
    			}
    			return _catalogItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_catalogItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_catalogItems != null)
    				{
    					_catalogItems.CollectionChanged -= FixupCatalogItems;
    					_catalogItems.CollectionChanged -= RaiseCatalogItemsChanged;
    				}
    				_catalogItems = value;
    				if (_catalogItems != null)
    				{
    					_catalogItems.CollectionChanged += FixupCatalogItems;
    					_catalogItems.CollectionChanged += RaiseCatalogItemsChanged;
    				}
    				OnNavigationPropertyChanged("CatalogItems");
    			}
    		}
    	}
    	private TrackableCollection<CatalogItem> _catalogItems;
    	partial void CatalogItemsChanged();
    	private void RaiseCatalogItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CatalogItemsChanged();
    	}
    
    	public TrackableCollection<AutoshipScheduleProduct> AutoshipScheduleProducts
    	{
    		get
    		{
    			if (_autoshipScheduleProducts == null)
    			{
    				_autoshipScheduleProducts = new TrackableCollection<AutoshipScheduleProduct>();
    				_autoshipScheduleProducts.CollectionChanged += FixupAutoshipScheduleProducts;
    				_autoshipScheduleProducts.CollectionChanged += RaiseAutoshipScheduleProductsChanged;
    			}
    			return _autoshipScheduleProducts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipScheduleProducts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipScheduleProducts != null)
    				{
    					_autoshipScheduleProducts.CollectionChanged -= FixupAutoshipScheduleProducts;
    					_autoshipScheduleProducts.CollectionChanged -= RaiseAutoshipScheduleProductsChanged;
    				}
    				_autoshipScheduleProducts = value;
    				if (_autoshipScheduleProducts != null)
    				{
    					_autoshipScheduleProducts.CollectionChanged += FixupAutoshipScheduleProducts;
    					_autoshipScheduleProducts.CollectionChanged += RaiseAutoshipScheduleProductsChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipScheduleProducts");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipScheduleProduct> _autoshipScheduleProducts;
    	partial void AutoshipScheduleProductsChanged();
    	private void RaiseAutoshipScheduleProductsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipScheduleProductsChanged();
    	}
    
    	public TrackableCollection<OrderItem> OrderItems
    	{
    		get
    		{
    			if (_orderItems == null)
    			{
    				_orderItems = new TrackableCollection<OrderItem>();
    				_orderItems.CollectionChanged += FixupOrderItems;
    				_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    			}
    			return _orderItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged -= FixupOrderItems;
    					_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    				}
    				_orderItems = value;
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged += FixupOrderItems;
    					_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    				}
    				OnNavigationPropertyChanged("OrderItems");
    			}
    		}
    	}
    	private TrackableCollection<OrderItem> _orderItems;
    	partial void OrderItemsChanged();
    	private void RaiseOrderItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemsChanged();
    	}
    
    	public ProductBackOrderBehavior ProductBackOrderBehavior
    	{
    		get { return _productBackOrderBehavior; }
    		set
    		{
    			if (!ReferenceEquals(_productBackOrderBehavior, value))
    			{
    				var previousValue = _productBackOrderBehavior;
    				_productBackOrderBehavior = value;
    				FixupProductBackOrderBehavior(previousValue);
    				OnNavigationPropertyChanged("ProductBackOrderBehavior");
    			}
    		}
    	}
    	private ProductBackOrderBehavior _productBackOrderBehavior;
    
    	public TrackableCollection<DynamicKitGroupRule> DynamicKitGroupRules
    	{
    		get
    		{
    			if (_dynamicKitGroupRules == null)
    			{
    				_dynamicKitGroupRules = new TrackableCollection<DynamicKitGroupRule>();
    				_dynamicKitGroupRules.CollectionChanged += FixupDynamicKitGroupRules;
    				_dynamicKitGroupRules.CollectionChanged += RaiseDynamicKitGroupRulesChanged;
    			}
    			return _dynamicKitGroupRules;
    		}
    		set
    		{
    			if (!ReferenceEquals(_dynamicKitGroupRules, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_dynamicKitGroupRules != null)
    				{
    					_dynamicKitGroupRules.CollectionChanged -= FixupDynamicKitGroupRules;
    					_dynamicKitGroupRules.CollectionChanged -= RaiseDynamicKitGroupRulesChanged;
    				}
    				_dynamicKitGroupRules = value;
    				if (_dynamicKitGroupRules != null)
    				{
    					_dynamicKitGroupRules.CollectionChanged += FixupDynamicKitGroupRules;
    					_dynamicKitGroupRules.CollectionChanged += RaiseDynamicKitGroupRulesChanged;
    				}
    				OnNavigationPropertyChanged("DynamicKitGroupRules");
    			}
    		}
    	}
    	private TrackableCollection<DynamicKitGroupRule> _dynamicKitGroupRules;
    	partial void DynamicKitGroupRulesChanged();
    	private void RaiseDynamicKitGroupRulesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		DynamicKitGroupRulesChanged();
    	}
    
    	public TrackableCollection<DynamicKit> DynamicKits
    	{
    		get
    		{
    			if (_dynamicKits == null)
    			{
    				_dynamicKits = new TrackableCollection<DynamicKit>();
    				_dynamicKits.CollectionChanged += FixupDynamicKits;
    				_dynamicKits.CollectionChanged += RaiseDynamicKitsChanged;
    			}
    			return _dynamicKits;
    		}
    		set
    		{
    			if (!ReferenceEquals(_dynamicKits, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_dynamicKits != null)
    				{
    					_dynamicKits.CollectionChanged -= FixupDynamicKits;
    					_dynamicKits.CollectionChanged -= RaiseDynamicKitsChanged;
    				}
    				_dynamicKits = value;
    				if (_dynamicKits != null)
    				{
    					_dynamicKits.CollectionChanged += FixupDynamicKits;
    					_dynamicKits.CollectionChanged += RaiseDynamicKitsChanged;
    				}
    				OnNavigationPropertyChanged("DynamicKits");
    			}
    		}
    	}
    	private TrackableCollection<DynamicKit> _dynamicKits;
    	partial void DynamicKitsChanged();
    	private void RaiseDynamicKitsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		DynamicKitsChanged();
    	}
    
    	public TrackableCollection<HostessRewardRule> HostessRewardRules
    	{
    		get
    		{
    			if (_hostessRewardRules == null)
    			{
    				_hostessRewardRules = new TrackableCollection<HostessRewardRule>();
    				_hostessRewardRules.CollectionChanged += FixupHostessRewardRules;
    				_hostessRewardRules.CollectionChanged += RaiseHostessRewardRulesChanged;
    			}
    			return _hostessRewardRules;
    		}
    		set
    		{
    			if (!ReferenceEquals(_hostessRewardRules, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_hostessRewardRules != null)
    				{
    					_hostessRewardRules.CollectionChanged -= FixupHostessRewardRules;
    					_hostessRewardRules.CollectionChanged -= RaiseHostessRewardRulesChanged;
    				}
    				_hostessRewardRules = value;
    				if (_hostessRewardRules != null)
    				{
    					_hostessRewardRules.CollectionChanged += FixupHostessRewardRules;
    					_hostessRewardRules.CollectionChanged += RaiseHostessRewardRulesChanged;
    				}
    				OnNavigationPropertyChanged("HostessRewardRules");
    			}
    		}
    	}
    	private TrackableCollection<HostessRewardRule> _hostessRewardRules;
    	partial void HostessRewardRulesChanged();
    	private void RaiseHostessRewardRulesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HostessRewardRulesChanged();
    	}
    
    	public ProductVariantInfo ProductVariantInfo
    	{
    		get { return _productVariantInfo; }
    		set
    		{
    			if (!ReferenceEquals(_productVariantInfo, value))
    			{
    				var previousValue = _productVariantInfo;
    				_productVariantInfo = value;
    				FixupProductVariantInfo(previousValue);
    				OnNavigationPropertyChanged("ProductVariantInfo");
    			}
    		}
    	}
    	private ProductVariantInfo _productVariantInfo;
    
    	public TrackableCollection<ShippingMethod> ExcludedShippingMethods
    	{
    		get
    		{
    			if (_excludedShippingMethods == null)
    			{
    				_excludedShippingMethods = new TrackableCollection<ShippingMethod>();
    				_excludedShippingMethods.CollectionChanged += FixupExcludedShippingMethods;
    				_excludedShippingMethods.CollectionChanged += RaiseExcludedShippingMethodsChanged;
    			}
    			return _excludedShippingMethods;
    		}
    		set
    		{
    			if (!ReferenceEquals(_excludedShippingMethods, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_excludedShippingMethods != null)
    				{
    					_excludedShippingMethods.CollectionChanged -= FixupExcludedShippingMethods;
    					_excludedShippingMethods.CollectionChanged -= RaiseExcludedShippingMethodsChanged;
    				}
    				_excludedShippingMethods = value;
    				if (_excludedShippingMethods != null)
    				{
    					_excludedShippingMethods.CollectionChanged += FixupExcludedShippingMethods;
    					_excludedShippingMethods.CollectionChanged += RaiseExcludedShippingMethodsChanged;
    				}
    				OnNavigationPropertyChanged("ExcludedShippingMethods");
    			}
    		}
    	}
    	private TrackableCollection<ShippingMethod> _excludedShippingMethods;
    	partial void ExcludedShippingMethodsChanged();
    	private void RaiseExcludedShippingMethodsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ExcludedShippingMethodsChanged();
    	}
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<PromotionProduct> PromotionProducts
    	{
    		get
    		{
    			if (_promotionProducts == null)
    			{
    				_promotionProducts = new TrackableCollection<PromotionProduct>();
    				_promotionProducts.CollectionChanged += FixupPromotionProducts;
    				_promotionProducts.CollectionChanged += RaisePromotionProductsChanged;
    			}
    			return _promotionProducts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_promotionProducts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_promotionProducts != null)
    				{
    					_promotionProducts.CollectionChanged -= FixupPromotionProducts;
    					_promotionProducts.CollectionChanged -= RaisePromotionProductsChanged;
    				}
    				_promotionProducts = value;
    				if (_promotionProducts != null)
    				{
    					_promotionProducts.CollectionChanged += FixupPromotionProducts;
    					_promotionProducts.CollectionChanged += RaisePromotionProductsChanged;
    				}
    				OnNavigationPropertyChanged("PromotionProducts");
    			}
    		}
    	}
    	private TrackableCollection<PromotionProduct> _promotionProducts;
    	partial void PromotionProductsChanged();
    	private void RaisePromotionProductsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PromotionProductsChanged();
    	}
    
    	public TrackableCollection<WarehouseMaterialAllocation> WarehouseMaterialAllocations
    	{
    		get
    		{
    			if (_warehouseMaterialAllocations == null)
    			{
    				_warehouseMaterialAllocations = new TrackableCollection<WarehouseMaterialAllocation>();
    				_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    				_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    			}
    			return _warehouseMaterialAllocations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_warehouseMaterialAllocations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_warehouseMaterialAllocations != null)
    				{
    					_warehouseMaterialAllocations.CollectionChanged -= FixupWarehouseMaterialAllocations;
    					_warehouseMaterialAllocations.CollectionChanged -= RaiseWarehouseMaterialAllocationsChanged;
    				}
    				_warehouseMaterialAllocations = value;
    				if (_warehouseMaterialAllocations != null)
    				{
    					_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    					_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    				}
    				OnNavigationPropertyChanged("WarehouseMaterialAllocations");
    			}
    		}
    	}
    	private TrackableCollection<WarehouseMaterialAllocation> _warehouseMaterialAllocations;
    	partial void WarehouseMaterialAllocationsChanged();
    	private void RaiseWarehouseMaterialAllocationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		WarehouseMaterialAllocationsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_files != null)
    		{
    			_files.CollectionChanged -= FixupFiles;
    			_files.CollectionChanged -= RaiseFilesChanged;
    			_files.CollectionChanged += FixupFiles;
    			_files.CollectionChanged += RaiseFilesChanged;
    		}
    		if (_prices != null)
    		{
    			_prices.CollectionChanged -= FixupPrices;
    			_prices.CollectionChanged -= RaisePricesChanged;
    			_prices.CollectionChanged += FixupPrices;
    			_prices.CollectionChanged += RaisePricesChanged;
    		}
    		if (_properties != null)
    		{
    			_properties.CollectionChanged -= FixupProperties;
    			_properties.CollectionChanged -= RaisePropertiesChanged;
    			_properties.CollectionChanged += FixupProperties;
    			_properties.CollectionChanged += RaisePropertiesChanged;
    		}
    		if (_parentProductRelations != null)
    		{
    			_parentProductRelations.CollectionChanged -= FixupParentProductRelations;
    			_parentProductRelations.CollectionChanged -= RaiseParentProductRelationsChanged;
    			_parentProductRelations.CollectionChanged += FixupParentProductRelations;
    			_parentProductRelations.CollectionChanged += RaiseParentProductRelationsChanged;
    		}
    		if (_childProductRelations != null)
    		{
    			_childProductRelations.CollectionChanged -= FixupChildProductRelations;
    			_childProductRelations.CollectionChanged -= RaiseChildProductRelationsChanged;
    			_childProductRelations.CollectionChanged += FixupChildProductRelations;
    			_childProductRelations.CollectionChanged += RaiseChildProductRelationsChanged;
    		}
    		if (_warehouseProducts != null)
    		{
    			_warehouseProducts.CollectionChanged -= FixupWarehouseProducts;
    			_warehouseProducts.CollectionChanged -= RaiseWarehouseProductsChanged;
    			_warehouseProducts.CollectionChanged += FixupWarehouseProducts;
    			_warehouseProducts.CollectionChanged += RaiseWarehouseProductsChanged;
    		}
    		if (_taxCategories != null)
    		{
    			_taxCategories.CollectionChanged -= FixupTaxCategories;
    			_taxCategories.CollectionChanged -= RaiseTaxCategoriesChanged;
    			_taxCategories.CollectionChanged += FixupTaxCategories;
    			_taxCategories.CollectionChanged += RaiseTaxCategoriesChanged;
    		}
    		if (_translations != null)
    		{
    			_translations.CollectionChanged -= FixupTranslations;
    			_translations.CollectionChanged -= RaiseTranslationsChanged;
    			_translations.CollectionChanged += FixupTranslations;
    			_translations.CollectionChanged += RaiseTranslationsChanged;
    		}
    		if (_catalogItems != null)
    		{
    			_catalogItems.CollectionChanged -= FixupCatalogItems;
    			_catalogItems.CollectionChanged -= RaiseCatalogItemsChanged;
    			_catalogItems.CollectionChanged += FixupCatalogItems;
    			_catalogItems.CollectionChanged += RaiseCatalogItemsChanged;
    		}
    		if (_autoshipScheduleProducts != null)
    		{
    			_autoshipScheduleProducts.CollectionChanged -= FixupAutoshipScheduleProducts;
    			_autoshipScheduleProducts.CollectionChanged -= RaiseAutoshipScheduleProductsChanged;
    			_autoshipScheduleProducts.CollectionChanged += FixupAutoshipScheduleProducts;
    			_autoshipScheduleProducts.CollectionChanged += RaiseAutoshipScheduleProductsChanged;
    		}
    		if (_orderItems != null)
    		{
    			_orderItems.CollectionChanged -= FixupOrderItems;
    			_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    			_orderItems.CollectionChanged += FixupOrderItems;
    			_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    		}
    		if (_dynamicKitGroupRules != null)
    		{
    			_dynamicKitGroupRules.CollectionChanged -= FixupDynamicKitGroupRules;
    			_dynamicKitGroupRules.CollectionChanged -= RaiseDynamicKitGroupRulesChanged;
    			_dynamicKitGroupRules.CollectionChanged += FixupDynamicKitGroupRules;
    			_dynamicKitGroupRules.CollectionChanged += RaiseDynamicKitGroupRulesChanged;
    		}
    		if (_dynamicKits != null)
    		{
    			_dynamicKits.CollectionChanged -= FixupDynamicKits;
    			_dynamicKits.CollectionChanged -= RaiseDynamicKitsChanged;
    			_dynamicKits.CollectionChanged += FixupDynamicKits;
    			_dynamicKits.CollectionChanged += RaiseDynamicKitsChanged;
    		}
    		if (_hostessRewardRules != null)
    		{
    			_hostessRewardRules.CollectionChanged -= FixupHostessRewardRules;
    			_hostessRewardRules.CollectionChanged -= RaiseHostessRewardRulesChanged;
    			_hostessRewardRules.CollectionChanged += FixupHostessRewardRules;
    			_hostessRewardRules.CollectionChanged += RaiseHostessRewardRulesChanged;
    		}
    		if (_excludedShippingMethods != null)
    		{
    			_excludedShippingMethods.CollectionChanged -= FixupExcludedShippingMethods;
    			_excludedShippingMethods.CollectionChanged -= RaiseExcludedShippingMethodsChanged;
    			_excludedShippingMethods.CollectionChanged += FixupExcludedShippingMethods;
    			_excludedShippingMethods.CollectionChanged += RaiseExcludedShippingMethodsChanged;
    		}
    		if (_promotionProducts != null)
    		{
    			_promotionProducts.CollectionChanged -= FixupPromotionProducts;
    			_promotionProducts.CollectionChanged -= RaisePromotionProductsChanged;
    			_promotionProducts.CollectionChanged += FixupPromotionProducts;
    			_promotionProducts.CollectionChanged += RaisePromotionProductsChanged;
    		}
    		if (_warehouseMaterialAllocations != null)
    		{
    			_warehouseMaterialAllocations.CollectionChanged -= FixupWarehouseMaterialAllocations;
    			_warehouseMaterialAllocations.CollectionChanged -= RaiseWarehouseMaterialAllocationsChanged;
    			_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    			_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductBase = null;
    		Files.Clear();
    		Prices.Clear();
    		Properties.Clear();
    		ParentProductRelations.Clear();
    		ChildProductRelations.Clear();
    		WarehouseProducts.Clear();
    		TaxCategories.Clear();
    		Translations.Clear();
    		CatalogItems.Clear();
    		AutoshipScheduleProducts.Clear();
    		OrderItems.Clear();
    		ProductBackOrderBehavior = null;
    		DynamicKitGroupRules.Clear();
    		DynamicKits.Clear();
    		HostessRewardRules.Clear();
    		ProductVariantInfo = null;
    		ExcludedShippingMethods.Clear();
    		User = null;
    		PromotionProducts.Clear();
    		WarehouseMaterialAllocations.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductBase(ProductBase previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Products.Contains(this))
    		{
    			previousValue.Products.Remove(this);
    		}
    
    		if (ProductBase != null)
    		{
    			if (!ProductBase.Products.Contains(this))
    			{
    				ProductBase.Products.Add(this);
    			}
    
    			ProductBaseID = ProductBase.ProductBaseID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductBase")
    				&& (ChangeTracker.OriginalValues["ProductBase"] == ProductBase))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductBase");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductBase", previousValue);
    			}
    			if (ProductBase != null && !ProductBase.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductBase.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductBackOrderBehavior(ProductBackOrderBehavior previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Products.Contains(this))
    		{
    			previousValue.Products.Remove(this);
    		}
    
    		if (ProductBackOrderBehavior != null)
    		{
    			if (!ProductBackOrderBehavior.Products.Contains(this))
    			{
    				ProductBackOrderBehavior.Products.Add(this);
    			}
    
    			ProductBackOrderBehaviorID = ProductBackOrderBehavior.ProductBackOrderBehaviorID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductBackOrderBehavior")
    				&& (ChangeTracker.OriginalValues["ProductBackOrderBehavior"] == ProductBackOrderBehavior))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductBackOrderBehavior");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductBackOrderBehavior", previousValue);
    			}
    			if (ProductBackOrderBehavior != null && !ProductBackOrderBehavior.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductBackOrderBehavior.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductVariantInfo(ProductVariantInfo previousValue)
    	{
    		// This is the principal end in an association that performs cascade deletes.
    		// Update the event listener to refer to the new dependent.
    		if (previousValue != null)
    		{
    			ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
    		}
    
    		if (ProductVariantInfo != null)
    		{
    			ChangeTracker.ObjectStateChanging += ProductVariantInfo.HandleCascadeDelete;
    		}
    
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && ReferenceEquals(previousValue.Product, this))
    		{
    			previousValue.Product = null;
    		}
    
    		if (ProductVariantInfo != null)
    		{
    			ProductVariantInfo.Product = this;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductVariantInfo")
    				&& (ChangeTracker.OriginalValues["ProductVariantInfo"] == ProductVariantInfo))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductVariantInfo");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductVariantInfo", previousValue);
    				// This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
    				// If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
    				if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
    				{
    					previousValue.MarkAsDeleted();
    				}
    			}
    			if (ProductVariantInfo != null && !ProductVariantInfo.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductVariantInfo.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Products.Contains(this))
    		{
    			previousValue.Products.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Products.Contains(this))
    			{
    				User.Products.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupFiles(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductFile item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Files", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductFile item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Files", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPrices(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductPrice item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Prices", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductPrice item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Prices", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductProperty item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Properties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Properties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupParentProductRelations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductRelation item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ParentProductRelations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductRelation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ParentProductRelations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupChildProductRelations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductRelation item in e.NewItems)
    			{
    				item.Product1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ChildProductRelations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductRelation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product1, this))
    				{
    					item.Product1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ChildProductRelations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupWarehouseProducts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (WarehouseProduct item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("WarehouseProducts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (WarehouseProduct item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseProducts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTaxCategories(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (TaxCategory item in e.NewItems)
    			{
    				if (!item.Products.Contains(this))
    				{
    					item.Products.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("TaxCategories", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (TaxCategory item in e.OldItems)
    			{
    				if (item.Products.Contains(this))
    				{
    					item.Products.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("TaxCategories", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DescriptionTranslation item in e.NewItems)
    			{
    				if (!item.Products.Contains(this))
    				{
    					item.Products.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Translations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DescriptionTranslation item in e.OldItems)
    			{
    				if (item.Products.Contains(this))
    				{
    					item.Products.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Translations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCatalogItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CatalogItem item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CatalogItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CatalogItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CatalogItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipScheduleProducts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipScheduleProduct item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipScheduleProducts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipScheduleProduct item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipScheduleProducts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItem item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupDynamicKitGroupRules(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DynamicKitGroupRule item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("DynamicKitGroupRules", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DynamicKitGroupRule item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("DynamicKitGroupRules", item);
    				}
    			}
    		}
    	}
    
    	private void FixupDynamicKits(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DynamicKit item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("DynamicKits", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DynamicKit item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("DynamicKits", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHostessRewardRules(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HostessRewardRule item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HostessRewardRules", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HostessRewardRule item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HostessRewardRules", item);
    				}
    			}
    		}
    	}
    
    	private void FixupExcludedShippingMethods(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ShippingMethod item in e.NewItems)
    			{
    				if (!item.ExcludedProducts.Contains(this))
    				{
    					item.ExcludedProducts.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ExcludedShippingMethods", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ShippingMethod item in e.OldItems)
    			{
    				if (item.ExcludedProducts.Contains(this))
    				{
    					item.ExcludedProducts.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ExcludedShippingMethods", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPromotionProducts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PromotionProduct item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PromotionProducts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PromotionProduct item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PromotionProducts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupWarehouseMaterialAllocations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (WarehouseMaterialAllocation item in e.NewItems)
    			{
    				item.Product = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("WarehouseMaterialAllocations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (WarehouseMaterialAllocation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Product, this))
    				{
    					item.Product = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseMaterialAllocations", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [Serializable]
    public partial class EmailTemplateAttribute: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void EmailTemplateAttributeIDChanged();
    	public int EmailTemplateAttributeID
    	{
    		get { return _emailTemplateAttributeID; }
    		set
    		{
    			if (_emailTemplateAttributeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'EmailTemplateAttributeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_emailTemplateAttributeID = value;
    				EmailTemplateAttributeIDChanged();
    				OnPropertyChanged("EmailTemplateAttributeID");
    			}
    		}
    	}
    	private int _emailTemplateAttributeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void QueryChanged();
    	public string Query
    	{
    		get { return _query; }
    		set
    		{
    			if (_query != value)
    			{
    				ChangeTracker.RecordOriginalValue("Query", _query);
    				_query = value;
    				QueryChanged();
    				OnPropertyChanged("Query");
    			}
    		}
    	}
    	private string _query;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void CommandTypeChanged();
    	public Nullable<int> CommandType
    	{
    		get { return _commandType; }
    		set
    		{
    			if (_commandType != value)
    			{
    				ChangeTracker.RecordOriginalValue("CommandType", _commandType);
    				_commandType = value;
    				CommandTypeChanged();
    				OnPropertyChanged("CommandType");
    			}
    		}
    	}
    	private Nullable<int> _commandType;
    	partial void ConnectionIDChanged();
    	public Nullable<int> ConnectionID
    	{
    		get { return _connectionID; }
    		set
    		{
    			if (_connectionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ConnectionID", _connectionID);
    				_connectionID = value;
    				ConnectionIDChanged();
    				OnPropertyChanged("ConnectionID");
    			}
    		}
    	}
    	private Nullable<int> _connectionID;
    	partial void ReferencesChanged();
    	public string References
    	{
    		get { return _references; }
    		set
    		{
    			if (_references != value)
    			{
    				ChangeTracker.RecordOriginalValue("References", _references);
    				_references = value;
    				ReferencesChanged();
    				OnPropertyChanged("References");
    			}
    		}
    	}
    	private string _references;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(CampaignAction))]
    [Serializable]
    public partial class AlertCampaignAction: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AlertCampaignActionIDChanged();
    	public int AlertCampaignActionID
    	{
    		get { return _alertCampaignActionID; }
    		set
    		{
    			if (_alertCampaignActionID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AlertCampaignActionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_alertCampaignActionID = value;
    				AlertCampaignActionIDChanged();
    				OnPropertyChanged("AlertCampaignActionID");
    			}
    		}
    	}
    	private int _alertCampaignActionID;
    	partial void CampaignActionIDChanged();
    	public int CampaignActionID
    	{
    		get { return _campaignActionID; }
    		set
    		{
    			if (_campaignActionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CampaignActionID", _campaignActionID);
    				if (!IsDeserializing)
    				{
    					if (CampaignAction != null && CampaignAction.CampaignActionID != value)
    					{
    						CampaignAction = null;
    					}
    				}
    				_campaignActionID = value;
    				CampaignActionIDChanged();
    				OnPropertyChanged("CampaignActionID");
    			}
    		}
    	}
    	private int _campaignActionID;
    	partial void AlertTemplateIDChanged();
    	public int AlertTemplateID
    	{
    		get { return _alertTemplateID; }
    		set
    		{
    			if (_alertTemplateID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AlertTemplateID", _alertTemplateID);
    				_alertTemplateID = value;
    				AlertTemplateIDChanged();
    				OnPropertyChanged("AlertTemplateID");
    			}
    		}
    	}
    	private int _alertTemplateID;
    	partial void DistributorEditableDateUTCChanged();
    	public Nullable<System.DateTime> DistributorEditableDateUTC
    	{
    		get { return _distributorEditableDateUTC; }
    		set
    		{
    			if (_distributorEditableDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DistributorEditableDateUTC", _distributorEditableDateUTC);
    				_distributorEditableDateUTC = value;
    				DistributorEditableDateUTCChanged();
    				OnPropertyChanged("DistributorEditableDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _distributorEditableDateUTC;
    	partial void CanBeDismissedChanged();
    	public bool CanBeDismissed
    	{
    		get { return _canBeDismissed; }
    		set
    		{
    			if (_canBeDismissed != value)
    			{
    				ChangeTracker.RecordOriginalValue("CanBeDismissed", _canBeDismissed);
    				_canBeDismissed = value;
    				CanBeDismissedChanged();
    				OnPropertyChanged("CanBeDismissed");
    			}
    		}
    	}
    	private bool _canBeDismissed;

        #endregion
        #region Navigation Properties
    
    	public CampaignAction CampaignAction
    	{
    		get { return _campaignAction; }
    		set
    		{
    			if (!ReferenceEquals(_campaignAction, value))
    			{
    				var previousValue = _campaignAction;
    				_campaignAction = value;
    				FixupCampaignAction(previousValue);
    				OnNavigationPropertyChanged("CampaignAction");
    			}
    		}
    	}
    	private CampaignAction _campaignAction;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		CampaignAction = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCampaignAction(CampaignAction previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AlertCampaignActions.Contains(this))
    		{
    			previousValue.AlertCampaignActions.Remove(this);
    		}
    
    		if (CampaignAction != null)
    		{
    			if (!CampaignAction.AlertCampaignActions.Contains(this))
    			{
    				CampaignAction.AlertCampaignActions.Add(this);
    			}
    
    			CampaignActionID = CampaignAction.CampaignActionID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CampaignAction")
    				&& (ChangeTracker.OriginalValues["CampaignAction"] == CampaignAction))
    			{
    				ChangeTracker.OriginalValues.Remove("CampaignAction");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CampaignAction", previousValue);
    			}
    			if (CampaignAction != null && !CampaignAction.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CampaignAction.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

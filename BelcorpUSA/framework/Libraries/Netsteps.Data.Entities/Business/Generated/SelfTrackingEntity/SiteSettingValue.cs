//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(SiteSetting))]
    [KnownType(typeof(Site))]
    [Serializable]
    public partial class SiteSettingValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void SiteSettingValueIDChanged();
    	public int SiteSettingValueID
    	{
    		get { return _siteSettingValueID; }
    		set
    		{
    			if (_siteSettingValueID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'SiteSettingValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_siteSettingValueID = value;
    				SiteSettingValueIDChanged();
    				OnPropertyChanged("SiteSettingValueID");
    			}
    		}
    	}
    	private int _siteSettingValueID;
    	partial void SiteSettingIDChanged();
    	public int SiteSettingID
    	{
    		get { return _siteSettingID; }
    		set
    		{
    			if (_siteSettingID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteSettingID", _siteSettingID);
    				if (!IsDeserializing)
    				{
    					if (SiteSetting != null && SiteSetting.SiteSettingID != value)
    					{
    						SiteSetting = null;
    					}
    				}
    				_siteSettingID = value;
    				SiteSettingIDChanged();
    				OnPropertyChanged("SiteSettingID");
    			}
    		}
    	}
    	private int _siteSettingID;
    	partial void SiteIDChanged();
    	public int SiteID
    	{
    		get { return _siteID; }
    		set
    		{
    			if (_siteID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteID", _siteID);
    				if (!IsDeserializing)
    				{
    					if (Site != null && Site.SiteID != value)
    					{
    						Site = null;
    					}
    				}
    				_siteID = value;
    				SiteIDChanged();
    				OnPropertyChanged("SiteID");
    			}
    		}
    	}
    	private int _siteID;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;

        #endregion
        #region Navigation Properties
    
    	public SiteSetting SiteSetting
    	{
    		get { return _siteSetting; }
    		set
    		{
    			if (!ReferenceEquals(_siteSetting, value))
    			{
    				var previousValue = _siteSetting;
    				_siteSetting = value;
    				FixupSiteSetting(previousValue);
    				OnNavigationPropertyChanged("SiteSetting");
    			}
    		}
    	}
    	private SiteSetting _siteSetting;
    
    	public Site Site
    	{
    		get { return _site; }
    		set
    		{
    			if (!ReferenceEquals(_site, value))
    			{
    				var previousValue = _site;
    				_site = value;
    				FixupSite(previousValue);
    				OnNavigationPropertyChanged("Site");
    			}
    		}
    	}
    	private Site _site;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		SiteSetting = null;
    		Site = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupSiteSetting(SiteSetting previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.SiteSettingValues.Contains(this))
    		{
    			previousValue.SiteSettingValues.Remove(this);
    		}
    
    		if (SiteSetting != null)
    		{
    			if (!SiteSetting.SiteSettingValues.Contains(this))
    			{
    				SiteSetting.SiteSettingValues.Add(this);
    			}
    
    			SiteSettingID = SiteSetting.SiteSettingID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("SiteSetting")
    				&& (ChangeTracker.OriginalValues["SiteSetting"] == SiteSetting))
    			{
    				ChangeTracker.OriginalValues.Remove("SiteSetting");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("SiteSetting", previousValue);
    			}
    			if (SiteSetting != null && !SiteSetting.ChangeTracker.ChangeTrackingEnabled)
    			{
    				SiteSetting.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSite(Site previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.SiteSettingValues.Contains(this))
    		{
    			previousValue.SiteSettingValues.Remove(this);
    		}
    
    		if (Site != null)
    		{
    			if (!Site.SiteSettingValues.Contains(this))
    			{
    				Site.SiteSettingValues.Add(this);
    			}
    
    			SiteID = Site.SiteID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Site")
    				&& (ChangeTracker.OriginalValues["Site"] == Site))
    			{
    				ChangeTracker.OriginalValues.Remove("Site");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Site", previousValue);
    			}
    			if (Site != null && !Site.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Site.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

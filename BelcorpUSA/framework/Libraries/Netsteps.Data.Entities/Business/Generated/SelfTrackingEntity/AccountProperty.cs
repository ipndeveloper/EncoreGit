//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountPropertyType))]
    [KnownType(typeof(AccountPropertyValue))]
    [KnownType(typeof(Account))]
    [Serializable]
    public partial class AccountProperty: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountPropertyIDChanged();
    	public int AccountPropertyID
    	{
    		get { return _accountPropertyID; }
    		set
    		{
    			if (_accountPropertyID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountPropertyID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountPropertyID = value;
    				AccountPropertyIDChanged();
    				OnPropertyChanged("AccountPropertyID");
    			}
    		}
    	}
    	private int _accountPropertyID;
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void AccountPropertyTypeIDChanged();
    	public int AccountPropertyTypeID
    	{
    		get { return _accountPropertyTypeID; }
    		set
    		{
    			if (_accountPropertyTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountPropertyTypeID", _accountPropertyTypeID);
    				if (!IsDeserializing)
    				{
    					if (AccountPropertyType != null && AccountPropertyType.AccountPropertyTypeID != value)
    					{
    						AccountPropertyType = null;
    					}
    				}
    				_accountPropertyTypeID = value;
    				AccountPropertyTypeIDChanged();
    				OnPropertyChanged("AccountPropertyTypeID");
    			}
    		}
    	}
    	private int _accountPropertyTypeID;
    	partial void AccountPropertyValueIDChanged();
    	public Nullable<int> AccountPropertyValueID
    	{
    		get { return _accountPropertyValueID; }
    		set
    		{
    			if (_accountPropertyValueID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountPropertyValueID", _accountPropertyValueID);
    				if (!IsDeserializing)
    				{
    					if (AccountPropertyValue != null && AccountPropertyValue.AccountPropertyValueID != value)
    					{
    						AccountPropertyValue = null;
    					}
    				}
    				_accountPropertyValueID = value;
    				AccountPropertyValueIDChanged();
    				OnPropertyChanged("AccountPropertyValueID");
    			}
    		}
    	}
    	private Nullable<int> _accountPropertyValueID;
    	partial void PropertyValueChanged();
    	public string PropertyValue
    	{
    		get { return _propertyValue; }
    		set
    		{
    			if (_propertyValue != value)
    			{
    				ChangeTracker.RecordOriginalValue("PropertyValue", _propertyValue);
    				_propertyValue = value;
    				PropertyValueChanged();
    				OnPropertyChanged("PropertyValue");
    			}
    		}
    	}
    	private string _propertyValue;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public AccountPropertyType AccountPropertyType
    	{
    		get { return _accountPropertyType; }
    		set
    		{
    			if (!ReferenceEquals(_accountPropertyType, value))
    			{
    				var previousValue = _accountPropertyType;
    				_accountPropertyType = value;
    				FixupAccountPropertyType(previousValue);
    				OnNavigationPropertyChanged("AccountPropertyType");
    			}
    		}
    	}
    	private AccountPropertyType _accountPropertyType;
    
    	public AccountPropertyValue AccountPropertyValue
    	{
    		get { return _accountPropertyValue; }
    		set
    		{
    			if (!ReferenceEquals(_accountPropertyValue, value))
    			{
    				var previousValue = _accountPropertyValue;
    				_accountPropertyValue = value;
    				FixupAccountPropertyValue(previousValue);
    				OnNavigationPropertyChanged("AccountPropertyValue");
    			}
    		}
    	}
    	private AccountPropertyValue _accountPropertyValue;
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountPropertyType = null;
    		AccountPropertyValue = null;
    		Account = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccountPropertyType(AccountPropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountProperties.Contains(this))
    		{
    			previousValue.AccountProperties.Remove(this);
    		}
    
    		if (AccountPropertyType != null)
    		{
    			if (!AccountPropertyType.AccountProperties.Contains(this))
    			{
    				AccountPropertyType.AccountProperties.Add(this);
    			}
    
    			AccountPropertyTypeID = AccountPropertyType.AccountPropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountPropertyType")
    				&& (ChangeTracker.OriginalValues["AccountPropertyType"] == AccountPropertyType))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountPropertyType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountPropertyType", previousValue);
    			}
    			if (AccountPropertyType != null && !AccountPropertyType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountPropertyType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountPropertyValue(AccountPropertyValue previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountProperties.Contains(this))
    		{
    			previousValue.AccountProperties.Remove(this);
    		}
    
    		if (AccountPropertyValue != null)
    		{
    			if (!AccountPropertyValue.AccountProperties.Contains(this))
    			{
    				AccountPropertyValue.AccountProperties.Add(this);
    			}
    
    			AccountPropertyValueID = AccountPropertyValue.AccountPropertyValueID;
    		}
    		else if (!skipKeys)
    		{
    			AccountPropertyValueID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountPropertyValue")
    				&& (ChangeTracker.OriginalValues["AccountPropertyValue"] == AccountPropertyValue))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountPropertyValue");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountPropertyValue", previousValue);
    			}
    			if (AccountPropertyValue != null && !AccountPropertyValue.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountPropertyValue.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccount(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountProperties.Contains(this))
    		{
    			previousValue.AccountProperties.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AccountProperties.Contains(this))
    			{
    				Account.AccountProperties.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

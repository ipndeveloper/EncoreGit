//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AutoresponderType))]
    [KnownType(typeof(AutoresponderMessage))]
    [KnownType(typeof(AutoresponderTranslation))]
    [Serializable]
    public partial class Autoresponder: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AutoresponderIDChanged();
    	public int AutoresponderID
    	{
    		get { return _autoresponderID; }
    		set
    		{
    			if (_autoresponderID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AutoresponderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_autoresponderID = value;
    				AutoresponderIDChanged();
    				OnPropertyChanged("AutoresponderID");
    			}
    		}
    	}
    	private int _autoresponderID;
    	partial void AutoresponderTypeIDChanged();
    	public short AutoresponderTypeID
    	{
    		get { return _autoresponderTypeID; }
    		set
    		{
    			if (_autoresponderTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoresponderTypeID", _autoresponderTypeID);
    				if (!IsDeserializing)
    				{
    					if (AutoresponderType != null && AutoresponderType.AutoresponderTypeID != value)
    					{
    						AutoresponderType = null;
    					}
    				}
    				_autoresponderTypeID = value;
    				AutoresponderTypeIDChanged();
    				OnPropertyChanged("AutoresponderTypeID");
    			}
    		}
    	}
    	private short _autoresponderTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void LinkUrlChanged();
    	public string LinkUrl
    	{
    		get { return _linkUrl; }
    		set
    		{
    			if (_linkUrl != value)
    			{
    				ChangeTracker.RecordOriginalValue("LinkUrl", _linkUrl);
    				_linkUrl = value;
    				LinkUrlChanged();
    				OnPropertyChanged("LinkUrl");
    			}
    		}
    	}
    	private string _linkUrl;
    	partial void IsInternalChanged();
    	public bool IsInternal
    	{
    		get { return _isInternal; }
    		set
    		{
    			if (_isInternal != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsInternal", _isInternal);
    				_isInternal = value;
    				IsInternalChanged();
    				OnPropertyChanged("IsInternal");
    			}
    		}
    	}
    	private bool _isInternal;
    	partial void IsExternalChanged();
    	public bool IsExternal
    	{
    		get { return _isExternal; }
    		set
    		{
    			if (_isExternal != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsExternal", _isExternal);
    				_isExternal = value;
    				IsExternalChanged();
    				OnPropertyChanged("IsExternal");
    			}
    		}
    	}
    	private bool _isExternal;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public AutoresponderType AutoresponderType
    	{
    		get { return _autoresponderType; }
    		set
    		{
    			if (!ReferenceEquals(_autoresponderType, value))
    			{
    				var previousValue = _autoresponderType;
    				_autoresponderType = value;
    				FixupAutoresponderType(previousValue);
    				OnNavigationPropertyChanged("AutoresponderType");
    			}
    		}
    	}
    	private AutoresponderType _autoresponderType;
    
    	public TrackableCollection<AutoresponderMessage> AutoresponderMessages
    	{
    		get
    		{
    			if (_autoresponderMessages == null)
    			{
    				_autoresponderMessages = new TrackableCollection<AutoresponderMessage>();
    				_autoresponderMessages.CollectionChanged += FixupAutoresponderMessages;
    				_autoresponderMessages.CollectionChanged += RaiseAutoresponderMessagesChanged;
    			}
    			return _autoresponderMessages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoresponderMessages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoresponderMessages != null)
    				{
    					_autoresponderMessages.CollectionChanged -= FixupAutoresponderMessages;
    					_autoresponderMessages.CollectionChanged -= RaiseAutoresponderMessagesChanged;
    				}
    				_autoresponderMessages = value;
    				if (_autoresponderMessages != null)
    				{
    					_autoresponderMessages.CollectionChanged += FixupAutoresponderMessages;
    					_autoresponderMessages.CollectionChanged += RaiseAutoresponderMessagesChanged;
    				}
    				OnNavigationPropertyChanged("AutoresponderMessages");
    			}
    		}
    	}
    	private TrackableCollection<AutoresponderMessage> _autoresponderMessages;
    	partial void AutoresponderMessagesChanged();
    	private void RaiseAutoresponderMessagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoresponderMessagesChanged();
    	}
    
    	public TrackableCollection<AutoresponderTranslation> Translations
    	{
    		get
    		{
    			if (_translations == null)
    			{
    				_translations = new TrackableCollection<AutoresponderTranslation>();
    				_translations.CollectionChanged += FixupTranslations;
    				_translations.CollectionChanged += RaiseTranslationsChanged;
    			}
    			return _translations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_translations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_translations != null)
    				{
    					_translations.CollectionChanged -= FixupTranslations;
    					_translations.CollectionChanged -= RaiseTranslationsChanged;
    				}
    				_translations = value;
    				if (_translations != null)
    				{
    					_translations.CollectionChanged += FixupTranslations;
    					_translations.CollectionChanged += RaiseTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("Translations");
    			}
    		}
    	}
    	private TrackableCollection<AutoresponderTranslation> _translations;
    	partial void TranslationsChanged();
    	private void RaiseTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TranslationsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_autoresponderMessages != null)
    		{
    			_autoresponderMessages.CollectionChanged -= FixupAutoresponderMessages;
    			_autoresponderMessages.CollectionChanged -= RaiseAutoresponderMessagesChanged;
    			_autoresponderMessages.CollectionChanged += FixupAutoresponderMessages;
    			_autoresponderMessages.CollectionChanged += RaiseAutoresponderMessagesChanged;
    		}
    		if (_translations != null)
    		{
    			_translations.CollectionChanged -= FixupTranslations;
    			_translations.CollectionChanged -= RaiseTranslationsChanged;
    			_translations.CollectionChanged += FixupTranslations;
    			_translations.CollectionChanged += RaiseTranslationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AutoresponderType = null;
    		AutoresponderMessages.Clear();
    		Translations.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAutoresponderType(AutoresponderType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Autoresponders.Contains(this))
    		{
    			previousValue.Autoresponders.Remove(this);
    		}
    
    		if (AutoresponderType != null)
    		{
    			if (!AutoresponderType.Autoresponders.Contains(this))
    			{
    				AutoresponderType.Autoresponders.Add(this);
    			}
    
    			AutoresponderTypeID = AutoresponderType.AutoresponderTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AutoresponderType")
    				&& (ChangeTracker.OriginalValues["AutoresponderType"] == AutoresponderType))
    			{
    				ChangeTracker.OriginalValues.Remove("AutoresponderType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AutoresponderType", previousValue);
    			}
    			if (AutoresponderType != null && !AutoresponderType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AutoresponderType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoresponderMessages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoresponderMessage item in e.NewItems)
    			{
    				item.Autoresponder = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoresponderMessages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoresponderMessage item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Autoresponder, this))
    				{
    					item.Autoresponder = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoresponderMessages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoresponderTranslation item in e.NewItems)
    			{
    				item.Autoresponder = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Translations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoresponderTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Autoresponder, this))
    				{
    					item.Autoresponder = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Translations", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

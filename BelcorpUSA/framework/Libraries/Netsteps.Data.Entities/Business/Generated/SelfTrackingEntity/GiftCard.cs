//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderItem))]
    [Serializable]
    public partial class GiftCard: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void GiftCardIDChanged();
    	public int GiftCardID
    	{
    		get { return _giftCardID; }
    		set
    		{
    			if (_giftCardID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'GiftCardID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_giftCardID = value;
    				GiftCardIDChanged();
    				OnPropertyChanged("GiftCardID");
    			}
    		}
    	}
    	private int _giftCardID;
    	partial void CodeChanged();
    	public string Code
    	{
    		get { return _code; }
    		set
    		{
    			if (_code != value)
    			{
    				ChangeTracker.RecordOriginalValue("Code", _code);
    				_code = value;
    				CodeChanged();
    				OnPropertyChanged("Code");
    			}
    		}
    	}
    	private string _code;
    	partial void InitialAmountChanged();
    	public Nullable<decimal> InitialAmount
    	{
    		get { return _initialAmount; }
    		set
    		{
    			if (_initialAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("InitialAmount", _initialAmount);
    				_initialAmount = value;
    				InitialAmountChanged();
    				OnPropertyChanged("InitialAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _initialAmount;
    	partial void BalanceChanged();
    	public Nullable<decimal> Balance
    	{
    		get { return _balance; }
    		set
    		{
    			if (_balance != value)
    			{
    				ChangeTracker.RecordOriginalValue("Balance", _balance);
    				_balance = value;
    				BalanceChanged();
    				OnPropertyChanged("Balance");
    			}
    		}
    	}
    	private Nullable<decimal> _balance;
    	partial void ExpirationDateChanged();
    	public Nullable<System.DateTime> ExpirationDate
    	{
    		get { return _expirationDate; }
    		set
    		{
    			if (_expirationDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpirationDate", _expirationDate);
    				_expirationDate = value;
    				ExpirationDateChanged();
    				OnPropertyChanged("ExpirationDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _expirationDate;
    	partial void CurrencyIDChanged();
    	public Nullable<int> CurrencyID
    	{
    		get { return _currencyID; }
    		set
    		{
    			if (_currencyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CurrencyID", _currencyID);
    				_currencyID = value;
    				CurrencyIDChanged();
    				OnPropertyChanged("CurrencyID");
    			}
    		}
    	}
    	private Nullable<int> _currencyID;
    	partial void OriginOrderItemIDChanged();
    	public Nullable<int> OriginOrderItemID
    	{
    		get { return _originOrderItemID; }
    		set
    		{
    			if (_originOrderItemID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OriginOrderItemID", _originOrderItemID);
    				if (!IsDeserializing)
    				{
    					if (OrderItem != null && OrderItem.OrderItemID != value)
    					{
    						OrderItem = null;
    					}
    				}
    				_originOrderItemID = value;
    				OriginOrderItemIDChanged();
    				OnPropertyChanged("OriginOrderItemID");
    			}
    		}
    	}
    	private Nullable<int> _originOrderItemID;

        #endregion
        #region Navigation Properties
    
    	public OrderItem OrderItem
    	{
    		get { return _orderItem; }
    		set
    		{
    			if (!ReferenceEquals(_orderItem, value))
    			{
    				var previousValue = _orderItem;
    				_orderItem = value;
    				FixupOrderItem(previousValue);
    				OnNavigationPropertyChanged("OrderItem");
    			}
    		}
    	}
    	private OrderItem _orderItem;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderItem = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderItem(OrderItem previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.GiftCards.Contains(this))
    		{
    			previousValue.GiftCards.Remove(this);
    		}
    
    		if (OrderItem != null)
    		{
    			if (!OrderItem.GiftCards.Contains(this))
    			{
    				OrderItem.GiftCards.Add(this);
    			}
    
    			OriginOrderItemID = OrderItem.OrderItemID;
    		}
    		else if (!skipKeys)
    		{
    			OriginOrderItemID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItem")
    				&& (ChangeTracker.OriginalValues["OrderItem"] == OrderItem))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItem");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItem", previousValue);
    			}
    			if (OrderItem != null && !OrderItem.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItem.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ShippingRateGroup))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(ShippingRateType))]
    [Serializable]
    public partial class ShippingRate: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ShippingRateIDChanged();
    	public int ShippingRateID
    	{
    		get { return _shippingRateID; }
    		set
    		{
    			if (_shippingRateID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ShippingRateID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_shippingRateID = value;
    				ShippingRateIDChanged();
    				OnPropertyChanged("ShippingRateID");
    			}
    		}
    	}
    	private int _shippingRateID;
    	partial void ShippingRateGroupIDChanged();
    	public int ShippingRateGroupID
    	{
    		get { return _shippingRateGroupID; }
    		set
    		{
    			if (_shippingRateGroupID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRateGroupID", _shippingRateGroupID);
    				if (!IsDeserializing)
    				{
    					if (ShippingRateGroup != null && ShippingRateGroup.ShippingRateGroupID != value)
    					{
    						ShippingRateGroup = null;
    					}
    				}
    				_shippingRateGroupID = value;
    				ShippingRateGroupIDChanged();
    				OnPropertyChanged("ShippingRateGroupID");
    			}
    		}
    	}
    	private int _shippingRateGroupID;
    	partial void ValueNameChanged();
    	public string ValueName
    	{
    		get { return _valueName; }
    		set
    		{
    			if (_valueName != value)
    			{
    				ChangeTracker.RecordOriginalValue("ValueName", _valueName);
    				_valueName = value;
    				ValueNameChanged();
    				OnPropertyChanged("ValueName");
    			}
    		}
    	}
    	private string _valueName;
    	partial void ValueFromChanged();
    	public Nullable<decimal> ValueFrom
    	{
    		get { return _valueFrom; }
    		set
    		{
    			if (_valueFrom != value)
    			{
    				ChangeTracker.RecordOriginalValue("ValueFrom", _valueFrom);
    				_valueFrom = value;
    				ValueFromChanged();
    				OnPropertyChanged("ValueFrom");
    			}
    		}
    	}
    	private Nullable<decimal> _valueFrom;
    	partial void ValueToChanged();
    	public Nullable<decimal> ValueTo
    	{
    		get { return _valueTo; }
    		set
    		{
    			if (_valueTo != value)
    			{
    				ChangeTracker.RecordOriginalValue("ValueTo", _valueTo);
    				_valueTo = value;
    				ValueToChanged();
    				OnPropertyChanged("ValueTo");
    			}
    		}
    	}
    	private Nullable<decimal> _valueTo;
    	partial void ShippingAmountChanged();
    	public Nullable<decimal> ShippingAmount
    	{
    		get { return _shippingAmount; }
    		set
    		{
    			if (_shippingAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingAmount", _shippingAmount);
    				_shippingAmount = value;
    				ShippingAmountChanged();
    				OnPropertyChanged("ShippingAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _shippingAmount;
    	partial void DirectShipmentFeeChanged();
    	public Nullable<decimal> DirectShipmentFee
    	{
    		get { return _directShipmentFee; }
    		set
    		{
    			if (_directShipmentFee != value)
    			{
    				ChangeTracker.RecordOriginalValue("DirectShipmentFee", _directShipmentFee);
    				_directShipmentFee = value;
    				DirectShipmentFeeChanged();
    				OnPropertyChanged("DirectShipmentFee");
    			}
    		}
    	}
    	private Nullable<decimal> _directShipmentFee;
    	partial void HandlingFeeChanged();
    	public Nullable<decimal> HandlingFee
    	{
    		get { return _handlingFee; }
    		set
    		{
    			if (_handlingFee != value)
    			{
    				ChangeTracker.RecordOriginalValue("HandlingFee", _handlingFee);
    				_handlingFee = value;
    				HandlingFeeChanged();
    				OnPropertyChanged("HandlingFee");
    			}
    		}
    	}
    	private Nullable<decimal> _handlingFee;
    	partial void IncrementalAmountChanged();
    	public Nullable<decimal> IncrementalAmount
    	{
    		get { return _incrementalAmount; }
    		set
    		{
    			if (_incrementalAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("IncrementalAmount", _incrementalAmount);
    				_incrementalAmount = value;
    				IncrementalAmountChanged();
    				OnPropertyChanged("IncrementalAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _incrementalAmount;
    	partial void IncrementalFeeChanged();
    	public Nullable<decimal> IncrementalFee
    	{
    		get { return _incrementalFee; }
    		set
    		{
    			if (_incrementalFee != value)
    			{
    				ChangeTracker.RecordOriginalValue("IncrementalFee", _incrementalFee);
    				_incrementalFee = value;
    				IncrementalFeeChanged();
    				OnPropertyChanged("IncrementalFee");
    			}
    		}
    	}
    	private Nullable<decimal> _incrementalFee;
    	partial void CurrencyIDChanged();
    	public int CurrencyID
    	{
    		get { return _currencyID; }
    		set
    		{
    			if (_currencyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CurrencyID", _currencyID);
    				if (!IsDeserializing)
    				{
    					if (Currency != null && Currency.CurrencyID != value)
    					{
    						Currency = null;
    					}
    				}
    				_currencyID = value;
    				CurrencyIDChanged();
    				OnPropertyChanged("CurrencyID");
    			}
    		}
    	}
    	private int _currencyID;
    	partial void ShippingPercentageChanged();
    	public Nullable<decimal> ShippingPercentage
    	{
    		get { return _shippingPercentage; }
    		set
    		{
    			if (_shippingPercentage != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingPercentage", _shippingPercentage);
    				_shippingPercentage = value;
    				ShippingPercentageChanged();
    				OnPropertyChanged("ShippingPercentage");
    			}
    		}
    	}
    	private Nullable<decimal> _shippingPercentage;
    	partial void ShippingRateTypeIDChanged();
    	public Nullable<short> ShippingRateTypeID
    	{
    		get { return _shippingRateTypeID; }
    		set
    		{
    			if (_shippingRateTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRateTypeID", _shippingRateTypeID);
    				if (!IsDeserializing)
    				{
    					if (ShippingRateType != null && ShippingRateType.ShippingRateTypeID != value)
    					{
    						ShippingRateType = null;
    					}
    				}
    				_shippingRateTypeID = value;
    				ShippingRateTypeIDChanged();
    				OnPropertyChanged("ShippingRateTypeID");
    			}
    		}
    	}
    	private Nullable<short> _shippingRateTypeID;
    	partial void MinimumAmountChanged();
    	public Nullable<decimal> MinimumAmount
    	{
    		get { return _minimumAmount; }
    		set
    		{
    			if (_minimumAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("MinimumAmount", _minimumAmount);
    				_minimumAmount = value;
    				MinimumAmountChanged();
    				OnPropertyChanged("MinimumAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _minimumAmount;
    	partial void DirectShipmentPercentageChanged();
    	public Nullable<decimal> DirectShipmentPercentage
    	{
    		get { return _directShipmentPercentage; }
    		set
    		{
    			if (_directShipmentPercentage != value)
    			{
    				ChangeTracker.RecordOriginalValue("DirectShipmentPercentage", _directShipmentPercentage);
    				_directShipmentPercentage = value;
    				DirectShipmentPercentageChanged();
    				OnPropertyChanged("DirectShipmentPercentage");
    			}
    		}
    	}
    	private Nullable<decimal> _directShipmentPercentage;

        #endregion
        #region Navigation Properties
    
    	public ShippingRateGroup ShippingRateGroup
    	{
    		get { return _shippingRateGroup; }
    		set
    		{
    			if (!ReferenceEquals(_shippingRateGroup, value))
    			{
    				var previousValue = _shippingRateGroup;
    				_shippingRateGroup = value;
    				FixupShippingRateGroup(previousValue);
    				OnNavigationPropertyChanged("ShippingRateGroup");
    			}
    		}
    	}
    	private ShippingRateGroup _shippingRateGroup;
    
    	public Currency Currency
    	{
    		get { return _currency; }
    		set
    		{
    			if (!ReferenceEquals(_currency, value))
    			{
    				var previousValue = _currency;
    				_currency = value;
    				FixupCurrency(previousValue);
    				OnNavigationPropertyChanged("Currency");
    			}
    		}
    	}
    	private Currency _currency;
    
    	public ShippingRateType ShippingRateType
    	{
    		get { return _shippingRateType; }
    		set
    		{
    			if (!ReferenceEquals(_shippingRateType, value))
    			{
    				var previousValue = _shippingRateType;
    				_shippingRateType = value;
    				FixupShippingRateType(previousValue);
    				OnNavigationPropertyChanged("ShippingRateType");
    			}
    		}
    	}
    	private ShippingRateType _shippingRateType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ShippingRateGroup = null;
    		Currency = null;
    		ShippingRateType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupShippingRateGroup(ShippingRateGroup previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingRates.Contains(this))
    		{
    			previousValue.ShippingRates.Remove(this);
    		}
    
    		if (ShippingRateGroup != null)
    		{
    			if (!ShippingRateGroup.ShippingRates.Contains(this))
    			{
    				ShippingRateGroup.ShippingRates.Add(this);
    			}
    
    			ShippingRateGroupID = ShippingRateGroup.ShippingRateGroupID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ShippingRateGroup")
    				&& (ChangeTracker.OriginalValues["ShippingRateGroup"] == ShippingRateGroup))
    			{
    				ChangeTracker.OriginalValues.Remove("ShippingRateGroup");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRateGroup", previousValue);
    			}
    			if (ShippingRateGroup != null && !ShippingRateGroup.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ShippingRateGroup.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCurrency(Currency previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingRates.Contains(this))
    		{
    			previousValue.ShippingRates.Remove(this);
    		}
    
    		if (Currency != null)
    		{
    			if (!Currency.ShippingRates.Contains(this))
    			{
    				Currency.ShippingRates.Add(this);
    			}
    
    			CurrencyID = Currency.CurrencyID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Currency")
    				&& (ChangeTracker.OriginalValues["Currency"] == Currency))
    			{
    				ChangeTracker.OriginalValues.Remove("Currency");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Currency", previousValue);
    			}
    			if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Currency.StartTracking();
    			}
    		}
    	}
    
    	private void FixupShippingRateType(ShippingRateType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingRates.Contains(this))
    		{
    			previousValue.ShippingRates.Remove(this);
    		}
    
    		if (ShippingRateType != null)
    		{
    			if (!ShippingRateType.ShippingRates.Contains(this))
    			{
    				ShippingRateType.ShippingRates.Add(this);
    			}
    
    			ShippingRateTypeID = ShippingRateType.ShippingRateTypeID;
    		}
    		else if (!skipKeys)
    		{
    			ShippingRateTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ShippingRateType")
    				&& (ChangeTracker.OriginalValues["ShippingRateType"] == ShippingRateType))
    			{
    				ChangeTracker.OriginalValues.Remove("ShippingRateType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRateType", previousValue);
    			}
    			if (ShippingRateType != null && !ShippingRateType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ShippingRateType.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

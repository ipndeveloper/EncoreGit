//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductBase))]
    [KnownType(typeof(ProductPropertyType))]
    [Serializable]
    public partial class ProductBaseProperty: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductBasePropertyIDChanged();
    	public int ProductBasePropertyID
    	{
    		get { return _productBasePropertyID; }
    		set
    		{
    			if (_productBasePropertyID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductBasePropertyID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productBasePropertyID = value;
    				ProductBasePropertyIDChanged();
    				OnPropertyChanged("ProductBasePropertyID");
    			}
    		}
    	}
    	private int _productBasePropertyID;
    	partial void ProductBaseIDChanged();
    	public int ProductBaseID
    	{
    		get { return _productBaseID; }
    		set
    		{
    			if (_productBaseID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductBaseID", _productBaseID);
    				if (!IsDeserializing)
    				{
    					if (ProductBas != null && ProductBas.ProductBaseID != value)
    					{
    						ProductBas = null;
    					}
    				}
    				_productBaseID = value;
    				ProductBaseIDChanged();
    				OnPropertyChanged("ProductBaseID");
    			}
    		}
    	}
    	private int _productBaseID;
    	partial void ProductPropertyTypeIDChanged();
    	public int ProductPropertyTypeID
    	{
    		get { return _productPropertyTypeID; }
    		set
    		{
    			if (_productPropertyTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductPropertyTypeID", _productPropertyTypeID);
    				if (!IsDeserializing)
    				{
    					if (ProductPropertyType != null && ProductPropertyType.ProductPropertyTypeID != value)
    					{
    						ProductPropertyType = null;
    					}
    				}
    				_productPropertyTypeID = value;
    				ProductPropertyTypeIDChanged();
    				OnPropertyChanged("ProductPropertyTypeID");
    			}
    		}
    	}
    	private int _productPropertyTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;

        #endregion
        #region Navigation Properties
    
    	public ProductBase ProductBas
    	{
    		get { return _productBas; }
    		set
    		{
    			if (!ReferenceEquals(_productBas, value))
    			{
    				var previousValue = _productBas;
    				_productBas = value;
    				FixupProductBas(previousValue);
    				OnNavigationPropertyChanged("ProductBas");
    			}
    		}
    	}
    	private ProductBase _productBas;
    
    	public ProductPropertyType ProductPropertyType
    	{
    		get { return _productPropertyType; }
    		set
    		{
    			if (!ReferenceEquals(_productPropertyType, value))
    			{
    				var previousValue = _productPropertyType;
    				_productPropertyType = value;
    				FixupProductPropertyType(previousValue);
    				OnNavigationPropertyChanged("ProductPropertyType");
    			}
    		}
    	}
    	private ProductPropertyType _productPropertyType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductBas = null;
    		ProductPropertyType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductBas(ProductBase previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductBaseProperties.Contains(this))
    		{
    			previousValue.ProductBaseProperties.Remove(this);
    		}
    
    		if (ProductBas != null)
    		{
    			if (!ProductBas.ProductBaseProperties.Contains(this))
    			{
    				ProductBas.ProductBaseProperties.Add(this);
    			}
    
    			ProductBaseID = ProductBas.ProductBaseID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductBas")
    				&& (ChangeTracker.OriginalValues["ProductBas"] == ProductBas))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductBas");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductBas", previousValue);
    			}
    			if (ProductBas != null && !ProductBas.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductBas.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductPropertyType(ProductPropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductBaseProperties.Contains(this))
    		{
    			previousValue.ProductBaseProperties.Remove(this);
    		}
    
    		if (ProductPropertyType != null)
    		{
    			if (!ProductPropertyType.ProductBaseProperties.Contains(this))
    			{
    				ProductPropertyType.ProductBaseProperties.Add(this);
    			}
    
    			ProductPropertyTypeID = ProductPropertyType.ProductPropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductPropertyType")
    				&& (ChangeTracker.OriginalValues["ProductPropertyType"] == ProductPropertyType))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductPropertyType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductPropertyType", previousValue);
    			}
    			if (ProductPropertyType != null && !ProductPropertyType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductPropertyType.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

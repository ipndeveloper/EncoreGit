//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(AutoshipLog))]
    [KnownType(typeof(Currency))]
    [KnownType(typeof(OrderCustomer))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(OrderStatus))]
    [KnownType(typeof(OrderType))]
    [KnownType(typeof(ReturnType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(OrderShipment))]
    [KnownType(typeof(OrderShipmentsLog))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(Note))]
    [KnownType(typeof(Party))]
    [KnownType(typeof(OrderPayment))]
    [KnownType(typeof(OrderPaymentResult))]
    [KnownType(typeof(AutoshipOrder))]
    [KnownType(typeof(OrderAdjustment))]
    [KnownType(typeof(SupportTicket))]
    [KnownType(typeof(WarehouseMaterialAllocation))]
    [Serializable]
    public partial class Order: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderIDChanged();
    	public int OrderID
    	{
    		get { return _orderID; }
    		set
    		{
    			if (_orderID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderID = value;
    				OrderIDChanged();
    				OnPropertyChanged("OrderID");
    			}
    		}
    	}
    	private int _orderID;
    	partial void OrderNumberChanged();
    	public string OrderNumber
    	{
    		get { return _orderNumber; }
    		set
    		{
    			if (_orderNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderNumber", _orderNumber);
    				_orderNumber = value;
    				OrderNumberChanged();
    				OnPropertyChanged("OrderNumber");
    			}
    		}
    	}
    	private string _orderNumber;
    	partial void OrderStatusIDChanged();
    	public short OrderStatusID
    	{
    		get { return _orderStatusID; }
    		set
    		{
    			if (_orderStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderStatusID", _orderStatusID);
    				if (!IsDeserializing)
    				{
    					if (OrderStatus != null && OrderStatus.OrderStatusID != value)
    					{
    						OrderStatus = null;
    					}
    				}
    				_orderStatusID = value;
    				OrderStatusIDChanged();
    				OnPropertyChanged("OrderStatusID");
    			}
    		}
    	}
    	private short _orderStatusID;
    	partial void OrderTypeIDChanged();
    	public short OrderTypeID
    	{
    		get { return _orderTypeID; }
    		set
    		{
    			if (_orderTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderTypeID", _orderTypeID);
    				if (!IsDeserializing)
    				{
    					if (OrderType != null && OrderType.OrderTypeID != value)
    					{
    						OrderType = null;
    					}
    				}
    				_orderTypeID = value;
    				OrderTypeIDChanged();
    				OnPropertyChanged("OrderTypeID");
    			}
    		}
    	}
    	private short _orderTypeID;
    	partial void ConsultantIDChanged();
    	public int ConsultantID
    	{
    		get { return _consultantID; }
    		set
    		{
    			if (_consultantID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ConsultantID", _consultantID);
    				if (!IsDeserializing)
    				{
    					if (Consultant != null && Consultant.AccountID != value)
    					{
    						Consultant = null;
    					}
    				}
    				_consultantID = value;
    				ConsultantIDChanged();
    				OnPropertyChanged("ConsultantID");
    			}
    		}
    	}
    	private int _consultantID;
    	partial void SiteIDChanged();
    	public Nullable<int> SiteID
    	{
    		get { return _siteID; }
    		set
    		{
    			if (_siteID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteID", _siteID);
    				if (!IsDeserializing)
    				{
    					if (Site != null && Site.SiteID != value)
    					{
    						Site = null;
    					}
    				}
    				_siteID = value;
    				SiteIDChanged();
    				OnPropertyChanged("SiteID");
    			}
    		}
    	}
    	private Nullable<int> _siteID;
    	partial void ParentOrderIDChanged();
    	public Nullable<int> ParentOrderID
    	{
    		get { return _parentOrderID; }
    		set
    		{
    			if (_parentOrderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParentOrderID", _parentOrderID);
    				if (!IsDeserializing)
    				{
    					if (ParentOrder != null && ParentOrder.OrderID != value)
    					{
    						ParentOrder = null;
    					}
    				}
    				_parentOrderID = value;
    				ParentOrderIDChanged();
    				OnPropertyChanged("ParentOrderID");
    			}
    		}
    	}
    	private Nullable<int> _parentOrderID;
    	partial void CurrencyIDChanged();
    	public int CurrencyID
    	{
    		get { return _currencyID; }
    		set
    		{
    			if (_currencyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CurrencyID", _currencyID);
    				if (!IsDeserializing)
    				{
    					if (Currency != null && Currency.CurrencyID != value)
    					{
    						Currency = null;
    					}
    				}
    				_currencyID = value;
    				CurrencyIDChanged();
    				OnPropertyChanged("CurrencyID");
    			}
    		}
    	}
    	private int _currencyID;
    	partial void CompleteDateUTCChanged();
    	public Nullable<System.DateTime> CompleteDateUTC
    	{
    		get { return _completeDateUTC; }
    		set
    		{
    			if (_completeDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("CompleteDateUTC", _completeDateUTC);
    				_completeDateUTC = value;
    				CompleteDateUTCChanged();
    				OnPropertyChanged("CompleteDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _completeDateUTC;
    	partial void CommissionDateUTCChanged();
    	public Nullable<System.DateTime> CommissionDateUTC
    	{
    		get { return _commissionDateUTC; }
    		set
    		{
    			if (_commissionDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("CommissionDateUTC", _commissionDateUTC);
    				_commissionDateUTC = value;
    				CommissionDateUTCChanged();
    				OnPropertyChanged("CommissionDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _commissionDateUTC;
    	partial void HostessRewardsEarnedChanged();
    	public Nullable<decimal> HostessRewardsEarned
    	{
    		get { return _hostessRewardsEarned; }
    		set
    		{
    			if (_hostessRewardsEarned != value)
    			{
    				ChangeTracker.RecordOriginalValue("HostessRewardsEarned", _hostessRewardsEarned);
    				_hostessRewardsEarned = value;
    				HostessRewardsEarnedChanged();
    				OnPropertyChanged("HostessRewardsEarned");
    			}
    		}
    	}
    	private Nullable<decimal> _hostessRewardsEarned;
    	partial void HostessRewardsUsedChanged();
    	public Nullable<decimal> HostessRewardsUsed
    	{
    		get { return _hostessRewardsUsed; }
    		set
    		{
    			if (_hostessRewardsUsed != value)
    			{
    				ChangeTracker.RecordOriginalValue("HostessRewardsUsed", _hostessRewardsUsed);
    				_hostessRewardsUsed = value;
    				HostessRewardsUsedChanged();
    				OnPropertyChanged("HostessRewardsUsed");
    			}
    		}
    	}
    	private Nullable<decimal> _hostessRewardsUsed;
    	partial void IsTaxExemptChanged();
    	public Nullable<bool> IsTaxExempt
    	{
    		get { return _isTaxExempt; }
    		set
    		{
    			if (_isTaxExempt != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsTaxExempt", _isTaxExempt);
    				_isTaxExempt = value;
    				IsTaxExemptChanged();
    				OnPropertyChanged("IsTaxExempt");
    			}
    		}
    	}
    	private Nullable<bool> _isTaxExempt;
    	partial void TaxAmountTotalChanged();
    	public Nullable<decimal> TaxAmountTotal
    	{
    		get { return _taxAmountTotal; }
    		set
    		{
    			if (_taxAmountTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountTotal", _taxAmountTotal);
    				_taxAmountTotal = value;
    				TaxAmountTotalChanged();
    				OnPropertyChanged("TaxAmountTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountTotal;
    	partial void TaxAmountTotalOverrideChanged();
    	public Nullable<decimal> TaxAmountTotalOverride
    	{
    		get { return _taxAmountTotalOverride; }
    		set
    		{
    			if (_taxAmountTotalOverride != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountTotalOverride", _taxAmountTotalOverride);
    				_taxAmountTotalOverride = value;
    				TaxAmountTotalOverrideChanged();
    				OnPropertyChanged("TaxAmountTotalOverride");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountTotalOverride;
    	partial void TaxableTotalChanged();
    	public Nullable<decimal> TaxableTotal
    	{
    		get { return _taxableTotal; }
    		set
    		{
    			if (_taxableTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxableTotal", _taxableTotal);
    				_taxableTotal = value;
    				TaxableTotalChanged();
    				OnPropertyChanged("TaxableTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _taxableTotal;
    	partial void TaxAmountOrderItemsChanged();
    	public Nullable<decimal> TaxAmountOrderItems
    	{
    		get { return _taxAmountOrderItems; }
    		set
    		{
    			if (_taxAmountOrderItems != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountOrderItems", _taxAmountOrderItems);
    				_taxAmountOrderItems = value;
    				TaxAmountOrderItemsChanged();
    				OnPropertyChanged("TaxAmountOrderItems");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountOrderItems;
    	partial void TaxAmountShippingChanged();
    	public Nullable<decimal> TaxAmountShipping
    	{
    		get { return _taxAmountShipping; }
    		set
    		{
    			if (_taxAmountShipping != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountShipping", _taxAmountShipping);
    				_taxAmountShipping = value;
    				TaxAmountShippingChanged();
    				OnPropertyChanged("TaxAmountShipping");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountShipping;
    	partial void TaxAmountChanged();
    	public Nullable<decimal> TaxAmount
    	{
    		get { return _taxAmount; }
    		set
    		{
    			if (_taxAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmount", _taxAmount);
    				_taxAmount = value;
    				TaxAmountChanged();
    				OnPropertyChanged("TaxAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmount;
    	partial void SubtotalChanged();
    	public Nullable<decimal> Subtotal
    	{
    		get { return _subtotal; }
    		set
    		{
    			if (_subtotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("Subtotal", _subtotal);
    				_subtotal = value;
    				SubtotalChanged();
    				OnPropertyChanged("Subtotal");
    			}
    		}
    	}
    	private Nullable<decimal> _subtotal;
    	partial void DiscountTotalChanged();
    	public Nullable<decimal> DiscountTotal
    	{
    		get { return _discountTotal; }
    		set
    		{
    			if (_discountTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("DiscountTotal", _discountTotal);
    				_discountTotal = value;
    				DiscountTotalChanged();
    				OnPropertyChanged("DiscountTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _discountTotal;
    	partial void ShippingTotalChanged();
    	public Nullable<decimal> ShippingTotal
    	{
    		get { return _shippingTotal; }
    		set
    		{
    			if (_shippingTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingTotal", _shippingTotal);
    				_shippingTotal = value;
    				ShippingTotalChanged();
    				OnPropertyChanged("ShippingTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _shippingTotal;
    	partial void ShippingTotalOverrideChanged();
    	public Nullable<decimal> ShippingTotalOverride
    	{
    		get { return _shippingTotalOverride; }
    		set
    		{
    			if (_shippingTotalOverride != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingTotalOverride", _shippingTotalOverride);
    				_shippingTotalOverride = value;
    				ShippingTotalOverrideChanged();
    				OnPropertyChanged("ShippingTotalOverride");
    			}
    		}
    	}
    	private Nullable<decimal> _shippingTotalOverride;
    	partial void GrandTotalChanged();
    	public Nullable<decimal> GrandTotal
    	{
    		get { return _grandTotal; }
    		set
    		{
    			if (_grandTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("GrandTotal", _grandTotal);
    				_grandTotal = value;
    				GrandTotalChanged();
    				OnPropertyChanged("GrandTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _grandTotal;
    	partial void PaymentTotalChanged();
    	public Nullable<decimal> PaymentTotal
    	{
    		get { return _paymentTotal; }
    		set
    		{
    			if (_paymentTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("PaymentTotal", _paymentTotal);
    				_paymentTotal = value;
    				PaymentTotalChanged();
    				OnPropertyChanged("PaymentTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _paymentTotal;
    	partial void BalanceChanged();
    	public Nullable<decimal> Balance
    	{
    		get { return _balance; }
    		set
    		{
    			if (_balance != value)
    			{
    				ChangeTracker.RecordOriginalValue("Balance", _balance);
    				_balance = value;
    				BalanceChanged();
    				OnPropertyChanged("Balance");
    			}
    		}
    	}
    	private Nullable<decimal> _balance;
    	partial void CommissionableTotalChanged();
    	public Nullable<decimal> CommissionableTotal
    	{
    		get { return _commissionableTotal; }
    		set
    		{
    			if (_commissionableTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("CommissionableTotal", _commissionableTotal);
    				_commissionableTotal = value;
    				CommissionableTotalChanged();
    				OnPropertyChanged("CommissionableTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _commissionableTotal;
    	partial void ReturnTypeIDChanged();
    	public Nullable<int> ReturnTypeID
    	{
    		get { return _returnTypeID; }
    		set
    		{
    			if (_returnTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ReturnTypeID", _returnTypeID);
    				if (!IsDeserializing)
    				{
    					if (ReturnType != null && ReturnType.ReturnTypeID != value)
    					{
    						ReturnType = null;
    					}
    				}
    				_returnTypeID = value;
    				ReturnTypeIDChanged();
    				OnPropertyChanged("ReturnTypeID");
    			}
    		}
    	}
    	private Nullable<int> _returnTypeID;
    	partial void StepUrlChanged();
    	public string StepUrl
    	{
    		get { return _stepUrl; }
    		set
    		{
    			if (_stepUrl != value)
    			{
    				ChangeTracker.RecordOriginalValue("StepUrl", _stepUrl);
    				_stepUrl = value;
    				StepUrlChanged();
    				OnPropertyChanged("StepUrl");
    			}
    		}
    	}
    	private string _stepUrl;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User1 != null && User1.UserID != value)
    					{
    						User1 = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void CreatedByUserIDChanged();
    	public Nullable<int> CreatedByUserID
    	{
    		get { return _createdByUserID; }
    		set
    		{
    			if (_createdByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CreatedByUserID", _createdByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_createdByUserID = value;
    				CreatedByUserIDChanged();
    				OnPropertyChanged("CreatedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _createdByUserID;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void HandlingTotalChanged();
    	public Nullable<decimal> HandlingTotal
    	{
    		get { return _handlingTotal; }
    		set
    		{
    			if (_handlingTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("HandlingTotal", _handlingTotal);
    				_handlingTotal = value;
    				HandlingTotalChanged();
    				OnPropertyChanged("HandlingTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _handlingTotal;
    	partial void DiscountPercentChanged();
    	public Nullable<decimal> DiscountPercent
    	{
    		get { return _discountPercent; }
    		set
    		{
    			if (_discountPercent != value)
    			{
    				ChangeTracker.RecordOriginalValue("DiscountPercent", _discountPercent);
    				_discountPercent = value;
    				DiscountPercentChanged();
    				OnPropertyChanged("DiscountPercent");
    			}
    		}
    	}
    	private Nullable<decimal> _discountPercent;
    	partial void PartyShipmentTotalChanged();
    	public Nullable<decimal> PartyShipmentTotal
    	{
    		get { return _partyShipmentTotal; }
    		set
    		{
    			if (_partyShipmentTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("PartyShipmentTotal", _partyShipmentTotal);
    				_partyShipmentTotal = value;
    				PartyShipmentTotalChanged();
    				OnPropertyChanged("PartyShipmentTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _partyShipmentTotal;
    	partial void PartyHandlingTotalChanged();
    	public Nullable<decimal> PartyHandlingTotal
    	{
    		get { return _partyHandlingTotal; }
    		set
    		{
    			if (_partyHandlingTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("PartyHandlingTotal", _partyHandlingTotal);
    				_partyHandlingTotal = value;
    				PartyHandlingTotalChanged();
    				OnPropertyChanged("PartyHandlingTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _partyHandlingTotal;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;
    	partial void IDNationalMailChanged();
    	public string IDNationalMail
    	{
    		get { return _iDNationalMail; }
    		set
    		{
    			if (_iDNationalMail != value)
    			{
    				ChangeTracker.RecordOriginalValue("IDNationalMail", _iDNationalMail);
    				_iDNationalMail = value;
    				IDNationalMailChanged();
    				OnPropertyChanged("IDNationalMail");
    			}
    		}
    	}
    	private string _iDNationalMail;
    	partial void IDSupportTicketChanged();
    	public Nullable<int> IDSupportTicket
    	{
    		get { return _iDSupportTicket; }
    		set
    		{
    			if (_iDSupportTicket != value)
    			{
    				ChangeTracker.RecordOriginalValue("IDSupportTicket", _iDSupportTicket);
    				if (!IsDeserializing)
    				{
    					if (SupportTicket != null && SupportTicket.SupportTicketID != value)
    					{
    						SupportTicket = null;
    					}
    				}
    				_iDSupportTicket = value;
    				IDSupportTicketChanged();
    				OnPropertyChanged("IDSupportTicket");
    			}
    		}
    	}
    	private Nullable<int> _iDSupportTicket;
    	partial void CreatedPeriodIDChanged();
    	public Nullable<int> CreatedPeriodID
    	{
    		get { return _createdPeriodID; }
    		set
    		{
    			if (_createdPeriodID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CreatedPeriodID", _createdPeriodID);
    				_createdPeriodID = value;
    				CreatedPeriodIDChanged();
    				OnPropertyChanged("CreatedPeriodID");
    			}
    		}
    	}
    	private Nullable<int> _createdPeriodID;
    	partial void CompletedPeriodIDChanged();
    	public Nullable<int> CompletedPeriodID
    	{
    		get { return _completedPeriodID; }
    		set
    		{
    			if (_completedPeriodID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CompletedPeriodID", _completedPeriodID);
    				_completedPeriodID = value;
    				CompletedPeriodIDChanged();
    				OnPropertyChanged("CompletedPeriodID");
    			}
    		}
    	}
    	private Nullable<int> _completedPeriodID;

        #endregion
        #region Navigation Properties
    
    	public Account Consultant
    	{
    		get { return _consultant; }
    		set
    		{
    			if (!ReferenceEquals(_consultant, value))
    			{
    				var previousValue = _consultant;
    				_consultant = value;
    				FixupConsultant(previousValue);
    				OnNavigationPropertyChanged("Consultant");
    			}
    		}
    	}
    	private Account _consultant;
    
    	public TrackableCollection<AutoshipLog> AutoshipLogs
    	{
    		get
    		{
    			if (_autoshipLogs == null)
    			{
    				_autoshipLogs = new TrackableCollection<AutoshipLog>();
    				_autoshipLogs.CollectionChanged += FixupAutoshipLogs;
    				_autoshipLogs.CollectionChanged += RaiseAutoshipLogsChanged;
    			}
    			return _autoshipLogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipLogs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipLogs != null)
    				{
    					_autoshipLogs.CollectionChanged -= FixupAutoshipLogs;
    					_autoshipLogs.CollectionChanged -= RaiseAutoshipLogsChanged;
    				}
    				_autoshipLogs = value;
    				if (_autoshipLogs != null)
    				{
    					_autoshipLogs.CollectionChanged += FixupAutoshipLogs;
    					_autoshipLogs.CollectionChanged += RaiseAutoshipLogsChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipLogs");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipLog> _autoshipLogs;
    	partial void AutoshipLogsChanged();
    	private void RaiseAutoshipLogsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipLogsChanged();
    	}
    
    	public TrackableCollection<AutoshipLog> AutoshipLogs1
    	{
    		get
    		{
    			if (_autoshipLogs1 == null)
    			{
    				_autoshipLogs1 = new TrackableCollection<AutoshipLog>();
    				_autoshipLogs1.CollectionChanged += FixupAutoshipLogs1;
    				_autoshipLogs1.CollectionChanged += RaiseAutoshipLogs1Changed;
    			}
    			return _autoshipLogs1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipLogs1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipLogs1 != null)
    				{
    					_autoshipLogs1.CollectionChanged -= FixupAutoshipLogs1;
    					_autoshipLogs1.CollectionChanged -= RaiseAutoshipLogs1Changed;
    				}
    				_autoshipLogs1 = value;
    				if (_autoshipLogs1 != null)
    				{
    					_autoshipLogs1.CollectionChanged += FixupAutoshipLogs1;
    					_autoshipLogs1.CollectionChanged += RaiseAutoshipLogs1Changed;
    				}
    				OnNavigationPropertyChanged("AutoshipLogs1");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipLog> _autoshipLogs1;
    	partial void AutoshipLogs1Changed();
    	private void RaiseAutoshipLogs1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipLogs1Changed();
    	}
    
    	public Currency Currency
    	{
    		get { return _currency; }
    		set
    		{
    			if (!ReferenceEquals(_currency, value))
    			{
    				var previousValue = _currency;
    				_currency = value;
    				FixupCurrency(previousValue);
    				OnNavigationPropertyChanged("Currency");
    			}
    		}
    	}
    	private Currency _currency;
    
    	public TrackableCollection<OrderCustomer> OrderCustomers
    	{
    		get
    		{
    			if (_orderCustomers == null)
    			{
    				_orderCustomers = new TrackableCollection<OrderCustomer>();
    				_orderCustomers.CollectionChanged += FixupOrderCustomers;
    				_orderCustomers.CollectionChanged += RaiseOrderCustomersChanged;
    			}
    			return _orderCustomers;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderCustomers, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderCustomers != null)
    				{
    					_orderCustomers.CollectionChanged -= FixupOrderCustomers;
    					_orderCustomers.CollectionChanged -= RaiseOrderCustomersChanged;
    				}
    				_orderCustomers = value;
    				if (_orderCustomers != null)
    				{
    					_orderCustomers.CollectionChanged += FixupOrderCustomers;
    					_orderCustomers.CollectionChanged += RaiseOrderCustomersChanged;
    				}
    				OnNavigationPropertyChanged("OrderCustomers");
    			}
    		}
    	}
    	private TrackableCollection<OrderCustomer> _orderCustomers;
    	partial void OrderCustomersChanged();
    	private void RaiseOrderCustomersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderCustomersChanged();
    	}
    
    	public TrackableCollection<Order> ChildOrders
    	{
    		get
    		{
    			if (_childOrders == null)
    			{
    				_childOrders = new TrackableCollection<Order>();
    				_childOrders.CollectionChanged += FixupChildOrders;
    				_childOrders.CollectionChanged += RaiseChildOrdersChanged;
    			}
    			return _childOrders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_childOrders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_childOrders != null)
    				{
    					_childOrders.CollectionChanged -= FixupChildOrders;
    					_childOrders.CollectionChanged -= RaiseChildOrdersChanged;
    				}
    				_childOrders = value;
    				if (_childOrders != null)
    				{
    					_childOrders.CollectionChanged += FixupChildOrders;
    					_childOrders.CollectionChanged += RaiseChildOrdersChanged;
    				}
    				OnNavigationPropertyChanged("ChildOrders");
    			}
    		}
    	}
    	private TrackableCollection<Order> _childOrders;
    	partial void ChildOrdersChanged();
    	private void RaiseChildOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ChildOrdersChanged();
    	}
    
    	public Order ParentOrder
    	{
    		get { return _parentOrder; }
    		set
    		{
    			if (!ReferenceEquals(_parentOrder, value))
    			{
    				var previousValue = _parentOrder;
    				_parentOrder = value;
    				FixupParentOrder(previousValue);
    				OnNavigationPropertyChanged("ParentOrder");
    			}
    		}
    	}
    	private Order _parentOrder;
    
    	public OrderStatus OrderStatus
    	{
    		get { return _orderStatus; }
    		set
    		{
    			if (!ReferenceEquals(_orderStatus, value))
    			{
    				var previousValue = _orderStatus;
    				_orderStatus = value;
    				FixupOrderStatus(previousValue);
    				OnNavigationPropertyChanged("OrderStatus");
    			}
    		}
    	}
    	private OrderStatus _orderStatus;
    
    	public OrderType OrderType
    	{
    		get { return _orderType; }
    		set
    		{
    			if (!ReferenceEquals(_orderType, value))
    			{
    				var previousValue = _orderType;
    				_orderType = value;
    				FixupOrderType(previousValue);
    				OnNavigationPropertyChanged("OrderType");
    			}
    		}
    	}
    	private OrderType _orderType;
    
    	public ReturnType ReturnType
    	{
    		get { return _returnType; }
    		set
    		{
    			if (!ReferenceEquals(_returnType, value))
    			{
    				var previousValue = _returnType;
    				_returnType = value;
    				FixupReturnType(previousValue);
    				OnNavigationPropertyChanged("ReturnType");
    			}
    		}
    	}
    	private ReturnType _returnType;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public User User1
    	{
    		get { return _user1; }
    		set
    		{
    			if (!ReferenceEquals(_user1, value))
    			{
    				var previousValue = _user1;
    				_user1 = value;
    				FixupUser1(previousValue);
    				OnNavigationPropertyChanged("User1");
    			}
    		}
    	}
    	private User _user1;
    
    	public TrackableCollection<OrderShipment> OrderShipments
    	{
    		get
    		{
    			if (_orderShipments == null)
    			{
    				_orderShipments = new TrackableCollection<OrderShipment>();
    				_orderShipments.CollectionChanged += FixupOrderShipments;
    				_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    			}
    			return _orderShipments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderShipments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged -= FixupOrderShipments;
    					_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    				}
    				_orderShipments = value;
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged += FixupOrderShipments;
    					_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderShipments");
    			}
    		}
    	}
    	private TrackableCollection<OrderShipment> _orderShipments;
    	partial void OrderShipmentsChanged();
    	private void RaiseOrderShipmentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderShipmentsChanged();
    	}
    
    	public TrackableCollection<OrderShipmentsLog> OrderShipmentsLogs
    	{
    		get
    		{
    			if (_orderShipmentsLogs == null)
    			{
    				_orderShipmentsLogs = new TrackableCollection<OrderShipmentsLog>();
    				_orderShipmentsLogs.CollectionChanged += FixupOrderShipmentsLogs;
    				_orderShipmentsLogs.CollectionChanged += RaiseOrderShipmentsLogsChanged;
    			}
    			return _orderShipmentsLogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderShipmentsLogs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderShipmentsLogs != null)
    				{
    					_orderShipmentsLogs.CollectionChanged -= FixupOrderShipmentsLogs;
    					_orderShipmentsLogs.CollectionChanged -= RaiseOrderShipmentsLogsChanged;
    				}
    				_orderShipmentsLogs = value;
    				if (_orderShipmentsLogs != null)
    				{
    					_orderShipmentsLogs.CollectionChanged += FixupOrderShipmentsLogs;
    					_orderShipmentsLogs.CollectionChanged += RaiseOrderShipmentsLogsChanged;
    				}
    				OnNavigationPropertyChanged("OrderShipmentsLogs");
    			}
    		}
    	}
    	private TrackableCollection<OrderShipmentsLog> _orderShipmentsLogs;
    	partial void OrderShipmentsLogsChanged();
    	private void RaiseOrderShipmentsLogsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderShipmentsLogsChanged();
    	}
    
    	public Site Site
    	{
    		get { return _site; }
    		set
    		{
    			if (!ReferenceEquals(_site, value))
    			{
    				var previousValue = _site;
    				_site = value;
    				FixupSite(previousValue);
    				OnNavigationPropertyChanged("Site");
    			}
    		}
    	}
    	private Site _site;
    
    	public TrackableCollection<Note> Notes
    	{
    		get
    		{
    			if (_notes == null)
    			{
    				_notes = new TrackableCollection<Note>();
    				_notes.CollectionChanged += FixupNotes;
    				_notes.CollectionChanged += RaiseNotesChanged;
    			}
    			return _notes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_notes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_notes != null)
    				{
    					_notes.CollectionChanged -= FixupNotes;
    					_notes.CollectionChanged -= RaiseNotesChanged;
    				}
    				_notes = value;
    				if (_notes != null)
    				{
    					_notes.CollectionChanged += FixupNotes;
    					_notes.CollectionChanged += RaiseNotesChanged;
    				}
    				OnNavigationPropertyChanged("Notes");
    			}
    		}
    	}
    	private TrackableCollection<Note> _notes;
    	partial void NotesChanged();
    	private void RaiseNotesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NotesChanged();
    	}
    
    	public TrackableCollection<Party> Parties
    	{
    		get
    		{
    			if (_parties == null)
    			{
    				_parties = new TrackableCollection<Party>();
    				_parties.CollectionChanged += FixupParties;
    				_parties.CollectionChanged += RaisePartiesChanged;
    			}
    			return _parties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_parties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_parties != null)
    				{
    					_parties.CollectionChanged -= FixupParties;
    					_parties.CollectionChanged -= RaisePartiesChanged;
    				}
    				_parties = value;
    				if (_parties != null)
    				{
    					_parties.CollectionChanged += FixupParties;
    					_parties.CollectionChanged += RaisePartiesChanged;
    				}
    				OnNavigationPropertyChanged("Parties");
    			}
    		}
    	}
    	private TrackableCollection<Party> _parties;
    	partial void PartiesChanged();
    	private void RaisePartiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PartiesChanged();
    	}
    
    	public TrackableCollection<OrderPayment> OrderPayments
    	{
    		get
    		{
    			if (_orderPayments == null)
    			{
    				_orderPayments = new TrackableCollection<OrderPayment>();
    				_orderPayments.CollectionChanged += FixupOrderPayments;
    				_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    			}
    			return _orderPayments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPayments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged -= FixupOrderPayments;
    					_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    				}
    				_orderPayments = value;
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged += FixupOrderPayments;
    					_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPayments");
    			}
    		}
    	}
    	private TrackableCollection<OrderPayment> _orderPayments;
    	partial void OrderPaymentsChanged();
    	private void RaiseOrderPaymentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentsChanged();
    	}
    
    	public TrackableCollection<OrderPaymentResult> OrderPaymentResults
    	{
    		get
    		{
    			if (_orderPaymentResults == null)
    			{
    				_orderPaymentResults = new TrackableCollection<OrderPaymentResult>();
    				_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    				_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    			}
    			return _orderPaymentResults;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPaymentResults, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPaymentResults != null)
    				{
    					_orderPaymentResults.CollectionChanged -= FixupOrderPaymentResults;
    					_orderPaymentResults.CollectionChanged -= RaiseOrderPaymentResultsChanged;
    				}
    				_orderPaymentResults = value;
    				if (_orderPaymentResults != null)
    				{
    					_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    					_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPaymentResults");
    			}
    		}
    	}
    	private TrackableCollection<OrderPaymentResult> _orderPaymentResults;
    	partial void OrderPaymentResultsChanged();
    	private void RaiseOrderPaymentResultsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentResultsChanged();
    	}
    
    	public TrackableCollection<AutoshipOrder> AutoshipOrders
    	{
    		get
    		{
    			if (_autoshipOrders == null)
    			{
    				_autoshipOrders = new TrackableCollection<AutoshipOrder>();
    				_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    				_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    			}
    			return _autoshipOrders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipOrders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipOrders != null)
    				{
    					_autoshipOrders.CollectionChanged -= FixupAutoshipOrders;
    					_autoshipOrders.CollectionChanged -= RaiseAutoshipOrdersChanged;
    				}
    				_autoshipOrders = value;
    				if (_autoshipOrders != null)
    				{
    					_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    					_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipOrders");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipOrder> _autoshipOrders;
    	partial void AutoshipOrdersChanged();
    	private void RaiseAutoshipOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipOrdersChanged();
    	}
    
    	public TrackableCollection<OrderAdjustment> OrderAdjustments
    	{
    		get
    		{
    			if (_orderAdjustments == null)
    			{
    				_orderAdjustments = new TrackableCollection<OrderAdjustment>();
    				_orderAdjustments.CollectionChanged += FixupOrderAdjustments;
    				_orderAdjustments.CollectionChanged += RaiseOrderAdjustmentsChanged;
    			}
    			return _orderAdjustments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderAdjustments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderAdjustments != null)
    				{
    					_orderAdjustments.CollectionChanged -= FixupOrderAdjustments;
    					_orderAdjustments.CollectionChanged -= RaiseOrderAdjustmentsChanged;
    				}
    				_orderAdjustments = value;
    				if (_orderAdjustments != null)
    				{
    					_orderAdjustments.CollectionChanged += FixupOrderAdjustments;
    					_orderAdjustments.CollectionChanged += RaiseOrderAdjustmentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderAdjustments");
    			}
    		}
    	}
    	private TrackableCollection<OrderAdjustment> _orderAdjustments;
    	partial void OrderAdjustmentsChanged();
    	private void RaiseOrderAdjustmentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderAdjustmentsChanged();
    	}
    
    	public SupportTicket SupportTicket
    	{
    		get { return _supportTicket; }
    		set
    		{
    			if (!ReferenceEquals(_supportTicket, value))
    			{
    				var previousValue = _supportTicket;
    				_supportTicket = value;
    				FixupSupportTicket(previousValue);
    				OnNavigationPropertyChanged("SupportTicket");
    			}
    		}
    	}
    	private SupportTicket _supportTicket;
    
    	public TrackableCollection<WarehouseMaterialAllocation> WarehouseMaterialAllocations
    	{
    		get
    		{
    			if (_warehouseMaterialAllocations == null)
    			{
    				_warehouseMaterialAllocations = new TrackableCollection<WarehouseMaterialAllocation>();
    				_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    				_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    			}
    			return _warehouseMaterialAllocations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_warehouseMaterialAllocations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_warehouseMaterialAllocations != null)
    				{
    					_warehouseMaterialAllocations.CollectionChanged -= FixupWarehouseMaterialAllocations;
    					_warehouseMaterialAllocations.CollectionChanged -= RaiseWarehouseMaterialAllocationsChanged;
    				}
    				_warehouseMaterialAllocations = value;
    				if (_warehouseMaterialAllocations != null)
    				{
    					_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    					_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    				}
    				OnNavigationPropertyChanged("WarehouseMaterialAllocations");
    			}
    		}
    	}
    	private TrackableCollection<WarehouseMaterialAllocation> _warehouseMaterialAllocations;
    	partial void WarehouseMaterialAllocationsChanged();
    	private void RaiseWarehouseMaterialAllocationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		WarehouseMaterialAllocationsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_autoshipLogs != null)
    		{
    			_autoshipLogs.CollectionChanged -= FixupAutoshipLogs;
    			_autoshipLogs.CollectionChanged -= RaiseAutoshipLogsChanged;
    			_autoshipLogs.CollectionChanged += FixupAutoshipLogs;
    			_autoshipLogs.CollectionChanged += RaiseAutoshipLogsChanged;
    		}
    		if (_autoshipLogs1 != null)
    		{
    			_autoshipLogs1.CollectionChanged -= FixupAutoshipLogs1;
    			_autoshipLogs1.CollectionChanged -= RaiseAutoshipLogs1Changed;
    			_autoshipLogs1.CollectionChanged += FixupAutoshipLogs1;
    			_autoshipLogs1.CollectionChanged += RaiseAutoshipLogs1Changed;
    		}
    		if (_orderCustomers != null)
    		{
    			_orderCustomers.CollectionChanged -= FixupOrderCustomers;
    			_orderCustomers.CollectionChanged -= RaiseOrderCustomersChanged;
    			_orderCustomers.CollectionChanged += FixupOrderCustomers;
    			_orderCustomers.CollectionChanged += RaiseOrderCustomersChanged;
    		}
    		if (_childOrders != null)
    		{
    			_childOrders.CollectionChanged -= FixupChildOrders;
    			_childOrders.CollectionChanged -= RaiseChildOrdersChanged;
    			_childOrders.CollectionChanged += FixupChildOrders;
    			_childOrders.CollectionChanged += RaiseChildOrdersChanged;
    		}
    		if (_orderShipments != null)
    		{
    			_orderShipments.CollectionChanged -= FixupOrderShipments;
    			_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    			_orderShipments.CollectionChanged += FixupOrderShipments;
    			_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    		}
    		if (_orderShipmentsLogs != null)
    		{
    			_orderShipmentsLogs.CollectionChanged -= FixupOrderShipmentsLogs;
    			_orderShipmentsLogs.CollectionChanged -= RaiseOrderShipmentsLogsChanged;
    			_orderShipmentsLogs.CollectionChanged += FixupOrderShipmentsLogs;
    			_orderShipmentsLogs.CollectionChanged += RaiseOrderShipmentsLogsChanged;
    		}
    		if (_notes != null)
    		{
    			_notes.CollectionChanged -= FixupNotes;
    			_notes.CollectionChanged -= RaiseNotesChanged;
    			_notes.CollectionChanged += FixupNotes;
    			_notes.CollectionChanged += RaiseNotesChanged;
    		}
    		if (_parties != null)
    		{
    			_parties.CollectionChanged -= FixupParties;
    			_parties.CollectionChanged -= RaisePartiesChanged;
    			_parties.CollectionChanged += FixupParties;
    			_parties.CollectionChanged += RaisePartiesChanged;
    		}
    		if (_orderPayments != null)
    		{
    			_orderPayments.CollectionChanged -= FixupOrderPayments;
    			_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    			_orderPayments.CollectionChanged += FixupOrderPayments;
    			_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    		}
    		if (_orderPaymentResults != null)
    		{
    			_orderPaymentResults.CollectionChanged -= FixupOrderPaymentResults;
    			_orderPaymentResults.CollectionChanged -= RaiseOrderPaymentResultsChanged;
    			_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    			_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    		}
    		if (_autoshipOrders != null)
    		{
    			_autoshipOrders.CollectionChanged -= FixupAutoshipOrders;
    			_autoshipOrders.CollectionChanged -= RaiseAutoshipOrdersChanged;
    			_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    			_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    		}
    		if (_orderAdjustments != null)
    		{
    			_orderAdjustments.CollectionChanged -= FixupOrderAdjustments;
    			_orderAdjustments.CollectionChanged -= RaiseOrderAdjustmentsChanged;
    			_orderAdjustments.CollectionChanged += FixupOrderAdjustments;
    			_orderAdjustments.CollectionChanged += RaiseOrderAdjustmentsChanged;
    		}
    		if (_warehouseMaterialAllocations != null)
    		{
    			_warehouseMaterialAllocations.CollectionChanged -= FixupWarehouseMaterialAllocations;
    			_warehouseMaterialAllocations.CollectionChanged -= RaiseWarehouseMaterialAllocationsChanged;
    			_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    			_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Consultant = null;
    		AutoshipLogs.Clear();
    		AutoshipLogs1.Clear();
    		Currency = null;
    		OrderCustomers.Clear();
    		ChildOrders.Clear();
    		ParentOrder = null;
    		OrderStatus = null;
    		OrderType = null;
    		ReturnType = null;
    		User = null;
    		User1 = null;
    		OrderShipments.Clear();
    		OrderShipmentsLogs.Clear();
    		Site = null;
    		Notes.Clear();
    		Parties.Clear();
    		OrderPayments.Clear();
    		OrderPaymentResults.Clear();
    		AutoshipOrders.Clear();
    		OrderAdjustments.Clear();
    		SupportTicket = null;
    		WarehouseMaterialAllocations.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupConsultant(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders.Contains(this))
    		{
    			previousValue.Orders.Remove(this);
    		}
    
    		if (Consultant != null)
    		{
    			if (!Consultant.Orders.Contains(this))
    			{
    				Consultant.Orders.Add(this);
    			}
    
    			ConsultantID = Consultant.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Consultant")
    				&& (ChangeTracker.OriginalValues["Consultant"] == Consultant))
    			{
    				ChangeTracker.OriginalValues.Remove("Consultant");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Consultant", previousValue);
    			}
    			if (Consultant != null && !Consultant.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Consultant.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCurrency(Currency previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders.Contains(this))
    		{
    			previousValue.Orders.Remove(this);
    		}
    
    		if (Currency != null)
    		{
    			if (!Currency.Orders.Contains(this))
    			{
    				Currency.Orders.Add(this);
    			}
    
    			CurrencyID = Currency.CurrencyID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Currency")
    				&& (ChangeTracker.OriginalValues["Currency"] == Currency))
    			{
    				ChangeTracker.OriginalValues.Remove("Currency");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Currency", previousValue);
    			}
    			if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Currency.StartTracking();
    			}
    		}
    	}
    
    	private void FixupParentOrder(Order previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ChildOrders.Contains(this))
    		{
    			previousValue.ChildOrders.Remove(this);
    		}
    
    		if (ParentOrder != null)
    		{
    			if (!ParentOrder.ChildOrders.Contains(this))
    			{
    				ParentOrder.ChildOrders.Add(this);
    			}
    
    			ParentOrderID = ParentOrder.OrderID;
    		}
    		else if (!skipKeys)
    		{
    			ParentOrderID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ParentOrder")
    				&& (ChangeTracker.OriginalValues["ParentOrder"] == ParentOrder))
    			{
    				ChangeTracker.OriginalValues.Remove("ParentOrder");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ParentOrder", previousValue);
    			}
    			if (ParentOrder != null && !ParentOrder.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ParentOrder.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderStatus(OrderStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders.Contains(this))
    		{
    			previousValue.Orders.Remove(this);
    		}
    
    		if (OrderStatus != null)
    		{
    			if (!OrderStatus.Orders.Contains(this))
    			{
    				OrderStatus.Orders.Add(this);
    			}
    
    			OrderStatusID = OrderStatus.OrderStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderStatus")
    				&& (ChangeTracker.OriginalValues["OrderStatus"] == OrderStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderStatus", previousValue);
    			}
    			if (OrderStatus != null && !OrderStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderStatus.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderType(OrderType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders.Contains(this))
    		{
    			previousValue.Orders.Remove(this);
    		}
    
    		if (OrderType != null)
    		{
    			if (!OrderType.Orders.Contains(this))
    			{
    				OrderType.Orders.Add(this);
    			}
    
    			OrderTypeID = OrderType.OrderTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderType")
    				&& (ChangeTracker.OriginalValues["OrderType"] == OrderType))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderType", previousValue);
    			}
    			if (OrderType != null && !OrderType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupReturnType(ReturnType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders.Contains(this))
    		{
    			previousValue.Orders.Remove(this);
    		}
    
    		if (ReturnType != null)
    		{
    			if (!ReturnType.Orders.Contains(this))
    			{
    				ReturnType.Orders.Add(this);
    			}
    
    			ReturnTypeID = ReturnType.ReturnTypeID;
    		}
    		else if (!skipKeys)
    		{
    			ReturnTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ReturnType")
    				&& (ChangeTracker.OriginalValues["ReturnType"] == ReturnType))
    			{
    				ChangeTracker.OriginalValues.Remove("ReturnType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ReturnType", previousValue);
    			}
    			if (ReturnType != null && !ReturnType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ReturnType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders.Contains(this))
    		{
    			previousValue.Orders.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Orders.Contains(this))
    			{
    				User.Orders.Add(this);
    			}
    
    			CreatedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			CreatedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser1(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders1.Contains(this))
    		{
    			previousValue.Orders1.Remove(this);
    		}
    
    		if (User1 != null)
    		{
    			if (!User1.Orders1.Contains(this))
    			{
    				User1.Orders1.Add(this);
    			}
    
    			ModifiedByUserID = User1.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User1")
    				&& (ChangeTracker.OriginalValues["User1"] == User1))
    			{
    				ChangeTracker.OriginalValues.Remove("User1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User1", previousValue);
    			}
    			if (User1 != null && !User1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSite(Site previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders.Contains(this))
    		{
    			previousValue.Orders.Remove(this);
    		}
    
    		if (Site != null)
    		{
    			if (!Site.Orders.Contains(this))
    			{
    				Site.Orders.Add(this);
    			}
    
    			SiteID = Site.SiteID;
    		}
    		else if (!skipKeys)
    		{
    			SiteID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Site")
    				&& (ChangeTracker.OriginalValues["Site"] == Site))
    			{
    				ChangeTracker.OriginalValues.Remove("Site");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Site", previousValue);
    			}
    			if (Site != null && !Site.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Site.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSupportTicket(SupportTicket previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Orders.Contains(this))
    		{
    			previousValue.Orders.Remove(this);
    		}
    
    		if (SupportTicket != null)
    		{
    			if (!SupportTicket.Orders.Contains(this))
    			{
    				SupportTicket.Orders.Add(this);
    			}
    
    			IDSupportTicket = SupportTicket.SupportTicketID;
    		}
    		else if (!skipKeys)
    		{
    			IDSupportTicket = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("SupportTicket")
    				&& (ChangeTracker.OriginalValues["SupportTicket"] == SupportTicket))
    			{
    				ChangeTracker.OriginalValues.Remove("SupportTicket");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("SupportTicket", previousValue);
    			}
    			if (SupportTicket != null && !SupportTicket.ChangeTracker.ChangeTrackingEnabled)
    			{
    				SupportTicket.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoshipLogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipLog item in e.NewItems)
    			{
    				item.NewOrder = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipLogs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipLog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.NewOrder, this))
    				{
    					item.NewOrder = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipLogs", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipLogs1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipLog item in e.NewItems)
    			{
    				item.TemplateOrder = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipLogs1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipLog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.TemplateOrder, this))
    				{
    					item.TemplateOrder = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipLogs1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderCustomers(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderCustomer item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderCustomers", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderCustomer item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderCustomers", item);
    				}
    			}
    		}
    	}
    
    	private void FixupChildOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Order item in e.NewItems)
    			{
    				item.ParentOrder = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ChildOrders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Order item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ParentOrder, this))
    				{
    					item.ParentOrder = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ChildOrders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderShipments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderShipment item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderShipment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderShipmentsLogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderShipmentsLog item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderShipmentsLogs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderShipmentsLog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderShipmentsLogs", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNotes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Note item in e.NewItems)
    			{
    				if (!item.Orders.Contains(this))
    				{
    					item.Orders.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Notes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Note item in e.OldItems)
    			{
    				if (item.Orders.Contains(this))
    				{
    					item.Orders.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Notes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupParties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Party item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Parties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Party item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Parties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderPayments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPayment item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPayment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderPaymentResults(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPaymentResult item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPaymentResults", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPaymentResult item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPaymentResults", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipOrder item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipOrders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipOrder item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipOrders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderAdjustments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderAdjustment item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderAdjustments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderAdjustment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderAdjustments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupWarehouseMaterialAllocations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (WarehouseMaterialAllocation item in e.NewItems)
    			{
    				item.Order = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("WarehouseMaterialAllocations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (WarehouseMaterialAllocation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Order, this))
    				{
    					item.Order = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseMaterialAllocations", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(RedemptionMethod))]
    [KnownType(typeof(PublicationChannel))]
    [Serializable]
    public partial class Redemption: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void RedemptionIDChanged();
    	public int RedemptionID
    	{
    		get { return _redemptionID; }
    		set
    		{
    			if (_redemptionID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'RedemptionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_redemptionID = value;
    				RedemptionIDChanged();
    				OnPropertyChanged("RedemptionID");
    			}
    		}
    	}
    	private int _redemptionID;
    	partial void RedemptionNumberChanged();
    	public string RedemptionNumber
    	{
    		get { return _redemptionNumber; }
    		set
    		{
    			if (_redemptionNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("RedemptionNumber", _redemptionNumber);
    				_redemptionNumber = value;
    				RedemptionNumberChanged();
    				OnPropertyChanged("RedemptionNumber");
    			}
    		}
    	}
    	private string _redemptionNumber;
    	partial void RedemptionMethodIDChanged();
    	public short RedemptionMethodID
    	{
    		get { return _redemptionMethodID; }
    		set
    		{
    			if (_redemptionMethodID != value)
    			{
    				ChangeTracker.RecordOriginalValue("RedemptionMethodID", _redemptionMethodID);
    				if (!IsDeserializing)
    				{
    					if (RedemptionMethod != null && RedemptionMethod.RedemptionMethodID != value)
    					{
    						RedemptionMethod = null;
    					}
    				}
    				_redemptionMethodID = value;
    				RedemptionMethodIDChanged();
    				OnPropertyChanged("RedemptionMethodID");
    			}
    		}
    	}
    	private short _redemptionMethodID;
    	partial void RedemptionInstructionChanged();
    	public string RedemptionInstruction
    	{
    		get { return _redemptionInstruction; }
    		set
    		{
    			if (_redemptionInstruction != value)
    			{
    				ChangeTracker.RecordOriginalValue("RedemptionInstruction", _redemptionInstruction);
    				_redemptionInstruction = value;
    				RedemptionInstructionChanged();
    				OnPropertyChanged("RedemptionInstruction");
    			}
    		}
    	}
    	private string _redemptionInstruction;
    	partial void RedemptionCouponNameChanged();
    	public string RedemptionCouponName
    	{
    		get { return _redemptionCouponName; }
    		set
    		{
    			if (_redemptionCouponName != value)
    			{
    				ChangeTracker.RecordOriginalValue("RedemptionCouponName", _redemptionCouponName);
    				_redemptionCouponName = value;
    				RedemptionCouponNameChanged();
    				OnPropertyChanged("RedemptionCouponName");
    			}
    		}
    	}
    	private string _redemptionCouponName;
    	partial void RedemptionCodeChanged();
    	public string RedemptionCode
    	{
    		get { return _redemptionCode; }
    		set
    		{
    			if (_redemptionCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("RedemptionCode", _redemptionCode);
    				_redemptionCode = value;
    				RedemptionCodeChanged();
    				OnPropertyChanged("RedemptionCode");
    			}
    		}
    	}
    	private string _redemptionCode;

        #endregion
        #region Navigation Properties
    
    	public RedemptionMethod RedemptionMethod
    	{
    		get { return _redemptionMethod; }
    		set
    		{
    			if (!ReferenceEquals(_redemptionMethod, value))
    			{
    				var previousValue = _redemptionMethod;
    				_redemptionMethod = value;
    				FixupRedemptionMethod(previousValue);
    				OnNavigationPropertyChanged("RedemptionMethod");
    			}
    		}
    	}
    	private RedemptionMethod _redemptionMethod;
    
    	public TrackableCollection<PublicationChannel> PublicationChannels
    	{
    		get
    		{
    			if (_publicationChannels == null)
    			{
    				_publicationChannels = new TrackableCollection<PublicationChannel>();
    				_publicationChannels.CollectionChanged += FixupPublicationChannels;
    				_publicationChannels.CollectionChanged += RaisePublicationChannelsChanged;
    			}
    			return _publicationChannels;
    		}
    		set
    		{
    			if (!ReferenceEquals(_publicationChannels, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_publicationChannels != null)
    				{
    					_publicationChannels.CollectionChanged -= FixupPublicationChannels;
    					_publicationChannels.CollectionChanged -= RaisePublicationChannelsChanged;
    				}
    				_publicationChannels = value;
    				if (_publicationChannels != null)
    				{
    					_publicationChannels.CollectionChanged += FixupPublicationChannels;
    					_publicationChannels.CollectionChanged += RaisePublicationChannelsChanged;
    				}
    				OnNavigationPropertyChanged("PublicationChannels");
    			}
    		}
    	}
    	private TrackableCollection<PublicationChannel> _publicationChannels;
    	partial void PublicationChannelsChanged();
    	private void RaisePublicationChannelsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PublicationChannelsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_publicationChannels != null)
    		{
    			_publicationChannels.CollectionChanged -= FixupPublicationChannels;
    			_publicationChannels.CollectionChanged -= RaisePublicationChannelsChanged;
    			_publicationChannels.CollectionChanged += FixupPublicationChannels;
    			_publicationChannels.CollectionChanged += RaisePublicationChannelsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		RedemptionMethod = null;
    		PublicationChannels.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupRedemptionMethod(RedemptionMethod previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Redemptions.Contains(this))
    		{
    			previousValue.Redemptions.Remove(this);
    		}
    
    		if (RedemptionMethod != null)
    		{
    			if (!RedemptionMethod.Redemptions.Contains(this))
    			{
    				RedemptionMethod.Redemptions.Add(this);
    			}
    
    			RedemptionMethodID = RedemptionMethod.RedemptionMethodID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("RedemptionMethod")
    				&& (ChangeTracker.OriginalValues["RedemptionMethod"] == RedemptionMethod))
    			{
    				ChangeTracker.OriginalValues.Remove("RedemptionMethod");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("RedemptionMethod", previousValue);
    			}
    			if (RedemptionMethod != null && !RedemptionMethod.ChangeTracker.ChangeTrackingEnabled)
    			{
    				RedemptionMethod.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPublicationChannels(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PublicationChannel item in e.NewItems)
    			{
    				if (!item.Redemptions.Contains(this))
    				{
    					item.Redemptions.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PublicationChannels", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PublicationChannel item in e.OldItems)
    			{
    				if (item.Redemptions.Contains(this))
    				{
    					item.Redemptions.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PublicationChannels", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

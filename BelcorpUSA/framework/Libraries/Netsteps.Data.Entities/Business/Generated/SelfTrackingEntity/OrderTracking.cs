//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderCustomer))]
    [KnownType(typeof(OrderStatus))]
    [KnownType(typeof(User))]
    [Serializable]
    public partial class OrderTracking: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderTrackingIDChanged();
    	public int OrderTrackingID
    	{
    		get { return _orderTrackingID; }
    		set
    		{
    			if (_orderTrackingID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderTrackingID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderTrackingID = value;
    				OrderTrackingIDChanged();
    				OnPropertyChanged("OrderTrackingID");
    			}
    		}
    	}
    	private int _orderTrackingID;
    	partial void OrderCustomerIDChanged();
    	public int OrderCustomerID
    	{
    		get { return _orderCustomerID; }
    		set
    		{
    			if (_orderCustomerID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderCustomerID", _orderCustomerID);
    				if (!IsDeserializing)
    				{
    					if (OrderCustomer != null && OrderCustomer.OrderCustomerID != value)
    					{
    						OrderCustomer = null;
    					}
    				}
    				_orderCustomerID = value;
    				OrderCustomerIDChanged();
    				OnPropertyChanged("OrderCustomerID");
    			}
    		}
    	}
    	private int _orderCustomerID;
    	partial void OrderStatusesChanged();
    	public short OrderStatuses
    	{
    		get { return _orderStatuses; }
    		set
    		{
    			if (_orderStatuses != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderStatuses", _orderStatuses);
    				if (!IsDeserializing)
    				{
    					if (OrderStatus != null && OrderStatus.OrderStatusID != value)
    					{
    						OrderStatus = null;
    					}
    				}
    				_orderStatuses = value;
    				OrderStatusesChanged();
    				OnPropertyChanged("OrderStatuses");
    			}
    		}
    	}
    	private short _orderStatuses;
    	partial void InitialTackingDateUTCChanged();
    	public System.DateTime InitialTackingDateUTC
    	{
    		get { return _initialTackingDateUTC; }
    		set
    		{
    			if (_initialTackingDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("InitialTackingDateUTC", _initialTackingDateUTC);
    				_initialTackingDateUTC = value;
    				InitialTackingDateUTCChanged();
    				OnPropertyChanged("InitialTackingDateUTC");
    			}
    		}
    	}
    	private System.DateTime _initialTackingDateUTC;
    	partial void FinalTackingDateUTCChanged();
    	public Nullable<System.DateTime> FinalTackingDateUTC
    	{
    		get { return _finalTackingDateUTC; }
    		set
    		{
    			if (_finalTackingDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("FinalTackingDateUTC", _finalTackingDateUTC);
    				_finalTackingDateUTC = value;
    				FinalTackingDateUTCChanged();
    				OnPropertyChanged("FinalTackingDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _finalTackingDateUTC;
    	partial void UserIDChanged();
    	public int UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserID", _userID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private int _userID;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;

        #endregion
        #region Navigation Properties
    
    	public OrderCustomer OrderCustomer
    	{
    		get { return _orderCustomer; }
    		set
    		{
    			if (!ReferenceEquals(_orderCustomer, value))
    			{
    				var previousValue = _orderCustomer;
    				_orderCustomer = value;
    				FixupOrderCustomer(previousValue);
    				OnNavigationPropertyChanged("OrderCustomer");
    			}
    		}
    	}
    	private OrderCustomer _orderCustomer;
    
    	public OrderStatus OrderStatus
    	{
    		get { return _orderStatus; }
    		set
    		{
    			if (!ReferenceEquals(_orderStatus, value))
    			{
    				var previousValue = _orderStatus;
    				_orderStatus = value;
    				FixupOrderStatus(previousValue);
    				OnNavigationPropertyChanged("OrderStatus");
    			}
    		}
    	}
    	private OrderStatus _orderStatus;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderCustomer = null;
    		OrderStatus = null;
    		User = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderCustomer(OrderCustomer previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderTrackings.Contains(this))
    		{
    			previousValue.OrderTrackings.Remove(this);
    		}
    
    		if (OrderCustomer != null)
    		{
    			if (!OrderCustomer.OrderTrackings.Contains(this))
    			{
    				OrderCustomer.OrderTrackings.Add(this);
    			}
    
    			OrderCustomerID = OrderCustomer.OrderCustomerID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderCustomer")
    				&& (ChangeTracker.OriginalValues["OrderCustomer"] == OrderCustomer))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderCustomer");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderCustomer", previousValue);
    			}
    			if (OrderCustomer != null && !OrderCustomer.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderCustomer.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderStatus(OrderStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderTrackings.Contains(this))
    		{
    			previousValue.OrderTrackings.Remove(this);
    		}
    
    		if (OrderStatus != null)
    		{
    			if (!OrderStatus.OrderTrackings.Contains(this))
    			{
    				OrderStatus.OrderTrackings.Add(this);
    			}
    
    			OrderStatuses = OrderStatus.OrderStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderStatus")
    				&& (ChangeTracker.OriginalValues["OrderStatus"] == OrderStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderStatus", previousValue);
    			}
    			if (OrderStatus != null && !OrderStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderStatus.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderTrackings.Contains(this))
    		{
    			previousValue.OrderTrackings.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.OrderTrackings.Contains(this))
    			{
    				User.OrderTrackings.Add(this);
    			}
    
    			UserID = User.UserID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

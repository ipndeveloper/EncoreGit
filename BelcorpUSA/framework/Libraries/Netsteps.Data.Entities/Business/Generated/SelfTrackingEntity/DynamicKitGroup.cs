//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(DynamicKitGroupRule))]
    [KnownType(typeof(DynamicKit))]
    [KnownType(typeof(DescriptionTranslation))]
    [KnownType(typeof(OrderItem))]
    [Serializable]
    public partial class DynamicKitGroup: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void DynamicKitGroupIDChanged();
    	public int DynamicKitGroupID
    	{
    		get { return _dynamicKitGroupID; }
    		set
    		{
    			if (_dynamicKitGroupID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'DynamicKitGroupID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_dynamicKitGroupID = value;
    				DynamicKitGroupIDChanged();
    				OnPropertyChanged("DynamicKitGroupID");
    			}
    		}
    	}
    	private int _dynamicKitGroupID;
    	partial void DynamicKitIDChanged();
    	public int DynamicKitID
    	{
    		get { return _dynamicKitID; }
    		set
    		{
    			if (_dynamicKitID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DynamicKitID", _dynamicKitID);
    				if (!IsDeserializing)
    				{
    					if (DynamicKit != null && DynamicKit.DynamicKitID != value)
    					{
    						DynamicKit = null;
    					}
    				}
    				_dynamicKitID = value;
    				DynamicKitIDChanged();
    				OnPropertyChanged("DynamicKitID");
    			}
    		}
    	}
    	private int _dynamicKitID;
    	partial void MinimumProductCountChanged();
    	public int MinimumProductCount
    	{
    		get { return _minimumProductCount; }
    		set
    		{
    			if (_minimumProductCount != value)
    			{
    				ChangeTracker.RecordOriginalValue("MinimumProductCount", _minimumProductCount);
    				_minimumProductCount = value;
    				MinimumProductCountChanged();
    				OnPropertyChanged("MinimumProductCount");
    			}
    		}
    	}
    	private int _minimumProductCount;
    	partial void MaximumProductCountChanged();
    	public int MaximumProductCount
    	{
    		get { return _maximumProductCount; }
    		set
    		{
    			if (_maximumProductCount != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaximumProductCount", _maximumProductCount);
    				_maximumProductCount = value;
    				MaximumProductCountChanged();
    				OnPropertyChanged("MaximumProductCount");
    			}
    		}
    	}
    	private int _maximumProductCount;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<DynamicKitGroupRule> DynamicKitGroupRules
    	{
    		get
    		{
    			if (_dynamicKitGroupRules == null)
    			{
    				_dynamicKitGroupRules = new TrackableCollection<DynamicKitGroupRule>();
    				_dynamicKitGroupRules.CollectionChanged += FixupDynamicKitGroupRules;
    				_dynamicKitGroupRules.CollectionChanged += RaiseDynamicKitGroupRulesChanged;
    			}
    			return _dynamicKitGroupRules;
    		}
    		set
    		{
    			if (!ReferenceEquals(_dynamicKitGroupRules, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_dynamicKitGroupRules != null)
    				{
    					_dynamicKitGroupRules.CollectionChanged -= FixupDynamicKitGroupRules;
    					_dynamicKitGroupRules.CollectionChanged -= RaiseDynamicKitGroupRulesChanged;
    				}
    				_dynamicKitGroupRules = value;
    				if (_dynamicKitGroupRules != null)
    				{
    					_dynamicKitGroupRules.CollectionChanged += FixupDynamicKitGroupRules;
    					_dynamicKitGroupRules.CollectionChanged += RaiseDynamicKitGroupRulesChanged;
    				}
    				OnNavigationPropertyChanged("DynamicKitGroupRules");
    			}
    		}
    	}
    	private TrackableCollection<DynamicKitGroupRule> _dynamicKitGroupRules;
    	partial void DynamicKitGroupRulesChanged();
    	private void RaiseDynamicKitGroupRulesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		DynamicKitGroupRulesChanged();
    	}
    
    	public DynamicKit DynamicKit
    	{
    		get { return _dynamicKit; }
    		set
    		{
    			if (!ReferenceEquals(_dynamicKit, value))
    			{
    				var previousValue = _dynamicKit;
    				_dynamicKit = value;
    				FixupDynamicKit(previousValue);
    				OnNavigationPropertyChanged("DynamicKit");
    			}
    		}
    	}
    	private DynamicKit _dynamicKit;
    
    	public TrackableCollection<DescriptionTranslation> Translations
    	{
    		get
    		{
    			if (_translations == null)
    			{
    				_translations = new TrackableCollection<DescriptionTranslation>();
    				_translations.CollectionChanged += FixupTranslations;
    				_translations.CollectionChanged += RaiseTranslationsChanged;
    			}
    			return _translations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_translations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_translations != null)
    				{
    					_translations.CollectionChanged -= FixupTranslations;
    					_translations.CollectionChanged -= RaiseTranslationsChanged;
    				}
    				_translations = value;
    				if (_translations != null)
    				{
    					_translations.CollectionChanged += FixupTranslations;
    					_translations.CollectionChanged += RaiseTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("Translations");
    			}
    		}
    	}
    	private TrackableCollection<DescriptionTranslation> _translations;
    	partial void TranslationsChanged();
    	private void RaiseTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TranslationsChanged();
    	}
    
    	public TrackableCollection<OrderItem> OrderItems
    	{
    		get
    		{
    			if (_orderItems == null)
    			{
    				_orderItems = new TrackableCollection<OrderItem>();
    				_orderItems.CollectionChanged += FixupOrderItems;
    				_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    			}
    			return _orderItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged -= FixupOrderItems;
    					_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    				}
    				_orderItems = value;
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged += FixupOrderItems;
    					_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    				}
    				OnNavigationPropertyChanged("OrderItems");
    			}
    		}
    	}
    	private TrackableCollection<OrderItem> _orderItems;
    	partial void OrderItemsChanged();
    	private void RaiseOrderItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_dynamicKitGroupRules != null)
    		{
    			_dynamicKitGroupRules.CollectionChanged -= FixupDynamicKitGroupRules;
    			_dynamicKitGroupRules.CollectionChanged -= RaiseDynamicKitGroupRulesChanged;
    			_dynamicKitGroupRules.CollectionChanged += FixupDynamicKitGroupRules;
    			_dynamicKitGroupRules.CollectionChanged += RaiseDynamicKitGroupRulesChanged;
    		}
    		if (_translations != null)
    		{
    			_translations.CollectionChanged -= FixupTranslations;
    			_translations.CollectionChanged -= RaiseTranslationsChanged;
    			_translations.CollectionChanged += FixupTranslations;
    			_translations.CollectionChanged += RaiseTranslationsChanged;
    		}
    		if (_orderItems != null)
    		{
    			_orderItems.CollectionChanged -= FixupOrderItems;
    			_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    			_orderItems.CollectionChanged += FixupOrderItems;
    			_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		DynamicKitGroupRules.Clear();
    		DynamicKit = null;
    		Translations.Clear();
    		OrderItems.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupDynamicKit(DynamicKit previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.DynamicKitGroups.Contains(this))
    		{
    			previousValue.DynamicKitGroups.Remove(this);
    		}
    
    		if (DynamicKit != null)
    		{
    			if (!DynamicKit.DynamicKitGroups.Contains(this))
    			{
    				DynamicKit.DynamicKitGroups.Add(this);
    			}
    
    			DynamicKitID = DynamicKit.DynamicKitID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("DynamicKit")
    				&& (ChangeTracker.OriginalValues["DynamicKit"] == DynamicKit))
    			{
    				ChangeTracker.OriginalValues.Remove("DynamicKit");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("DynamicKit", previousValue);
    			}
    			if (DynamicKit != null && !DynamicKit.ChangeTracker.ChangeTrackingEnabled)
    			{
    				DynamicKit.StartTracking();
    			}
    		}
    	}
    
    	private void FixupDynamicKitGroupRules(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DynamicKitGroupRule item in e.NewItems)
    			{
    				item.DynamicKitGroup = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("DynamicKitGroupRules", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DynamicKitGroupRule item in e.OldItems)
    			{
    				if (ReferenceEquals(item.DynamicKitGroup, this))
    				{
    					item.DynamicKitGroup = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("DynamicKitGroupRules", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DescriptionTranslation item in e.NewItems)
    			{
    				if (!item.DynamicKitGroups.Contains(this))
    				{
    					item.DynamicKitGroups.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Translations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DescriptionTranslation item in e.OldItems)
    			{
    				if (item.DynamicKitGroups.Contains(this))
    				{
    					item.DynamicKitGroups.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Translations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItem item in e.NewItems)
    			{
    				item.DynamicKitGroup = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.DynamicKitGroup, this))
    				{
    					item.DynamicKitGroup = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

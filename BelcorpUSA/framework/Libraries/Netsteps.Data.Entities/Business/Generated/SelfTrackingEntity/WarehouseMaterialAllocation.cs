//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Order))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(WarehouseMaterial))]
    [Serializable]
    public partial class WarehouseMaterialAllocation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void WarehouseMaterialAllocationsIDChanged();
    	public int WarehouseMaterialAllocationsID
    	{
    		get { return _warehouseMaterialAllocationsID; }
    		set
    		{
    			if (_warehouseMaterialAllocationsID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'WarehouseMaterialAllocationsID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_warehouseMaterialAllocationsID = value;
    				WarehouseMaterialAllocationsIDChanged();
    				OnPropertyChanged("WarehouseMaterialAllocationsID");
    			}
    		}
    	}
    	private int _warehouseMaterialAllocationsID;
    	partial void WarehouseMaterialIDChanged();
    	public int WarehouseMaterialID
    	{
    		get { return _warehouseMaterialID; }
    		set
    		{
    			if (_warehouseMaterialID != value)
    			{
    				ChangeTracker.RecordOriginalValue("WarehouseMaterialID", _warehouseMaterialID);
    				if (!IsDeserializing)
    				{
    					if (WarehouseMaterial != null && WarehouseMaterial.WarehouseMaterialID != value)
    					{
    						WarehouseMaterial = null;
    					}
    				}
    				_warehouseMaterialID = value;
    				WarehouseMaterialIDChanged();
    				OnPropertyChanged("WarehouseMaterialID");
    			}
    		}
    	}
    	private int _warehouseMaterialID;
    	partial void OrderIDChanged();
    	public Nullable<int> OrderID
    	{
    		get { return _orderID; }
    		set
    		{
    			if (_orderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderID", _orderID);
    				if (!IsDeserializing)
    				{
    					if (Order != null && Order.OrderID != value)
    					{
    						Order = null;
    					}
    				}
    				_orderID = value;
    				OrderIDChanged();
    				OnPropertyChanged("OrderID");
    			}
    		}
    	}
    	private Nullable<int> _orderID;
    	partial void PreOrderIDChanged();
    	public Nullable<int> PreOrderID
    	{
    		get { return _preOrderID; }
    		set
    		{
    			if (_preOrderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PreOrderID", _preOrderID);
    				_preOrderID = value;
    				PreOrderIDChanged();
    				OnPropertyChanged("PreOrderID");
    			}
    		}
    	}
    	private Nullable<int> _preOrderID;
    	partial void AllocationDateUTCChanged();
    	public System.DateTime AllocationDateUTC
    	{
    		get { return _allocationDateUTC; }
    		set
    		{
    			if (_allocationDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("AllocationDateUTC", _allocationDateUTC);
    				_allocationDateUTC = value;
    				AllocationDateUTCChanged();
    				OnPropertyChanged("AllocationDateUTC");
    			}
    		}
    	}
    	private System.DateTime _allocationDateUTC;
    	partial void QuantityChanged();
    	public int Quantity
    	{
    		get { return _quantity; }
    		set
    		{
    			if (_quantity != value)
    			{
    				ChangeTracker.RecordOriginalValue("Quantity", _quantity);
    				_quantity = value;
    				QuantityChanged();
    				OnPropertyChanged("Quantity");
    			}
    		}
    	}
    	private int _quantity;
    	partial void ProductIDChanged();
    	public int ProductID
    	{
    		get { return _productID; }
    		set
    		{
    			if (_productID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductID", _productID);
    				if (!IsDeserializing)
    				{
    					if (Product != null && Product.ProductID != value)
    					{
    						Product = null;
    					}
    				}
    				_productID = value;
    				ProductIDChanged();
    				OnPropertyChanged("ProductID");
    			}
    		}
    	}
    	private int _productID;
    	partial void IsClaimChanged();
    	public Nullable<bool> IsClaim
    	{
    		get { return _isClaim; }
    		set
    		{
    			if (_isClaim != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsClaim", _isClaim);
    				_isClaim = value;
    				IsClaimChanged();
    				OnPropertyChanged("IsClaim");
    			}
    		}
    	}
    	private Nullable<bool> _isClaim;

        #endregion
        #region Navigation Properties
    
    	public Order Order
    	{
    		get { return _order; }
    		set
    		{
    			if (!ReferenceEquals(_order, value))
    			{
    				var previousValue = _order;
    				_order = value;
    				FixupOrder(previousValue);
    				OnNavigationPropertyChanged("Order");
    			}
    		}
    	}
    	private Order _order;
    
    	public Product Product
    	{
    		get { return _product; }
    		set
    		{
    			if (!ReferenceEquals(_product, value))
    			{
    				var previousValue = _product;
    				_product = value;
    				FixupProduct(previousValue);
    				OnNavigationPropertyChanged("Product");
    			}
    		}
    	}
    	private Product _product;
    
    	public WarehouseMaterial WarehouseMaterial
    	{
    		get { return _warehouseMaterial; }
    		set
    		{
    			if (!ReferenceEquals(_warehouseMaterial, value))
    			{
    				var previousValue = _warehouseMaterial;
    				_warehouseMaterial = value;
    				FixupWarehouseMaterial(previousValue);
    				OnNavigationPropertyChanged("WarehouseMaterial");
    			}
    		}
    	}
    	private WarehouseMaterial _warehouseMaterial;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Order = null;
    		Product = null;
    		WarehouseMaterial = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrder(Order previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.WarehouseMaterialAllocations.Contains(this))
    		{
    			previousValue.WarehouseMaterialAllocations.Remove(this);
    		}
    
    		if (Order != null)
    		{
    			if (!Order.WarehouseMaterialAllocations.Contains(this))
    			{
    				Order.WarehouseMaterialAllocations.Add(this);
    			}
    
    			OrderID = Order.OrderID;
    		}
    		else if (!skipKeys)
    		{
    			OrderID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Order")
    				&& (ChangeTracker.OriginalValues["Order"] == Order))
    			{
    				ChangeTracker.OriginalValues.Remove("Order");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Order", previousValue);
    			}
    			if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Order.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProduct(Product previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.WarehouseMaterialAllocations.Contains(this))
    		{
    			previousValue.WarehouseMaterialAllocations.Remove(this);
    		}
    
    		if (Product != null)
    		{
    			if (!Product.WarehouseMaterialAllocations.Contains(this))
    			{
    				Product.WarehouseMaterialAllocations.Add(this);
    			}
    
    			ProductID = Product.ProductID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Product")
    				&& (ChangeTracker.OriginalValues["Product"] == Product))
    			{
    				ChangeTracker.OriginalValues.Remove("Product");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Product", previousValue);
    			}
    			if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Product.StartTracking();
    			}
    		}
    	}
    
    	private void FixupWarehouseMaterial(WarehouseMaterial previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.WarehouseMaterialAllocations.Contains(this))
    		{
    			previousValue.WarehouseMaterialAllocations.Remove(this);
    		}
    
    		if (WarehouseMaterial != null)
    		{
    			if (!WarehouseMaterial.WarehouseMaterialAllocations.Contains(this))
    			{
    				WarehouseMaterial.WarehouseMaterialAllocations.Add(this);
    			}
    
    			WarehouseMaterialID = WarehouseMaterial.WarehouseMaterialID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("WarehouseMaterial")
    				&& (ChangeTracker.OriginalValues["WarehouseMaterial"] == WarehouseMaterial))
    			{
    				ChangeTracker.OriginalValues.Remove("WarehouseMaterial");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("WarehouseMaterial", previousValue);
    			}
    			if (WarehouseMaterial != null && !WarehouseMaterial.ChangeTracker.ChangeTrackingEnabled)
    			{
    				WarehouseMaterial.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

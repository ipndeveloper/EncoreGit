//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(WarehouseMaterial))]
    [KnownType(typeof(ProductRelation))]
    [Serializable]
    public partial class Material: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void MaterialIDChanged();
    	public int MaterialID
    	{
    		get { return _materialID; }
    		set
    		{
    			if (_materialID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'MaterialID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_materialID = value;
    				MaterialIDChanged();
    				OnPropertyChanged("MaterialID");
    			}
    		}
    	}
    	private int _materialID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void SKUChanged();
    	public string SKU
    	{
    		get { return _sKU; }
    		set
    		{
    			if (_sKU != value)
    			{
    				ChangeTracker.RecordOriginalValue("SKU", _sKU);
    				_sKU = value;
    				SKUChanged();
    				OnPropertyChanged("SKU");
    			}
    		}
    	}
    	private string _sKU;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void EANCodeChanged();
    	public Nullable<decimal> EANCode
    	{
    		get { return _eANCode; }
    		set
    		{
    			if (_eANCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("EANCode", _eANCode);
    				_eANCode = value;
    				EANCodeChanged();
    				OnPropertyChanged("EANCode");
    			}
    		}
    	}
    	private Nullable<decimal> _eANCode;
    	partial void BPCSCodeChanged();
    	public string BPCSCode
    	{
    		get { return _bPCSCode; }
    		set
    		{
    			if (_bPCSCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("BPCSCode", _bPCSCode);
    				_bPCSCode = value;
    				BPCSCodeChanged();
    				OnPropertyChanged("BPCSCode");
    			}
    		}
    	}
    	private string _bPCSCode;
    	partial void UnityTypeChanged();
    	public string UnityType
    	{
    		get { return _unityType; }
    		set
    		{
    			if (_unityType != value)
    			{
    				ChangeTracker.RecordOriginalValue("UnityType", _unityType);
    				_unityType = value;
    				UnityTypeChanged();
    				OnPropertyChanged("UnityType");
    			}
    		}
    	}
    	private string _unityType;
    	partial void WeightChanged();
    	public Nullable<decimal> Weight
    	{
    		get { return _weight; }
    		set
    		{
    			if (_weight != value)
    			{
    				ChangeTracker.RecordOriginalValue("Weight", _weight);
    				_weight = value;
    				WeightChanged();
    				OnPropertyChanged("Weight");
    			}
    		}
    	}
    	private Nullable<decimal> _weight;
    	partial void VolumeChanged();
    	public Nullable<decimal> Volume
    	{
    		get { return _volume; }
    		set
    		{
    			if (_volume != value)
    			{
    				ChangeTracker.RecordOriginalValue("Volume", _volume);
    				_volume = value;
    				VolumeChanged();
    				OnPropertyChanged("Volume");
    			}
    		}
    	}
    	private Nullable<decimal> _volume;
    	partial void NCMChanged();
    	public string NCM
    	{
    		get { return _nCM; }
    		set
    		{
    			if (_nCM != value)
    			{
    				ChangeTracker.RecordOriginalValue("NCM", _nCM);
    				_nCM = value;
    				NCMChanged();
    				OnPropertyChanged("NCM");
    			}
    		}
    	}
    	private string _nCM;
    	partial void OriginChanged();
    	public Nullable<decimal> Origin
    	{
    		get { return _origin; }
    		set
    		{
    			if (_origin != value)
    			{
    				ChangeTracker.RecordOriginalValue("Origin", _origin);
    				_origin = value;
    				OriginChanged();
    				OnPropertyChanged("Origin");
    			}
    		}
    	}
    	private Nullable<decimal> _origin;
    	partial void OriginCountryChanged();
    	public Nullable<decimal> OriginCountry
    	{
    		get { return _originCountry; }
    		set
    		{
    			if (_originCountry != value)
    			{
    				ChangeTracker.RecordOriginalValue("OriginCountry", _originCountry);
    				_originCountry = value;
    				OriginCountryChanged();
    				OnPropertyChanged("OriginCountry");
    			}
    		}
    	}
    	private Nullable<decimal> _originCountry;
    	partial void BrandChanged();
    	public string Brand
    	{
    		get { return _brand; }
    		set
    		{
    			if (_brand != value)
    			{
    				ChangeTracker.RecordOriginalValue("Brand", _brand);
    				_brand = value;
    				BrandChanged();
    				OnPropertyChanged("Brand");
    			}
    		}
    	}
    	private string _brand;
    	partial void GroupChanged();
    	public string Group
    	{
    		get { return _group; }
    		set
    		{
    			if (_group != value)
    			{
    				ChangeTracker.RecordOriginalValue("Group", _group);
    				_group = value;
    				GroupChanged();
    				OnPropertyChanged("Group");
    			}
    		}
    	}
    	private string _group;
    	partial void MarketIDChanged();
    	public Nullable<int> MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private Nullable<int> _marketID;
    	partial void HierachyChanged();
    	public string Hierachy
    	{
    		get { return _hierachy; }
    		set
    		{
    			if (_hierachy != value)
    			{
    				ChangeTracker.RecordOriginalValue("Hierachy", _hierachy);
    				_hierachy = value;
    				HierachyChanged();
    				OnPropertyChanged("Hierachy");
    			}
    		}
    	}
    	private string _hierachy;
    	partial void BrandIDChanged();
    	public Nullable<int> BrandID
    	{
    		get { return _brandID; }
    		set
    		{
    			if (_brandID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BrandID", _brandID);
    				_brandID = value;
    				BrandIDChanged();
    				OnPropertyChanged("BrandID");
    			}
    		}
    	}
    	private Nullable<int> _brandID;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<WarehouseMaterial> WarehouseMaterials
    	{
    		get
    		{
    			if (_warehouseMaterials == null)
    			{
    				_warehouseMaterials = new TrackableCollection<WarehouseMaterial>();
    				_warehouseMaterials.CollectionChanged += FixupWarehouseMaterials;
    				_warehouseMaterials.CollectionChanged += RaiseWarehouseMaterialsChanged;
    			}
    			return _warehouseMaterials;
    		}
    		set
    		{
    			if (!ReferenceEquals(_warehouseMaterials, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_warehouseMaterials != null)
    				{
    					_warehouseMaterials.CollectionChanged -= FixupWarehouseMaterials;
    					_warehouseMaterials.CollectionChanged -= RaiseWarehouseMaterialsChanged;
    				}
    				_warehouseMaterials = value;
    				if (_warehouseMaterials != null)
    				{
    					_warehouseMaterials.CollectionChanged += FixupWarehouseMaterials;
    					_warehouseMaterials.CollectionChanged += RaiseWarehouseMaterialsChanged;
    				}
    				OnNavigationPropertyChanged("WarehouseMaterials");
    			}
    		}
    	}
    	private TrackableCollection<WarehouseMaterial> _warehouseMaterials;
    	partial void WarehouseMaterialsChanged();
    	private void RaiseWarehouseMaterialsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		WarehouseMaterialsChanged();
    	}
    
    	public TrackableCollection<ProductRelation> ProductRelations
    	{
    		get
    		{
    			if (_productRelations == null)
    			{
    				_productRelations = new TrackableCollection<ProductRelation>();
    				_productRelations.CollectionChanged += FixupProductRelations;
    				_productRelations.CollectionChanged += RaiseProductRelationsChanged;
    			}
    			return _productRelations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productRelations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productRelations != null)
    				{
    					_productRelations.CollectionChanged -= FixupProductRelations;
    					_productRelations.CollectionChanged -= RaiseProductRelationsChanged;
    				}
    				_productRelations = value;
    				if (_productRelations != null)
    				{
    					_productRelations.CollectionChanged += FixupProductRelations;
    					_productRelations.CollectionChanged += RaiseProductRelationsChanged;
    				}
    				OnNavigationPropertyChanged("ProductRelations");
    			}
    		}
    	}
    	private TrackableCollection<ProductRelation> _productRelations;
    	partial void ProductRelationsChanged();
    	private void RaiseProductRelationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductRelationsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_warehouseMaterials != null)
    		{
    			_warehouseMaterials.CollectionChanged -= FixupWarehouseMaterials;
    			_warehouseMaterials.CollectionChanged -= RaiseWarehouseMaterialsChanged;
    			_warehouseMaterials.CollectionChanged += FixupWarehouseMaterials;
    			_warehouseMaterials.CollectionChanged += RaiseWarehouseMaterialsChanged;
    		}
    		if (_productRelations != null)
    		{
    			_productRelations.CollectionChanged -= FixupProductRelations;
    			_productRelations.CollectionChanged -= RaiseProductRelationsChanged;
    			_productRelations.CollectionChanged += FixupProductRelations;
    			_productRelations.CollectionChanged += RaiseProductRelationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		WarehouseMaterials.Clear();
    		ProductRelations.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupWarehouseMaterials(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (WarehouseMaterial item in e.NewItems)
    			{
    				item.Material = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("WarehouseMaterials", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (WarehouseMaterial item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Material, this))
    				{
    					item.Material = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseMaterials", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductRelations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductRelation item in e.NewItems)
    			{
    				item.Material = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductRelations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductRelation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Material, this))
    				{
    					item.Material = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductRelations", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

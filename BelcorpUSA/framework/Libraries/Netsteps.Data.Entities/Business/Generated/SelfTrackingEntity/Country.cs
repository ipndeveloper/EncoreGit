//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Currency))]
    [KnownType(typeof(Market))]
    [KnownType(typeof(OrderPayment))]
    [KnownType(typeof(ShippingOrderType))]
    [KnownType(typeof(StateProvince))]
    [KnownType(typeof(Language))]
    [KnownType(typeof(PaymentOrderType))]
    [KnownType(typeof(OrderShipment))]
    [KnownType(typeof(CreditCardType))]
    [KnownType(typeof(TaxCache))]
    [KnownType(typeof(Address))]
    [KnownType(typeof(LogisticsProvider))]
    [KnownType(typeof(TaxCacheOverride))]
    [KnownType(typeof(PostalCodeLookup))]
    [Serializable]
    public partial class Country: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CountryIDChanged();
    	public int CountryID
    	{
    		get { return _countryID; }
    		set
    		{
    			if (_countryID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CountryID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_countryID = value;
    				CountryIDChanged();
    				OnPropertyChanged("CountryID");
    			}
    		}
    	}
    	private int _countryID;
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				if (!IsDeserializing)
    				{
    					if (Market != null && Market.MarketID != value)
    					{
    						Market = null;
    					}
    				}
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;
    	partial void CountryCodeChanged();
    	public string CountryCode
    	{
    		get { return _countryCode; }
    		set
    		{
    			if (_countryCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryCode", _countryCode);
    				_countryCode = value;
    				CountryCodeChanged();
    				OnPropertyChanged("CountryCode");
    			}
    		}
    	}
    	private string _countryCode;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void CurrencyIDChanged();
    	public int CurrencyID
    	{
    		get { return _currencyID; }
    		set
    		{
    			if (_currencyID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CurrencyID", _currencyID);
    				if (!IsDeserializing)
    				{
    					if (Currency != null && Currency.CurrencyID != value)
    					{
    						Currency = null;
    					}
    				}
    				_currencyID = value;
    				CurrencyIDChanged();
    				OnPropertyChanged("CurrencyID");
    			}
    		}
    	}
    	private int _currencyID;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DefaultLanguageIDChanged();
    	public Nullable<int> DefaultLanguageID
    	{
    		get { return _defaultLanguageID; }
    		set
    		{
    			if (_defaultLanguageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DefaultLanguageID", _defaultLanguageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_defaultLanguageID = value;
    				DefaultLanguageIDChanged();
    				OnPropertyChanged("DefaultLanguageID");
    			}
    		}
    	}
    	private Nullable<int> _defaultLanguageID;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void IsAvailableForRegistrationChanged();
    	public bool IsAvailableForRegistration
    	{
    		get { return _isAvailableForRegistration; }
    		set
    		{
    			if (_isAvailableForRegistration != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsAvailableForRegistration", _isAvailableForRegistration);
    				_isAvailableForRegistration = value;
    				IsAvailableForRegistrationChanged();
    				OnPropertyChanged("IsAvailableForRegistration");
    			}
    		}
    	}
    	private bool _isAvailableForRegistration;
    	partial void CultureInfoChanged();
    	public string CultureInfo
    	{
    		get { return _cultureInfo; }
    		set
    		{
    			if (_cultureInfo != value)
    			{
    				ChangeTracker.RecordOriginalValue("CultureInfo", _cultureInfo);
    				_cultureInfo = value;
    				CultureInfoChanged();
    				OnPropertyChanged("CultureInfo");
    			}
    		}
    	}
    	private string _cultureInfo;
    	partial void CountryCode3Changed();
    	public string CountryCode3
    	{
    		get { return _countryCode3; }
    		set
    		{
    			if (_countryCode3 != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryCode3", _countryCode3);
    				_countryCode3 = value;
    				CountryCode3Changed();
    				OnPropertyChanged("CountryCode3");
    			}
    		}
    	}
    	private string _countryCode3;
    	partial void TermNameNationalityChanged();
    	public string TermNameNationality
    	{
    		get { return _termNameNationality; }
    		set
    		{
    			if (_termNameNationality != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermNameNationality", _termNameNationality);
    				_termNameNationality = value;
    				TermNameNationalityChanged();
    				OnPropertyChanged("TermNameNationality");
    			}
    		}
    	}
    	private string _termNameNationality;
    	partial void SortIdexChanged();
    	public int SortIdex
    	{
    		get { return _sortIdex; }
    		set
    		{
    			if (_sortIdex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIdex", _sortIdex);
    				_sortIdex = value;
    				SortIdexChanged();
    				OnPropertyChanged("SortIdex");
    			}
    		}
    	}
    	private int _sortIdex;

        #endregion
        #region Navigation Properties
    
    	public Currency Currency
    	{
    		get { return _currency; }
    		set
    		{
    			if (!ReferenceEquals(_currency, value))
    			{
    				var previousValue = _currency;
    				_currency = value;
    				FixupCurrency(previousValue);
    				OnNavigationPropertyChanged("Currency");
    			}
    		}
    	}
    	private Currency _currency;
    
    	public Market Market
    	{
    		get { return _market; }
    		set
    		{
    			if (!ReferenceEquals(_market, value))
    			{
    				var previousValue = _market;
    				_market = value;
    				FixupMarket(previousValue);
    				OnNavigationPropertyChanged("Market");
    			}
    		}
    	}
    	private Market _market;
    
    	public TrackableCollection<OrderPayment> OrderPayments
    	{
    		get
    		{
    			if (_orderPayments == null)
    			{
    				_orderPayments = new TrackableCollection<OrderPayment>();
    				_orderPayments.CollectionChanged += FixupOrderPayments;
    				_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    			}
    			return _orderPayments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPayments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged -= FixupOrderPayments;
    					_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    				}
    				_orderPayments = value;
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged += FixupOrderPayments;
    					_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPayments");
    			}
    		}
    	}
    	private TrackableCollection<OrderPayment> _orderPayments;
    	partial void OrderPaymentsChanged();
    	private void RaiseOrderPaymentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentsChanged();
    	}
    
    	public TrackableCollection<ShippingOrderType> ShippingOrderTypes
    	{
    		get
    		{
    			if (_shippingOrderTypes == null)
    			{
    				_shippingOrderTypes = new TrackableCollection<ShippingOrderType>();
    				_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    				_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    			}
    			return _shippingOrderTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_shippingOrderTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_shippingOrderTypes != null)
    				{
    					_shippingOrderTypes.CollectionChanged -= FixupShippingOrderTypes;
    					_shippingOrderTypes.CollectionChanged -= RaiseShippingOrderTypesChanged;
    				}
    				_shippingOrderTypes = value;
    				if (_shippingOrderTypes != null)
    				{
    					_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    					_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    				}
    				OnNavigationPropertyChanged("ShippingOrderTypes");
    			}
    		}
    	}
    	private TrackableCollection<ShippingOrderType> _shippingOrderTypes;
    	partial void ShippingOrderTypesChanged();
    	private void RaiseShippingOrderTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ShippingOrderTypesChanged();
    	}
    
    	public TrackableCollection<StateProvince> StateProvinces
    	{
    		get
    		{
    			if (_stateProvinces == null)
    			{
    				_stateProvinces = new TrackableCollection<StateProvince>();
    				_stateProvinces.CollectionChanged += FixupStateProvinces;
    				_stateProvinces.CollectionChanged += RaiseStateProvincesChanged;
    			}
    			return _stateProvinces;
    		}
    		set
    		{
    			if (!ReferenceEquals(_stateProvinces, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_stateProvinces != null)
    				{
    					_stateProvinces.CollectionChanged -= FixupStateProvinces;
    					_stateProvinces.CollectionChanged -= RaiseStateProvincesChanged;
    				}
    				_stateProvinces = value;
    				if (_stateProvinces != null)
    				{
    					_stateProvinces.CollectionChanged += FixupStateProvinces;
    					_stateProvinces.CollectionChanged += RaiseStateProvincesChanged;
    				}
    				OnNavigationPropertyChanged("StateProvinces");
    			}
    		}
    	}
    	private TrackableCollection<StateProvince> _stateProvinces;
    	partial void StateProvincesChanged();
    	private void RaiseStateProvincesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		StateProvincesChanged();
    	}
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public TrackableCollection<PaymentOrderType> PaymentOrderTypes
    	{
    		get
    		{
    			if (_paymentOrderTypes == null)
    			{
    				_paymentOrderTypes = new TrackableCollection<PaymentOrderType>();
    				_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    				_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    			}
    			return _paymentOrderTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_paymentOrderTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_paymentOrderTypes != null)
    				{
    					_paymentOrderTypes.CollectionChanged -= FixupPaymentOrderTypes;
    					_paymentOrderTypes.CollectionChanged -= RaisePaymentOrderTypesChanged;
    				}
    				_paymentOrderTypes = value;
    				if (_paymentOrderTypes != null)
    				{
    					_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    					_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    				}
    				OnNavigationPropertyChanged("PaymentOrderTypes");
    			}
    		}
    	}
    	private TrackableCollection<PaymentOrderType> _paymentOrderTypes;
    	partial void PaymentOrderTypesChanged();
    	private void RaisePaymentOrderTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PaymentOrderTypesChanged();
    	}
    
    	public TrackableCollection<OrderShipment> OrderShipments
    	{
    		get
    		{
    			if (_orderShipments == null)
    			{
    				_orderShipments = new TrackableCollection<OrderShipment>();
    				_orderShipments.CollectionChanged += FixupOrderShipments;
    				_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    			}
    			return _orderShipments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderShipments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged -= FixupOrderShipments;
    					_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    				}
    				_orderShipments = value;
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged += FixupOrderShipments;
    					_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderShipments");
    			}
    		}
    	}
    	private TrackableCollection<OrderShipment> _orderShipments;
    	partial void OrderShipmentsChanged();
    	private void RaiseOrderShipmentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderShipmentsChanged();
    	}
    
    	public TrackableCollection<CreditCardType> CreditCardTypes
    	{
    		get
    		{
    			if (_creditCardTypes == null)
    			{
    				_creditCardTypes = new TrackableCollection<CreditCardType>();
    				_creditCardTypes.CollectionChanged += FixupCreditCardTypes;
    				_creditCardTypes.CollectionChanged += RaiseCreditCardTypesChanged;
    			}
    			return _creditCardTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_creditCardTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_creditCardTypes != null)
    				{
    					_creditCardTypes.CollectionChanged -= FixupCreditCardTypes;
    					_creditCardTypes.CollectionChanged -= RaiseCreditCardTypesChanged;
    				}
    				_creditCardTypes = value;
    				if (_creditCardTypes != null)
    				{
    					_creditCardTypes.CollectionChanged += FixupCreditCardTypes;
    					_creditCardTypes.CollectionChanged += RaiseCreditCardTypesChanged;
    				}
    				OnNavigationPropertyChanged("CreditCardTypes");
    			}
    		}
    	}
    	private TrackableCollection<CreditCardType> _creditCardTypes;
    	partial void CreditCardTypesChanged();
    	private void RaiseCreditCardTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CreditCardTypesChanged();
    	}
    
    	public TrackableCollection<Language> Languages
    	{
    		get
    		{
    			if (_languages == null)
    			{
    				_languages = new TrackableCollection<Language>();
    				_languages.CollectionChanged += FixupLanguages;
    				_languages.CollectionChanged += RaiseLanguagesChanged;
    			}
    			return _languages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_languages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_languages != null)
    				{
    					_languages.CollectionChanged -= FixupLanguages;
    					_languages.CollectionChanged -= RaiseLanguagesChanged;
    				}
    				_languages = value;
    				if (_languages != null)
    				{
    					_languages.CollectionChanged += FixupLanguages;
    					_languages.CollectionChanged += RaiseLanguagesChanged;
    				}
    				OnNavigationPropertyChanged("Languages");
    			}
    		}
    	}
    	private TrackableCollection<Language> _languages;
    	partial void LanguagesChanged();
    	private void RaiseLanguagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		LanguagesChanged();
    	}
    
    	public TrackableCollection<Currency> Currencies
    	{
    		get
    		{
    			if (_currencies == null)
    			{
    				_currencies = new TrackableCollection<Currency>();
    				_currencies.CollectionChanged += FixupCurrencies;
    				_currencies.CollectionChanged += RaiseCurrenciesChanged;
    			}
    			return _currencies;
    		}
    		set
    		{
    			if (!ReferenceEquals(_currencies, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_currencies != null)
    				{
    					_currencies.CollectionChanged -= FixupCurrencies;
    					_currencies.CollectionChanged -= RaiseCurrenciesChanged;
    				}
    				_currencies = value;
    				if (_currencies != null)
    				{
    					_currencies.CollectionChanged += FixupCurrencies;
    					_currencies.CollectionChanged += RaiseCurrenciesChanged;
    				}
    				OnNavigationPropertyChanged("Currencies");
    			}
    		}
    	}
    	private TrackableCollection<Currency> _currencies;
    	partial void CurrenciesChanged();
    	private void RaiseCurrenciesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CurrenciesChanged();
    	}
    
    	public TrackableCollection<TaxCache> TaxCaches
    	{
    		get
    		{
    			if (_taxCaches == null)
    			{
    				_taxCaches = new TrackableCollection<TaxCache>();
    				_taxCaches.CollectionChanged += FixupTaxCaches;
    				_taxCaches.CollectionChanged += RaiseTaxCachesChanged;
    			}
    			return _taxCaches;
    		}
    		set
    		{
    			if (!ReferenceEquals(_taxCaches, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_taxCaches != null)
    				{
    					_taxCaches.CollectionChanged -= FixupTaxCaches;
    					_taxCaches.CollectionChanged -= RaiseTaxCachesChanged;
    				}
    				_taxCaches = value;
    				if (_taxCaches != null)
    				{
    					_taxCaches.CollectionChanged += FixupTaxCaches;
    					_taxCaches.CollectionChanged += RaiseTaxCachesChanged;
    				}
    				OnNavigationPropertyChanged("TaxCaches");
    			}
    		}
    	}
    	private TrackableCollection<TaxCache> _taxCaches;
    	partial void TaxCachesChanged();
    	private void RaiseTaxCachesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TaxCachesChanged();
    	}
    
    	public TrackableCollection<Address> Addresses
    	{
    		get
    		{
    			if (_addresses == null)
    			{
    				_addresses = new TrackableCollection<Address>();
    				_addresses.CollectionChanged += FixupAddresses;
    				_addresses.CollectionChanged += RaiseAddressesChanged;
    			}
    			return _addresses;
    		}
    		set
    		{
    			if (!ReferenceEquals(_addresses, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged -= FixupAddresses;
    					_addresses.CollectionChanged -= RaiseAddressesChanged;
    				}
    				_addresses = value;
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged += FixupAddresses;
    					_addresses.CollectionChanged += RaiseAddressesChanged;
    				}
    				OnNavigationPropertyChanged("Addresses");
    			}
    		}
    	}
    	private TrackableCollection<Address> _addresses;
    	partial void AddressesChanged();
    	private void RaiseAddressesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AddressesChanged();
    	}
    
    	public TrackableCollection<LogisticsProvider> LogisticsProviders
    	{
    		get
    		{
    			if (_logisticsProviders == null)
    			{
    				_logisticsProviders = new TrackableCollection<LogisticsProvider>();
    				_logisticsProviders.CollectionChanged += FixupLogisticsProviders;
    				_logisticsProviders.CollectionChanged += RaiseLogisticsProvidersChanged;
    			}
    			return _logisticsProviders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_logisticsProviders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_logisticsProviders != null)
    				{
    					_logisticsProviders.CollectionChanged -= FixupLogisticsProviders;
    					_logisticsProviders.CollectionChanged -= RaiseLogisticsProvidersChanged;
    				}
    				_logisticsProviders = value;
    				if (_logisticsProviders != null)
    				{
    					_logisticsProviders.CollectionChanged += FixupLogisticsProviders;
    					_logisticsProviders.CollectionChanged += RaiseLogisticsProvidersChanged;
    				}
    				OnNavigationPropertyChanged("LogisticsProviders");
    			}
    		}
    	}
    	private TrackableCollection<LogisticsProvider> _logisticsProviders;
    	partial void LogisticsProvidersChanged();
    	private void RaiseLogisticsProvidersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		LogisticsProvidersChanged();
    	}
    
    	public TrackableCollection<TaxCacheOverride> TaxCacheOverrides
    	{
    		get
    		{
    			if (_taxCacheOverrides == null)
    			{
    				_taxCacheOverrides = new TrackableCollection<TaxCacheOverride>();
    				_taxCacheOverrides.CollectionChanged += FixupTaxCacheOverrides;
    				_taxCacheOverrides.CollectionChanged += RaiseTaxCacheOverridesChanged;
    			}
    			return _taxCacheOverrides;
    		}
    		set
    		{
    			if (!ReferenceEquals(_taxCacheOverrides, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_taxCacheOverrides != null)
    				{
    					_taxCacheOverrides.CollectionChanged -= FixupTaxCacheOverrides;
    					_taxCacheOverrides.CollectionChanged -= RaiseTaxCacheOverridesChanged;
    				}
    				_taxCacheOverrides = value;
    				if (_taxCacheOverrides != null)
    				{
    					_taxCacheOverrides.CollectionChanged += FixupTaxCacheOverrides;
    					_taxCacheOverrides.CollectionChanged += RaiseTaxCacheOverridesChanged;
    				}
    				OnNavigationPropertyChanged("TaxCacheOverrides");
    			}
    		}
    	}
    	private TrackableCollection<TaxCacheOverride> _taxCacheOverrides;
    	partial void TaxCacheOverridesChanged();
    	private void RaiseTaxCacheOverridesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TaxCacheOverridesChanged();
    	}
    
    	public TrackableCollection<PostalCodeLookup> PostalCodeLookups
    	{
    		get
    		{
    			if (_postalCodeLookups == null)
    			{
    				_postalCodeLookups = new TrackableCollection<PostalCodeLookup>();
    				_postalCodeLookups.CollectionChanged += FixupPostalCodeLookups;
    				_postalCodeLookups.CollectionChanged += RaisePostalCodeLookupsChanged;
    			}
    			return _postalCodeLookups;
    		}
    		set
    		{
    			if (!ReferenceEquals(_postalCodeLookups, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_postalCodeLookups != null)
    				{
    					_postalCodeLookups.CollectionChanged -= FixupPostalCodeLookups;
    					_postalCodeLookups.CollectionChanged -= RaisePostalCodeLookupsChanged;
    				}
    				_postalCodeLookups = value;
    				if (_postalCodeLookups != null)
    				{
    					_postalCodeLookups.CollectionChanged += FixupPostalCodeLookups;
    					_postalCodeLookups.CollectionChanged += RaisePostalCodeLookupsChanged;
    				}
    				OnNavigationPropertyChanged("PostalCodeLookups");
    			}
    		}
    	}
    	private TrackableCollection<PostalCodeLookup> _postalCodeLookups;
    	partial void PostalCodeLookupsChanged();
    	private void RaisePostalCodeLookupsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PostalCodeLookupsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderPayments != null)
    		{
    			_orderPayments.CollectionChanged -= FixupOrderPayments;
    			_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    			_orderPayments.CollectionChanged += FixupOrderPayments;
    			_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    		}
    		if (_shippingOrderTypes != null)
    		{
    			_shippingOrderTypes.CollectionChanged -= FixupShippingOrderTypes;
    			_shippingOrderTypes.CollectionChanged -= RaiseShippingOrderTypesChanged;
    			_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    			_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    		}
    		if (_stateProvinces != null)
    		{
    			_stateProvinces.CollectionChanged -= FixupStateProvinces;
    			_stateProvinces.CollectionChanged -= RaiseStateProvincesChanged;
    			_stateProvinces.CollectionChanged += FixupStateProvinces;
    			_stateProvinces.CollectionChanged += RaiseStateProvincesChanged;
    		}
    		if (_paymentOrderTypes != null)
    		{
    			_paymentOrderTypes.CollectionChanged -= FixupPaymentOrderTypes;
    			_paymentOrderTypes.CollectionChanged -= RaisePaymentOrderTypesChanged;
    			_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    			_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    		}
    		if (_orderShipments != null)
    		{
    			_orderShipments.CollectionChanged -= FixupOrderShipments;
    			_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    			_orderShipments.CollectionChanged += FixupOrderShipments;
    			_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    		}
    		if (_creditCardTypes != null)
    		{
    			_creditCardTypes.CollectionChanged -= FixupCreditCardTypes;
    			_creditCardTypes.CollectionChanged -= RaiseCreditCardTypesChanged;
    			_creditCardTypes.CollectionChanged += FixupCreditCardTypes;
    			_creditCardTypes.CollectionChanged += RaiseCreditCardTypesChanged;
    		}
    		if (_languages != null)
    		{
    			_languages.CollectionChanged -= FixupLanguages;
    			_languages.CollectionChanged -= RaiseLanguagesChanged;
    			_languages.CollectionChanged += FixupLanguages;
    			_languages.CollectionChanged += RaiseLanguagesChanged;
    		}
    		if (_currencies != null)
    		{
    			_currencies.CollectionChanged -= FixupCurrencies;
    			_currencies.CollectionChanged -= RaiseCurrenciesChanged;
    			_currencies.CollectionChanged += FixupCurrencies;
    			_currencies.CollectionChanged += RaiseCurrenciesChanged;
    		}
    		if (_taxCaches != null)
    		{
    			_taxCaches.CollectionChanged -= FixupTaxCaches;
    			_taxCaches.CollectionChanged -= RaiseTaxCachesChanged;
    			_taxCaches.CollectionChanged += FixupTaxCaches;
    			_taxCaches.CollectionChanged += RaiseTaxCachesChanged;
    		}
    		if (_addresses != null)
    		{
    			_addresses.CollectionChanged -= FixupAddresses;
    			_addresses.CollectionChanged -= RaiseAddressesChanged;
    			_addresses.CollectionChanged += FixupAddresses;
    			_addresses.CollectionChanged += RaiseAddressesChanged;
    		}
    		if (_logisticsProviders != null)
    		{
    			_logisticsProviders.CollectionChanged -= FixupLogisticsProviders;
    			_logisticsProviders.CollectionChanged -= RaiseLogisticsProvidersChanged;
    			_logisticsProviders.CollectionChanged += FixupLogisticsProviders;
    			_logisticsProviders.CollectionChanged += RaiseLogisticsProvidersChanged;
    		}
    		if (_taxCacheOverrides != null)
    		{
    			_taxCacheOverrides.CollectionChanged -= FixupTaxCacheOverrides;
    			_taxCacheOverrides.CollectionChanged -= RaiseTaxCacheOverridesChanged;
    			_taxCacheOverrides.CollectionChanged += FixupTaxCacheOverrides;
    			_taxCacheOverrides.CollectionChanged += RaiseTaxCacheOverridesChanged;
    		}
    		if (_postalCodeLookups != null)
    		{
    			_postalCodeLookups.CollectionChanged -= FixupPostalCodeLookups;
    			_postalCodeLookups.CollectionChanged -= RaisePostalCodeLookupsChanged;
    			_postalCodeLookups.CollectionChanged += FixupPostalCodeLookups;
    			_postalCodeLookups.CollectionChanged += RaisePostalCodeLookupsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Currency = null;
    		Market = null;
    		OrderPayments.Clear();
    		ShippingOrderTypes.Clear();
    		StateProvinces.Clear();
    		Language = null;
    		PaymentOrderTypes.Clear();
    		OrderShipments.Clear();
    		CreditCardTypes.Clear();
    		Languages.Clear();
    		Currencies.Clear();
    		TaxCaches.Clear();
    		Addresses.Clear();
    		LogisticsProviders.Clear();
    		TaxCacheOverrides.Clear();
    		PostalCodeLookups.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCurrency(Currency previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Countries.Contains(this))
    		{
    			previousValue.Countries.Remove(this);
    		}
    
    		if (Currency != null)
    		{
    			if (!Currency.Countries.Contains(this))
    			{
    				Currency.Countries.Add(this);
    			}
    
    			CurrencyID = Currency.CurrencyID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Currency")
    				&& (ChangeTracker.OriginalValues["Currency"] == Currency))
    			{
    				ChangeTracker.OriginalValues.Remove("Currency");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Currency", previousValue);
    			}
    			if (Currency != null && !Currency.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Currency.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMarket(Market previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Countries.Contains(this))
    		{
    			previousValue.Countries.Remove(this);
    		}
    
    		if (Market != null)
    		{
    			if (!Market.Countries.Contains(this))
    			{
    				Market.Countries.Add(this);
    			}
    
    			MarketID = Market.MarketID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Market")
    				&& (ChangeTracker.OriginalValues["Market"] == Market))
    			{
    				ChangeTracker.OriginalValues.Remove("Market");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Market", previousValue);
    			}
    			if (Market != null && !Market.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Market.StartTracking();
    			}
    		}
    	}
    
    	private void FixupLanguage(Language previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Countries.Contains(this))
    		{
    			previousValue.Countries.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.Countries.Contains(this))
    			{
    				Language.Countries.Add(this);
    			}
    
    			DefaultLanguageID = Language.LanguageID;
    		}
    		else if (!skipKeys)
    		{
    			DefaultLanguageID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderPayments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPayment item in e.NewItems)
    			{
    				item.BillingCountry = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPayment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.BillingCountry, this))
    				{
    					item.BillingCountry = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupShippingOrderTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ShippingOrderType item in e.NewItems)
    			{
    				item.Country = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ShippingOrderTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ShippingOrderType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Country, this))
    				{
    					item.Country = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ShippingOrderTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupStateProvinces(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (StateProvince item in e.NewItems)
    			{
    				item.Country = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("StateProvinces", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (StateProvince item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Country, this))
    				{
    					item.Country = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("StateProvinces", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPaymentOrderTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PaymentOrderType item in e.NewItems)
    			{
    				item.Country = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PaymentOrderTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PaymentOrderType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Country, this))
    				{
    					item.Country = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PaymentOrderTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderShipments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderShipment item in e.NewItems)
    			{
    				item.Country = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderShipment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Country, this))
    				{
    					item.Country = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCreditCardTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CreditCardType item in e.NewItems)
    			{
    				if (!item.Countries.Contains(this))
    				{
    					item.Countries.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CreditCardTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CreditCardType item in e.OldItems)
    			{
    				if (item.Countries.Contains(this))
    				{
    					item.Countries.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CreditCardTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupLanguages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Language item in e.NewItems)
    			{
    				if (!item.Countries1.Contains(this))
    				{
    					item.Countries1.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Languages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Language item in e.OldItems)
    			{
    				if (item.Countries1.Contains(this))
    				{
    					item.Countries1.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Languages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCurrencies(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Currency item in e.NewItems)
    			{
    				if (!item.Countries1.Contains(this))
    				{
    					item.Countries1.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Currencies", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Currency item in e.OldItems)
    			{
    				if (item.Countries1.Contains(this))
    				{
    					item.Countries1.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Currencies", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTaxCaches(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (TaxCache item in e.NewItems)
    			{
    				item.Country = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("TaxCaches", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (TaxCache item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Country, this))
    				{
    					item.Country = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("TaxCaches", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAddresses(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Address item in e.NewItems)
    			{
    				item.Country = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Addresses", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Address item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Country, this))
    				{
    					item.Country = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Addresses", item);
    				}
    			}
    		}
    	}
    
    	private void FixupLogisticsProviders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (LogisticsProvider item in e.NewItems)
    			{
    				if (!item.Countries.Contains(this))
    				{
    					item.Countries.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("LogisticsProviders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (LogisticsProvider item in e.OldItems)
    			{
    				if (item.Countries.Contains(this))
    				{
    					item.Countries.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("LogisticsProviders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTaxCacheOverrides(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (TaxCacheOverride item in e.NewItems)
    			{
    				item.Country = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("TaxCacheOverrides", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (TaxCacheOverride item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Country, this))
    				{
    					item.Country = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("TaxCacheOverrides", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPostalCodeLookups(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PostalCodeLookup item in e.NewItems)
    			{
    				item.Country = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PostalCodeLookups", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PostalCodeLookup item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Country, this))
    				{
    					item.Country = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PostalCodeLookups", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

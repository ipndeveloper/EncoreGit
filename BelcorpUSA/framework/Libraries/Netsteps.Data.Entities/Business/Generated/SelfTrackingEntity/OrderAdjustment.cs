//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Order))]
    [KnownType(typeof(OrderAdjustmentOrderLineModification))]
    [KnownType(typeof(OrderAdjustmentOrderModification))]
    [Serializable]
    public partial class OrderAdjustment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderAdjustmentIDChanged();
    	public int OrderAdjustmentID
    	{
    		get { return _orderAdjustmentID; }
    		set
    		{
    			if (_orderAdjustmentID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderAdjustmentID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderAdjustmentID = value;
    				OrderAdjustmentIDChanged();
    				OnPropertyChanged("OrderAdjustmentID");
    			}
    		}
    	}
    	private int _orderAdjustmentID;
    	partial void OrderIDChanged();
    	public int OrderID
    	{
    		get { return _orderID; }
    		set
    		{
    			if (_orderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderID", _orderID);
    				if (!IsDeserializing)
    				{
    					if (Order != null && Order.OrderID != value)
    					{
    						Order = null;
    					}
    				}
    				_orderID = value;
    				OrderIDChanged();
    				OnPropertyChanged("OrderID");
    			}
    		}
    	}
    	private int _orderID;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ExtensionProviderKeyChanged();
    	public string ExtensionProviderKey
    	{
    		get { return _extensionProviderKey; }
    		set
    		{
    			if (_extensionProviderKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExtensionProviderKey", _extensionProviderKey);
    				_extensionProviderKey = value;
    				ExtensionProviderKeyChanged();
    				OnPropertyChanged("ExtensionProviderKey");
    			}
    		}
    	}
    	private string _extensionProviderKey;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;

        #endregion
        #region Navigation Properties
    
    	public Order Order
    	{
    		get { return _order; }
    		set
    		{
    			if (!ReferenceEquals(_order, value))
    			{
    				var previousValue = _order;
    				_order = value;
    				FixupOrder(previousValue);
    				OnNavigationPropertyChanged("Order");
    			}
    		}
    	}
    	private Order _order;
    
    	public TrackableCollection<OrderAdjustmentOrderLineModification> OrderAdjustmentOrderLineModifications
    	{
    		get
    		{
    			if (_orderAdjustmentOrderLineModifications == null)
    			{
    				_orderAdjustmentOrderLineModifications = new TrackableCollection<OrderAdjustmentOrderLineModification>();
    				_orderAdjustmentOrderLineModifications.CollectionChanged += FixupOrderAdjustmentOrderLineModifications;
    				_orderAdjustmentOrderLineModifications.CollectionChanged += RaiseOrderAdjustmentOrderLineModificationsChanged;
    			}
    			return _orderAdjustmentOrderLineModifications;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderAdjustmentOrderLineModifications, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderAdjustmentOrderLineModifications != null)
    				{
    					_orderAdjustmentOrderLineModifications.CollectionChanged -= FixupOrderAdjustmentOrderLineModifications;
    					_orderAdjustmentOrderLineModifications.CollectionChanged -= RaiseOrderAdjustmentOrderLineModificationsChanged;
    				}
    				_orderAdjustmentOrderLineModifications = value;
    				if (_orderAdjustmentOrderLineModifications != null)
    				{
    					_orderAdjustmentOrderLineModifications.CollectionChanged += FixupOrderAdjustmentOrderLineModifications;
    					_orderAdjustmentOrderLineModifications.CollectionChanged += RaiseOrderAdjustmentOrderLineModificationsChanged;
    				}
    				OnNavigationPropertyChanged("OrderAdjustmentOrderLineModifications");
    			}
    		}
    	}
    	private TrackableCollection<OrderAdjustmentOrderLineModification> _orderAdjustmentOrderLineModifications;
    	partial void OrderAdjustmentOrderLineModificationsChanged();
    	private void RaiseOrderAdjustmentOrderLineModificationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderAdjustmentOrderLineModificationsChanged();
    	}
    
    	public TrackableCollection<OrderAdjustmentOrderModification> OrderAdjustmentOrderModifications
    	{
    		get
    		{
    			if (_orderAdjustmentOrderModifications == null)
    			{
    				_orderAdjustmentOrderModifications = new TrackableCollection<OrderAdjustmentOrderModification>();
    				_orderAdjustmentOrderModifications.CollectionChanged += FixupOrderAdjustmentOrderModifications;
    				_orderAdjustmentOrderModifications.CollectionChanged += RaiseOrderAdjustmentOrderModificationsChanged;
    			}
    			return _orderAdjustmentOrderModifications;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderAdjustmentOrderModifications, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderAdjustmentOrderModifications != null)
    				{
    					_orderAdjustmentOrderModifications.CollectionChanged -= FixupOrderAdjustmentOrderModifications;
    					_orderAdjustmentOrderModifications.CollectionChanged -= RaiseOrderAdjustmentOrderModificationsChanged;
    				}
    				_orderAdjustmentOrderModifications = value;
    				if (_orderAdjustmentOrderModifications != null)
    				{
    					_orderAdjustmentOrderModifications.CollectionChanged += FixupOrderAdjustmentOrderModifications;
    					_orderAdjustmentOrderModifications.CollectionChanged += RaiseOrderAdjustmentOrderModificationsChanged;
    				}
    				OnNavigationPropertyChanged("OrderAdjustmentOrderModifications");
    			}
    		}
    	}
    	private TrackableCollection<OrderAdjustmentOrderModification> _orderAdjustmentOrderModifications;
    	partial void OrderAdjustmentOrderModificationsChanged();
    	private void RaiseOrderAdjustmentOrderModificationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderAdjustmentOrderModificationsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderAdjustmentOrderLineModifications != null)
    		{
    			_orderAdjustmentOrderLineModifications.CollectionChanged -= FixupOrderAdjustmentOrderLineModifications;
    			_orderAdjustmentOrderLineModifications.CollectionChanged -= RaiseOrderAdjustmentOrderLineModificationsChanged;
    			_orderAdjustmentOrderLineModifications.CollectionChanged += FixupOrderAdjustmentOrderLineModifications;
    			_orderAdjustmentOrderLineModifications.CollectionChanged += RaiseOrderAdjustmentOrderLineModificationsChanged;
    		}
    		if (_orderAdjustmentOrderModifications != null)
    		{
    			_orderAdjustmentOrderModifications.CollectionChanged -= FixupOrderAdjustmentOrderModifications;
    			_orderAdjustmentOrderModifications.CollectionChanged -= RaiseOrderAdjustmentOrderModificationsChanged;
    			_orderAdjustmentOrderModifications.CollectionChanged += FixupOrderAdjustmentOrderModifications;
    			_orderAdjustmentOrderModifications.CollectionChanged += RaiseOrderAdjustmentOrderModificationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Order = null;
    		OrderAdjustmentOrderLineModifications.Clear();
    		OrderAdjustmentOrderModifications.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrder(Order previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderAdjustments.Contains(this))
    		{
    			previousValue.OrderAdjustments.Remove(this);
    		}
    
    		if (Order != null)
    		{
    			if (!Order.OrderAdjustments.Contains(this))
    			{
    				Order.OrderAdjustments.Add(this);
    			}
    
    			OrderID = Order.OrderID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Order")
    				&& (ChangeTracker.OriginalValues["Order"] == Order))
    			{
    				ChangeTracker.OriginalValues.Remove("Order");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Order", previousValue);
    			}
    			if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Order.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderAdjustmentOrderLineModifications(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderAdjustmentOrderLineModification item in e.NewItems)
    			{
    				item.OrderAdjustment = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderAdjustmentOrderLineModifications", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderAdjustmentOrderLineModification item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderAdjustment, this))
    				{
    					item.OrderAdjustment = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderAdjustmentOrderLineModifications", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderAdjustmentOrderModifications(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderAdjustmentOrderModification item in e.NewItems)
    			{
    				item.OrderAdjustment = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderAdjustmentOrderModifications", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderAdjustmentOrderModification item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderAdjustment, this))
    				{
    					item.OrderAdjustment = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderAdjustmentOrderModifications", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

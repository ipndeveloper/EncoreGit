//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderPayment))]
    [KnownType(typeof(OrderShipment))]
    [KnownType(typeof(User))]
    [KnownType(typeof(OrderItem))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(OrderCustomerType))]
    [KnownType(typeof(OrderPaymentResult))]
    [KnownType(typeof(OrderAdjustmentOrderModification))]
    [KnownType(typeof(OrderTracking))]
    [Serializable]
    public partial class OrderCustomer: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderCustomerIDChanged();
    	public int OrderCustomerID
    	{
    		get { return _orderCustomerID; }
    		set
    		{
    			if (_orderCustomerID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderCustomerID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderCustomerID = value;
    				OrderCustomerIDChanged();
    				OnPropertyChanged("OrderCustomerID");
    			}
    		}
    	}
    	private int _orderCustomerID;
    	partial void OrderIDChanged();
    	public int OrderID
    	{
    		get { return _orderID; }
    		set
    		{
    			if (_orderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderID", _orderID);
    				if (!IsDeserializing)
    				{
    					if (Order != null && Order.OrderID != value)
    					{
    						Order = null;
    					}
    				}
    				_orderID = value;
    				OrderIDChanged();
    				OnPropertyChanged("OrderID");
    			}
    		}
    	}
    	private int _orderID;
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void TaxAmountTotalChanged();
    	public Nullable<decimal> TaxAmountTotal
    	{
    		get { return _taxAmountTotal; }
    		set
    		{
    			if (_taxAmountTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountTotal", _taxAmountTotal);
    				_taxAmountTotal = value;
    				TaxAmountTotalChanged();
    				OnPropertyChanged("TaxAmountTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountTotal;
    	partial void TaxAmountCityChanged();
    	public Nullable<decimal> TaxAmountCity
    	{
    		get { return _taxAmountCity; }
    		set
    		{
    			if (_taxAmountCity != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountCity", _taxAmountCity);
    				_taxAmountCity = value;
    				TaxAmountCityChanged();
    				OnPropertyChanged("TaxAmountCity");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountCity;
    	partial void TaxAmountStateChanged();
    	public Nullable<decimal> TaxAmountState
    	{
    		get { return _taxAmountState; }
    		set
    		{
    			if (_taxAmountState != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountState", _taxAmountState);
    				_taxAmountState = value;
    				TaxAmountStateChanged();
    				OnPropertyChanged("TaxAmountState");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountState;
    	partial void TaxAmountCountyChanged();
    	public Nullable<decimal> TaxAmountCounty
    	{
    		get { return _taxAmountCounty; }
    		set
    		{
    			if (_taxAmountCounty != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountCounty", _taxAmountCounty);
    				_taxAmountCounty = value;
    				TaxAmountCountyChanged();
    				OnPropertyChanged("TaxAmountCounty");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountCounty;
    	partial void TaxAmountDistrictChanged();
    	public Nullable<decimal> TaxAmountDistrict
    	{
    		get { return _taxAmountDistrict; }
    		set
    		{
    			if (_taxAmountDistrict != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountDistrict", _taxAmountDistrict);
    				_taxAmountDistrict = value;
    				TaxAmountDistrictChanged();
    				OnPropertyChanged("TaxAmountDistrict");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountDistrict;
    	partial void TaxableTotalChanged();
    	public Nullable<decimal> TaxableTotal
    	{
    		get { return _taxableTotal; }
    		set
    		{
    			if (_taxableTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxableTotal", _taxableTotal);
    				_taxableTotal = value;
    				TaxableTotalChanged();
    				OnPropertyChanged("TaxableTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _taxableTotal;
    	partial void IsTaxExemptChanged();
    	public Nullable<bool> IsTaxExempt
    	{
    		get { return _isTaxExempt; }
    		set
    		{
    			if (_isTaxExempt != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsTaxExempt", _isTaxExempt);
    				_isTaxExempt = value;
    				IsTaxExemptChanged();
    				OnPropertyChanged("IsTaxExempt");
    			}
    		}
    	}
    	private Nullable<bool> _isTaxExempt;
    	partial void DiscountAmountChanged();
    	public Nullable<decimal> DiscountAmount
    	{
    		get { return _discountAmount; }
    		set
    		{
    			if (_discountAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("DiscountAmount", _discountAmount);
    				_discountAmount = value;
    				DiscountAmountChanged();
    				OnPropertyChanged("DiscountAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _discountAmount;
    	partial void SubtotalChanged();
    	public Nullable<decimal> Subtotal
    	{
    		get { return _subtotal; }
    		set
    		{
    			if (_subtotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("Subtotal", _subtotal);
    				_subtotal = value;
    				SubtotalChanged();
    				OnPropertyChanged("Subtotal");
    			}
    		}
    	}
    	private Nullable<decimal> _subtotal;
    	partial void PaymentTotalChanged();
    	public Nullable<decimal> PaymentTotal
    	{
    		get { return _paymentTotal; }
    		set
    		{
    			if (_paymentTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("PaymentTotal", _paymentTotal);
    				_paymentTotal = value;
    				PaymentTotalChanged();
    				OnPropertyChanged("PaymentTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _paymentTotal;
    	partial void BalanceChanged();
    	public Nullable<decimal> Balance
    	{
    		get { return _balance; }
    		set
    		{
    			if (_balance != value)
    			{
    				ChangeTracker.RecordOriginalValue("Balance", _balance);
    				_balance = value;
    				BalanceChanged();
    				OnPropertyChanged("Balance");
    			}
    		}
    	}
    	private Nullable<decimal> _balance;
    	partial void TotalChanged();
    	public Nullable<decimal> Total
    	{
    		get { return _total; }
    		set
    		{
    			if (_total != value)
    			{
    				ChangeTracker.RecordOriginalValue("Total", _total);
    				_total = value;
    				TotalChanged();
    				OnPropertyChanged("Total");
    			}
    		}
    	}
    	private Nullable<decimal> _total;
    	partial void FutureBookingDateUTCChanged();
    	public Nullable<System.DateTime> FutureBookingDateUTC
    	{
    		get { return _futureBookingDateUTC; }
    		set
    		{
    			if (_futureBookingDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("FutureBookingDateUTC", _futureBookingDateUTC);
    				_futureBookingDateUTC = value;
    				FutureBookingDateUTCChanged();
    				OnPropertyChanged("FutureBookingDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _futureBookingDateUTC;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void TaxAmountOrderItemsChanged();
    	public Nullable<decimal> TaxAmountOrderItems
    	{
    		get { return _taxAmountOrderItems; }
    		set
    		{
    			if (_taxAmountOrderItems != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountOrderItems", _taxAmountOrderItems);
    				_taxAmountOrderItems = value;
    				TaxAmountOrderItemsChanged();
    				OnPropertyChanged("TaxAmountOrderItems");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountOrderItems;
    	partial void TaxAmountShippingChanged();
    	public Nullable<decimal> TaxAmountShipping
    	{
    		get { return _taxAmountShipping; }
    		set
    		{
    			if (_taxAmountShipping != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountShipping", _taxAmountShipping);
    				_taxAmountShipping = value;
    				TaxAmountShippingChanged();
    				OnPropertyChanged("TaxAmountShipping");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountShipping;
    	partial void TaxAmountChanged();
    	public Nullable<decimal> TaxAmount
    	{
    		get { return _taxAmount; }
    		set
    		{
    			if (_taxAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmount", _taxAmount);
    				_taxAmount = value;
    				TaxAmountChanged();
    				OnPropertyChanged("TaxAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmount;
    	partial void CommissionableTotalChanged();
    	public Nullable<decimal> CommissionableTotal
    	{
    		get { return _commissionableTotal; }
    		set
    		{
    			if (_commissionableTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("CommissionableTotal", _commissionableTotal);
    				_commissionableTotal = value;
    				CommissionableTotalChanged();
    				OnPropertyChanged("CommissionableTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _commissionableTotal;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void ShippingTotalChanged();
    	public Nullable<decimal> ShippingTotal
    	{
    		get { return _shippingTotal; }
    		set
    		{
    			if (_shippingTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingTotal", _shippingTotal);
    				_shippingTotal = value;
    				ShippingTotalChanged();
    				OnPropertyChanged("ShippingTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _shippingTotal;
    	partial void OrderCustomerTypeIDChanged();
    	public short OrderCustomerTypeID
    	{
    		get { return _orderCustomerTypeID; }
    		set
    		{
    			if (_orderCustomerTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderCustomerTypeID", _orderCustomerTypeID);
    				if (!IsDeserializing)
    				{
    					if (OrderCustomerType != null && OrderCustomerType.OrderCustomerTypeID != value)
    					{
    						OrderCustomerType = null;
    					}
    				}
    				_orderCustomerTypeID = value;
    				OrderCustomerTypeIDChanged();
    				OnPropertyChanged("OrderCustomerTypeID");
    			}
    		}
    	}
    	private short _orderCustomerTypeID;
    	partial void HandlingTotalChanged();
    	public Nullable<decimal> HandlingTotal
    	{
    		get { return _handlingTotal; }
    		set
    		{
    			if (_handlingTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("HandlingTotal", _handlingTotal);
    				_handlingTotal = value;
    				HandlingTotalChanged();
    				OnPropertyChanged("HandlingTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _handlingTotal;
    	partial void TaxAmountCountryChanged();
    	public Nullable<decimal> TaxAmountCountry
    	{
    		get { return _taxAmountCountry; }
    		set
    		{
    			if (_taxAmountCountry != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountCountry", _taxAmountCountry);
    				_taxAmountCountry = value;
    				TaxAmountCountryChanged();
    				OnPropertyChanged("TaxAmountCountry");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountCountry;
    	partial void IsBookingCreditChanged();
    	public bool IsBookingCredit
    	{
    		get { return _isBookingCredit; }
    		set
    		{
    			if (_isBookingCredit != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsBookingCredit", _isBookingCredit);
    				_isBookingCredit = value;
    				IsBookingCreditChanged();
    				OnPropertyChanged("IsBookingCredit");
    			}
    		}
    	}
    	private bool _isBookingCredit;
    	partial void TaxGeocodeChanged();
    	public string TaxGeocode
    	{
    		get { return _taxGeocode; }
    		set
    		{
    			if (_taxGeocode != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxGeocode", _taxGeocode);
    				_taxGeocode = value;
    				TaxGeocodeChanged();
    				OnPropertyChanged("TaxGeocode");
    			}
    		}
    	}
    	private string _taxGeocode;
    	partial void SalesTaxTransactionNumberChanged();
    	public string SalesTaxTransactionNumber
    	{
    		get { return _salesTaxTransactionNumber; }
    		set
    		{
    			if (_salesTaxTransactionNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("SalesTaxTransactionNumber", _salesTaxTransactionNumber);
    				_salesTaxTransactionNumber = value;
    				SalesTaxTransactionNumberChanged();
    				OnPropertyChanged("SalesTaxTransactionNumber");
    			}
    		}
    	}
    	private string _salesTaxTransactionNumber;
    	partial void UseTaxTransactionNumberChanged();
    	public string UseTaxTransactionNumber
    	{
    		get { return _useTaxTransactionNumber; }
    		set
    		{
    			if (_useTaxTransactionNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("UseTaxTransactionNumber", _useTaxTransactionNumber);
    				_useTaxTransactionNumber = value;
    				UseTaxTransactionNumberChanged();
    				OnPropertyChanged("UseTaxTransactionNumber");
    			}
    		}
    	}
    	private string _useTaxTransactionNumber;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;
    	partial void WarehouseIDChanged();
    	public int WarehouseID
    	{
    		get { return _warehouseID; }
    		set
    		{
    			if (_warehouseID != value)
    			{
    				ChangeTracker.RecordOriginalValue("WarehouseID", _warehouseID);
    				_warehouseID = value;
    				WarehouseIDChanged();
    				OnPropertyChanged("WarehouseID");
    			}
    		}
    	}
    	private int _warehouseID;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<OrderPayment> OrderPayments
    	{
    		get
    		{
    			if (_orderPayments == null)
    			{
    				_orderPayments = new TrackableCollection<OrderPayment>();
    				_orderPayments.CollectionChanged += FixupOrderPayments;
    				_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    			}
    			return _orderPayments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPayments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged -= FixupOrderPayments;
    					_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    				}
    				_orderPayments = value;
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged += FixupOrderPayments;
    					_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPayments");
    			}
    		}
    	}
    	private TrackableCollection<OrderPayment> _orderPayments;
    	partial void OrderPaymentsChanged();
    	private void RaiseOrderPaymentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentsChanged();
    	}
    
    	public TrackableCollection<OrderShipment> OrderShipments
    	{
    		get
    		{
    			if (_orderShipments == null)
    			{
    				_orderShipments = new TrackableCollection<OrderShipment>();
    				_orderShipments.CollectionChanged += FixupOrderShipments;
    				_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    			}
    			return _orderShipments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderShipments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged -= FixupOrderShipments;
    					_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    				}
    				_orderShipments = value;
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged += FixupOrderShipments;
    					_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderShipments");
    			}
    		}
    	}
    	private TrackableCollection<OrderShipment> _orderShipments;
    	partial void OrderShipmentsChanged();
    	private void RaiseOrderShipmentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderShipmentsChanged();
    	}
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<OrderItem> OrderItems
    	{
    		get
    		{
    			if (_orderItems == null)
    			{
    				_orderItems = new TrackableCollection<OrderItem>();
    				_orderItems.CollectionChanged += FixupOrderItems;
    				_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    			}
    			return _orderItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged -= FixupOrderItems;
    					_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    				}
    				_orderItems = value;
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged += FixupOrderItems;
    					_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    				}
    				OnNavigationPropertyChanged("OrderItems");
    			}
    		}
    	}
    	private TrackableCollection<OrderItem> _orderItems;
    	partial void OrderItemsChanged();
    	private void RaiseOrderItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemsChanged();
    	}
    
    	public Order Order
    	{
    		get { return _order; }
    		set
    		{
    			if (!ReferenceEquals(_order, value))
    			{
    				var previousValue = _order;
    				_order = value;
    				FixupOrder(previousValue);
    				OnNavigationPropertyChanged("Order");
    			}
    		}
    	}
    	private Order _order;
    
    	public OrderCustomerType OrderCustomerType
    	{
    		get { return _orderCustomerType; }
    		set
    		{
    			if (!ReferenceEquals(_orderCustomerType, value))
    			{
    				var previousValue = _orderCustomerType;
    				_orderCustomerType = value;
    				FixupOrderCustomerType(previousValue);
    				OnNavigationPropertyChanged("OrderCustomerType");
    			}
    		}
    	}
    	private OrderCustomerType _orderCustomerType;
    
    	public TrackableCollection<OrderPaymentResult> OrderPaymentResults
    	{
    		get
    		{
    			if (_orderPaymentResults == null)
    			{
    				_orderPaymentResults = new TrackableCollection<OrderPaymentResult>();
    				_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    				_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    			}
    			return _orderPaymentResults;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPaymentResults, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPaymentResults != null)
    				{
    					_orderPaymentResults.CollectionChanged -= FixupOrderPaymentResults;
    					_orderPaymentResults.CollectionChanged -= RaiseOrderPaymentResultsChanged;
    				}
    				_orderPaymentResults = value;
    				if (_orderPaymentResults != null)
    				{
    					_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    					_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPaymentResults");
    			}
    		}
    	}
    	private TrackableCollection<OrderPaymentResult> _orderPaymentResults;
    	partial void OrderPaymentResultsChanged();
    	private void RaiseOrderPaymentResultsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentResultsChanged();
    	}
    
    	public TrackableCollection<OrderAdjustmentOrderModification> OrderAdjustmentOrderModifications
    	{
    		get
    		{
    			if (_orderAdjustmentOrderModifications == null)
    			{
    				_orderAdjustmentOrderModifications = new TrackableCollection<OrderAdjustmentOrderModification>();
    				_orderAdjustmentOrderModifications.CollectionChanged += FixupOrderAdjustmentOrderModifications;
    				_orderAdjustmentOrderModifications.CollectionChanged += RaiseOrderAdjustmentOrderModificationsChanged;
    			}
    			return _orderAdjustmentOrderModifications;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderAdjustmentOrderModifications, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderAdjustmentOrderModifications != null)
    				{
    					_orderAdjustmentOrderModifications.CollectionChanged -= FixupOrderAdjustmentOrderModifications;
    					_orderAdjustmentOrderModifications.CollectionChanged -= RaiseOrderAdjustmentOrderModificationsChanged;
    				}
    				_orderAdjustmentOrderModifications = value;
    				if (_orderAdjustmentOrderModifications != null)
    				{
    					_orderAdjustmentOrderModifications.CollectionChanged += FixupOrderAdjustmentOrderModifications;
    					_orderAdjustmentOrderModifications.CollectionChanged += RaiseOrderAdjustmentOrderModificationsChanged;
    				}
    				OnNavigationPropertyChanged("OrderAdjustmentOrderModifications");
    			}
    		}
    	}
    	private TrackableCollection<OrderAdjustmentOrderModification> _orderAdjustmentOrderModifications;
    	partial void OrderAdjustmentOrderModificationsChanged();
    	private void RaiseOrderAdjustmentOrderModificationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderAdjustmentOrderModificationsChanged();
    	}
    
    	public TrackableCollection<OrderTracking> OrderTrackings
    	{
    		get
    		{
    			if (_orderTrackings == null)
    			{
    				_orderTrackings = new TrackableCollection<OrderTracking>();
    				_orderTrackings.CollectionChanged += FixupOrderTrackings;
    				_orderTrackings.CollectionChanged += RaiseOrderTrackingsChanged;
    			}
    			return _orderTrackings;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderTrackings, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderTrackings != null)
    				{
    					_orderTrackings.CollectionChanged -= FixupOrderTrackings;
    					_orderTrackings.CollectionChanged -= RaiseOrderTrackingsChanged;
    				}
    				_orderTrackings = value;
    				if (_orderTrackings != null)
    				{
    					_orderTrackings.CollectionChanged += FixupOrderTrackings;
    					_orderTrackings.CollectionChanged += RaiseOrderTrackingsChanged;
    				}
    				OnNavigationPropertyChanged("OrderTrackings");
    			}
    		}
    	}
    	private TrackableCollection<OrderTracking> _orderTrackings;
    	partial void OrderTrackingsChanged();
    	private void RaiseOrderTrackingsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderTrackingsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderPayments != null)
    		{
    			_orderPayments.CollectionChanged -= FixupOrderPayments;
    			_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    			_orderPayments.CollectionChanged += FixupOrderPayments;
    			_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    		}
    		if (_orderShipments != null)
    		{
    			_orderShipments.CollectionChanged -= FixupOrderShipments;
    			_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    			_orderShipments.CollectionChanged += FixupOrderShipments;
    			_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    		}
    		if (_orderItems != null)
    		{
    			_orderItems.CollectionChanged -= FixupOrderItems;
    			_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    			_orderItems.CollectionChanged += FixupOrderItems;
    			_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    		}
    		if (_orderPaymentResults != null)
    		{
    			_orderPaymentResults.CollectionChanged -= FixupOrderPaymentResults;
    			_orderPaymentResults.CollectionChanged -= RaiseOrderPaymentResultsChanged;
    			_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    			_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    		}
    		if (_orderAdjustmentOrderModifications != null)
    		{
    			_orderAdjustmentOrderModifications.CollectionChanged -= FixupOrderAdjustmentOrderModifications;
    			_orderAdjustmentOrderModifications.CollectionChanged -= RaiseOrderAdjustmentOrderModificationsChanged;
    			_orderAdjustmentOrderModifications.CollectionChanged += FixupOrderAdjustmentOrderModifications;
    			_orderAdjustmentOrderModifications.CollectionChanged += RaiseOrderAdjustmentOrderModificationsChanged;
    		}
    		if (_orderTrackings != null)
    		{
    			_orderTrackings.CollectionChanged -= FixupOrderTrackings;
    			_orderTrackings.CollectionChanged -= RaiseOrderTrackingsChanged;
    			_orderTrackings.CollectionChanged += FixupOrderTrackings;
    			_orderTrackings.CollectionChanged += RaiseOrderTrackingsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderPayments.Clear();
    		OrderShipments.Clear();
    		User = null;
    		OrderItems.Clear();
    		Order = null;
    		OrderCustomerType = null;
    		OrderPaymentResults.Clear();
    		OrderAdjustmentOrderModifications.Clear();
    		OrderTrackings.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderCustomers.Contains(this))
    		{
    			previousValue.OrderCustomers.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.OrderCustomers.Contains(this))
    			{
    				User.OrderCustomers.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrder(Order previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderCustomers.Contains(this))
    		{
    			previousValue.OrderCustomers.Remove(this);
    		}
    
    		if (Order != null)
    		{
    			if (!Order.OrderCustomers.Contains(this))
    			{
    				Order.OrderCustomers.Add(this);
    			}
    
    			OrderID = Order.OrderID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Order")
    				&& (ChangeTracker.OriginalValues["Order"] == Order))
    			{
    				ChangeTracker.OriginalValues.Remove("Order");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Order", previousValue);
    			}
    			if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Order.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderCustomerType(OrderCustomerType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderCustomers.Contains(this))
    		{
    			previousValue.OrderCustomers.Remove(this);
    		}
    
    		if (OrderCustomerType != null)
    		{
    			if (!OrderCustomerType.OrderCustomers.Contains(this))
    			{
    				OrderCustomerType.OrderCustomers.Add(this);
    			}
    
    			OrderCustomerTypeID = OrderCustomerType.OrderCustomerTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderCustomerType")
    				&& (ChangeTracker.OriginalValues["OrderCustomerType"] == OrderCustomerType))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderCustomerType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderCustomerType", previousValue);
    			}
    			if (OrderCustomerType != null && !OrderCustomerType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderCustomerType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderPayments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPayment item in e.NewItems)
    			{
    				item.OrderCustomer = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPayment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderCustomer, this))
    				{
    					item.OrderCustomer = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderShipments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderShipment item in e.NewItems)
    			{
    				item.OrderCustomer = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderShipment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderCustomer, this))
    				{
    					item.OrderCustomer = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItem item in e.NewItems)
    			{
    				item.OrderCustomer = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderCustomer, this))
    				{
    					item.OrderCustomer = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderPaymentResults(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPaymentResult item in e.NewItems)
    			{
    				item.OrderCustomer = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPaymentResults", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPaymentResult item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderCustomer, this))
    				{
    					item.OrderCustomer = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPaymentResults", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderAdjustmentOrderModifications(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderAdjustmentOrderModification item in e.NewItems)
    			{
    				item.OrderCustomer = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderAdjustmentOrderModifications", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderAdjustmentOrderModification item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderCustomer, this))
    				{
    					item.OrderCustomer = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderAdjustmentOrderModifications", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderTrackings(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderTracking item in e.NewItems)
    			{
    				item.OrderCustomer = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderTrackings", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderTracking item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderCustomer, this))
    				{
    					item.OrderCustomer = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderTrackings", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

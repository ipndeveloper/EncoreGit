//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Navigation))]
    [KnownType(typeof(User))]
    [KnownType(typeof(NavigationTranslation))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(Page))]
    [KnownType(typeof(NavigationType))]
    [Serializable]
    public partial class Navigation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void NavigationIDChanged();
    	public int NavigationID
    	{
    		get { return _navigationID; }
    		set
    		{
    			if (_navigationID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'NavigationID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_navigationID = value;
    				NavigationIDChanged();
    				OnPropertyChanged("NavigationID");
    			}
    		}
    	}
    	private int _navigationID;
    	partial void BaseNavigationIDChanged();
    	public Nullable<int> BaseNavigationID
    	{
    		get { return _baseNavigationID; }
    		set
    		{
    			if (_baseNavigationID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BaseNavigationID", _baseNavigationID);
    				if (!IsDeserializing)
    				{
    					if (BaseNavigation != null && BaseNavigation.NavigationID != value)
    					{
    						BaseNavigation = null;
    					}
    				}
    				_baseNavigationID = value;
    				BaseNavigationIDChanged();
    				OnPropertyChanged("BaseNavigationID");
    			}
    		}
    	}
    	private Nullable<int> _baseNavigationID;
    	partial void NavigationTypeIDChanged();
    	public Nullable<int> NavigationTypeID
    	{
    		get { return _navigationTypeID; }
    		set
    		{
    			if (_navigationTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("NavigationTypeID", _navigationTypeID);
    				if (!IsDeserializing)
    				{
    					if (NavigationType != null && NavigationType.NavigationTypeID != value)
    					{
    						NavigationType = null;
    					}
    				}
    				_navigationTypeID = value;
    				NavigationTypeIDChanged();
    				OnPropertyChanged("NavigationTypeID");
    			}
    		}
    	}
    	private Nullable<int> _navigationTypeID;
    	partial void SiteIDChanged();
    	public Nullable<int> SiteID
    	{
    		get { return _siteID; }
    		set
    		{
    			if (_siteID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteID", _siteID);
    				if (!IsDeserializing)
    				{
    					if (Site != null && Site.SiteID != value)
    					{
    						Site = null;
    					}
    				}
    				_siteID = value;
    				SiteIDChanged();
    				OnPropertyChanged("SiteID");
    			}
    		}
    	}
    	private Nullable<int> _siteID;
    	partial void LinkUrlChanged();
    	public string LinkUrl
    	{
    		get { return _linkUrl; }
    		set
    		{
    			if (_linkUrl != value)
    			{
    				ChangeTracker.RecordOriginalValue("LinkUrl", _linkUrl);
    				_linkUrl = value;
    				LinkUrlChanged();
    				OnPropertyChanged("LinkUrl");
    			}
    		}
    	}
    	private string _linkUrl;
    	partial void PageIDChanged();
    	public Nullable<int> PageID
    	{
    		get { return _pageID; }
    		set
    		{
    			if (_pageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PageID", _pageID);
    				if (!IsDeserializing)
    				{
    					if (Page != null && Page.PageID != value)
    					{
    						Page = null;
    					}
    				}
    				_pageID = value;
    				PageIDChanged();
    				OnPropertyChanged("PageID");
    			}
    		}
    	}
    	private Nullable<int> _pageID;
    	partial void StartDateUTCChanged();
    	public Nullable<System.DateTime> StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void ParentIDChanged();
    	public Nullable<int> ParentID
    	{
    		get { return _parentID; }
    		set
    		{
    			if (_parentID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParentID", _parentID);
    				if (!IsDeserializing)
    				{
    					if (ParentNavigation != null && ParentNavigation.NavigationID != value)
    					{
    						ParentNavigation = null;
    					}
    				}
    				_parentID = value;
    				ParentIDChanged();
    				OnPropertyChanged("ParentID");
    			}
    		}
    	}
    	private Nullable<int> _parentID;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;
    	partial void MinChildrenChanged();
    	public Nullable<int> MinChildren
    	{
    		get { return _minChildren; }
    		set
    		{
    			if (_minChildren != value)
    			{
    				ChangeTracker.RecordOriginalValue("MinChildren", _minChildren);
    				_minChildren = value;
    				MinChildrenChanged();
    				OnPropertyChanged("MinChildren");
    			}
    		}
    	}
    	private Nullable<int> _minChildren;
    	partial void MaxChildrenChanged();
    	public Nullable<int> MaxChildren
    	{
    		get { return _maxChildren; }
    		set
    		{
    			if (_maxChildren != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaxChildren", _maxChildren);
    				_maxChildren = value;
    				MaxChildrenChanged();
    				OnPropertyChanged("MaxChildren");
    			}
    		}
    	}
    	private Nullable<int> _maxChildren;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void IsDeletableChanged();
    	public Nullable<bool> IsDeletable
    	{
    		get { return _isDeletable; }
    		set
    		{
    			if (_isDeletable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsDeletable", _isDeletable);
    				_isDeletable = value;
    				IsDeletableChanged();
    				OnPropertyChanged("IsDeletable");
    			}
    		}
    	}
    	private Nullable<bool> _isDeletable;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void IsDropDownChanged();
    	public bool IsDropDown
    	{
    		get { return _isDropDown; }
    		set
    		{
    			if (_isDropDown != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsDropDown", _isDropDown);
    				_isDropDown = value;
    				IsDropDownChanged();
    				OnPropertyChanged("IsDropDown");
    			}
    		}
    	}
    	private bool _isDropDown;
    	partial void IsSecondaryNavigationChanged();
    	public bool IsSecondaryNavigation
    	{
    		get { return _isSecondaryNavigation; }
    		set
    		{
    			if (_isSecondaryNavigation != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsSecondaryNavigation", _isSecondaryNavigation);
    				_isSecondaryNavigation = value;
    				IsSecondaryNavigationChanged();
    				OnPropertyChanged("IsSecondaryNavigation");
    			}
    		}
    	}
    	private bool _isSecondaryNavigation;
    	partial void IsChildNavTreeChanged();
    	public bool IsChildNavTree
    	{
    		get { return _isChildNavTree; }
    		set
    		{
    			if (_isChildNavTree != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsChildNavTree", _isChildNavTree);
    				_isChildNavTree = value;
    				IsChildNavTreeChanged();
    				OnPropertyChanged("IsChildNavTree");
    			}
    		}
    	}
    	private bool _isChildNavTree;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<Navigation> BaseChildrenNavigations
    	{
    		get
    		{
    			if (_baseChildrenNavigations == null)
    			{
    				_baseChildrenNavigations = new TrackableCollection<Navigation>();
    				_baseChildrenNavigations.CollectionChanged += FixupBaseChildrenNavigations;
    				_baseChildrenNavigations.CollectionChanged += RaiseBaseChildrenNavigationsChanged;
    			}
    			return _baseChildrenNavigations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_baseChildrenNavigations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_baseChildrenNavigations != null)
    				{
    					_baseChildrenNavigations.CollectionChanged -= FixupBaseChildrenNavigations;
    					_baseChildrenNavigations.CollectionChanged -= RaiseBaseChildrenNavigationsChanged;
    				}
    				_baseChildrenNavigations = value;
    				if (_baseChildrenNavigations != null)
    				{
    					_baseChildrenNavigations.CollectionChanged += FixupBaseChildrenNavigations;
    					_baseChildrenNavigations.CollectionChanged += RaiseBaseChildrenNavigationsChanged;
    				}
    				OnNavigationPropertyChanged("BaseChildrenNavigations");
    			}
    		}
    	}
    	private TrackableCollection<Navigation> _baseChildrenNavigations;
    	partial void BaseChildrenNavigationsChanged();
    	private void RaiseBaseChildrenNavigationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		BaseChildrenNavigationsChanged();
    	}
    
    	public Navigation BaseNavigation
    	{
    		get { return _baseNavigation; }
    		set
    		{
    			if (!ReferenceEquals(_baseNavigation, value))
    			{
    				var previousValue = _baseNavigation;
    				_baseNavigation = value;
    				FixupBaseNavigation(previousValue);
    				OnNavigationPropertyChanged("BaseNavigation");
    			}
    		}
    	}
    	private Navigation _baseNavigation;
    
    	public TrackableCollection<Navigation> ChildNavigations
    	{
    		get
    		{
    			if (_childNavigations == null)
    			{
    				_childNavigations = new TrackableCollection<Navigation>();
    				_childNavigations.CollectionChanged += FixupChildNavigations;
    				_childNavigations.CollectionChanged += RaiseChildNavigationsChanged;
    			}
    			return _childNavigations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_childNavigations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_childNavigations != null)
    				{
    					_childNavigations.CollectionChanged -= FixupChildNavigations;
    					_childNavigations.CollectionChanged -= RaiseChildNavigationsChanged;
    				}
    				_childNavigations = value;
    				if (_childNavigations != null)
    				{
    					_childNavigations.CollectionChanged += FixupChildNavigations;
    					_childNavigations.CollectionChanged += RaiseChildNavigationsChanged;
    				}
    				OnNavigationPropertyChanged("ChildNavigations");
    			}
    		}
    	}
    	private TrackableCollection<Navigation> _childNavigations;
    	partial void ChildNavigationsChanged();
    	private void RaiseChildNavigationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ChildNavigationsChanged();
    	}
    
    	public Navigation ParentNavigation
    	{
    		get { return _parentNavigation; }
    		set
    		{
    			if (!ReferenceEquals(_parentNavigation, value))
    			{
    				var previousValue = _parentNavigation;
    				_parentNavigation = value;
    				FixupParentNavigation(previousValue);
    				OnNavigationPropertyChanged("ParentNavigation");
    			}
    		}
    	}
    	private Navigation _parentNavigation;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<NavigationTranslation> Translations
    	{
    		get
    		{
    			if (_translations == null)
    			{
    				_translations = new TrackableCollection<NavigationTranslation>();
    				_translations.CollectionChanged += FixupTranslations;
    				_translations.CollectionChanged += RaiseTranslationsChanged;
    			}
    			return _translations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_translations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_translations != null)
    				{
    					_translations.CollectionChanged -= FixupTranslations;
    					_translations.CollectionChanged -= RaiseTranslationsChanged;
    				}
    				_translations = value;
    				if (_translations != null)
    				{
    					_translations.CollectionChanged += FixupTranslations;
    					_translations.CollectionChanged += RaiseTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("Translations");
    			}
    		}
    	}
    	private TrackableCollection<NavigationTranslation> _translations;
    	partial void TranslationsChanged();
    	private void RaiseTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TranslationsChanged();
    	}
    
    	public Site Site
    	{
    		get { return _site; }
    		set
    		{
    			if (!ReferenceEquals(_site, value))
    			{
    				var previousValue = _site;
    				_site = value;
    				FixupSite(previousValue);
    				OnNavigationPropertyChanged("Site");
    			}
    		}
    	}
    	private Site _site;
    
    	public Page Page
    	{
    		get { return _page; }
    		set
    		{
    			if (!ReferenceEquals(_page, value))
    			{
    				var previousValue = _page;
    				_page = value;
    				FixupPage(previousValue);
    				OnNavigationPropertyChanged("Page");
    			}
    		}
    	}
    	private Page _page;
    
    	public NavigationType NavigationType
    	{
    		get { return _navigationType; }
    		set
    		{
    			if (!ReferenceEquals(_navigationType, value))
    			{
    				var previousValue = _navigationType;
    				_navigationType = value;
    				FixupNavigationType(previousValue);
    				OnNavigationPropertyChanged("NavigationType");
    			}
    		}
    	}
    	private NavigationType _navigationType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_baseChildrenNavigations != null)
    		{
    			_baseChildrenNavigations.CollectionChanged -= FixupBaseChildrenNavigations;
    			_baseChildrenNavigations.CollectionChanged -= RaiseBaseChildrenNavigationsChanged;
    			_baseChildrenNavigations.CollectionChanged += FixupBaseChildrenNavigations;
    			_baseChildrenNavigations.CollectionChanged += RaiseBaseChildrenNavigationsChanged;
    		}
    		if (_childNavigations != null)
    		{
    			_childNavigations.CollectionChanged -= FixupChildNavigations;
    			_childNavigations.CollectionChanged -= RaiseChildNavigationsChanged;
    			_childNavigations.CollectionChanged += FixupChildNavigations;
    			_childNavigations.CollectionChanged += RaiseChildNavigationsChanged;
    		}
    		if (_translations != null)
    		{
    			_translations.CollectionChanged -= FixupTranslations;
    			_translations.CollectionChanged -= RaiseTranslationsChanged;
    			_translations.CollectionChanged += FixupTranslations;
    			_translations.CollectionChanged += RaiseTranslationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		BaseChildrenNavigations.Clear();
    		BaseNavigation = null;
    		ChildNavigations.Clear();
    		ParentNavigation = null;
    		User = null;
    		Translations.Clear();
    		Site = null;
    		Page = null;
    		NavigationType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupBaseNavigation(Navigation previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.BaseChildrenNavigations.Contains(this))
    		{
    			previousValue.BaseChildrenNavigations.Remove(this);
    		}
    
    		if (BaseNavigation != null)
    		{
    			if (!BaseNavigation.BaseChildrenNavigations.Contains(this))
    			{
    				BaseNavigation.BaseChildrenNavigations.Add(this);
    			}
    
    			BaseNavigationID = BaseNavigation.NavigationID;
    		}
    		else if (!skipKeys)
    		{
    			BaseNavigationID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("BaseNavigation")
    				&& (ChangeTracker.OriginalValues["BaseNavigation"] == BaseNavigation))
    			{
    				ChangeTracker.OriginalValues.Remove("BaseNavigation");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("BaseNavigation", previousValue);
    			}
    			if (BaseNavigation != null && !BaseNavigation.ChangeTracker.ChangeTrackingEnabled)
    			{
    				BaseNavigation.StartTracking();
    			}
    		}
    	}
    
    	private void FixupParentNavigation(Navigation previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ChildNavigations.Contains(this))
    		{
    			previousValue.ChildNavigations.Remove(this);
    		}
    
    		if (ParentNavigation != null)
    		{
    			if (!ParentNavigation.ChildNavigations.Contains(this))
    			{
    				ParentNavigation.ChildNavigations.Add(this);
    			}
    
    			ParentID = ParentNavigation.NavigationID;
    		}
    		else if (!skipKeys)
    		{
    			ParentID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ParentNavigation")
    				&& (ChangeTracker.OriginalValues["ParentNavigation"] == ParentNavigation))
    			{
    				ChangeTracker.OriginalValues.Remove("ParentNavigation");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ParentNavigation", previousValue);
    			}
    			if (ParentNavigation != null && !ParentNavigation.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ParentNavigation.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Navigations.Contains(this))
    		{
    			previousValue.Navigations.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Navigations.Contains(this))
    			{
    				User.Navigations.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSite(Site previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Navigations.Contains(this))
    		{
    			previousValue.Navigations.Remove(this);
    		}
    
    		if (Site != null)
    		{
    			if (!Site.Navigations.Contains(this))
    			{
    				Site.Navigations.Add(this);
    			}
    
    			SiteID = Site.SiteID;
    		}
    		else if (!skipKeys)
    		{
    			SiteID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Site")
    				&& (ChangeTracker.OriginalValues["Site"] == Site))
    			{
    				ChangeTracker.OriginalValues.Remove("Site");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Site", previousValue);
    			}
    			if (Site != null && !Site.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Site.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPage(Page previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Navigations.Contains(this))
    		{
    			previousValue.Navigations.Remove(this);
    		}
    
    		if (Page != null)
    		{
    			if (!Page.Navigations.Contains(this))
    			{
    				Page.Navigations.Add(this);
    			}
    
    			PageID = Page.PageID;
    		}
    		else if (!skipKeys)
    		{
    			PageID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Page")
    				&& (ChangeTracker.OriginalValues["Page"] == Page))
    			{
    				ChangeTracker.OriginalValues.Remove("Page");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Page", previousValue);
    			}
    			if (Page != null && !Page.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Page.StartTracking();
    			}
    		}
    	}
    
    	private void FixupNavigationType(NavigationType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Navigations.Contains(this))
    		{
    			previousValue.Navigations.Remove(this);
    		}
    
    		if (NavigationType != null)
    		{
    			if (!NavigationType.Navigations.Contains(this))
    			{
    				NavigationType.Navigations.Add(this);
    			}
    
    			NavigationTypeID = NavigationType.NavigationTypeID;
    		}
    		else if (!skipKeys)
    		{
    			NavigationTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("NavigationType")
    				&& (ChangeTracker.OriginalValues["NavigationType"] == NavigationType))
    			{
    				ChangeTracker.OriginalValues.Remove("NavigationType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("NavigationType", previousValue);
    			}
    			if (NavigationType != null && !NavigationType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				NavigationType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupBaseChildrenNavigations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Navigation item in e.NewItems)
    			{
    				item.BaseNavigation = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("BaseChildrenNavigations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Navigation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.BaseNavigation, this))
    				{
    					item.BaseNavigation = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("BaseChildrenNavigations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupChildNavigations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Navigation item in e.NewItems)
    			{
    				item.ParentNavigation = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ChildNavigations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Navigation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ParentNavigation, this))
    				{
    					item.ParentNavigation = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ChildNavigations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (NavigationTranslation item in e.NewItems)
    			{
    				item.Navigation = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Translations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (NavigationTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Navigation, this))
    				{
    					item.Navigation = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Translations", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductBase))]
    [KnownType(typeof(HtmlContent))]
    [Serializable]
    public partial class Testimonial: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void TestimonialIDChanged();
    	public int TestimonialID
    	{
    		get { return _testimonialID; }
    		set
    		{
    			if (_testimonialID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'TestimonialID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_testimonialID = value;
    				TestimonialIDChanged();
    				OnPropertyChanged("TestimonialID");
    			}
    		}
    	}
    	private int _testimonialID;
    	partial void HtmlContentIDChanged();
    	public Nullable<int> HtmlContentID
    	{
    		get { return _htmlContentID; }
    		set
    		{
    			if (_htmlContentID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContentID", _htmlContentID);
    				if (!IsDeserializing)
    				{
    					if (HtmlContent != null && HtmlContent.HtmlContentID != value)
    					{
    						HtmlContent = null;
    					}
    				}
    				_htmlContentID = value;
    				HtmlContentIDChanged();
    				OnPropertyChanged("HtmlContentID");
    			}
    		}
    	}
    	private Nullable<int> _htmlContentID;
    	partial void QuotedByChanged();
    	public string QuotedBy
    	{
    		get { return _quotedBy; }
    		set
    		{
    			if (_quotedBy != value)
    			{
    				ChangeTracker.RecordOriginalValue("QuotedBy", _quotedBy);
    				_quotedBy = value;
    				QuotedByChanged();
    				OnPropertyChanged("QuotedBy");
    			}
    		}
    	}
    	private string _quotedBy;
    	partial void DateQuotedUTCChanged();
    	public Nullable<System.DateTime> DateQuotedUTC
    	{
    		get { return _dateQuotedUTC; }
    		set
    		{
    			if (_dateQuotedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateQuotedUTC", _dateQuotedUTC);
    				_dateQuotedUTC = value;
    				DateQuotedUTCChanged();
    				OnPropertyChanged("DateQuotedUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateQuotedUTC;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<ProductBase> ProductBases
    	{
    		get
    		{
    			if (_productBases == null)
    			{
    				_productBases = new TrackableCollection<ProductBase>();
    				_productBases.CollectionChanged += FixupProductBases;
    				_productBases.CollectionChanged += RaiseProductBasesChanged;
    			}
    			return _productBases;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productBases, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productBases != null)
    				{
    					_productBases.CollectionChanged -= FixupProductBases;
    					_productBases.CollectionChanged -= RaiseProductBasesChanged;
    				}
    				_productBases = value;
    				if (_productBases != null)
    				{
    					_productBases.CollectionChanged += FixupProductBases;
    					_productBases.CollectionChanged += RaiseProductBasesChanged;
    				}
    				OnNavigationPropertyChanged("ProductBases");
    			}
    		}
    	}
    	private TrackableCollection<ProductBase> _productBases;
    	partial void ProductBasesChanged();
    	private void RaiseProductBasesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductBasesChanged();
    	}
    
    	public HtmlContent HtmlContent
    	{
    		get { return _htmlContent; }
    		set
    		{
    			if (!ReferenceEquals(_htmlContent, value))
    			{
    				var previousValue = _htmlContent;
    				_htmlContent = value;
    				FixupHtmlContent(previousValue);
    				OnNavigationPropertyChanged("HtmlContent");
    			}
    		}
    	}
    	private HtmlContent _htmlContent;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_productBases != null)
    		{
    			_productBases.CollectionChanged -= FixupProductBases;
    			_productBases.CollectionChanged -= RaiseProductBasesChanged;
    			_productBases.CollectionChanged += FixupProductBases;
    			_productBases.CollectionChanged += RaiseProductBasesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductBases.Clear();
    		HtmlContent = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHtmlContent(HtmlContent previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Testimonials.Contains(this))
    		{
    			previousValue.Testimonials.Remove(this);
    		}
    
    		if (HtmlContent != null)
    		{
    			if (!HtmlContent.Testimonials.Contains(this))
    			{
    				HtmlContent.Testimonials.Add(this);
    			}
    
    			HtmlContentID = HtmlContent.HtmlContentID;
    		}
    		else if (!skipKeys)
    		{
    			HtmlContentID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlContent")
    				&& (ChangeTracker.OriginalValues["HtmlContent"] == HtmlContent))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlContent");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContent", previousValue);
    			}
    			if (HtmlContent != null && !HtmlContent.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlContent.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductBases(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductBase item in e.NewItems)
    			{
    				if (!item.Testimonials.Contains(this))
    				{
    					item.Testimonials.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductBases", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductBase item in e.OldItems)
    			{
    				if (item.Testimonials.Contains(this))
    				{
    					item.Testimonials.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductBases", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

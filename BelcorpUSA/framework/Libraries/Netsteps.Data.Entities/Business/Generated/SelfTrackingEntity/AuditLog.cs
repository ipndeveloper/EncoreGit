//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [Serializable]
    public partial class AuditLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AuditLogIDChanged();
    	public long AuditLogID
    	{
    		get { return _auditLogID; }
    		set
    		{
    			if (_auditLogID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AuditLogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_auditLogID = value;
    				AuditLogIDChanged();
    				OnPropertyChanged("AuditLogID");
    			}
    		}
    	}
    	private long _auditLogID;
    	partial void AuditTableIDChanged();
    	public short AuditTableID
    	{
    		get { return _auditTableID; }
    		set
    		{
    			if (_auditTableID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AuditTableID", _auditTableID);
    				_auditTableID = value;
    				AuditTableIDChanged();
    				OnPropertyChanged("AuditTableID");
    			}
    		}
    	}
    	private short _auditTableID;
    	partial void AuditChangeTypeIDChanged();
    	public byte AuditChangeTypeID
    	{
    		get { return _auditChangeTypeID; }
    		set
    		{
    			if (_auditChangeTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AuditChangeTypeID", _auditChangeTypeID);
    				_auditChangeTypeID = value;
    				AuditChangeTypeIDChanged();
    				OnPropertyChanged("AuditChangeTypeID");
    			}
    		}
    	}
    	private byte _auditChangeTypeID;
    	partial void AuditMachineNameIDChanged();
    	public short AuditMachineNameID
    	{
    		get { return _auditMachineNameID; }
    		set
    		{
    			if (_auditMachineNameID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AuditMachineNameID", _auditMachineNameID);
    				_auditMachineNameID = value;
    				AuditMachineNameIDChanged();
    				OnPropertyChanged("AuditMachineNameID");
    			}
    		}
    	}
    	private short _auditMachineNameID;
    	partial void AuditSqlUserNameIDChanged();
    	public short AuditSqlUserNameID
    	{
    		get { return _auditSqlUserNameID; }
    		set
    		{
    			if (_auditSqlUserNameID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AuditSqlUserNameID", _auditSqlUserNameID);
    				_auditSqlUserNameID = value;
    				AuditSqlUserNameIDChanged();
    				OnPropertyChanged("AuditSqlUserNameID");
    			}
    		}
    	}
    	private short _auditSqlUserNameID;
    	partial void AuditTableColumnIDChanged();
    	public short AuditTableColumnID
    	{
    		get { return _auditTableColumnID; }
    		set
    		{
    			if (_auditTableColumnID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AuditTableColumnID", _auditTableColumnID);
    				_auditTableColumnID = value;
    				AuditTableColumnIDChanged();
    				OnPropertyChanged("AuditTableColumnID");
    			}
    		}
    	}
    	private short _auditTableColumnID;
    	partial void ApplicationIDChanged();
    	public short ApplicationID
    	{
    		get { return _applicationID; }
    		set
    		{
    			if (_applicationID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ApplicationID", _applicationID);
    				_applicationID = value;
    				ApplicationIDChanged();
    				OnPropertyChanged("ApplicationID");
    			}
    		}
    	}
    	private short _applicationID;
    	partial void UserIDChanged();
    	public Nullable<int> UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserID", _userID);
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private Nullable<int> _userID;
    	partial void PKChanged();
    	public int PK
    	{
    		get { return _pK; }
    		set
    		{
    			if (_pK != value)
    			{
    				ChangeTracker.RecordOriginalValue("PK", _pK);
    				_pK = value;
    				PKChanged();
    				OnPropertyChanged("PK");
    			}
    		}
    	}
    	private int _pK;
    	partial void PKsChanged();
    	public string PKs
    	{
    		get { return _pKs; }
    		set
    		{
    			if (_pKs != value)
    			{
    				ChangeTracker.RecordOriginalValue("PKs", _pKs);
    				_pKs = value;
    				PKsChanged();
    				OnPropertyChanged("PKs");
    			}
    		}
    	}
    	private string _pKs;
    	partial void OldValueChanged();
    	public string OldValue
    	{
    		get { return _oldValue; }
    		set
    		{
    			if (_oldValue != value)
    			{
    				ChangeTracker.RecordOriginalValue("OldValue", _oldValue);
    				_oldValue = value;
    				OldValueChanged();
    				OnPropertyChanged("OldValue");
    			}
    		}
    	}
    	private string _oldValue;
    	partial void NewValueChanged();
    	public string NewValue
    	{
    		get { return _newValue; }
    		set
    		{
    			if (_newValue != value)
    			{
    				ChangeTracker.RecordOriginalValue("NewValue", _newValue);
    				_newValue = value;
    				NewValueChanged();
    				OnPropertyChanged("NewValue");
    			}
    		}
    	}
    	private string _newValue;
    	partial void DateChangedChanged();
    	public System.DateTime DateChanged
    	{
    		get { return _dateChanged; }
    		set
    		{
    			if (_dateChanged != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateChanged", _dateChanged);
    				_dateChanged = value;
    				DateChangedChanged();
    				OnPropertyChanged("DateChanged");
    			}
    		}
    	}
    	private System.DateTime _dateChanged;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(CategoryTranslation))]
    [KnownType(typeof(HtmlContentStatus))]
    [KnownType(typeof(Language))]
    [KnownType(typeof(HtmlContentHistory))]
    [KnownType(typeof(HtmlContentWorkflow))]
    [KnownType(typeof(HtmlElement))]
    [KnownType(typeof(HtmlSectionChoice))]
    [KnownType(typeof(HtmlSectionContent))]
    [KnownType(typeof(Testimonial))]
    [KnownType(typeof(User))]
    [Serializable]
    public partial class HtmlContent: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void HtmlContentIDChanged();
    	public int HtmlContentID
    	{
    		get { return _htmlContentID; }
    		set
    		{
    			if (_htmlContentID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'HtmlContentID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_htmlContentID = value;
    				HtmlContentIDChanged();
    				OnPropertyChanged("HtmlContentID");
    			}
    		}
    	}
    	private int _htmlContentID;
    	partial void HtmlContentStatusIDChanged();
    	public int HtmlContentStatusID
    	{
    		get { return _htmlContentStatusID; }
    		set
    		{
    			if (_htmlContentStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContentStatusID", _htmlContentStatusID);
    				if (!IsDeserializing)
    				{
    					if (HtmlContentStatus != null && HtmlContentStatus.HtmlContentStatusID != value)
    					{
    						HtmlContentStatus = null;
    					}
    				}
    				_htmlContentStatusID = value;
    				HtmlContentStatusIDChanged();
    				OnPropertyChanged("HtmlContentStatusID");
    			}
    		}
    	}
    	private int _htmlContentStatusID;
    	partial void LanguageIDChanged();
    	public Nullable<int> LanguageID
    	{
    		get { return _languageID; }
    		set
    		{
    			if (_languageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("LanguageID", _languageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_languageID = value;
    				LanguageIDChanged();
    				OnPropertyChanged("LanguageID");
    			}
    		}
    	}
    	private Nullable<int> _languageID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void PublishDateUTCChanged();
    	public Nullable<System.DateTime> PublishDateUTC
    	{
    		get { return _publishDateUTC; }
    		set
    		{
    			if (_publishDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("PublishDateUTC", _publishDateUTC);
    				_publishDateUTC = value;
    				PublishDateUTCChanged();
    				OnPropertyChanged("PublishDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _publishDateUTC;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;
    	partial void CreatedByUserIDChanged();
    	public Nullable<int> CreatedByUserID
    	{
    		get { return _createdByUserID; }
    		set
    		{
    			if (_createdByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CreatedByUserID", _createdByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_createdByUserID = value;
    				CreatedByUserIDChanged();
    				OnPropertyChanged("CreatedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _createdByUserID;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<CategoryTranslation> CategoryTranslations
    	{
    		get
    		{
    			if (_categoryTranslations == null)
    			{
    				_categoryTranslations = new TrackableCollection<CategoryTranslation>();
    				_categoryTranslations.CollectionChanged += FixupCategoryTranslations;
    				_categoryTranslations.CollectionChanged += RaiseCategoryTranslationsChanged;
    			}
    			return _categoryTranslations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_categoryTranslations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_categoryTranslations != null)
    				{
    					_categoryTranslations.CollectionChanged -= FixupCategoryTranslations;
    					_categoryTranslations.CollectionChanged -= RaiseCategoryTranslationsChanged;
    				}
    				_categoryTranslations = value;
    				if (_categoryTranslations != null)
    				{
    					_categoryTranslations.CollectionChanged += FixupCategoryTranslations;
    					_categoryTranslations.CollectionChanged += RaiseCategoryTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("CategoryTranslations");
    			}
    		}
    	}
    	private TrackableCollection<CategoryTranslation> _categoryTranslations;
    	partial void CategoryTranslationsChanged();
    	private void RaiseCategoryTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CategoryTranslationsChanged();
    	}
    
    	public HtmlContentStatus HtmlContentStatus
    	{
    		get { return _htmlContentStatus; }
    		set
    		{
    			if (!ReferenceEquals(_htmlContentStatus, value))
    			{
    				var previousValue = _htmlContentStatus;
    				_htmlContentStatus = value;
    				FixupHtmlContentStatus(previousValue);
    				OnNavigationPropertyChanged("HtmlContentStatus");
    			}
    		}
    	}
    	private HtmlContentStatus _htmlContentStatus;
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public TrackableCollection<HtmlContentHistory> HtmlContentHistories
    	{
    		get
    		{
    			if (_htmlContentHistories == null)
    			{
    				_htmlContentHistories = new TrackableCollection<HtmlContentHistory>();
    				_htmlContentHistories.CollectionChanged += FixupHtmlContentHistories;
    				_htmlContentHistories.CollectionChanged += RaiseHtmlContentHistoriesChanged;
    			}
    			return _htmlContentHistories;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlContentHistories, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlContentHistories != null)
    				{
    					_htmlContentHistories.CollectionChanged -= FixupHtmlContentHistories;
    					_htmlContentHistories.CollectionChanged -= RaiseHtmlContentHistoriesChanged;
    				}
    				_htmlContentHistories = value;
    				if (_htmlContentHistories != null)
    				{
    					_htmlContentHistories.CollectionChanged += FixupHtmlContentHistories;
    					_htmlContentHistories.CollectionChanged += RaiseHtmlContentHistoriesChanged;
    				}
    				OnNavigationPropertyChanged("HtmlContentHistories");
    			}
    		}
    	}
    	private TrackableCollection<HtmlContentHistory> _htmlContentHistories;
    	partial void HtmlContentHistoriesChanged();
    	private void RaiseHtmlContentHistoriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlContentHistoriesChanged();
    	}
    
    	public TrackableCollection<HtmlContentWorkflow> HtmlContentWorkflows
    	{
    		get
    		{
    			if (_htmlContentWorkflows == null)
    			{
    				_htmlContentWorkflows = new TrackableCollection<HtmlContentWorkflow>();
    				_htmlContentWorkflows.CollectionChanged += FixupHtmlContentWorkflows;
    				_htmlContentWorkflows.CollectionChanged += RaiseHtmlContentWorkflowsChanged;
    			}
    			return _htmlContentWorkflows;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlContentWorkflows, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlContentWorkflows != null)
    				{
    					_htmlContentWorkflows.CollectionChanged -= FixupHtmlContentWorkflows;
    					_htmlContentWorkflows.CollectionChanged -= RaiseHtmlContentWorkflowsChanged;
    				}
    				_htmlContentWorkflows = value;
    				if (_htmlContentWorkflows != null)
    				{
    					_htmlContentWorkflows.CollectionChanged += FixupHtmlContentWorkflows;
    					_htmlContentWorkflows.CollectionChanged += RaiseHtmlContentWorkflowsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlContentWorkflows");
    			}
    		}
    	}
    	private TrackableCollection<HtmlContentWorkflow> _htmlContentWorkflows;
    	partial void HtmlContentWorkflowsChanged();
    	private void RaiseHtmlContentWorkflowsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlContentWorkflowsChanged();
    	}
    
    	public TrackableCollection<HtmlElement> HtmlElements
    	{
    		get
    		{
    			if (_htmlElements == null)
    			{
    				_htmlElements = new TrackableCollection<HtmlElement>();
    				_htmlElements.CollectionChanged += FixupHtmlElements;
    				_htmlElements.CollectionChanged += RaiseHtmlElementsChanged;
    			}
    			return _htmlElements;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlElements, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlElements != null)
    				{
    					_htmlElements.CollectionChanged -= FixupHtmlElements;
    					_htmlElements.CollectionChanged -= RaiseHtmlElementsChanged;
    				}
    				_htmlElements = value;
    				if (_htmlElements != null)
    				{
    					_htmlElements.CollectionChanged += FixupHtmlElements;
    					_htmlElements.CollectionChanged += RaiseHtmlElementsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlElements");
    			}
    		}
    	}
    	private TrackableCollection<HtmlElement> _htmlElements;
    	partial void HtmlElementsChanged();
    	private void RaiseHtmlElementsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlElementsChanged();
    	}
    
    	public TrackableCollection<HtmlSectionChoice> HtmlSectionChoices
    	{
    		get
    		{
    			if (_htmlSectionChoices == null)
    			{
    				_htmlSectionChoices = new TrackableCollection<HtmlSectionChoice>();
    				_htmlSectionChoices.CollectionChanged += FixupHtmlSectionChoices;
    				_htmlSectionChoices.CollectionChanged += RaiseHtmlSectionChoicesChanged;
    			}
    			return _htmlSectionChoices;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlSectionChoices, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlSectionChoices != null)
    				{
    					_htmlSectionChoices.CollectionChanged -= FixupHtmlSectionChoices;
    					_htmlSectionChoices.CollectionChanged -= RaiseHtmlSectionChoicesChanged;
    				}
    				_htmlSectionChoices = value;
    				if (_htmlSectionChoices != null)
    				{
    					_htmlSectionChoices.CollectionChanged += FixupHtmlSectionChoices;
    					_htmlSectionChoices.CollectionChanged += RaiseHtmlSectionChoicesChanged;
    				}
    				OnNavigationPropertyChanged("HtmlSectionChoices");
    			}
    		}
    	}
    	private TrackableCollection<HtmlSectionChoice> _htmlSectionChoices;
    	partial void HtmlSectionChoicesChanged();
    	private void RaiseHtmlSectionChoicesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlSectionChoicesChanged();
    	}
    
    	public TrackableCollection<HtmlSectionContent> HtmlSectionContents
    	{
    		get
    		{
    			if (_htmlSectionContents == null)
    			{
    				_htmlSectionContents = new TrackableCollection<HtmlSectionContent>();
    				_htmlSectionContents.CollectionChanged += FixupHtmlSectionContents;
    				_htmlSectionContents.CollectionChanged += RaiseHtmlSectionContentsChanged;
    			}
    			return _htmlSectionContents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlSectionContents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlSectionContents != null)
    				{
    					_htmlSectionContents.CollectionChanged -= FixupHtmlSectionContents;
    					_htmlSectionContents.CollectionChanged -= RaiseHtmlSectionContentsChanged;
    				}
    				_htmlSectionContents = value;
    				if (_htmlSectionContents != null)
    				{
    					_htmlSectionContents.CollectionChanged += FixupHtmlSectionContents;
    					_htmlSectionContents.CollectionChanged += RaiseHtmlSectionContentsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlSectionContents");
    			}
    		}
    	}
    	private TrackableCollection<HtmlSectionContent> _htmlSectionContents;
    	partial void HtmlSectionContentsChanged();
    	private void RaiseHtmlSectionContentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlSectionContentsChanged();
    	}
    
    	public TrackableCollection<Testimonial> Testimonials
    	{
    		get
    		{
    			if (_testimonials == null)
    			{
    				_testimonials = new TrackableCollection<Testimonial>();
    				_testimonials.CollectionChanged += FixupTestimonials;
    				_testimonials.CollectionChanged += RaiseTestimonialsChanged;
    			}
    			return _testimonials;
    		}
    		set
    		{
    			if (!ReferenceEquals(_testimonials, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_testimonials != null)
    				{
    					_testimonials.CollectionChanged -= FixupTestimonials;
    					_testimonials.CollectionChanged -= RaiseTestimonialsChanged;
    				}
    				_testimonials = value;
    				if (_testimonials != null)
    				{
    					_testimonials.CollectionChanged += FixupTestimonials;
    					_testimonials.CollectionChanged += RaiseTestimonialsChanged;
    				}
    				OnNavigationPropertyChanged("Testimonials");
    			}
    		}
    	}
    	private TrackableCollection<Testimonial> _testimonials;
    	partial void TestimonialsChanged();
    	private void RaiseTestimonialsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TestimonialsChanged();
    	}
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_categoryTranslations != null)
    		{
    			_categoryTranslations.CollectionChanged -= FixupCategoryTranslations;
    			_categoryTranslations.CollectionChanged -= RaiseCategoryTranslationsChanged;
    			_categoryTranslations.CollectionChanged += FixupCategoryTranslations;
    			_categoryTranslations.CollectionChanged += RaiseCategoryTranslationsChanged;
    		}
    		if (_htmlContentHistories != null)
    		{
    			_htmlContentHistories.CollectionChanged -= FixupHtmlContentHistories;
    			_htmlContentHistories.CollectionChanged -= RaiseHtmlContentHistoriesChanged;
    			_htmlContentHistories.CollectionChanged += FixupHtmlContentHistories;
    			_htmlContentHistories.CollectionChanged += RaiseHtmlContentHistoriesChanged;
    		}
    		if (_htmlContentWorkflows != null)
    		{
    			_htmlContentWorkflows.CollectionChanged -= FixupHtmlContentWorkflows;
    			_htmlContentWorkflows.CollectionChanged -= RaiseHtmlContentWorkflowsChanged;
    			_htmlContentWorkflows.CollectionChanged += FixupHtmlContentWorkflows;
    			_htmlContentWorkflows.CollectionChanged += RaiseHtmlContentWorkflowsChanged;
    		}
    		if (_htmlElements != null)
    		{
    			_htmlElements.CollectionChanged -= FixupHtmlElements;
    			_htmlElements.CollectionChanged -= RaiseHtmlElementsChanged;
    			_htmlElements.CollectionChanged += FixupHtmlElements;
    			_htmlElements.CollectionChanged += RaiseHtmlElementsChanged;
    		}
    		if (_htmlSectionChoices != null)
    		{
    			_htmlSectionChoices.CollectionChanged -= FixupHtmlSectionChoices;
    			_htmlSectionChoices.CollectionChanged -= RaiseHtmlSectionChoicesChanged;
    			_htmlSectionChoices.CollectionChanged += FixupHtmlSectionChoices;
    			_htmlSectionChoices.CollectionChanged += RaiseHtmlSectionChoicesChanged;
    		}
    		if (_htmlSectionContents != null)
    		{
    			_htmlSectionContents.CollectionChanged -= FixupHtmlSectionContents;
    			_htmlSectionContents.CollectionChanged -= RaiseHtmlSectionContentsChanged;
    			_htmlSectionContents.CollectionChanged += FixupHtmlSectionContents;
    			_htmlSectionContents.CollectionChanged += RaiseHtmlSectionContentsChanged;
    		}
    		if (_testimonials != null)
    		{
    			_testimonials.CollectionChanged -= FixupTestimonials;
    			_testimonials.CollectionChanged -= RaiseTestimonialsChanged;
    			_testimonials.CollectionChanged += FixupTestimonials;
    			_testimonials.CollectionChanged += RaiseTestimonialsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		CategoryTranslations.Clear();
    		HtmlContentStatus = null;
    		Language = null;
    		HtmlContentHistories.Clear();
    		HtmlContentWorkflows.Clear();
    		HtmlElements.Clear();
    		HtmlSectionChoices.Clear();
    		HtmlSectionContents.Clear();
    		Testimonials.Clear();
    		User = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHtmlContentStatus(HtmlContentStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlContents.Contains(this))
    		{
    			previousValue.HtmlContents.Remove(this);
    		}
    
    		if (HtmlContentStatus != null)
    		{
    			if (!HtmlContentStatus.HtmlContents.Contains(this))
    			{
    				HtmlContentStatus.HtmlContents.Add(this);
    			}
    
    			HtmlContentStatusID = HtmlContentStatus.HtmlContentStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlContentStatus")
    				&& (ChangeTracker.OriginalValues["HtmlContentStatus"] == HtmlContentStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlContentStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlContentStatus", previousValue);
    			}
    			if (HtmlContentStatus != null && !HtmlContentStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlContentStatus.StartTracking();
    			}
    		}
    	}
    
    	private void FixupLanguage(Language previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlContents.Contains(this))
    		{
    			previousValue.HtmlContents.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.HtmlContents.Contains(this))
    			{
    				Language.HtmlContents.Add(this);
    			}
    
    			LanguageID = Language.LanguageID;
    		}
    		else if (!skipKeys)
    		{
    			LanguageID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.HtmlContents.Contains(this))
    		{
    			previousValue.HtmlContents.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.HtmlContents.Contains(this))
    			{
    				User.HtmlContents.Add(this);
    			}
    
    			CreatedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			CreatedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCategoryTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CategoryTranslation item in e.NewItems)
    			{
    				item.HtmlContent = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CategoryTranslations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CategoryTranslation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HtmlContent, this))
    				{
    					item.HtmlContent = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CategoryTranslations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlContentHistories(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlContentHistory item in e.NewItems)
    			{
    				item.HtmlContent = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlContentHistories", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlContentHistory item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HtmlContent, this))
    				{
    					item.HtmlContent = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlContentHistories", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlContentWorkflows(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlContentWorkflow item in e.NewItems)
    			{
    				item.HtmlContent = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlContentWorkflows", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlContentWorkflow item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HtmlContent, this))
    				{
    					item.HtmlContent = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlContentWorkflows", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlElements(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlElement item in e.NewItems)
    			{
    				item.HtmlContent = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlElements", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlElement item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HtmlContent, this))
    				{
    					item.HtmlContent = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlElements", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlSectionChoices(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlSectionChoice item in e.NewItems)
    			{
    				item.HtmlContent = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlSectionChoices", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlSectionChoice item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HtmlContent, this))
    				{
    					item.HtmlContent = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlSectionChoices", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlSectionContents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlSectionContent item in e.NewItems)
    			{
    				item.HtmlContent = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlSectionContents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlSectionContent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HtmlContent, this))
    				{
    					item.HtmlContent = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlSectionContents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTestimonials(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Testimonial item in e.NewItems)
    			{
    				item.HtmlContent = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Testimonials", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Testimonial item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HtmlContent, this))
    				{
    					item.HtmlContent = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Testimonials", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

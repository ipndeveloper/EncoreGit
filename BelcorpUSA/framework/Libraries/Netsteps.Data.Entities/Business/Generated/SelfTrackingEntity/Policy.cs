//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Language))]
    [KnownType(typeof(Market))]
    [KnownType(typeof(AccountPolicy))]
    [KnownType(typeof(AccountType))]
    [KnownType(typeof(HtmlSection))]
    [Serializable]
    public partial class Policy: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void PolicyIDChanged();
    	public int PolicyID
    	{
    		get { return _policyID; }
    		set
    		{
    			if (_policyID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'PolicyID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_policyID = value;
    				PolicyIDChanged();
    				OnPropertyChanged("PolicyID");
    			}
    		}
    	}
    	private int _policyID;
    	partial void VersionNumberChanged();
    	public string VersionNumber
    	{
    		get { return _versionNumber; }
    		set
    		{
    			if (_versionNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("VersionNumber", _versionNumber);
    				_versionNumber = value;
    				VersionNumberChanged();
    				OnPropertyChanged("VersionNumber");
    			}
    		}
    	}
    	private string _versionNumber;
    	partial void DateReleasedUTCChanged();
    	public Nullable<System.DateTime> DateReleasedUTC
    	{
    		get { return _dateReleasedUTC; }
    		set
    		{
    			if (_dateReleasedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateReleasedUTC", _dateReleasedUTC);
    				_dateReleasedUTC = value;
    				DateReleasedUTCChanged();
    				OnPropertyChanged("DateReleasedUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateReleasedUTC;
    	partial void FilePathChanged();
    	public string FilePath
    	{
    		get { return _filePath; }
    		set
    		{
    			if (_filePath != value)
    			{
    				ChangeTracker.RecordOriginalValue("FilePath", _filePath);
    				_filePath = value;
    				FilePathChanged();
    				OnPropertyChanged("FilePath");
    			}
    		}
    	}
    	private string _filePath;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void LanguageIDChanged();
    	public int LanguageID
    	{
    		get { return _languageID; }
    		set
    		{
    			if (_languageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("LanguageID", _languageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_languageID = value;
    				LanguageIDChanged();
    				OnPropertyChanged("LanguageID");
    			}
    		}
    	}
    	private int _languageID;
    	partial void IsAcceptanceRequiredChanged();
    	public Nullable<bool> IsAcceptanceRequired
    	{
    		get { return _isAcceptanceRequired; }
    		set
    		{
    			if (_isAcceptanceRequired != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsAcceptanceRequired", _isAcceptanceRequired);
    				_isAcceptanceRequired = value;
    				IsAcceptanceRequiredChanged();
    				OnPropertyChanged("IsAcceptanceRequired");
    			}
    		}
    	}
    	private Nullable<bool> _isAcceptanceRequired;
    	partial void HtmlSectionIDChanged();
    	public Nullable<int> HtmlSectionID
    	{
    		get { return _htmlSectionID; }
    		set
    		{
    			if (_htmlSectionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlSectionID", _htmlSectionID);
    				if (!IsDeserializing)
    				{
    					if (HtmlSection != null && HtmlSection.HtmlSectionID != value)
    					{
    						HtmlSection = null;
    					}
    				}
    				_htmlSectionID = value;
    				HtmlSectionIDChanged();
    				OnPropertyChanged("HtmlSectionID");
    			}
    		}
    	}
    	private Nullable<int> _htmlSectionID;
    	partial void AccountTypeIDChanged();
    	public Nullable<short> AccountTypeID
    	{
    		get { return _accountTypeID; }
    		set
    		{
    			if (_accountTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountTypeID", _accountTypeID);
    				if (!IsDeserializing)
    				{
    					if (AccountType != null && AccountType.AccountTypeID != value)
    					{
    						AccountType = null;
    					}
    				}
    				_accountTypeID = value;
    				AccountTypeIDChanged();
    				OnPropertyChanged("AccountTypeID");
    			}
    		}
    	}
    	private Nullable<short> _accountTypeID;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;

        #endregion
        #region Navigation Properties
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public TrackableCollection<Market> Markets
    	{
    		get
    		{
    			if (_markets == null)
    			{
    				_markets = new TrackableCollection<Market>();
    				_markets.CollectionChanged += FixupMarkets;
    				_markets.CollectionChanged += RaiseMarketsChanged;
    			}
    			return _markets;
    		}
    		set
    		{
    			if (!ReferenceEquals(_markets, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_markets != null)
    				{
    					_markets.CollectionChanged -= FixupMarkets;
    					_markets.CollectionChanged -= RaiseMarketsChanged;
    				}
    				_markets = value;
    				if (_markets != null)
    				{
    					_markets.CollectionChanged += FixupMarkets;
    					_markets.CollectionChanged += RaiseMarketsChanged;
    				}
    				OnNavigationPropertyChanged("Markets");
    			}
    		}
    	}
    	private TrackableCollection<Market> _markets;
    	partial void MarketsChanged();
    	private void RaiseMarketsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		MarketsChanged();
    	}
    
    	public TrackableCollection<AccountPolicy> AccountPolicies
    	{
    		get
    		{
    			if (_accountPolicies == null)
    			{
    				_accountPolicies = new TrackableCollection<AccountPolicy>();
    				_accountPolicies.CollectionChanged += FixupAccountPolicies;
    				_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    			}
    			return _accountPolicies;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPolicies, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPolicies != null)
    				{
    					_accountPolicies.CollectionChanged -= FixupAccountPolicies;
    					_accountPolicies.CollectionChanged -= RaiseAccountPoliciesChanged;
    				}
    				_accountPolicies = value;
    				if (_accountPolicies != null)
    				{
    					_accountPolicies.CollectionChanged += FixupAccountPolicies;
    					_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    				}
    				OnNavigationPropertyChanged("AccountPolicies");
    			}
    		}
    	}
    	private TrackableCollection<AccountPolicy> _accountPolicies;
    	partial void AccountPoliciesChanged();
    	private void RaiseAccountPoliciesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPoliciesChanged();
    	}
    
    	public AccountType AccountType
    	{
    		get { return _accountType; }
    		set
    		{
    			if (!ReferenceEquals(_accountType, value))
    			{
    				var previousValue = _accountType;
    				_accountType = value;
    				FixupAccountType(previousValue);
    				OnNavigationPropertyChanged("AccountType");
    			}
    		}
    	}
    	private AccountType _accountType;
    
    	public HtmlSection HtmlSection
    	{
    		get { return _htmlSection; }
    		set
    		{
    			if (!ReferenceEquals(_htmlSection, value))
    			{
    				var previousValue = _htmlSection;
    				_htmlSection = value;
    				FixupHtmlSection(previousValue);
    				OnNavigationPropertyChanged("HtmlSection");
    			}
    		}
    	}
    	private HtmlSection _htmlSection;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_markets != null)
    		{
    			_markets.CollectionChanged -= FixupMarkets;
    			_markets.CollectionChanged -= RaiseMarketsChanged;
    			_markets.CollectionChanged += FixupMarkets;
    			_markets.CollectionChanged += RaiseMarketsChanged;
    		}
    		if (_accountPolicies != null)
    		{
    			_accountPolicies.CollectionChanged -= FixupAccountPolicies;
    			_accountPolicies.CollectionChanged -= RaiseAccountPoliciesChanged;
    			_accountPolicies.CollectionChanged += FixupAccountPolicies;
    			_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Language = null;
    		Markets.Clear();
    		AccountPolicies.Clear();
    		AccountType = null;
    		HtmlSection = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupLanguage(Language previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Policies.Contains(this))
    		{
    			previousValue.Policies.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.Policies.Contains(this))
    			{
    				Language.Policies.Add(this);
    			}
    
    			LanguageID = Language.LanguageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountType(AccountType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Policies.Contains(this))
    		{
    			previousValue.Policies.Remove(this);
    		}
    
    		if (AccountType != null)
    		{
    			if (!AccountType.Policies.Contains(this))
    			{
    				AccountType.Policies.Add(this);
    			}
    
    			AccountTypeID = AccountType.AccountTypeID;
    		}
    		else if (!skipKeys)
    		{
    			AccountTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountType")
    				&& (ChangeTracker.OriginalValues["AccountType"] == AccountType))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountType", previousValue);
    			}
    			if (AccountType != null && !AccountType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupHtmlSection(HtmlSection previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Policies.Contains(this))
    		{
    			previousValue.Policies.Remove(this);
    		}
    
    		if (HtmlSection != null)
    		{
    			if (!HtmlSection.Policies.Contains(this))
    			{
    				HtmlSection.Policies.Add(this);
    			}
    
    			HtmlSectionID = HtmlSection.HtmlSectionID;
    		}
    		else if (!skipKeys)
    		{
    			HtmlSectionID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlSection")
    				&& (ChangeTracker.OriginalValues["HtmlSection"] == HtmlSection))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlSection");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlSection", previousValue);
    			}
    			if (HtmlSection != null && !HtmlSection.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlSection.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMarkets(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Market item in e.NewItems)
    			{
    				if (!item.Policies.Contains(this))
    				{
    					item.Policies.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Markets", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Market item in e.OldItems)
    			{
    				if (item.Policies.Contains(this))
    				{
    					item.Policies.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Markets", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPolicies(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPolicy item in e.NewItems)
    			{
    				item.Policy = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPolicies", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPolicy item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Policy, this))
    				{
    					item.Policy = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPolicies", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

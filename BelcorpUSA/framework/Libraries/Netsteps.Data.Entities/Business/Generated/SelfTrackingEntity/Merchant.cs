//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Brand))]
    [KnownType(typeof(Address))]
    [Serializable]
    public partial class Merchant: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void MerchantIDChanged();
    	public int MerchantID
    	{
    		get { return _merchantID; }
    		set
    		{
    			if (_merchantID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'MerchantID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_merchantID = value;
    				MerchantIDChanged();
    				OnPropertyChanged("MerchantID");
    			}
    		}
    	}
    	private int _merchantID;
    	partial void MerchantNumberChanged();
    	public string MerchantNumber
    	{
    		get { return _merchantNumber; }
    		set
    		{
    			if (_merchantNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("MerchantNumber", _merchantNumber);
    				_merchantNumber = value;
    				MerchantNumberChanged();
    				OnPropertyChanged("MerchantNumber");
    			}
    		}
    	}
    	private string _merchantNumber;
    	partial void BrandIDChanged();
    	public Nullable<int> BrandID
    	{
    		get { return _brandID; }
    		set
    		{
    			if (_brandID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BrandID", _brandID);
    				if (!IsDeserializing)
    				{
    					if (Brand != null && Brand.BrandID != value)
    					{
    						Brand = null;
    					}
    				}
    				_brandID = value;
    				BrandIDChanged();
    				OnPropertyChanged("BrandID");
    			}
    		}
    	}
    	private Nullable<int> _brandID;
    	partial void MerchantNameChanged();
    	public string MerchantName
    	{
    		get { return _merchantName; }
    		set
    		{
    			if (_merchantName != value)
    			{
    				ChangeTracker.RecordOriginalValue("MerchantName", _merchantName);
    				_merchantName = value;
    				MerchantNameChanged();
    				OnPropertyChanged("MerchantName");
    			}
    		}
    	}
    	private string _merchantName;

        #endregion
        #region Navigation Properties
    
    	public Brand Brand
    	{
    		get { return _brand; }
    		set
    		{
    			if (!ReferenceEquals(_brand, value))
    			{
    				var previousValue = _brand;
    				_brand = value;
    				FixupBrand(previousValue);
    				OnNavigationPropertyChanged("Brand");
    			}
    		}
    	}
    	private Brand _brand;
    
    	public TrackableCollection<Address> Addresses
    	{
    		get
    		{
    			if (_addresses == null)
    			{
    				_addresses = new TrackableCollection<Address>();
    				_addresses.CollectionChanged += FixupAddresses;
    				_addresses.CollectionChanged += RaiseAddressesChanged;
    			}
    			return _addresses;
    		}
    		set
    		{
    			if (!ReferenceEquals(_addresses, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged -= FixupAddresses;
    					_addresses.CollectionChanged -= RaiseAddressesChanged;
    				}
    				_addresses = value;
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged += FixupAddresses;
    					_addresses.CollectionChanged += RaiseAddressesChanged;
    				}
    				OnNavigationPropertyChanged("Addresses");
    			}
    		}
    	}
    	private TrackableCollection<Address> _addresses;
    	partial void AddressesChanged();
    	private void RaiseAddressesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AddressesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_addresses != null)
    		{
    			_addresses.CollectionChanged -= FixupAddresses;
    			_addresses.CollectionChanged -= RaiseAddressesChanged;
    			_addresses.CollectionChanged += FixupAddresses;
    			_addresses.CollectionChanged += RaiseAddressesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Brand = null;
    		Addresses.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupBrand(Brand previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Merchants.Contains(this))
    		{
    			previousValue.Merchants.Remove(this);
    		}
    
    		if (Brand != null)
    		{
    			if (!Brand.Merchants.Contains(this))
    			{
    				Brand.Merchants.Add(this);
    			}
    
    			BrandID = Brand.BrandID;
    		}
    		else if (!skipKeys)
    		{
    			BrandID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Brand")
    				&& (ChangeTracker.OriginalValues["Brand"] == Brand))
    			{
    				ChangeTracker.OriginalValues.Remove("Brand");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Brand", previousValue);
    			}
    			if (Brand != null && !Brand.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Brand.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAddresses(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Address item in e.NewItems)
    			{
    				if (!item.Merchants.Contains(this))
    				{
    					item.Merchants.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Addresses", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Address item in e.OldItems)
    			{
    				if (item.Merchants.Contains(this))
    				{
    					item.Merchants.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Addresses", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

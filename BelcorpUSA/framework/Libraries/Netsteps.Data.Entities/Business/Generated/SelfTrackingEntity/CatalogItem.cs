//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Catalog))]
    [KnownType(typeof(Product))]
    [Serializable]
    public partial class CatalogItem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CatalogItemIDChanged();
    	public int CatalogItemID
    	{
    		get { return _catalogItemID; }
    		set
    		{
    			if (_catalogItemID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CatalogItemID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_catalogItemID = value;
    				CatalogItemIDChanged();
    				OnPropertyChanged("CatalogItemID");
    			}
    		}
    	}
    	private int _catalogItemID;
    	partial void CatalogIDChanged();
    	public int CatalogID
    	{
    		get { return _catalogID; }
    		set
    		{
    			if (_catalogID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CatalogID", _catalogID);
    				if (!IsDeserializing)
    				{
    					if (Catalog != null && Catalog.CatalogID != value)
    					{
    						Catalog = null;
    					}
    				}
    				_catalogID = value;
    				CatalogIDChanged();
    				OnPropertyChanged("CatalogID");
    			}
    		}
    	}
    	private int _catalogID;
    	partial void ProductIDChanged();
    	public int ProductID
    	{
    		get { return _productID; }
    		set
    		{
    			if (_productID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductID", _productID);
    				if (!IsDeserializing)
    				{
    					if (Product != null && Product.ProductID != value)
    					{
    						Product = null;
    					}
    				}
    				_productID = value;
    				ProductIDChanged();
    				OnPropertyChanged("ProductID");
    			}
    		}
    	}
    	private int _productID;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;
    	partial void StartDateUTCChanged();
    	public Nullable<System.DateTime> StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public Catalog Catalog
    	{
    		get { return _catalog; }
    		set
    		{
    			if (!ReferenceEquals(_catalog, value))
    			{
    				var previousValue = _catalog;
    				_catalog = value;
    				FixupCatalog(previousValue);
    				OnNavigationPropertyChanged("Catalog");
    			}
    		}
    	}
    	private Catalog _catalog;
    
    	public Product Product
    	{
    		get { return _product; }
    		set
    		{
    			if (!ReferenceEquals(_product, value))
    			{
    				var previousValue = _product;
    				_product = value;
    				FixupProduct(previousValue);
    				OnNavigationPropertyChanged("Product");
    			}
    		}
    	}
    	private Product _product;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Catalog = null;
    		Product = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCatalog(Catalog previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CatalogItems.Contains(this))
    		{
    			previousValue.CatalogItems.Remove(this);
    		}
    
    		if (Catalog != null)
    		{
    			if (!Catalog.CatalogItems.Contains(this))
    			{
    				Catalog.CatalogItems.Add(this);
    			}
    
    			CatalogID = Catalog.CatalogID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Catalog")
    				&& (ChangeTracker.OriginalValues["Catalog"] == Catalog))
    			{
    				ChangeTracker.OriginalValues.Remove("Catalog");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Catalog", previousValue);
    			}
    			if (Catalog != null && !Catalog.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Catalog.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProduct(Product previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CatalogItems.Contains(this))
    		{
    			previousValue.CatalogItems.Remove(this);
    		}
    
    		if (Product != null)
    		{
    			if (!Product.CatalogItems.Contains(this))
    			{
    				Product.CatalogItems.Add(this);
    			}
    
    			ProductID = Product.ProductID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Product")
    				&& (ChangeTracker.OriginalValues["Product"] == Product))
    			{
    				ChangeTracker.OriginalValues.Remove("Product");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Product", previousValue);
    			}
    			if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Product.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

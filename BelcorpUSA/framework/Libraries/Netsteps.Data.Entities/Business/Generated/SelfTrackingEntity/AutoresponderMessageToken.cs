//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AutoresponderMessage))]
    [Serializable]
    public partial class AutoresponderMessageToken: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AutoresponderMessageTokenIDChanged();
    	public int AutoresponderMessageTokenID
    	{
    		get { return _autoresponderMessageTokenID; }
    		set
    		{
    			if (_autoresponderMessageTokenID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AutoresponderMessageTokenID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_autoresponderMessageTokenID = value;
    				AutoresponderMessageTokenIDChanged();
    				OnPropertyChanged("AutoresponderMessageTokenID");
    			}
    		}
    	}
    	private int _autoresponderMessageTokenID;
    	partial void AutoresponderMessageIDChanged();
    	public int AutoresponderMessageID
    	{
    		get { return _autoresponderMessageID; }
    		set
    		{
    			if (_autoresponderMessageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoresponderMessageID", _autoresponderMessageID);
    				if (!IsDeserializing)
    				{
    					if (AutoresponderMessage != null && AutoresponderMessage.AutoresponderMessageID != value)
    					{
    						AutoresponderMessage = null;
    					}
    				}
    				_autoresponderMessageID = value;
    				AutoresponderMessageIDChanged();
    				OnPropertyChanged("AutoresponderMessageID");
    			}
    		}
    	}
    	private int _autoresponderMessageID;
    	partial void TokenChanged();
    	public string Token
    	{
    		get { return _token; }
    		set
    		{
    			if (_token != value)
    			{
    				ChangeTracker.RecordOriginalValue("Token", _token);
    				_token = value;
    				TokenChanged();
    				OnPropertyChanged("Token");
    			}
    		}
    	}
    	private string _token;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;

        #endregion
        #region Navigation Properties
    
    	public AutoresponderMessage AutoresponderMessage
    	{
    		get { return _autoresponderMessage; }
    		set
    		{
    			if (!ReferenceEquals(_autoresponderMessage, value))
    			{
    				var previousValue = _autoresponderMessage;
    				_autoresponderMessage = value;
    				FixupAutoresponderMessage(previousValue);
    				OnNavigationPropertyChanged("AutoresponderMessage");
    			}
    		}
    	}
    	private AutoresponderMessage _autoresponderMessage;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AutoresponderMessage = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAutoresponderMessage(AutoresponderMessage previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoresponderMessageTokens.Contains(this))
    		{
    			previousValue.AutoresponderMessageTokens.Remove(this);
    		}
    
    		if (AutoresponderMessage != null)
    		{
    			if (!AutoresponderMessage.AutoresponderMessageTokens.Contains(this))
    			{
    				AutoresponderMessage.AutoresponderMessageTokens.Add(this);
    			}
    
    			AutoresponderMessageID = AutoresponderMessage.AutoresponderMessageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AutoresponderMessage")
    				&& (ChangeTracker.OriginalValues["AutoresponderMessage"] == AutoresponderMessage))
    			{
    				ChangeTracker.OriginalValues.Remove("AutoresponderMessage");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AutoresponderMessage", previousValue);
    			}
    			if (AutoresponderMessage != null && !AutoresponderMessage.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AutoresponderMessage.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Statistic))]
    [KnownType(typeof(StatisticValueType))]
    [Serializable]
    public partial class StatisticValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void StatisticValueIDChanged();
    	public long StatisticValueID
    	{
    		get { return _statisticValueID; }
    		set
    		{
    			if (_statisticValueID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'StatisticValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_statisticValueID = value;
    				StatisticValueIDChanged();
    				OnPropertyChanged("StatisticValueID");
    			}
    		}
    	}
    	private long _statisticValueID;
    	partial void StatisticIDChanged();
    	public long StatisticID
    	{
    		get { return _statisticID; }
    		set
    		{
    			if (_statisticID != value)
    			{
    				ChangeTracker.RecordOriginalValue("StatisticID", _statisticID);
    				if (!IsDeserializing)
    				{
    					if (Statistic != null && Statistic.StatisticID != value)
    					{
    						Statistic = null;
    					}
    				}
    				_statisticID = value;
    				StatisticIDChanged();
    				OnPropertyChanged("StatisticID");
    			}
    		}
    	}
    	private long _statisticID;
    	partial void StatisticValueTypeIDChanged();
    	public short StatisticValueTypeID
    	{
    		get { return _statisticValueTypeID; }
    		set
    		{
    			if (_statisticValueTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("StatisticValueTypeID", _statisticValueTypeID);
    				if (!IsDeserializing)
    				{
    					if (StatisticValueType != null && StatisticValueType.StatisticValueTypeID != value)
    					{
    						StatisticValueType = null;
    					}
    				}
    				_statisticValueTypeID = value;
    				StatisticValueTypeIDChanged();
    				OnPropertyChanged("StatisticValueTypeID");
    			}
    		}
    	}
    	private short _statisticValueTypeID;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;

        #endregion
        #region Navigation Properties
    
    	public Statistic Statistic
    	{
    		get { return _statistic; }
    		set
    		{
    			if (!ReferenceEquals(_statistic, value))
    			{
    				var previousValue = _statistic;
    				_statistic = value;
    				FixupStatistic(previousValue);
    				OnNavigationPropertyChanged("Statistic");
    			}
    		}
    	}
    	private Statistic _statistic;
    
    	public StatisticValueType StatisticValueType
    	{
    		get { return _statisticValueType; }
    		set
    		{
    			if (!ReferenceEquals(_statisticValueType, value))
    			{
    				var previousValue = _statisticValueType;
    				_statisticValueType = value;
    				FixupStatisticValueType(previousValue);
    				OnNavigationPropertyChanged("StatisticValueType");
    			}
    		}
    	}
    	private StatisticValueType _statisticValueType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Statistic = null;
    		StatisticValueType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupStatistic(Statistic previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.StatisticValues.Contains(this))
    		{
    			previousValue.StatisticValues.Remove(this);
    		}
    
    		if (Statistic != null)
    		{
    			if (!Statistic.StatisticValues.Contains(this))
    			{
    				Statistic.StatisticValues.Add(this);
    			}
    
    			StatisticID = Statistic.StatisticID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Statistic")
    				&& (ChangeTracker.OriginalValues["Statistic"] == Statistic))
    			{
    				ChangeTracker.OriginalValues.Remove("Statistic");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Statistic", previousValue);
    			}
    			if (Statistic != null && !Statistic.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Statistic.StartTracking();
    			}
    		}
    	}
    
    	private void FixupStatisticValueType(StatisticValueType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.StatisticValues.Contains(this))
    		{
    			previousValue.StatisticValues.Remove(this);
    		}
    
    		if (StatisticValueType != null)
    		{
    			if (!StatisticValueType.StatisticValues.Contains(this))
    			{
    				StatisticValueType.StatisticValues.Add(this);
    			}
    
    			StatisticValueTypeID = StatisticValueType.StatisticValueTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("StatisticValueType")
    				&& (ChangeTracker.OriginalValues["StatisticValueType"] == StatisticValueType))
    			{
    				ChangeTracker.OriginalValues.Remove("StatisticValueType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("StatisticValueType", previousValue);
    			}
    			if (StatisticValueType != null && !StatisticValueType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				StatisticValueType.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

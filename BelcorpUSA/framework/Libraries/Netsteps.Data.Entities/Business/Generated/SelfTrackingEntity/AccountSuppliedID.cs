//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [Serializable]
    public partial class AccountSuppliedID: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountSuppliedID1Changed();
    	public int AccountSuppliedID1
    	{
    		get { return _accountSuppliedID1; }
    		set
    		{
    			if (_accountSuppliedID1 != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountSuppliedID1' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountSuppliedID1 = value;
    				AccountSuppliedID1Changed();
    				OnPropertyChanged("AccountSuppliedID1");
    			}
    		}
    	}
    	private int _accountSuppliedID1;
    	partial void IDTypeIDChanged();
    	public int IDTypeID
    	{
    		get { return _iDTypeID; }
    		set
    		{
    			if (_iDTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("IDTypeID", _iDTypeID);
    				_iDTypeID = value;
    				IDTypeIDChanged();
    				OnPropertyChanged("IDTypeID");
    			}
    		}
    	}
    	private int _iDTypeID;
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void AccountSuppliedIDValueChanged();
    	public string AccountSuppliedIDValue
    	{
    		get { return _accountSuppliedIDValue; }
    		set
    		{
    			if (_accountSuppliedIDValue != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountSuppliedIDValue", _accountSuppliedIDValue);
    				_accountSuppliedIDValue = value;
    				AccountSuppliedIDValueChanged();
    				OnPropertyChanged("AccountSuppliedIDValue");
    			}
    		}
    	}
    	private string _accountSuppliedIDValue;
    	partial void IsPrimaryIDChanged();
    	public bool IsPrimaryID
    	{
    		get { return _isPrimaryID; }
    		set
    		{
    			if (_isPrimaryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsPrimaryID", _isPrimaryID);
    				_isPrimaryID = value;
    				IsPrimaryIDChanged();
    				OnPropertyChanged("IsPrimaryID");
    			}
    		}
    	}
    	private bool _isPrimaryID;
    	partial void IDExpeditionIDateChanged();
    	public Nullable<System.DateTime> IDExpeditionIDate
    	{
    		get { return _iDExpeditionIDate; }
    		set
    		{
    			if (_iDExpeditionIDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("IDExpeditionIDate", _iDExpeditionIDate);
    				_iDExpeditionIDate = value;
    				IDExpeditionIDateChanged();
    				OnPropertyChanged("IDExpeditionIDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _iDExpeditionIDate;
    	partial void ExpeditionEntityChanged();
    	public string ExpeditionEntity
    	{
    		get { return _expeditionEntity; }
    		set
    		{
    			if (_expeditionEntity != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpeditionEntity", _expeditionEntity);
    				_expeditionEntity = value;
    				ExpeditionEntityChanged();
    				OnPropertyChanged("ExpeditionEntity");
    			}
    		}
    	}
    	private string _expeditionEntity;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountSuppliedIDs.Contains(this))
    		{
    			previousValue.AccountSuppliedIDs.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AccountSuppliedIDs.Contains(this))
    			{
    				Account.AccountSuppliedIDs.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

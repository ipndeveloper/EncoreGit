//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ShippingOrderType))]
    [KnownType(typeof(PaymentOrderType))]
    [KnownType(typeof(AutoshipSchedule))]
    [KnownType(typeof(Order))]
    [Serializable]
    public partial class OrderType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderTypeIDChanged();
    	public short OrderTypeID
    	{
    		get { return _orderTypeID; }
    		set
    		{
    			if (_orderTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderTypeID = value;
    				OrderTypeIDChanged();
    				OnPropertyChanged("OrderTypeID");
    			}
    		}
    	}
    	private short _orderTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void IsTemplateChanged();
    	public bool IsTemplate
    	{
    		get { return _isTemplate; }
    		set
    		{
    			if (_isTemplate != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsTemplate", _isTemplate);
    				_isTemplate = value;
    				IsTemplateChanged();
    				OnPropertyChanged("IsTemplate");
    			}
    		}
    	}
    	private bool _isTemplate;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<ShippingOrderType> ShippingOrderTypes
    	{
    		get
    		{
    			if (_shippingOrderTypes == null)
    			{
    				_shippingOrderTypes = new TrackableCollection<ShippingOrderType>();
    				_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    				_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    			}
    			return _shippingOrderTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_shippingOrderTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_shippingOrderTypes != null)
    				{
    					_shippingOrderTypes.CollectionChanged -= FixupShippingOrderTypes;
    					_shippingOrderTypes.CollectionChanged -= RaiseShippingOrderTypesChanged;
    				}
    				_shippingOrderTypes = value;
    				if (_shippingOrderTypes != null)
    				{
    					_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    					_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    				}
    				OnNavigationPropertyChanged("ShippingOrderTypes");
    			}
    		}
    	}
    	private TrackableCollection<ShippingOrderType> _shippingOrderTypes;
    	partial void ShippingOrderTypesChanged();
    	private void RaiseShippingOrderTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ShippingOrderTypesChanged();
    	}
    
    	public TrackableCollection<PaymentOrderType> PaymentOrderTypes
    	{
    		get
    		{
    			if (_paymentOrderTypes == null)
    			{
    				_paymentOrderTypes = new TrackableCollection<PaymentOrderType>();
    				_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    				_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    			}
    			return _paymentOrderTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_paymentOrderTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_paymentOrderTypes != null)
    				{
    					_paymentOrderTypes.CollectionChanged -= FixupPaymentOrderTypes;
    					_paymentOrderTypes.CollectionChanged -= RaisePaymentOrderTypesChanged;
    				}
    				_paymentOrderTypes = value;
    				if (_paymentOrderTypes != null)
    				{
    					_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    					_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    				}
    				OnNavigationPropertyChanged("PaymentOrderTypes");
    			}
    		}
    	}
    	private TrackableCollection<PaymentOrderType> _paymentOrderTypes;
    	partial void PaymentOrderTypesChanged();
    	private void RaisePaymentOrderTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PaymentOrderTypesChanged();
    	}
    
    	public TrackableCollection<AutoshipSchedule> AutoshipSchedules
    	{
    		get
    		{
    			if (_autoshipSchedules == null)
    			{
    				_autoshipSchedules = new TrackableCollection<AutoshipSchedule>();
    				_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    				_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    			}
    			return _autoshipSchedules;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipSchedules, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipSchedules != null)
    				{
    					_autoshipSchedules.CollectionChanged -= FixupAutoshipSchedules;
    					_autoshipSchedules.CollectionChanged -= RaiseAutoshipSchedulesChanged;
    				}
    				_autoshipSchedules = value;
    				if (_autoshipSchedules != null)
    				{
    					_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    					_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipSchedules");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipSchedule> _autoshipSchedules;
    	partial void AutoshipSchedulesChanged();
    	private void RaiseAutoshipSchedulesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipSchedulesChanged();
    	}
    
    	public TrackableCollection<Order> Orders
    	{
    		get
    		{
    			if (_orders == null)
    			{
    				_orders = new TrackableCollection<Order>();
    				_orders.CollectionChanged += FixupOrders;
    				_orders.CollectionChanged += RaiseOrdersChanged;
    			}
    			return _orders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orders != null)
    				{
    					_orders.CollectionChanged -= FixupOrders;
    					_orders.CollectionChanged -= RaiseOrdersChanged;
    				}
    				_orders = value;
    				if (_orders != null)
    				{
    					_orders.CollectionChanged += FixupOrders;
    					_orders.CollectionChanged += RaiseOrdersChanged;
    				}
    				OnNavigationPropertyChanged("Orders");
    			}
    		}
    	}
    	private TrackableCollection<Order> _orders;
    	partial void OrdersChanged();
    	private void RaiseOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrdersChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_shippingOrderTypes != null)
    		{
    			_shippingOrderTypes.CollectionChanged -= FixupShippingOrderTypes;
    			_shippingOrderTypes.CollectionChanged -= RaiseShippingOrderTypesChanged;
    			_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    			_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    		}
    		if (_paymentOrderTypes != null)
    		{
    			_paymentOrderTypes.CollectionChanged -= FixupPaymentOrderTypes;
    			_paymentOrderTypes.CollectionChanged -= RaisePaymentOrderTypesChanged;
    			_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    			_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    		}
    		if (_autoshipSchedules != null)
    		{
    			_autoshipSchedules.CollectionChanged -= FixupAutoshipSchedules;
    			_autoshipSchedules.CollectionChanged -= RaiseAutoshipSchedulesChanged;
    			_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    			_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    		}
    		if (_orders != null)
    		{
    			_orders.CollectionChanged -= FixupOrders;
    			_orders.CollectionChanged -= RaiseOrdersChanged;
    			_orders.CollectionChanged += FixupOrders;
    			_orders.CollectionChanged += RaiseOrdersChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ShippingOrderTypes.Clear();
    		PaymentOrderTypes.Clear();
    		AutoshipSchedules.Clear();
    		Orders.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupShippingOrderTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ShippingOrderType item in e.NewItems)
    			{
    				item.OrderType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ShippingOrderTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ShippingOrderType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderType, this))
    				{
    					item.OrderType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ShippingOrderTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPaymentOrderTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PaymentOrderType item in e.NewItems)
    			{
    				item.OrderType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PaymentOrderTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PaymentOrderType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderType, this))
    				{
    					item.OrderType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PaymentOrderTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipSchedules(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipSchedule item in e.NewItems)
    			{
    				item.OrderType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipSchedules", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipSchedule item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderType, this))
    				{
    					item.OrderType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipSchedules", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Order item in e.NewItems)
    			{
    				item.OrderType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Order item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderType, this))
    				{
    					item.OrderType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

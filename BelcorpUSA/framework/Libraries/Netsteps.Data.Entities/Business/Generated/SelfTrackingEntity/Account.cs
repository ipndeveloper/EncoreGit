//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountPaymentMethod))]
    [KnownType(typeof(AccountPhone))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(AccountStatus))]
    [KnownType(typeof(AccountType))]
    [KnownType(typeof(Gender))]
    [KnownType(typeof(User))]
    [KnownType(typeof(MailAccount))]
    [KnownType(typeof(EmailSignature))]
    [KnownType(typeof(AccountLanguage))]
    [KnownType(typeof(AccountSponsor))]
    [KnownType(typeof(CalendarEvent))]
    [KnownType(typeof(AccountEmailLog))]
    [KnownType(typeof(AccountListValue))]
    [KnownType(typeof(Language))]
    [KnownType(typeof(AccountStatusChangeReason))]
    [KnownType(typeof(AccountPublicContactInfo))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(Address))]
    [KnownType(typeof(AccountContactTag))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(Note))]
    [KnownType(typeof(AccountPolicy))]
    [KnownType(typeof(DistributionList))]
    [KnownType(typeof(DistributionSubscriber))]
    [KnownType(typeof(CampaignSubscriber))]
    [KnownType(typeof(AutoresponderMessage))]
    [KnownType(typeof(AccountTag))]
    [KnownType(typeof(AccountSource))]
    [KnownType(typeof(PartyGuest))]
    [KnownType(typeof(CampaignOptOut))]
    [KnownType(typeof(SupportTicket))]
    [KnownType(typeof(AccountReport))]
    [KnownType(typeof(CampaignActionTokenValue))]
    [KnownType(typeof(EmailTemplateToken))]
    [KnownType(typeof(AccountDevice))]
    [KnownType(typeof(AccountProperty))]
    [KnownType(typeof(FileResource))]
    [KnownType(typeof(AutoshipOrder))]
    [KnownType(typeof(AccountSuppliedID))]
    [Serializable]
    public partial class Account: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void AccountNumberChanged();
    	public string AccountNumber
    	{
    		get { return _accountNumber; }
    		set
    		{
    			if (_accountNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountNumber", _accountNumber);
    				_accountNumber = value;
    				AccountNumberChanged();
    				OnPropertyChanged("AccountNumber");
    			}
    		}
    	}
    	private string _accountNumber;
    	partial void AccountTypeIDChanged();
    	public short AccountTypeID
    	{
    		get { return _accountTypeID; }
    		set
    		{
    			if (_accountTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountTypeID", _accountTypeID);
    				if (!IsDeserializing)
    				{
    					if (AccountType != null && AccountType.AccountTypeID != value)
    					{
    						AccountType = null;
    					}
    				}
    				_accountTypeID = value;
    				AccountTypeIDChanged();
    				OnPropertyChanged("AccountTypeID");
    			}
    		}
    	}
    	private short _accountTypeID;
    	partial void AccountStatusIDChanged();
    	public short AccountStatusID
    	{
    		get { return _accountStatusID; }
    		set
    		{
    			if (_accountStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountStatusID", _accountStatusID);
    				if (!IsDeserializing)
    				{
    					if (AccountStatus != null && AccountStatus.AccountStatusID != value)
    					{
    						AccountStatus = null;
    					}
    				}
    				_accountStatusID = value;
    				AccountStatusIDChanged();
    				OnPropertyChanged("AccountStatusID");
    			}
    		}
    	}
    	private short _accountStatusID;
    	partial void FirstNameChanged();
    	public string FirstName
    	{
    		get { return _firstName; }
    		set
    		{
    			if (_firstName != value)
    			{
    				ChangeTracker.RecordOriginalValue("FirstName", _firstName);
    				_firstName = value;
    				FirstNameChanged();
    				OnPropertyChanged("FirstName");
    			}
    		}
    	}
    	private string _firstName;
    	partial void MiddleNameChanged();
    	public string MiddleName
    	{
    		get { return _middleName; }
    		set
    		{
    			if (_middleName != value)
    			{
    				ChangeTracker.RecordOriginalValue("MiddleName", _middleName);
    				_middleName = value;
    				MiddleNameChanged();
    				OnPropertyChanged("MiddleName");
    			}
    		}
    	}
    	private string _middleName;
    	partial void LastNameChanged();
    	public string LastName
    	{
    		get { return _lastName; }
    		set
    		{
    			if (_lastName != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastName", _lastName);
    				_lastName = value;
    				LastNameChanged();
    				OnPropertyChanged("LastName");
    			}
    		}
    	}
    	private string _lastName;
    	partial void EmailAddressChanged();
    	public string EmailAddress
    	{
    		get { return _emailAddress; }
    		set
    		{
    			if (_emailAddress != value)
    			{
    				ChangeTracker.RecordOriginalValue("EmailAddress", _emailAddress);
    				_emailAddress = value;
    				EmailAddressChanged();
    				OnPropertyChanged("EmailAddress");
    			}
    		}
    	}
    	private string _emailAddress;
    	partial void BirthdayUTCChanged();
    	public Nullable<System.DateTime> BirthdayUTC
    	{
    		get { return _birthdayUTC; }
    		set
    		{
    			if (_birthdayUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("BirthdayUTC", _birthdayUTC);
    				_birthdayUTC = value;
    				BirthdayUTCChanged();
    				OnPropertyChanged("BirthdayUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _birthdayUTC;
    	partial void SponsorIDChanged();
    	public Nullable<int> SponsorID
    	{
    		get { return _sponsorID; }
    		set
    		{
    			if (_sponsorID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SponsorID", _sponsorID);
    				if (!IsDeserializing)
    				{
    					if (Sponsor != null && Sponsor.AccountID != value)
    					{
    						Sponsor = null;
    					}
    				}
    				_sponsorID = value;
    				SponsorIDChanged();
    				OnPropertyChanged("SponsorID");
    			}
    		}
    	}
    	private Nullable<int> _sponsorID;
    	partial void EnrollerIDChanged();
    	public Nullable<int> EnrollerID
    	{
    		get { return _enrollerID; }
    		set
    		{
    			if (_enrollerID != value)
    			{
    				ChangeTracker.RecordOriginalValue("EnrollerID", _enrollerID);
    				if (!IsDeserializing)
    				{
    					if (Account2 != null && Account2.AccountID != value)
    					{
    						Account2 = null;
    					}
    				}
    				_enrollerID = value;
    				EnrollerIDChanged();
    				OnPropertyChanged("EnrollerID");
    			}
    		}
    	}
    	private Nullable<int> _enrollerID;
    	partial void EnrollmentDateUTCChanged();
    	public Nullable<System.DateTime> EnrollmentDateUTC
    	{
    		get { return _enrollmentDateUTC; }
    		set
    		{
    			if (_enrollmentDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EnrollmentDateUTC", _enrollmentDateUTC);
    				_enrollmentDateUTC = value;
    				EnrollmentDateUTCChanged();
    				OnPropertyChanged("EnrollmentDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _enrollmentDateUTC;
    	partial void IsTaxExemptChanged();
    	public Nullable<bool> IsTaxExempt
    	{
    		get { return _isTaxExempt; }
    		set
    		{
    			if (_isTaxExempt != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsTaxExempt", _isTaxExempt);
    				_isTaxExempt = value;
    				IsTaxExemptChanged();
    				OnPropertyChanged("IsTaxExempt");
    			}
    		}
    	}
    	private Nullable<bool> _isTaxExempt;
    	partial void TaxNumberChanged();
    	public string TaxNumber
    	{
    		get { return _taxNumber; }
    		internal set
    		{
    			if (_taxNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxNumber", _taxNumber);
    				_taxNumber = value;
    				TaxNumberChanged();
    				OnPropertyChanged("TaxNumber");
    			}
    		}
    	}
    	private string _taxNumber;
    	partial void IsEntityChanged();
    	public bool IsEntity
    	{
    		get { return _isEntity; }
    		set
    		{
    			if (_isEntity != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsEntity", _isEntity);
    				_isEntity = value;
    				IsEntityChanged();
    				OnPropertyChanged("IsEntity");
    			}
    		}
    	}
    	private bool _isEntity;
    	partial void LastRenewalUTCChanged();
    	public Nullable<System.DateTime> LastRenewalUTC
    	{
    		get { return _lastRenewalUTC; }
    		set
    		{
    			if (_lastRenewalUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastRenewalUTC", _lastRenewalUTC);
    				_lastRenewalUTC = value;
    				LastRenewalUTCChanged();
    				OnPropertyChanged("LastRenewalUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _lastRenewalUTC;
    	partial void ReceivedApplicationChanged();
    	public bool ReceivedApplication
    	{
    		get { return _receivedApplication; }
    		set
    		{
    			if (_receivedApplication != value)
    			{
    				ChangeTracker.RecordOriginalValue("ReceivedApplication", _receivedApplication);
    				_receivedApplication = value;
    				ReceivedApplicationChanged();
    				OnPropertyChanged("ReceivedApplication");
    			}
    		}
    	}
    	private bool _receivedApplication;
    	partial void NickNameChanged();
    	public string NickName
    	{
    		get { return _nickName; }
    		set
    		{
    			if (_nickName != value)
    			{
    				ChangeTracker.RecordOriginalValue("NickName", _nickName);
    				_nickName = value;
    				NickNameChanged();
    				OnPropertyChanged("NickName");
    			}
    		}
    	}
    	private string _nickName;
    	partial void CoApplicantChanged();
    	public string CoApplicant
    	{
    		get { return _coApplicant; }
    		set
    		{
    			if (_coApplicant != value)
    			{
    				ChangeTracker.RecordOriginalValue("CoApplicant", _coApplicant);
    				_coApplicant = value;
    				CoApplicantChanged();
    				OnPropertyChanged("CoApplicant");
    			}
    		}
    	}
    	private string _coApplicant;
    	partial void EntityNameChanged();
    	public string EntityName
    	{
    		get { return _entityName; }
    		set
    		{
    			if (_entityName != value)
    			{
    				ChangeTracker.RecordOriginalValue("EntityName", _entityName);
    				_entityName = value;
    				EntityNameChanged();
    				OnPropertyChanged("EntityName");
    			}
    		}
    	}
    	private string _entityName;
    	partial void GenderIDChanged();
    	public Nullable<short> GenderID
    	{
    		get { return _genderID; }
    		set
    		{
    			if (_genderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("GenderID", _genderID);
    				if (!IsDeserializing)
    				{
    					if (Gender != null && Gender.GenderID != value)
    					{
    						Gender = null;
    					}
    				}
    				_genderID = value;
    				GenderIDChanged();
    				OnPropertyChanged("GenderID");
    			}
    		}
    	}
    	private Nullable<short> _genderID;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (ModifiedByUser != null && ModifiedByUser.UserID != value)
    					{
    						ModifiedByUser = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void CreatedByUserIDChanged();
    	public Nullable<int> CreatedByUserID
    	{
    		get { return _createdByUserID; }
    		set
    		{
    			if (_createdByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CreatedByUserID", _createdByUserID);
    				if (!IsDeserializing)
    				{
    					if (CreatedByUser != null && CreatedByUser.UserID != value)
    					{
    						CreatedByUser = null;
    					}
    				}
    				_createdByUserID = value;
    				CreatedByUserIDChanged();
    				OnPropertyChanged("CreatedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _createdByUserID;
    	partial void UserIDChanged();
    	public Nullable<int> UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserID", _userID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private Nullable<int> _userID;
    	partial void DefaultLanguageIDChanged();
    	public int DefaultLanguageID
    	{
    		get { return _defaultLanguageID; }
    		set
    		{
    			if (_defaultLanguageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DefaultLanguageID", _defaultLanguageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_defaultLanguageID = value;
    				DefaultLanguageIDChanged();
    				OnPropertyChanged("DefaultLanguageID");
    			}
    		}
    	}
    	private int _defaultLanguageID;
    	partial void AccountStatusChangeReasonIDChanged();
    	public Nullable<short> AccountStatusChangeReasonID
    	{
    		get { return _accountStatusChangeReasonID; }
    		set
    		{
    			if (_accountStatusChangeReasonID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountStatusChangeReasonID", _accountStatusChangeReasonID);
    				if (!IsDeserializing)
    				{
    					if (AccountStatusChangeReason != null && AccountStatusChangeReason.AccountStatusChangeReasonID != value)
    					{
    						AccountStatusChangeReason = null;
    					}
    				}
    				_accountStatusChangeReasonID = value;
    				AccountStatusChangeReasonIDChanged();
    				OnPropertyChanged("AccountStatusChangeReasonID");
    			}
    		}
    	}
    	private Nullable<short> _accountStatusChangeReasonID;
    	partial void PreferedContactMethodIDChanged();
    	public Nullable<int> PreferedContactMethodID
    	{
    		get { return _preferedContactMethodID; }
    		set
    		{
    			if (_preferedContactMethodID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PreferedContactMethodID", _preferedContactMethodID);
    				if (!IsDeserializing)
    				{
    					if (AccountListValue != null && AccountListValue.AccountListValueID != value)
    					{
    						AccountListValue = null;
    					}
    				}
    				_preferedContactMethodID = value;
    				PreferedContactMethodIDChanged();
    				OnPropertyChanged("PreferedContactMethodID");
    			}
    		}
    	}
    	private Nullable<int> _preferedContactMethodID;
    	partial void NextRenewalUTCChanged();
    	public Nullable<System.DateTime> NextRenewalUTC
    	{
    		get { return _nextRenewalUTC; }
    		set
    		{
    			if (_nextRenewalUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("NextRenewalUTC", _nextRenewalUTC);
    				_nextRenewalUTC = value;
    				NextRenewalUTCChanged();
    				OnPropertyChanged("NextRenewalUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _nextRenewalUTC;
    	partial void IsTaxExemptVerifiedChanged();
    	public bool IsTaxExemptVerified
    	{
    		get { return _isTaxExemptVerified; }
    		set
    		{
    			if (_isTaxExemptVerified != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsTaxExemptVerified", _isTaxExemptVerified);
    				_isTaxExemptVerified = value;
    				IsTaxExemptVerifiedChanged();
    				OnPropertyChanged("IsTaxExemptVerified");
    			}
    		}
    	}
    	private bool _isTaxExemptVerified;
    	partial void AccountSourceIDChanged();
    	public Nullable<short> AccountSourceID
    	{
    		get { return _accountSourceID; }
    		set
    		{
    			if (_accountSourceID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountSourceID", _accountSourceID);
    				if (!IsDeserializing)
    				{
    					if (AccountSource != null && AccountSource.AccountSourceID != value)
    					{
    						AccountSource = null;
    					}
    				}
    				_accountSourceID = value;
    				AccountSourceIDChanged();
    				OnPropertyChanged("AccountSourceID");
    			}
    		}
    	}
    	private Nullable<short> _accountSourceID;
    	partial void DateLastModifiedUTCChanged();
    	public Nullable<System.DateTime> DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateLastModifiedUTC;
    	partial void TerminatedDateUTCChanged();
    	public Nullable<System.DateTime> TerminatedDateUTC
    	{
    		get { return _terminatedDateUTC; }
    		set
    		{
    			if (_terminatedDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("TerminatedDateUTC", _terminatedDateUTC);
    				_terminatedDateUTC = value;
    				TerminatedDateUTCChanged();
    				OnPropertyChanged("TerminatedDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _terminatedDateUTC;
    	partial void TaxGeocodeChanged();
    	public string TaxGeocode
    	{
    		get { return _taxGeocode; }
    		set
    		{
    			if (_taxGeocode != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxGeocode", _taxGeocode);
    				_taxGeocode = value;
    				TaxGeocodeChanged();
    				OnPropertyChanged("TaxGeocode");
    			}
    		}
    	}
    	private string _taxGeocode;
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;
    	partial void IsLockedChanged();
    	public bool IsLocked
    	{
    		get { return _isLocked; }
    		set
    		{
    			if (_isLocked != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsLocked", _isLocked);
    				_isLocked = value;
    				IsLockedChanged();
    				OnPropertyChanged("IsLocked");
    			}
    		}
    	}
    	private bool _isLocked;
    	partial void AccountBlockingTypeIDChanged();
    	public Nullable<short> AccountBlockingTypeID
    	{
    		get { return _accountBlockingTypeID; }
    		set
    		{
    			if (_accountBlockingTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountBlockingTypeID", _accountBlockingTypeID);
    				_accountBlockingTypeID = value;
    				AccountBlockingTypeIDChanged();
    				OnPropertyChanged("AccountBlockingTypeID");
    			}
    		}
    	}
    	private Nullable<short> _accountBlockingTypeID;
    	partial void AccountBlockingSubTypeIDChanged();
    	public Nullable<short> AccountBlockingSubTypeID
    	{
    		get { return _accountBlockingSubTypeID; }
    		set
    		{
    			if (_accountBlockingSubTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountBlockingSubTypeID", _accountBlockingSubTypeID);
    				_accountBlockingSubTypeID = value;
    				AccountBlockingSubTypeIDChanged();
    				OnPropertyChanged("AccountBlockingSubTypeID");
    			}
    		}
    	}
    	private Nullable<short> _accountBlockingSubTypeID;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<AccountPaymentMethod> AccountPaymentMethods
    	{
    		get
    		{
    			if (_accountPaymentMethods == null)
    			{
    				_accountPaymentMethods = new TrackableCollection<AccountPaymentMethod>();
    				_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    				_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    			}
    			return _accountPaymentMethods;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPaymentMethods, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPaymentMethods != null)
    				{
    					_accountPaymentMethods.CollectionChanged -= FixupAccountPaymentMethods;
    					_accountPaymentMethods.CollectionChanged -= RaiseAccountPaymentMethodsChanged;
    				}
    				_accountPaymentMethods = value;
    				if (_accountPaymentMethods != null)
    				{
    					_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    					_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    				}
    				OnNavigationPropertyChanged("AccountPaymentMethods");
    			}
    		}
    	}
    	private TrackableCollection<AccountPaymentMethod> _accountPaymentMethods;
    	partial void AccountPaymentMethodsChanged();
    	private void RaiseAccountPaymentMethodsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPaymentMethodsChanged();
    	}
    
    	public TrackableCollection<AccountPhone> AccountPhones
    	{
    		get
    		{
    			if (_accountPhones == null)
    			{
    				_accountPhones = new TrackableCollection<AccountPhone>();
    				_accountPhones.CollectionChanged += FixupAccountPhones;
    				_accountPhones.CollectionChanged += RaiseAccountPhonesChanged;
    			}
    			return _accountPhones;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPhones, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPhones != null)
    				{
    					_accountPhones.CollectionChanged -= FixupAccountPhones;
    					_accountPhones.CollectionChanged -= RaiseAccountPhonesChanged;
    				}
    				_accountPhones = value;
    				if (_accountPhones != null)
    				{
    					_accountPhones.CollectionChanged += FixupAccountPhones;
    					_accountPhones.CollectionChanged += RaiseAccountPhonesChanged;
    				}
    				OnNavigationPropertyChanged("AccountPhones");
    			}
    		}
    	}
    	private TrackableCollection<AccountPhone> _accountPhones;
    	partial void AccountPhonesChanged();
    	private void RaiseAccountPhonesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPhonesChanged();
    	}
    
    	public TrackableCollection<Account> Accounts1
    	{
    		get
    		{
    			if (_accounts1 == null)
    			{
    				_accounts1 = new TrackableCollection<Account>();
    				_accounts1.CollectionChanged += FixupAccounts1;
    				_accounts1.CollectionChanged += RaiseAccounts1Changed;
    			}
    			return _accounts1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts1 != null)
    				{
    					_accounts1.CollectionChanged -= FixupAccounts1;
    					_accounts1.CollectionChanged -= RaiseAccounts1Changed;
    				}
    				_accounts1 = value;
    				if (_accounts1 != null)
    				{
    					_accounts1.CollectionChanged += FixupAccounts1;
    					_accounts1.CollectionChanged += RaiseAccounts1Changed;
    				}
    				OnNavigationPropertyChanged("Accounts1");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts1;
    	partial void Accounts1Changed();
    	private void RaiseAccounts1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Accounts1Changed();
    	}
    
    	public Account Sponsor
    	{
    		get { return _sponsor; }
    		set
    		{
    			if (!ReferenceEquals(_sponsor, value))
    			{
    				var previousValue = _sponsor;
    				_sponsor = value;
    				FixupSponsor(previousValue);
    				OnNavigationPropertyChanged("Sponsor");
    			}
    		}
    	}
    	private Account _sponsor;
    
    	public AccountStatus AccountStatus
    	{
    		get { return _accountStatus; }
    		set
    		{
    			if (!ReferenceEquals(_accountStatus, value))
    			{
    				var previousValue = _accountStatus;
    				_accountStatus = value;
    				FixupAccountStatus(previousValue);
    				OnNavigationPropertyChanged("AccountStatus");
    			}
    		}
    	}
    	private AccountStatus _accountStatus;
    
    	public AccountType AccountType
    	{
    		get { return _accountType; }
    		set
    		{
    			if (!ReferenceEquals(_accountType, value))
    			{
    				var previousValue = _accountType;
    				_accountType = value;
    				FixupAccountType(previousValue);
    				OnNavigationPropertyChanged("AccountType");
    			}
    		}
    	}
    	private AccountType _accountType;
    
    	public Gender Gender
    	{
    		get { return _gender; }
    		set
    		{
    			if (!ReferenceEquals(_gender, value))
    			{
    				var previousValue = _gender;
    				_gender = value;
    				FixupGender(previousValue);
    				OnNavigationPropertyChanged("Gender");
    			}
    		}
    	}
    	private Gender _gender;
    
    	public User CreatedByUser
    	{
    		get { return _createdByUser; }
    		set
    		{
    			if (!ReferenceEquals(_createdByUser, value))
    			{
    				var previousValue = _createdByUser;
    				_createdByUser = value;
    				FixupCreatedByUser(previousValue);
    				OnNavigationPropertyChanged("CreatedByUser");
    			}
    		}
    	}
    	private User _createdByUser;
    
    	public User ModifiedByUser
    	{
    		get { return _modifiedByUser; }
    		set
    		{
    			if (!ReferenceEquals(_modifiedByUser, value))
    			{
    				var previousValue = _modifiedByUser;
    				_modifiedByUser = value;
    				FixupModifiedByUser(previousValue);
    				OnNavigationPropertyChanged("ModifiedByUser");
    			}
    		}
    	}
    	private User _modifiedByUser;
    
    	public TrackableCollection<MailAccount> MailAccounts
    	{
    		get
    		{
    			if (_mailAccounts == null)
    			{
    				_mailAccounts = new TrackableCollection<MailAccount>();
    				_mailAccounts.CollectionChanged += FixupMailAccounts;
    				_mailAccounts.CollectionChanged += RaiseMailAccountsChanged;
    			}
    			return _mailAccounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_mailAccounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_mailAccounts != null)
    				{
    					_mailAccounts.CollectionChanged -= FixupMailAccounts;
    					_mailAccounts.CollectionChanged -= RaiseMailAccountsChanged;
    				}
    				_mailAccounts = value;
    				if (_mailAccounts != null)
    				{
    					_mailAccounts.CollectionChanged += FixupMailAccounts;
    					_mailAccounts.CollectionChanged += RaiseMailAccountsChanged;
    				}
    				OnNavigationPropertyChanged("MailAccounts");
    			}
    		}
    	}
    	private TrackableCollection<MailAccount> _mailAccounts;
    	partial void MailAccountsChanged();
    	private void RaiseMailAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		MailAccountsChanged();
    	}
    
    	public TrackableCollection<EmailSignature> EmailSignatures
    	{
    		get
    		{
    			if (_emailSignatures == null)
    			{
    				_emailSignatures = new TrackableCollection<EmailSignature>();
    				_emailSignatures.CollectionChanged += FixupEmailSignatures;
    				_emailSignatures.CollectionChanged += RaiseEmailSignaturesChanged;
    			}
    			return _emailSignatures;
    		}
    		set
    		{
    			if (!ReferenceEquals(_emailSignatures, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_emailSignatures != null)
    				{
    					_emailSignatures.CollectionChanged -= FixupEmailSignatures;
    					_emailSignatures.CollectionChanged -= RaiseEmailSignaturesChanged;
    				}
    				_emailSignatures = value;
    				if (_emailSignatures != null)
    				{
    					_emailSignatures.CollectionChanged += FixupEmailSignatures;
    					_emailSignatures.CollectionChanged += RaiseEmailSignaturesChanged;
    				}
    				OnNavigationPropertyChanged("EmailSignatures");
    			}
    		}
    	}
    	private TrackableCollection<EmailSignature> _emailSignatures;
    	partial void EmailSignaturesChanged();
    	private void RaiseEmailSignaturesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		EmailSignaturesChanged();
    	}
    
    	public TrackableCollection<AccountLanguage> AccountLanguages
    	{
    		get
    		{
    			if (_accountLanguages == null)
    			{
    				_accountLanguages = new TrackableCollection<AccountLanguage>();
    				_accountLanguages.CollectionChanged += FixupAccountLanguages;
    				_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    			}
    			return _accountLanguages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountLanguages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountLanguages != null)
    				{
    					_accountLanguages.CollectionChanged -= FixupAccountLanguages;
    					_accountLanguages.CollectionChanged -= RaiseAccountLanguagesChanged;
    				}
    				_accountLanguages = value;
    				if (_accountLanguages != null)
    				{
    					_accountLanguages.CollectionChanged += FixupAccountLanguages;
    					_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    				}
    				OnNavigationPropertyChanged("AccountLanguages");
    			}
    		}
    	}
    	private TrackableCollection<AccountLanguage> _accountLanguages;
    	partial void AccountLanguagesChanged();
    	private void RaiseAccountLanguagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountLanguagesChanged();
    	}
    
    	public TrackableCollection<AccountSponsor> AccountSponsors
    	{
    		get
    		{
    			if (_accountSponsors == null)
    			{
    				_accountSponsors = new TrackableCollection<AccountSponsor>();
    				_accountSponsors.CollectionChanged += FixupAccountSponsors;
    				_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    			}
    			return _accountSponsors;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountSponsors, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountSponsors != null)
    				{
    					_accountSponsors.CollectionChanged -= FixupAccountSponsors;
    					_accountSponsors.CollectionChanged -= RaiseAccountSponsorsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Remove the cascade delete event handler for any entities in the current collection.
    					foreach (AccountSponsor item in _accountSponsors)
    					{
    						ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    					}
    				}
    				_accountSponsors = value;
    				if (_accountSponsors != null)
    				{
    					_accountSponsors.CollectionChanged += FixupAccountSponsors;
    					_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Add the cascade delete event handler for any entities that are already in the new collection.
    					foreach (AccountSponsor item in _accountSponsors)
    					{
    						ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    					}
    				}
    				OnNavigationPropertyChanged("AccountSponsors");
    			}
    		}
    	}
    	private TrackableCollection<AccountSponsor> _accountSponsors;
    	partial void AccountSponsorsChanged();
    	private void RaiseAccountSponsorsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountSponsorsChanged();
    	}
    
    	public TrackableCollection<AccountSponsor> AccountSponsors1
    	{
    		get
    		{
    			if (_accountSponsors1 == null)
    			{
    				_accountSponsors1 = new TrackableCollection<AccountSponsor>();
    				_accountSponsors1.CollectionChanged += FixupAccountSponsors1;
    				_accountSponsors1.CollectionChanged += RaiseAccountSponsors1Changed;
    			}
    			return _accountSponsors1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountSponsors1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountSponsors1 != null)
    				{
    					_accountSponsors1.CollectionChanged -= FixupAccountSponsors1;
    					_accountSponsors1.CollectionChanged -= RaiseAccountSponsors1Changed;
    				}
    				_accountSponsors1 = value;
    				if (_accountSponsors1 != null)
    				{
    					_accountSponsors1.CollectionChanged += FixupAccountSponsors1;
    					_accountSponsors1.CollectionChanged += RaiseAccountSponsors1Changed;
    				}
    				OnNavigationPropertyChanged("AccountSponsors1");
    			}
    		}
    	}
    	private TrackableCollection<AccountSponsor> _accountSponsors1;
    	partial void AccountSponsors1Changed();
    	private void RaiseAccountSponsors1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountSponsors1Changed();
    	}
    
    	public TrackableCollection<CalendarEvent> CalendarEvents
    	{
    		get
    		{
    			if (_calendarEvents == null)
    			{
    				_calendarEvents = new TrackableCollection<CalendarEvent>();
    				_calendarEvents.CollectionChanged += FixupCalendarEvents;
    				_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    			}
    			return _calendarEvents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    					_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    				}
    				_calendarEvents = value;
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged += FixupCalendarEvents;
    					_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    				}
    				OnNavigationPropertyChanged("CalendarEvents");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents;
    	partial void CalendarEventsChanged();
    	private void RaiseCalendarEventsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEventsChanged();
    	}
    
    	public TrackableCollection<AccountEmailLog> AccountEmailLogs
    	{
    		get
    		{
    			if (_accountEmailLogs == null)
    			{
    				_accountEmailLogs = new TrackableCollection<AccountEmailLog>();
    				_accountEmailLogs.CollectionChanged += FixupAccountEmailLogs;
    				_accountEmailLogs.CollectionChanged += RaiseAccountEmailLogsChanged;
    			}
    			return _accountEmailLogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountEmailLogs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountEmailLogs != null)
    				{
    					_accountEmailLogs.CollectionChanged -= FixupAccountEmailLogs;
    					_accountEmailLogs.CollectionChanged -= RaiseAccountEmailLogsChanged;
    				}
    				_accountEmailLogs = value;
    				if (_accountEmailLogs != null)
    				{
    					_accountEmailLogs.CollectionChanged += FixupAccountEmailLogs;
    					_accountEmailLogs.CollectionChanged += RaiseAccountEmailLogsChanged;
    				}
    				OnNavigationPropertyChanged("AccountEmailLogs");
    			}
    		}
    	}
    	private TrackableCollection<AccountEmailLog> _accountEmailLogs;
    	partial void AccountEmailLogsChanged();
    	private void RaiseAccountEmailLogsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountEmailLogsChanged();
    	}
    
    	public TrackableCollection<AccountListValue> AccountListValues
    	{
    		get
    		{
    			if (_accountListValues == null)
    			{
    				_accountListValues = new TrackableCollection<AccountListValue>();
    				_accountListValues.CollectionChanged += FixupAccountListValues;
    				_accountListValues.CollectionChanged += RaiseAccountListValuesChanged;
    			}
    			return _accountListValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountListValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountListValues != null)
    				{
    					_accountListValues.CollectionChanged -= FixupAccountListValues;
    					_accountListValues.CollectionChanged -= RaiseAccountListValuesChanged;
    				}
    				_accountListValues = value;
    				if (_accountListValues != null)
    				{
    					_accountListValues.CollectionChanged += FixupAccountListValues;
    					_accountListValues.CollectionChanged += RaiseAccountListValuesChanged;
    				}
    				OnNavigationPropertyChanged("AccountListValues");
    			}
    		}
    	}
    	private TrackableCollection<AccountListValue> _accountListValues;
    	partial void AccountListValuesChanged();
    	private void RaiseAccountListValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountListValuesChanged();
    	}
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public AccountStatusChangeReason AccountStatusChangeReason
    	{
    		get { return _accountStatusChangeReason; }
    		set
    		{
    			if (!ReferenceEquals(_accountStatusChangeReason, value))
    			{
    				var previousValue = _accountStatusChangeReason;
    				_accountStatusChangeReason = value;
    				FixupAccountStatusChangeReason(previousValue);
    				OnNavigationPropertyChanged("AccountStatusChangeReason");
    			}
    		}
    	}
    	private AccountStatusChangeReason _accountStatusChangeReason;
    
    	public TrackableCollection<AccountPublicContactInfo> AccountPublicContactInfos
    	{
    		get
    		{
    			if (_accountPublicContactInfos == null)
    			{
    				_accountPublicContactInfos = new TrackableCollection<AccountPublicContactInfo>();
    				_accountPublicContactInfos.CollectionChanged += FixupAccountPublicContactInfos;
    				_accountPublicContactInfos.CollectionChanged += RaiseAccountPublicContactInfosChanged;
    			}
    			return _accountPublicContactInfos;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPublicContactInfos, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPublicContactInfos != null)
    				{
    					_accountPublicContactInfos.CollectionChanged -= FixupAccountPublicContactInfos;
    					_accountPublicContactInfos.CollectionChanged -= RaiseAccountPublicContactInfosChanged;
    				}
    				_accountPublicContactInfos = value;
    				if (_accountPublicContactInfos != null)
    				{
    					_accountPublicContactInfos.CollectionChanged += FixupAccountPublicContactInfos;
    					_accountPublicContactInfos.CollectionChanged += RaiseAccountPublicContactInfosChanged;
    				}
    				OnNavigationPropertyChanged("AccountPublicContactInfos");
    			}
    		}
    	}
    	private TrackableCollection<AccountPublicContactInfo> _accountPublicContactInfos;
    	partial void AccountPublicContactInfosChanged();
    	private void RaiseAccountPublicContactInfosChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPublicContactInfosChanged();
    	}
    
    	public TrackableCollection<Order> Orders
    	{
    		get
    		{
    			if (_orders == null)
    			{
    				_orders = new TrackableCollection<Order>();
    				_orders.CollectionChanged += FixupOrders;
    				_orders.CollectionChanged += RaiseOrdersChanged;
    			}
    			return _orders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orders != null)
    				{
    					_orders.CollectionChanged -= FixupOrders;
    					_orders.CollectionChanged -= RaiseOrdersChanged;
    				}
    				_orders = value;
    				if (_orders != null)
    				{
    					_orders.CollectionChanged += FixupOrders;
    					_orders.CollectionChanged += RaiseOrdersChanged;
    				}
    				OnNavigationPropertyChanged("Orders");
    			}
    		}
    	}
    	private TrackableCollection<Order> _orders;
    	partial void OrdersChanged();
    	private void RaiseOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrdersChanged();
    	}
    
    	public TrackableCollection<Address> Addresses
    	{
    		get
    		{
    			if (_addresses == null)
    			{
    				_addresses = new TrackableCollection<Address>();
    				_addresses.CollectionChanged += FixupAddresses;
    				_addresses.CollectionChanged += RaiseAddressesChanged;
    			}
    			return _addresses;
    		}
    		set
    		{
    			if (!ReferenceEquals(_addresses, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged -= FixupAddresses;
    					_addresses.CollectionChanged -= RaiseAddressesChanged;
    				}
    				_addresses = value;
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged += FixupAddresses;
    					_addresses.CollectionChanged += RaiseAddressesChanged;
    				}
    				OnNavigationPropertyChanged("Addresses");
    			}
    		}
    	}
    	private TrackableCollection<Address> _addresses;
    	partial void AddressesChanged();
    	private void RaiseAddressesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AddressesChanged();
    	}
    
    	public TrackableCollection<AccountContactTag> AccountContactTags
    	{
    		get
    		{
    			if (_accountContactTags == null)
    			{
    				_accountContactTags = new TrackableCollection<AccountContactTag>();
    				_accountContactTags.CollectionChanged += FixupAccountContactTags;
    				_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    			}
    			return _accountContactTags;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountContactTags, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountContactTags != null)
    				{
    					_accountContactTags.CollectionChanged -= FixupAccountContactTags;
    					_accountContactTags.CollectionChanged -= RaiseAccountContactTagsChanged;
    				}
    				_accountContactTags = value;
    				if (_accountContactTags != null)
    				{
    					_accountContactTags.CollectionChanged += FixupAccountContactTags;
    					_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    				}
    				OnNavigationPropertyChanged("AccountContactTags");
    			}
    		}
    	}
    	private TrackableCollection<AccountContactTag> _accountContactTags;
    	partial void AccountContactTagsChanged();
    	private void RaiseAccountContactTagsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountContactTagsChanged();
    	}
    
    	public AccountListValue AccountListValue
    	{
    		get { return _accountListValue; }
    		set
    		{
    			if (!ReferenceEquals(_accountListValue, value))
    			{
    				var previousValue = _accountListValue;
    				_accountListValue = value;
    				FixupAccountListValue(previousValue);
    				OnNavigationPropertyChanged("AccountListValue");
    			}
    		}
    	}
    	private AccountListValue _accountListValue;
    
    	public TrackableCollection<Site> Sites
    	{
    		get
    		{
    			if (_sites == null)
    			{
    				_sites = new TrackableCollection<Site>();
    				_sites.CollectionChanged += FixupSites;
    				_sites.CollectionChanged += RaiseSitesChanged;
    			}
    			return _sites;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites != null)
    				{
    					_sites.CollectionChanged -= FixupSites;
    					_sites.CollectionChanged -= RaiseSitesChanged;
    				}
    				_sites = value;
    				if (_sites != null)
    				{
    					_sites.CollectionChanged += FixupSites;
    					_sites.CollectionChanged += RaiseSitesChanged;
    				}
    				OnNavigationPropertyChanged("Sites");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites;
    	partial void SitesChanged();
    	private void RaiseSitesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SitesChanged();
    	}
    
    	public TrackableCollection<Note> Notes
    	{
    		get
    		{
    			if (_notes == null)
    			{
    				_notes = new TrackableCollection<Note>();
    				_notes.CollectionChanged += FixupNotes;
    				_notes.CollectionChanged += RaiseNotesChanged;
    			}
    			return _notes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_notes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_notes != null)
    				{
    					_notes.CollectionChanged -= FixupNotes;
    					_notes.CollectionChanged -= RaiseNotesChanged;
    				}
    				_notes = value;
    				if (_notes != null)
    				{
    					_notes.CollectionChanged += FixupNotes;
    					_notes.CollectionChanged += RaiseNotesChanged;
    				}
    				OnNavigationPropertyChanged("Notes");
    			}
    		}
    	}
    	private TrackableCollection<Note> _notes;
    	partial void NotesChanged();
    	private void RaiseNotesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NotesChanged();
    	}
    
    	public TrackableCollection<AccountPolicy> AccountPolicies
    	{
    		get
    		{
    			if (_accountPolicies == null)
    			{
    				_accountPolicies = new TrackableCollection<AccountPolicy>();
    				_accountPolicies.CollectionChanged += FixupAccountPolicies;
    				_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    			}
    			return _accountPolicies;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPolicies, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPolicies != null)
    				{
    					_accountPolicies.CollectionChanged -= FixupAccountPolicies;
    					_accountPolicies.CollectionChanged -= RaiseAccountPoliciesChanged;
    				}
    				_accountPolicies = value;
    				if (_accountPolicies != null)
    				{
    					_accountPolicies.CollectionChanged += FixupAccountPolicies;
    					_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    				}
    				OnNavigationPropertyChanged("AccountPolicies");
    			}
    		}
    	}
    	private TrackableCollection<AccountPolicy> _accountPolicies;
    	partial void AccountPoliciesChanged();
    	private void RaiseAccountPoliciesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPoliciesChanged();
    	}
    
    	public TrackableCollection<DistributionList> DistributionLists
    	{
    		get
    		{
    			if (_distributionLists == null)
    			{
    				_distributionLists = new TrackableCollection<DistributionList>();
    				_distributionLists.CollectionChanged += FixupDistributionLists;
    				_distributionLists.CollectionChanged += RaiseDistributionListsChanged;
    			}
    			return _distributionLists;
    		}
    		set
    		{
    			if (!ReferenceEquals(_distributionLists, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_distributionLists != null)
    				{
    					_distributionLists.CollectionChanged -= FixupDistributionLists;
    					_distributionLists.CollectionChanged -= RaiseDistributionListsChanged;
    				}
    				_distributionLists = value;
    				if (_distributionLists != null)
    				{
    					_distributionLists.CollectionChanged += FixupDistributionLists;
    					_distributionLists.CollectionChanged += RaiseDistributionListsChanged;
    				}
    				OnNavigationPropertyChanged("DistributionLists");
    			}
    		}
    	}
    	private TrackableCollection<DistributionList> _distributionLists;
    	partial void DistributionListsChanged();
    	private void RaiseDistributionListsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		DistributionListsChanged();
    	}
    
    	public TrackableCollection<DistributionSubscriber> DistributionSubscribers
    	{
    		get
    		{
    			if (_distributionSubscribers == null)
    			{
    				_distributionSubscribers = new TrackableCollection<DistributionSubscriber>();
    				_distributionSubscribers.CollectionChanged += FixupDistributionSubscribers;
    				_distributionSubscribers.CollectionChanged += RaiseDistributionSubscribersChanged;
    			}
    			return _distributionSubscribers;
    		}
    		set
    		{
    			if (!ReferenceEquals(_distributionSubscribers, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_distributionSubscribers != null)
    				{
    					_distributionSubscribers.CollectionChanged -= FixupDistributionSubscribers;
    					_distributionSubscribers.CollectionChanged -= RaiseDistributionSubscribersChanged;
    				}
    				_distributionSubscribers = value;
    				if (_distributionSubscribers != null)
    				{
    					_distributionSubscribers.CollectionChanged += FixupDistributionSubscribers;
    					_distributionSubscribers.CollectionChanged += RaiseDistributionSubscribersChanged;
    				}
    				OnNavigationPropertyChanged("DistributionSubscribers");
    			}
    		}
    	}
    	private TrackableCollection<DistributionSubscriber> _distributionSubscribers;
    	partial void DistributionSubscribersChanged();
    	private void RaiseDistributionSubscribersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		DistributionSubscribersChanged();
    	}
    
    	public TrackableCollection<CampaignSubscriber> CampaignSubscribers
    	{
    		get
    		{
    			if (_campaignSubscribers == null)
    			{
    				_campaignSubscribers = new TrackableCollection<CampaignSubscriber>();
    				_campaignSubscribers.CollectionChanged += FixupCampaignSubscribers;
    				_campaignSubscribers.CollectionChanged += RaiseCampaignSubscribersChanged;
    			}
    			return _campaignSubscribers;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignSubscribers, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignSubscribers != null)
    				{
    					_campaignSubscribers.CollectionChanged -= FixupCampaignSubscribers;
    					_campaignSubscribers.CollectionChanged -= RaiseCampaignSubscribersChanged;
    				}
    				_campaignSubscribers = value;
    				if (_campaignSubscribers != null)
    				{
    					_campaignSubscribers.CollectionChanged += FixupCampaignSubscribers;
    					_campaignSubscribers.CollectionChanged += RaiseCampaignSubscribersChanged;
    				}
    				OnNavigationPropertyChanged("CampaignSubscribers");
    			}
    		}
    	}
    	private TrackableCollection<CampaignSubscriber> _campaignSubscribers;
    	partial void CampaignSubscribersChanged();
    	private void RaiseCampaignSubscribersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignSubscribersChanged();
    	}
    
    	public TrackableCollection<CampaignSubscriber> CampaignSubscribers1
    	{
    		get
    		{
    			if (_campaignSubscribers1 == null)
    			{
    				_campaignSubscribers1 = new TrackableCollection<CampaignSubscriber>();
    				_campaignSubscribers1.CollectionChanged += FixupCampaignSubscribers1;
    				_campaignSubscribers1.CollectionChanged += RaiseCampaignSubscribers1Changed;
    			}
    			return _campaignSubscribers1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignSubscribers1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignSubscribers1 != null)
    				{
    					_campaignSubscribers1.CollectionChanged -= FixupCampaignSubscribers1;
    					_campaignSubscribers1.CollectionChanged -= RaiseCampaignSubscribers1Changed;
    				}
    				_campaignSubscribers1 = value;
    				if (_campaignSubscribers1 != null)
    				{
    					_campaignSubscribers1.CollectionChanged += FixupCampaignSubscribers1;
    					_campaignSubscribers1.CollectionChanged += RaiseCampaignSubscribers1Changed;
    				}
    				OnNavigationPropertyChanged("CampaignSubscribers1");
    			}
    		}
    	}
    	private TrackableCollection<CampaignSubscriber> _campaignSubscribers1;
    	partial void CampaignSubscribers1Changed();
    	private void RaiseCampaignSubscribers1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignSubscribers1Changed();
    	}
    
    	public TrackableCollection<AutoresponderMessage> AutoresponderMessages
    	{
    		get
    		{
    			if (_autoresponderMessages == null)
    			{
    				_autoresponderMessages = new TrackableCollection<AutoresponderMessage>();
    				_autoresponderMessages.CollectionChanged += FixupAutoresponderMessages;
    				_autoresponderMessages.CollectionChanged += RaiseAutoresponderMessagesChanged;
    			}
    			return _autoresponderMessages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoresponderMessages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoresponderMessages != null)
    				{
    					_autoresponderMessages.CollectionChanged -= FixupAutoresponderMessages;
    					_autoresponderMessages.CollectionChanged -= RaiseAutoresponderMessagesChanged;
    				}
    				_autoresponderMessages = value;
    				if (_autoresponderMessages != null)
    				{
    					_autoresponderMessages.CollectionChanged += FixupAutoresponderMessages;
    					_autoresponderMessages.CollectionChanged += RaiseAutoresponderMessagesChanged;
    				}
    				OnNavigationPropertyChanged("AutoresponderMessages");
    			}
    		}
    	}
    	private TrackableCollection<AutoresponderMessage> _autoresponderMessages;
    	partial void AutoresponderMessagesChanged();
    	private void RaiseAutoresponderMessagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoresponderMessagesChanged();
    	}
    
    	public TrackableCollection<AccountTag> AccountTags
    	{
    		get
    		{
    			if (_accountTags == null)
    			{
    				_accountTags = new TrackableCollection<AccountTag>();
    				_accountTags.CollectionChanged += FixupAccountTags;
    				_accountTags.CollectionChanged += RaiseAccountTagsChanged;
    			}
    			return _accountTags;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountTags, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountTags != null)
    				{
    					_accountTags.CollectionChanged -= FixupAccountTags;
    					_accountTags.CollectionChanged -= RaiseAccountTagsChanged;
    				}
    				_accountTags = value;
    				if (_accountTags != null)
    				{
    					_accountTags.CollectionChanged += FixupAccountTags;
    					_accountTags.CollectionChanged += RaiseAccountTagsChanged;
    				}
    				OnNavigationPropertyChanged("AccountTags");
    			}
    		}
    	}
    	private TrackableCollection<AccountTag> _accountTags;
    	partial void AccountTagsChanged();
    	private void RaiseAccountTagsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountTagsChanged();
    	}
    
    	public TrackableCollection<AccountTag> AccountTags1
    	{
    		get
    		{
    			if (_accountTags1 == null)
    			{
    				_accountTags1 = new TrackableCollection<AccountTag>();
    				_accountTags1.CollectionChanged += FixupAccountTags1;
    				_accountTags1.CollectionChanged += RaiseAccountTags1Changed;
    			}
    			return _accountTags1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountTags1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountTags1 != null)
    				{
    					_accountTags1.CollectionChanged -= FixupAccountTags1;
    					_accountTags1.CollectionChanged -= RaiseAccountTags1Changed;
    				}
    				_accountTags1 = value;
    				if (_accountTags1 != null)
    				{
    					_accountTags1.CollectionChanged += FixupAccountTags1;
    					_accountTags1.CollectionChanged += RaiseAccountTags1Changed;
    				}
    				OnNavigationPropertyChanged("AccountTags1");
    			}
    		}
    	}
    	private TrackableCollection<AccountTag> _accountTags1;
    	partial void AccountTags1Changed();
    	private void RaiseAccountTags1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountTags1Changed();
    	}
    
    	public AccountSource AccountSource
    	{
    		get { return _accountSource; }
    		set
    		{
    			if (!ReferenceEquals(_accountSource, value))
    			{
    				var previousValue = _accountSource;
    				_accountSource = value;
    				FixupAccountSource(previousValue);
    				OnNavigationPropertyChanged("AccountSource");
    			}
    		}
    	}
    	private AccountSource _accountSource;
    
    	public TrackableCollection<PartyGuest> PartyGuests
    	{
    		get
    		{
    			if (_partyGuests == null)
    			{
    				_partyGuests = new TrackableCollection<PartyGuest>();
    				_partyGuests.CollectionChanged += FixupPartyGuests;
    				_partyGuests.CollectionChanged += RaisePartyGuestsChanged;
    			}
    			return _partyGuests;
    		}
    		set
    		{
    			if (!ReferenceEquals(_partyGuests, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_partyGuests != null)
    				{
    					_partyGuests.CollectionChanged -= FixupPartyGuests;
    					_partyGuests.CollectionChanged -= RaisePartyGuestsChanged;
    				}
    				_partyGuests = value;
    				if (_partyGuests != null)
    				{
    					_partyGuests.CollectionChanged += FixupPartyGuests;
    					_partyGuests.CollectionChanged += RaisePartyGuestsChanged;
    				}
    				OnNavigationPropertyChanged("PartyGuests");
    			}
    		}
    	}
    	private TrackableCollection<PartyGuest> _partyGuests;
    	partial void PartyGuestsChanged();
    	private void RaisePartyGuestsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PartyGuestsChanged();
    	}
    
    	public TrackableCollection<Account> Accounts11
    	{
    		get
    		{
    			if (_accounts11 == null)
    			{
    				_accounts11 = new TrackableCollection<Account>();
    				_accounts11.CollectionChanged += FixupAccounts11;
    				_accounts11.CollectionChanged += RaiseAccounts11Changed;
    			}
    			return _accounts11;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts11, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts11 != null)
    				{
    					_accounts11.CollectionChanged -= FixupAccounts11;
    					_accounts11.CollectionChanged -= RaiseAccounts11Changed;
    				}
    				_accounts11 = value;
    				if (_accounts11 != null)
    				{
    					_accounts11.CollectionChanged += FixupAccounts11;
    					_accounts11.CollectionChanged += RaiseAccounts11Changed;
    				}
    				OnNavigationPropertyChanged("Accounts11");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts11;
    	partial void Accounts11Changed();
    	private void RaiseAccounts11Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Accounts11Changed();
    	}
    
    	public Account Account2
    	{
    		get { return _account2; }
    		set
    		{
    			if (!ReferenceEquals(_account2, value))
    			{
    				var previousValue = _account2;
    				_account2 = value;
    				FixupAccount2(previousValue);
    				OnNavigationPropertyChanged("Account2");
    			}
    		}
    	}
    	private Account _account2;
    
    	public TrackableCollection<CampaignOptOut> CampaignOptOuts
    	{
    		get
    		{
    			if (_campaignOptOuts == null)
    			{
    				_campaignOptOuts = new TrackableCollection<CampaignOptOut>();
    				_campaignOptOuts.CollectionChanged += FixupCampaignOptOuts;
    				_campaignOptOuts.CollectionChanged += RaiseCampaignOptOutsChanged;
    			}
    			return _campaignOptOuts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignOptOuts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignOptOuts != null)
    				{
    					_campaignOptOuts.CollectionChanged -= FixupCampaignOptOuts;
    					_campaignOptOuts.CollectionChanged -= RaiseCampaignOptOutsChanged;
    				}
    				_campaignOptOuts = value;
    				if (_campaignOptOuts != null)
    				{
    					_campaignOptOuts.CollectionChanged += FixupCampaignOptOuts;
    					_campaignOptOuts.CollectionChanged += RaiseCampaignOptOutsChanged;
    				}
    				OnNavigationPropertyChanged("CampaignOptOuts");
    			}
    		}
    	}
    	private TrackableCollection<CampaignOptOut> _campaignOptOuts;
    	partial void CampaignOptOutsChanged();
    	private void RaiseCampaignOptOutsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignOptOutsChanged();
    	}
    
    	public TrackableCollection<SupportTicket> SupportTickets
    	{
    		get
    		{
    			if (_supportTickets == null)
    			{
    				_supportTickets = new TrackableCollection<SupportTicket>();
    				_supportTickets.CollectionChanged += FixupSupportTickets;
    				_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    			}
    			return _supportTickets;
    		}
    		set
    		{
    			if (!ReferenceEquals(_supportTickets, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_supportTickets != null)
    				{
    					_supportTickets.CollectionChanged -= FixupSupportTickets;
    					_supportTickets.CollectionChanged -= RaiseSupportTicketsChanged;
    				}
    				_supportTickets = value;
    				if (_supportTickets != null)
    				{
    					_supportTickets.CollectionChanged += FixupSupportTickets;
    					_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    				}
    				OnNavigationPropertyChanged("SupportTickets");
    			}
    		}
    	}
    	private TrackableCollection<SupportTicket> _supportTickets;
    	partial void SupportTicketsChanged();
    	private void RaiseSupportTicketsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SupportTicketsChanged();
    	}
    
    	public TrackableCollection<AccountReport> AccountReports
    	{
    		get
    		{
    			if (_accountReports == null)
    			{
    				_accountReports = new TrackableCollection<AccountReport>();
    				_accountReports.CollectionChanged += FixupAccountReports;
    				_accountReports.CollectionChanged += RaiseAccountReportsChanged;
    			}
    			return _accountReports;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountReports, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountReports != null)
    				{
    					_accountReports.CollectionChanged -= FixupAccountReports;
    					_accountReports.CollectionChanged -= RaiseAccountReportsChanged;
    				}
    				_accountReports = value;
    				if (_accountReports != null)
    				{
    					_accountReports.CollectionChanged += FixupAccountReports;
    					_accountReports.CollectionChanged += RaiseAccountReportsChanged;
    				}
    				OnNavigationPropertyChanged("AccountReports");
    			}
    		}
    	}
    	private TrackableCollection<AccountReport> _accountReports;
    	partial void AccountReportsChanged();
    	private void RaiseAccountReportsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountReportsChanged();
    	}
    
    	public TrackableCollection<CampaignActionTokenValue> CampaignActionTokenValues
    	{
    		get
    		{
    			if (_campaignActionTokenValues == null)
    			{
    				_campaignActionTokenValues = new TrackableCollection<CampaignActionTokenValue>();
    				_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    				_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    			}
    			return _campaignActionTokenValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaignActionTokenValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaignActionTokenValues != null)
    				{
    					_campaignActionTokenValues.CollectionChanged -= FixupCampaignActionTokenValues;
    					_campaignActionTokenValues.CollectionChanged -= RaiseCampaignActionTokenValuesChanged;
    				}
    				_campaignActionTokenValues = value;
    				if (_campaignActionTokenValues != null)
    				{
    					_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    					_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    				}
    				OnNavigationPropertyChanged("CampaignActionTokenValues");
    			}
    		}
    	}
    	private TrackableCollection<CampaignActionTokenValue> _campaignActionTokenValues;
    	partial void CampaignActionTokenValuesChanged();
    	private void RaiseCampaignActionTokenValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignActionTokenValuesChanged();
    	}
    
    	public TrackableCollection<EmailTemplateToken> EmailTemplateTokens
    	{
    		get
    		{
    			if (_emailTemplateTokens == null)
    			{
    				_emailTemplateTokens = new TrackableCollection<EmailTemplateToken>();
    				_emailTemplateTokens.CollectionChanged += FixupEmailTemplateTokens;
    				_emailTemplateTokens.CollectionChanged += RaiseEmailTemplateTokensChanged;
    			}
    			return _emailTemplateTokens;
    		}
    		set
    		{
    			if (!ReferenceEquals(_emailTemplateTokens, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_emailTemplateTokens != null)
    				{
    					_emailTemplateTokens.CollectionChanged -= FixupEmailTemplateTokens;
    					_emailTemplateTokens.CollectionChanged -= RaiseEmailTemplateTokensChanged;
    				}
    				_emailTemplateTokens = value;
    				if (_emailTemplateTokens != null)
    				{
    					_emailTemplateTokens.CollectionChanged += FixupEmailTemplateTokens;
    					_emailTemplateTokens.CollectionChanged += RaiseEmailTemplateTokensChanged;
    				}
    				OnNavigationPropertyChanged("EmailTemplateTokens");
    			}
    		}
    	}
    	private TrackableCollection<EmailTemplateToken> _emailTemplateTokens;
    	partial void EmailTemplateTokensChanged();
    	private void RaiseEmailTemplateTokensChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		EmailTemplateTokensChanged();
    	}
    
    	public TrackableCollection<AccountDevice> AccountDevices
    	{
    		get
    		{
    			if (_accountDevices == null)
    			{
    				_accountDevices = new TrackableCollection<AccountDevice>();
    				_accountDevices.CollectionChanged += FixupAccountDevices;
    				_accountDevices.CollectionChanged += RaiseAccountDevicesChanged;
    			}
    			return _accountDevices;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountDevices, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountDevices != null)
    				{
    					_accountDevices.CollectionChanged -= FixupAccountDevices;
    					_accountDevices.CollectionChanged -= RaiseAccountDevicesChanged;
    				}
    				_accountDevices = value;
    				if (_accountDevices != null)
    				{
    					_accountDevices.CollectionChanged += FixupAccountDevices;
    					_accountDevices.CollectionChanged += RaiseAccountDevicesChanged;
    				}
    				OnNavigationPropertyChanged("AccountDevices");
    			}
    		}
    	}
    	private TrackableCollection<AccountDevice> _accountDevices;
    	partial void AccountDevicesChanged();
    	private void RaiseAccountDevicesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountDevicesChanged();
    	}
    
    	public TrackableCollection<AccountProperty> AccountProperties
    	{
    		get
    		{
    			if (_accountProperties == null)
    			{
    				_accountProperties = new TrackableCollection<AccountProperty>();
    				_accountProperties.CollectionChanged += FixupAccountProperties;
    				_accountProperties.CollectionChanged += RaiseAccountPropertiesChanged;
    			}
    			return _accountProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountProperties != null)
    				{
    					_accountProperties.CollectionChanged -= FixupAccountProperties;
    					_accountProperties.CollectionChanged -= RaiseAccountPropertiesChanged;
    				}
    				_accountProperties = value;
    				if (_accountProperties != null)
    				{
    					_accountProperties.CollectionChanged += FixupAccountProperties;
    					_accountProperties.CollectionChanged += RaiseAccountPropertiesChanged;
    				}
    				OnNavigationPropertyChanged("AccountProperties");
    			}
    		}
    	}
    	private TrackableCollection<AccountProperty> _accountProperties;
    	partial void AccountPropertiesChanged();
    	private void RaiseAccountPropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPropertiesChanged();
    	}
    
    	public TrackableCollection<FileResource> FileResources
    	{
    		get
    		{
    			if (_fileResources == null)
    			{
    				_fileResources = new TrackableCollection<FileResource>();
    				_fileResources.CollectionChanged += FixupFileResources;
    				_fileResources.CollectionChanged += RaiseFileResourcesChanged;
    			}
    			return _fileResources;
    		}
    		set
    		{
    			if (!ReferenceEquals(_fileResources, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_fileResources != null)
    				{
    					_fileResources.CollectionChanged -= FixupFileResources;
    					_fileResources.CollectionChanged -= RaiseFileResourcesChanged;
    				}
    				_fileResources = value;
    				if (_fileResources != null)
    				{
    					_fileResources.CollectionChanged += FixupFileResources;
    					_fileResources.CollectionChanged += RaiseFileResourcesChanged;
    				}
    				OnNavigationPropertyChanged("FileResources");
    			}
    		}
    	}
    	private TrackableCollection<FileResource> _fileResources;
    	partial void FileResourcesChanged();
    	private void RaiseFileResourcesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		FileResourcesChanged();
    	}
    
    	public TrackableCollection<AutoshipOrder> AutoshipOrders
    	{
    		get
    		{
    			if (_autoshipOrders == null)
    			{
    				_autoshipOrders = new TrackableCollection<AutoshipOrder>();
    				_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    				_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    			}
    			return _autoshipOrders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipOrders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipOrders != null)
    				{
    					_autoshipOrders.CollectionChanged -= FixupAutoshipOrders;
    					_autoshipOrders.CollectionChanged -= RaiseAutoshipOrdersChanged;
    				}
    				_autoshipOrders = value;
    				if (_autoshipOrders != null)
    				{
    					_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    					_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipOrders");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipOrder> _autoshipOrders;
    	partial void AutoshipOrdersChanged();
    	private void RaiseAutoshipOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipOrdersChanged();
    	}
    
    	public TrackableCollection<AccountSuppliedID> AccountSuppliedIDs
    	{
    		get
    		{
    			if (_accountSuppliedIDs == null)
    			{
    				_accountSuppliedIDs = new TrackableCollection<AccountSuppliedID>();
    				_accountSuppliedIDs.CollectionChanged += FixupAccountSuppliedIDs;
    				_accountSuppliedIDs.CollectionChanged += RaiseAccountSuppliedIDsChanged;
    			}
    			return _accountSuppliedIDs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountSuppliedIDs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountSuppliedIDs != null)
    				{
    					_accountSuppliedIDs.CollectionChanged -= FixupAccountSuppliedIDs;
    					_accountSuppliedIDs.CollectionChanged -= RaiseAccountSuppliedIDsChanged;
    				}
    				_accountSuppliedIDs = value;
    				if (_accountSuppliedIDs != null)
    				{
    					_accountSuppliedIDs.CollectionChanged += FixupAccountSuppliedIDs;
    					_accountSuppliedIDs.CollectionChanged += RaiseAccountSuppliedIDsChanged;
    				}
    				OnNavigationPropertyChanged("AccountSuppliedIDs");
    			}
    		}
    	}
    	private TrackableCollection<AccountSuppliedID> _accountSuppliedIDs;
    	partial void AccountSuppliedIDsChanged();
    	private void RaiseAccountSuppliedIDsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountSuppliedIDsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_accountPaymentMethods != null)
    		{
    			_accountPaymentMethods.CollectionChanged -= FixupAccountPaymentMethods;
    			_accountPaymentMethods.CollectionChanged -= RaiseAccountPaymentMethodsChanged;
    			_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    			_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    		}
    		if (_accountPhones != null)
    		{
    			_accountPhones.CollectionChanged -= FixupAccountPhones;
    			_accountPhones.CollectionChanged -= RaiseAccountPhonesChanged;
    			_accountPhones.CollectionChanged += FixupAccountPhones;
    			_accountPhones.CollectionChanged += RaiseAccountPhonesChanged;
    		}
    		if (_accounts1 != null)
    		{
    			_accounts1.CollectionChanged -= FixupAccounts1;
    			_accounts1.CollectionChanged -= RaiseAccounts1Changed;
    			_accounts1.CollectionChanged += FixupAccounts1;
    			_accounts1.CollectionChanged += RaiseAccounts1Changed;
    		}
    		if (_mailAccounts != null)
    		{
    			_mailAccounts.CollectionChanged -= FixupMailAccounts;
    			_mailAccounts.CollectionChanged -= RaiseMailAccountsChanged;
    			_mailAccounts.CollectionChanged += FixupMailAccounts;
    			_mailAccounts.CollectionChanged += RaiseMailAccountsChanged;
    		}
    		if (_emailSignatures != null)
    		{
    			_emailSignatures.CollectionChanged -= FixupEmailSignatures;
    			_emailSignatures.CollectionChanged -= RaiseEmailSignaturesChanged;
    			_emailSignatures.CollectionChanged += FixupEmailSignatures;
    			_emailSignatures.CollectionChanged += RaiseEmailSignaturesChanged;
    		}
    		if (_accountLanguages != null)
    		{
    			_accountLanguages.CollectionChanged -= FixupAccountLanguages;
    			_accountLanguages.CollectionChanged -= RaiseAccountLanguagesChanged;
    			_accountLanguages.CollectionChanged += FixupAccountLanguages;
    			_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    		}
    		if (_accountSponsors != null)
    		{
    			_accountSponsors.CollectionChanged -= FixupAccountSponsors;
    			_accountSponsors.CollectionChanged -= RaiseAccountSponsorsChanged;
    			_accountSponsors.CollectionChanged += FixupAccountSponsors;
    			_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    			// This is the principal end in an association that performs cascade deletes.
    			// Add the cascade delete event handler for any entities that are 
    			// already in the collection.
    			foreach (var item in _accountSponsors)
    			{
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    		if (_accountSponsors1 != null)
    		{
    			_accountSponsors1.CollectionChanged -= FixupAccountSponsors1;
    			_accountSponsors1.CollectionChanged -= RaiseAccountSponsors1Changed;
    			_accountSponsors1.CollectionChanged += FixupAccountSponsors1;
    			_accountSponsors1.CollectionChanged += RaiseAccountSponsors1Changed;
    		}
    		if (_calendarEvents != null)
    		{
    			_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    			_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    			_calendarEvents.CollectionChanged += FixupCalendarEvents;
    			_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    		}
    		if (_accountEmailLogs != null)
    		{
    			_accountEmailLogs.CollectionChanged -= FixupAccountEmailLogs;
    			_accountEmailLogs.CollectionChanged -= RaiseAccountEmailLogsChanged;
    			_accountEmailLogs.CollectionChanged += FixupAccountEmailLogs;
    			_accountEmailLogs.CollectionChanged += RaiseAccountEmailLogsChanged;
    		}
    		if (_accountListValues != null)
    		{
    			_accountListValues.CollectionChanged -= FixupAccountListValues;
    			_accountListValues.CollectionChanged -= RaiseAccountListValuesChanged;
    			_accountListValues.CollectionChanged += FixupAccountListValues;
    			_accountListValues.CollectionChanged += RaiseAccountListValuesChanged;
    		}
    		if (_accountPublicContactInfos != null)
    		{
    			_accountPublicContactInfos.CollectionChanged -= FixupAccountPublicContactInfos;
    			_accountPublicContactInfos.CollectionChanged -= RaiseAccountPublicContactInfosChanged;
    			_accountPublicContactInfos.CollectionChanged += FixupAccountPublicContactInfos;
    			_accountPublicContactInfos.CollectionChanged += RaiseAccountPublicContactInfosChanged;
    		}
    		if (_orders != null)
    		{
    			_orders.CollectionChanged -= FixupOrders;
    			_orders.CollectionChanged -= RaiseOrdersChanged;
    			_orders.CollectionChanged += FixupOrders;
    			_orders.CollectionChanged += RaiseOrdersChanged;
    		}
    		if (_addresses != null)
    		{
    			_addresses.CollectionChanged -= FixupAddresses;
    			_addresses.CollectionChanged -= RaiseAddressesChanged;
    			_addresses.CollectionChanged += FixupAddresses;
    			_addresses.CollectionChanged += RaiseAddressesChanged;
    		}
    		if (_accountContactTags != null)
    		{
    			_accountContactTags.CollectionChanged -= FixupAccountContactTags;
    			_accountContactTags.CollectionChanged -= RaiseAccountContactTagsChanged;
    			_accountContactTags.CollectionChanged += FixupAccountContactTags;
    			_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    		}
    		if (_sites != null)
    		{
    			_sites.CollectionChanged -= FixupSites;
    			_sites.CollectionChanged -= RaiseSitesChanged;
    			_sites.CollectionChanged += FixupSites;
    			_sites.CollectionChanged += RaiseSitesChanged;
    		}
    		if (_notes != null)
    		{
    			_notes.CollectionChanged -= FixupNotes;
    			_notes.CollectionChanged -= RaiseNotesChanged;
    			_notes.CollectionChanged += FixupNotes;
    			_notes.CollectionChanged += RaiseNotesChanged;
    		}
    		if (_accountPolicies != null)
    		{
    			_accountPolicies.CollectionChanged -= FixupAccountPolicies;
    			_accountPolicies.CollectionChanged -= RaiseAccountPoliciesChanged;
    			_accountPolicies.CollectionChanged += FixupAccountPolicies;
    			_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    		}
    		if (_distributionLists != null)
    		{
    			_distributionLists.CollectionChanged -= FixupDistributionLists;
    			_distributionLists.CollectionChanged -= RaiseDistributionListsChanged;
    			_distributionLists.CollectionChanged += FixupDistributionLists;
    			_distributionLists.CollectionChanged += RaiseDistributionListsChanged;
    		}
    		if (_distributionSubscribers != null)
    		{
    			_distributionSubscribers.CollectionChanged -= FixupDistributionSubscribers;
    			_distributionSubscribers.CollectionChanged -= RaiseDistributionSubscribersChanged;
    			_distributionSubscribers.CollectionChanged += FixupDistributionSubscribers;
    			_distributionSubscribers.CollectionChanged += RaiseDistributionSubscribersChanged;
    		}
    		if (_campaignSubscribers != null)
    		{
    			_campaignSubscribers.CollectionChanged -= FixupCampaignSubscribers;
    			_campaignSubscribers.CollectionChanged -= RaiseCampaignSubscribersChanged;
    			_campaignSubscribers.CollectionChanged += FixupCampaignSubscribers;
    			_campaignSubscribers.CollectionChanged += RaiseCampaignSubscribersChanged;
    		}
    		if (_campaignSubscribers1 != null)
    		{
    			_campaignSubscribers1.CollectionChanged -= FixupCampaignSubscribers1;
    			_campaignSubscribers1.CollectionChanged -= RaiseCampaignSubscribers1Changed;
    			_campaignSubscribers1.CollectionChanged += FixupCampaignSubscribers1;
    			_campaignSubscribers1.CollectionChanged += RaiseCampaignSubscribers1Changed;
    		}
    		if (_autoresponderMessages != null)
    		{
    			_autoresponderMessages.CollectionChanged -= FixupAutoresponderMessages;
    			_autoresponderMessages.CollectionChanged -= RaiseAutoresponderMessagesChanged;
    			_autoresponderMessages.CollectionChanged += FixupAutoresponderMessages;
    			_autoresponderMessages.CollectionChanged += RaiseAutoresponderMessagesChanged;
    		}
    		if (_accountTags != null)
    		{
    			_accountTags.CollectionChanged -= FixupAccountTags;
    			_accountTags.CollectionChanged -= RaiseAccountTagsChanged;
    			_accountTags.CollectionChanged += FixupAccountTags;
    			_accountTags.CollectionChanged += RaiseAccountTagsChanged;
    		}
    		if (_accountTags1 != null)
    		{
    			_accountTags1.CollectionChanged -= FixupAccountTags1;
    			_accountTags1.CollectionChanged -= RaiseAccountTags1Changed;
    			_accountTags1.CollectionChanged += FixupAccountTags1;
    			_accountTags1.CollectionChanged += RaiseAccountTags1Changed;
    		}
    		if (_partyGuests != null)
    		{
    			_partyGuests.CollectionChanged -= FixupPartyGuests;
    			_partyGuests.CollectionChanged -= RaisePartyGuestsChanged;
    			_partyGuests.CollectionChanged += FixupPartyGuests;
    			_partyGuests.CollectionChanged += RaisePartyGuestsChanged;
    		}
    		if (_accounts11 != null)
    		{
    			_accounts11.CollectionChanged -= FixupAccounts11;
    			_accounts11.CollectionChanged -= RaiseAccounts11Changed;
    			_accounts11.CollectionChanged += FixupAccounts11;
    			_accounts11.CollectionChanged += RaiseAccounts11Changed;
    		}
    		if (_campaignOptOuts != null)
    		{
    			_campaignOptOuts.CollectionChanged -= FixupCampaignOptOuts;
    			_campaignOptOuts.CollectionChanged -= RaiseCampaignOptOutsChanged;
    			_campaignOptOuts.CollectionChanged += FixupCampaignOptOuts;
    			_campaignOptOuts.CollectionChanged += RaiseCampaignOptOutsChanged;
    		}
    		if (_supportTickets != null)
    		{
    			_supportTickets.CollectionChanged -= FixupSupportTickets;
    			_supportTickets.CollectionChanged -= RaiseSupportTicketsChanged;
    			_supportTickets.CollectionChanged += FixupSupportTickets;
    			_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    		}
    		if (_accountReports != null)
    		{
    			_accountReports.CollectionChanged -= FixupAccountReports;
    			_accountReports.CollectionChanged -= RaiseAccountReportsChanged;
    			_accountReports.CollectionChanged += FixupAccountReports;
    			_accountReports.CollectionChanged += RaiseAccountReportsChanged;
    		}
    		if (_campaignActionTokenValues != null)
    		{
    			_campaignActionTokenValues.CollectionChanged -= FixupCampaignActionTokenValues;
    			_campaignActionTokenValues.CollectionChanged -= RaiseCampaignActionTokenValuesChanged;
    			_campaignActionTokenValues.CollectionChanged += FixupCampaignActionTokenValues;
    			_campaignActionTokenValues.CollectionChanged += RaiseCampaignActionTokenValuesChanged;
    		}
    		if (_emailTemplateTokens != null)
    		{
    			_emailTemplateTokens.CollectionChanged -= FixupEmailTemplateTokens;
    			_emailTemplateTokens.CollectionChanged -= RaiseEmailTemplateTokensChanged;
    			_emailTemplateTokens.CollectionChanged += FixupEmailTemplateTokens;
    			_emailTemplateTokens.CollectionChanged += RaiseEmailTemplateTokensChanged;
    		}
    		if (_accountDevices != null)
    		{
    			_accountDevices.CollectionChanged -= FixupAccountDevices;
    			_accountDevices.CollectionChanged -= RaiseAccountDevicesChanged;
    			_accountDevices.CollectionChanged += FixupAccountDevices;
    			_accountDevices.CollectionChanged += RaiseAccountDevicesChanged;
    		}
    		if (_accountProperties != null)
    		{
    			_accountProperties.CollectionChanged -= FixupAccountProperties;
    			_accountProperties.CollectionChanged -= RaiseAccountPropertiesChanged;
    			_accountProperties.CollectionChanged += FixupAccountProperties;
    			_accountProperties.CollectionChanged += RaiseAccountPropertiesChanged;
    		}
    		if (_fileResources != null)
    		{
    			_fileResources.CollectionChanged -= FixupFileResources;
    			_fileResources.CollectionChanged -= RaiseFileResourcesChanged;
    			_fileResources.CollectionChanged += FixupFileResources;
    			_fileResources.CollectionChanged += RaiseFileResourcesChanged;
    		}
    		if (_autoshipOrders != null)
    		{
    			_autoshipOrders.CollectionChanged -= FixupAutoshipOrders;
    			_autoshipOrders.CollectionChanged -= RaiseAutoshipOrdersChanged;
    			_autoshipOrders.CollectionChanged += FixupAutoshipOrders;
    			_autoshipOrders.CollectionChanged += RaiseAutoshipOrdersChanged;
    		}
    		if (_accountSuppliedIDs != null)
    		{
    			_accountSuppliedIDs.CollectionChanged -= FixupAccountSuppliedIDs;
    			_accountSuppliedIDs.CollectionChanged -= RaiseAccountSuppliedIDsChanged;
    			_accountSuppliedIDs.CollectionChanged += FixupAccountSuppliedIDs;
    			_accountSuppliedIDs.CollectionChanged += RaiseAccountSuppliedIDsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountPaymentMethods.Clear();
    		AccountPhones.Clear();
    		Accounts1.Clear();
    		Sponsor = null;
    		AccountStatus = null;
    		AccountType = null;
    		Gender = null;
    		CreatedByUser = null;
    		ModifiedByUser = null;
    		MailAccounts.Clear();
    		EmailSignatures.Clear();
    		AccountLanguages.Clear();
    		AccountSponsors.Clear();
    		AccountSponsors1.Clear();
    		CalendarEvents.Clear();
    		AccountEmailLogs.Clear();
    		AccountListValues.Clear();
    		User = null;
    		Language = null;
    		AccountStatusChangeReason = null;
    		AccountPublicContactInfos.Clear();
    		Orders.Clear();
    		Addresses.Clear();
    		AccountContactTags.Clear();
    		AccountListValue = null;
    		Sites.Clear();
    		Notes.Clear();
    		AccountPolicies.Clear();
    		DistributionLists.Clear();
    		DistributionSubscribers.Clear();
    		CampaignSubscribers.Clear();
    		CampaignSubscribers1.Clear();
    		AutoresponderMessages.Clear();
    		AccountTags.Clear();
    		AccountTags1.Clear();
    		AccountSource = null;
    		PartyGuests.Clear();
    		Accounts11.Clear();
    		Account2 = null;
    		CampaignOptOuts.Clear();
    		SupportTickets.Clear();
    		AccountReports.Clear();
    		CampaignActionTokenValues.Clear();
    		EmailTemplateTokens.Clear();
    		AccountDevices.Clear();
    		AccountProperties.Clear();
    		FileResources.Clear();
    		AutoshipOrders.Clear();
    		AccountSuppliedIDs.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupSponsor(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts1.Contains(this))
    		{
    			previousValue.Accounts1.Remove(this);
    		}
    
    		if (Sponsor != null)
    		{
    			if (!Sponsor.Accounts1.Contains(this))
    			{
    				Sponsor.Accounts1.Add(this);
    			}
    
    			SponsorID = Sponsor.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			SponsorID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Sponsor")
    				&& (ChangeTracker.OriginalValues["Sponsor"] == Sponsor))
    			{
    				ChangeTracker.OriginalValues.Remove("Sponsor");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Sponsor", previousValue);
    			}
    			if (Sponsor != null && !Sponsor.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Sponsor.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountStatus(AccountStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts.Contains(this))
    		{
    			previousValue.Accounts.Remove(this);
    		}
    
    		if (AccountStatus != null)
    		{
    			if (!AccountStatus.Accounts.Contains(this))
    			{
    				AccountStatus.Accounts.Add(this);
    			}
    
    			AccountStatusID = AccountStatus.AccountStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountStatus")
    				&& (ChangeTracker.OriginalValues["AccountStatus"] == AccountStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountStatus", previousValue);
    			}
    			if (AccountStatus != null && !AccountStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountStatus.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountType(AccountType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts.Contains(this))
    		{
    			previousValue.Accounts.Remove(this);
    		}
    
    		if (AccountType != null)
    		{
    			if (!AccountType.Accounts.Contains(this))
    			{
    				AccountType.Accounts.Add(this);
    			}
    
    			AccountTypeID = AccountType.AccountTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountType")
    				&& (ChangeTracker.OriginalValues["AccountType"] == AccountType))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountType", previousValue);
    			}
    			if (AccountType != null && !AccountType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupGender(Gender previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts.Contains(this))
    		{
    			previousValue.Accounts.Remove(this);
    		}
    
    		if (Gender != null)
    		{
    			if (!Gender.Accounts.Contains(this))
    			{
    				Gender.Accounts.Add(this);
    			}
    
    			GenderID = Gender.GenderID;
    		}
    		else if (!skipKeys)
    		{
    			GenderID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Gender")
    				&& (ChangeTracker.OriginalValues["Gender"] == Gender))
    			{
    				ChangeTracker.OriginalValues.Remove("Gender");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Gender", previousValue);
    			}
    			if (Gender != null && !Gender.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Gender.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCreatedByUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (CreatedByUser != null)
    		{
    			CreatedByUserID = CreatedByUser.UserID;
    		}
    
    		else if (!skipKeys)
    		{
    			CreatedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CreatedByUser")
    				&& (ChangeTracker.OriginalValues["CreatedByUser"] == CreatedByUser))
    			{
    				ChangeTracker.OriginalValues.Remove("CreatedByUser");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CreatedByUser", previousValue);
    			}
    			if (CreatedByUser != null && !CreatedByUser.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CreatedByUser.StartTracking();
    			}
    		}
    	}
    
    	private void FixupModifiedByUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (ModifiedByUser != null)
    		{
    			ModifiedByUserID = ModifiedByUser.UserID;
    		}
    
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ModifiedByUser")
    				&& (ChangeTracker.OriginalValues["ModifiedByUser"] == ModifiedByUser))
    			{
    				ChangeTracker.OriginalValues.Remove("ModifiedByUser");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUser", previousValue);
    			}
    			if (ModifiedByUser != null && !ModifiedByUser.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ModifiedByUser.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts_1.Contains(this))
    		{
    			previousValue.Accounts_1.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Accounts_1.Contains(this))
    			{
    				User.Accounts_1.Add(this);
    			}
    
    			UserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			UserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupLanguage(Language previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts.Contains(this))
    		{
    			previousValue.Accounts.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.Accounts.Contains(this))
    			{
    				Language.Accounts.Add(this);
    			}
    
    			DefaultLanguageID = Language.LanguageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountStatusChangeReason(AccountStatusChangeReason previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts.Contains(this))
    		{
    			previousValue.Accounts.Remove(this);
    		}
    
    		if (AccountStatusChangeReason != null)
    		{
    			if (!AccountStatusChangeReason.Accounts.Contains(this))
    			{
    				AccountStatusChangeReason.Accounts.Add(this);
    			}
    
    			AccountStatusChangeReasonID = AccountStatusChangeReason.AccountStatusChangeReasonID;
    		}
    		else if (!skipKeys)
    		{
    			AccountStatusChangeReasonID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountStatusChangeReason")
    				&& (ChangeTracker.OriginalValues["AccountStatusChangeReason"] == AccountStatusChangeReason))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountStatusChangeReason");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountStatusChangeReason", previousValue);
    			}
    			if (AccountStatusChangeReason != null && !AccountStatusChangeReason.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountStatusChangeReason.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountListValue(AccountListValue previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts.Contains(this))
    		{
    			previousValue.Accounts.Remove(this);
    		}
    
    		if (AccountListValue != null)
    		{
    			if (!AccountListValue.Accounts.Contains(this))
    			{
    				AccountListValue.Accounts.Add(this);
    			}
    
    			PreferedContactMethodID = AccountListValue.AccountListValueID;
    		}
    		else if (!skipKeys)
    		{
    			PreferedContactMethodID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountListValue")
    				&& (ChangeTracker.OriginalValues["AccountListValue"] == AccountListValue))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountListValue");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountListValue", previousValue);
    			}
    			if (AccountListValue != null && !AccountListValue.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountListValue.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountSource(AccountSource previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts.Contains(this))
    		{
    			previousValue.Accounts.Remove(this);
    		}
    
    		if (AccountSource != null)
    		{
    			if (!AccountSource.Accounts.Contains(this))
    			{
    				AccountSource.Accounts.Add(this);
    			}
    
    			AccountSourceID = AccountSource.AccountSourceID;
    		}
    		else if (!skipKeys)
    		{
    			AccountSourceID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountSource")
    				&& (ChangeTracker.OriginalValues["AccountSource"] == AccountSource))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountSource");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountSource", previousValue);
    			}
    			if (AccountSource != null && !AccountSource.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountSource.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccount2(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Accounts11.Contains(this))
    		{
    			previousValue.Accounts11.Remove(this);
    		}
    
    		if (Account2 != null)
    		{
    			if (!Account2.Accounts11.Contains(this))
    			{
    				Account2.Accounts11.Add(this);
    			}
    
    			EnrollerID = Account2.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			EnrollerID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account2")
    				&& (ChangeTracker.OriginalValues["Account2"] == Account2))
    			{
    				ChangeTracker.OriginalValues.Remove("Account2");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account2", previousValue);
    			}
    			if (Account2 != null && !Account2.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account2.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccountPaymentMethods(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPaymentMethod item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPaymentMethods", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPaymentMethod item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPaymentMethods", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPhones(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPhone item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPhones", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPhone item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPhones", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				item.Sponsor = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Sponsor, this))
    				{
    					item.Sponsor = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupMailAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (MailAccount item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("MailAccounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (MailAccount item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("MailAccounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupEmailSignatures(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (EmailSignature item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("EmailSignatures", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (EmailSignature item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("EmailSignatures", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountLanguages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountLanguage item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountLanguages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountLanguage item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountLanguages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountSponsors(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountSponsor item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountSponsors", item);
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Update the event listener to refer to the new dependent.
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountSponsor item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountSponsors", item);
    					// Delete the dependent end of this identifying association. If the current state is Added,
    					// allow the relationship to be changed without causing the dependent to be deleted.
    					if (item.ChangeTracker.State != ObjectState.Added)
    					{
    						item.MarkAsDeleted();
    					}
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Remove the previous dependent from the event listener.
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    			}
    		}
    	}
    
    	private void FixupAccountSponsors1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountSponsor item in e.NewItems)
    			{
    				item.Account1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountSponsors1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountSponsor item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account1, this))
    				{
    					item.Account1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountSponsors1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountEmailLogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountEmailLog item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountEmailLogs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountEmailLog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountEmailLogs", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountListValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountListValue item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountListValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountListValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountListValues", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPublicContactInfos(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPublicContactInfo item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPublicContactInfos", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPublicContactInfo item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPublicContactInfos", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Order item in e.NewItems)
    			{
    				item.Consultant = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Order item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Consultant, this))
    				{
    					item.Consultant = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAddresses(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Address item in e.NewItems)
    			{
    				if (!item.Accounts.Contains(this))
    				{
    					item.Accounts.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Addresses", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Address item in e.OldItems)
    			{
    				if (item.Accounts.Contains(this))
    				{
    					item.Accounts.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Addresses", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountContactTags(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountContactTag item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountContactTags", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountContactTag item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountContactTags", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNotes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Note item in e.NewItems)
    			{
    				if (!item.Accounts.Contains(this))
    				{
    					item.Accounts.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Notes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Note item in e.OldItems)
    			{
    				if (item.Accounts.Contains(this))
    				{
    					item.Accounts.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Notes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPolicies(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPolicy item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPolicies", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPolicy item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPolicies", item);
    				}
    			}
    		}
    	}
    
    	private void FixupDistributionLists(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DistributionList item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("DistributionLists", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DistributionList item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("DistributionLists", item);
    				}
    			}
    		}
    	}
    
    	private void FixupDistributionSubscribers(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DistributionSubscriber item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("DistributionSubscribers", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DistributionSubscriber item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("DistributionSubscribers", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaignSubscribers(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignSubscriber item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignSubscribers", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignSubscriber item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignSubscribers", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaignSubscribers1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignSubscriber item in e.NewItems)
    			{
    				item.Account1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignSubscribers1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignSubscriber item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account1, this))
    				{
    					item.Account1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignSubscribers1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoresponderMessages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoresponderMessage item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoresponderMessages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoresponderMessage item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoresponderMessages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountTags(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountTag item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountTags", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountTag item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountTags", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountTags1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountTag item in e.NewItems)
    			{
    				item.Account1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountTags1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountTag item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account1, this))
    				{
    					item.Account1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountTags1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPartyGuests(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PartyGuest item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PartyGuests", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PartyGuest item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PartyGuests", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts11(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				item.Account2 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts11", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account2, this))
    				{
    					item.Account2 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts11", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaignOptOuts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignOptOut item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignOptOuts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignOptOut item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignOptOuts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSupportTickets(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SupportTicket item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SupportTickets", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SupportTicket item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SupportTickets", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountReports(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountReport item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountReports", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountReport item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountReports", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaignActionTokenValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CampaignActionTokenValue item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CampaignActionTokenValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CampaignActionTokenValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CampaignActionTokenValues", item);
    				}
    			}
    		}
    	}
    
    	private void FixupEmailTemplateTokens(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (EmailTemplateToken item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("EmailTemplateTokens", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (EmailTemplateToken item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("EmailTemplateTokens", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountDevices(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountDevice item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountDevices", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountDevice item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountDevices", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountProperty item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountProperties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupFileResources(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (FileResource item in e.NewItems)
    			{
    				if (!item.Accounts.Contains(this))
    				{
    					item.Accounts.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("FileResources", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (FileResource item in e.OldItems)
    			{
    				if (item.Accounts.Contains(this))
    				{
    					item.Accounts.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("FileResources", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipOrder item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipOrders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipOrder item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipOrders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountSuppliedIDs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountSuppliedID item in e.NewItems)
    			{
    				item.Account = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountSuppliedIDs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountSuppliedID item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Account, this))
    				{
    					item.Account = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountSuppliedIDs", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

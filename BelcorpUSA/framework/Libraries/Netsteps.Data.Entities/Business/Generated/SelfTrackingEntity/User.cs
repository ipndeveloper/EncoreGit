//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ApplicationUsageLog))]
    [KnownType(typeof(UserType))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(UserStatus))]
    [KnownType(typeof(HtmlContentHistory))]
    [KnownType(typeof(CorporateUser))]
    [KnownType(typeof(AccountLanguage))]
    [KnownType(typeof(AccountListValue))]
    [KnownType(typeof(AccountPaymentMethod))]
    [KnownType(typeof(AccountPhone))]
    [KnownType(typeof(AccountSponsor))]
    [KnownType(typeof(AccountStatusChangeReason))]
    [KnownType(typeof(ArchiveType))]
    [KnownType(typeof(NewsType))]
    [KnownType(typeof(OrderCustomer))]
    [KnownType(typeof(OrderPayment))]
    [KnownType(typeof(OrderShipment))]
    [KnownType(typeof(ReturnReason))]
    [KnownType(typeof(ReturnType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Archive))]
    [KnownType(typeof(CalendarEvent))]
    [KnownType(typeof(MailAccount))]
    [KnownType(typeof(News))]
    [KnownType(typeof(SiteUrl))]
    [KnownType(typeof(UserFunctionOverride))]
    [KnownType(typeof(Language))]
    [KnownType(typeof(AccountPublicContactInfo))]
    [KnownType(typeof(AutoshipBatch))]
    [KnownType(typeof(OrderItem))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(Navigation))]
    [KnownType(typeof(Address))]
    [KnownType(typeof(AccountContactTag))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(HtmlContentWorkflow))]
    [KnownType(typeof(AccountReportType))]
    [KnownType(typeof(UserSiteWidget))]
    [KnownType(typeof(Note))]
    [KnownType(typeof(Party))]
    [KnownType(typeof(HtmlContent))]
    [KnownType(typeof(AccountPolicy))]
    [KnownType(typeof(OrderPaymentResult))]
    [KnownType(typeof(SupportTicket))]
    [KnownType(typeof(AccountReport))]
    [KnownType(typeof(Campaign))]
    [KnownType(typeof(Role))]
    [KnownType(typeof(Page))]
    [KnownType(typeof(ProductBase))]
    [KnownType(typeof(ProductFile))]
    [KnownType(typeof(ProductPrice))]
    [KnownType(typeof(FileResource))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(OrderTracking))]
    [Serializable]
    public partial class User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void UserIDChanged();
    	public int UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'UserID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private int _userID;
    	partial void UserTypeIDChanged();
    	public short UserTypeID
    	{
    		get { return _userTypeID; }
    		set
    		{
    			if (_userTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserTypeID", _userTypeID);
    				if (!IsDeserializing)
    				{
    					if (UserType != null && UserType.UserTypeID != value)
    					{
    						UserType = null;
    					}
    				}
    				_userTypeID = value;
    				UserTypeIDChanged();
    				OnPropertyChanged("UserTypeID");
    			}
    		}
    	}
    	private short _userTypeID;
    	partial void UsernameChanged();
    	public string Username
    	{
    		get { return _username; }
    		set
    		{
    			if (_username != value)
    			{
    				ChangeTracker.RecordOriginalValue("Username", _username);
    				_username = value;
    				UsernameChanged();
    				OnPropertyChanged("Username");
    			}
    		}
    	}
    	private string _username;
    	partial void PasswordHashChanged();
    	public string PasswordHash
    	{
    		get { return _passwordHash; }
    		set
    		{
    			if (_passwordHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("PasswordHash", _passwordHash);
    				_passwordHash = value;
    				PasswordHashChanged();
    				OnPropertyChanged("PasswordHash");
    			}
    		}
    	}
    	private string _passwordHash;
    	partial void PasswordQuestionChanged();
    	public string PasswordQuestion
    	{
    		get { return _passwordQuestion; }
    		set
    		{
    			if (_passwordQuestion != value)
    			{
    				ChangeTracker.RecordOriginalValue("PasswordQuestion", _passwordQuestion);
    				_passwordQuestion = value;
    				PasswordQuestionChanged();
    				OnPropertyChanged("PasswordQuestion");
    			}
    		}
    	}
    	private string _passwordQuestion;
    	partial void PasswordAnswerChanged();
    	public string PasswordAnswer
    	{
    		get { return _passwordAnswer; }
    		set
    		{
    			if (_passwordAnswer != value)
    			{
    				ChangeTracker.RecordOriginalValue("PasswordAnswer", _passwordAnswer);
    				_passwordAnswer = value;
    				PasswordAnswerChanged();
    				OnPropertyChanged("PasswordAnswer");
    			}
    		}
    	}
    	private string _passwordAnswer;
    	partial void LoginMessageChanged();
    	public string LoginMessage
    	{
    		get { return _loginMessage; }
    		set
    		{
    			if (_loginMessage != value)
    			{
    				ChangeTracker.RecordOriginalValue("LoginMessage", _loginMessage);
    				_loginMessage = value;
    				LoginMessageChanged();
    				OnPropertyChanged("LoginMessage");
    			}
    		}
    	}
    	private string _loginMessage;
    	partial void LastLoginUTCChanged();
    	public Nullable<System.DateTime> LastLoginUTC
    	{
    		get { return _lastLoginUTC; }
    		set
    		{
    			if (_lastLoginUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastLoginUTC", _lastLoginUTC);
    				_lastLoginUTC = value;
    				LastLoginUTCChanged();
    				OnPropertyChanged("LastLoginUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _lastLoginUTC;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void UserStatusIDChanged();
    	public short UserStatusID
    	{
    		get { return _userStatusID; }
    		set
    		{
    			if (_userStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserStatusID", _userStatusID);
    				if (!IsDeserializing)
    				{
    					if (UserStatus != null && UserStatus.UserStatusID != value)
    					{
    						UserStatus = null;
    					}
    				}
    				_userStatusID = value;
    				UserStatusIDChanged();
    				OnPropertyChanged("UserStatusID");
    			}
    		}
    	}
    	private short _userStatusID;
    	partial void TotalLoginCountChanged();
    	public int TotalLoginCount
    	{
    		get { return _totalLoginCount; }
    		set
    		{
    			if (_totalLoginCount != value)
    			{
    				ChangeTracker.RecordOriginalValue("TotalLoginCount", _totalLoginCount);
    				_totalLoginCount = value;
    				TotalLoginCountChanged();
    				OnPropertyChanged("TotalLoginCount");
    			}
    		}
    	}
    	private int _totalLoginCount;
    	partial void ConsecutiveFailedLoginsChanged();
    	public int ConsecutiveFailedLogins
    	{
    		get { return _consecutiveFailedLogins; }
    		set
    		{
    			if (_consecutiveFailedLogins != value)
    			{
    				ChangeTracker.RecordOriginalValue("ConsecutiveFailedLogins", _consecutiveFailedLogins);
    				_consecutiveFailedLogins = value;
    				ConsecutiveFailedLoginsChanged();
    				OnPropertyChanged("ConsecutiveFailedLogins");
    			}
    		}
    	}
    	private int _consecutiveFailedLogins;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User1 != null && User1.UserID != value)
    					{
    						User1 = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void DefaultLanguageIDChanged();
    	public int DefaultLanguageID
    	{
    		get { return _defaultLanguageID; }
    		set
    		{
    			if (_defaultLanguageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DefaultLanguageID", _defaultLanguageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_defaultLanguageID = value;
    				DefaultLanguageIDChanged();
    				OnPropertyChanged("DefaultLanguageID");
    			}
    		}
    	}
    	private int _defaultLanguageID;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<ApplicationUsageLog> ApplicationUsageLogs
    	{
    		get
    		{
    			if (_applicationUsageLogs == null)
    			{
    				_applicationUsageLogs = new TrackableCollection<ApplicationUsageLog>();
    				_applicationUsageLogs.CollectionChanged += FixupApplicationUsageLogs;
    				_applicationUsageLogs.CollectionChanged += RaiseApplicationUsageLogsChanged;
    			}
    			return _applicationUsageLogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_applicationUsageLogs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_applicationUsageLogs != null)
    				{
    					_applicationUsageLogs.CollectionChanged -= FixupApplicationUsageLogs;
    					_applicationUsageLogs.CollectionChanged -= RaiseApplicationUsageLogsChanged;
    				}
    				_applicationUsageLogs = value;
    				if (_applicationUsageLogs != null)
    				{
    					_applicationUsageLogs.CollectionChanged += FixupApplicationUsageLogs;
    					_applicationUsageLogs.CollectionChanged += RaiseApplicationUsageLogsChanged;
    				}
    				OnNavigationPropertyChanged("ApplicationUsageLogs");
    			}
    		}
    	}
    	private TrackableCollection<ApplicationUsageLog> _applicationUsageLogs;
    	partial void ApplicationUsageLogsChanged();
    	private void RaiseApplicationUsageLogsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ApplicationUsageLogsChanged();
    	}
    
    	public UserType UserType
    	{
    		get { return _userType; }
    		set
    		{
    			if (!ReferenceEquals(_userType, value))
    			{
    				var previousValue = _userType;
    				_userType = value;
    				FixupUserType(previousValue);
    				OnNavigationPropertyChanged("UserType");
    			}
    		}
    	}
    	private UserType _userType;
    
    	private TrackableCollection<Account> Accounts
    	{
    		get
    		{
    			if (_accounts == null)
    			{
    				_accounts = new TrackableCollection<Account>();
    				_accounts.CollectionChanged += FixupAccounts;
    				_accounts.CollectionChanged += RaiseAccountsChanged;
    			}
    			return _accounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged -= FixupAccounts;
    					_accounts.CollectionChanged -= RaiseAccountsChanged;
    				}
    				_accounts = value;
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged += FixupAccounts;
    					_accounts.CollectionChanged += RaiseAccountsChanged;
    				}
    				OnNavigationPropertyChanged("Accounts");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts;
    	partial void AccountsChanged();
    	private void RaiseAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountsChanged();
    	}
    
    	private TrackableCollection<Account> Accounts1
    	{
    		get
    		{
    			if (_accounts1 == null)
    			{
    				_accounts1 = new TrackableCollection<Account>();
    				_accounts1.CollectionChanged += FixupAccounts1;
    				_accounts1.CollectionChanged += RaiseAccounts1Changed;
    			}
    			return _accounts1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts1 != null)
    				{
    					_accounts1.CollectionChanged -= FixupAccounts1;
    					_accounts1.CollectionChanged -= RaiseAccounts1Changed;
    				}
    				_accounts1 = value;
    				if (_accounts1 != null)
    				{
    					_accounts1.CollectionChanged += FixupAccounts1;
    					_accounts1.CollectionChanged += RaiseAccounts1Changed;
    				}
    				OnNavigationPropertyChanged("Accounts1");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts1;
    	partial void Accounts1Changed();
    	private void RaiseAccounts1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Accounts1Changed();
    	}
    
    	public UserStatus UserStatus
    	{
    		get { return _userStatus; }
    		set
    		{
    			if (!ReferenceEquals(_userStatus, value))
    			{
    				var previousValue = _userStatus;
    				_userStatus = value;
    				FixupUserStatus(previousValue);
    				OnNavigationPropertyChanged("UserStatus");
    			}
    		}
    	}
    	private UserStatus _userStatus;
    
    	public TrackableCollection<HtmlContentHistory> HtmlContentHistories
    	{
    		get
    		{
    			if (_htmlContentHistories == null)
    			{
    				_htmlContentHistories = new TrackableCollection<HtmlContentHistory>();
    				_htmlContentHistories.CollectionChanged += FixupHtmlContentHistories;
    				_htmlContentHistories.CollectionChanged += RaiseHtmlContentHistoriesChanged;
    			}
    			return _htmlContentHistories;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlContentHistories, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlContentHistories != null)
    				{
    					_htmlContentHistories.CollectionChanged -= FixupHtmlContentHistories;
    					_htmlContentHistories.CollectionChanged -= RaiseHtmlContentHistoriesChanged;
    				}
    				_htmlContentHistories = value;
    				if (_htmlContentHistories != null)
    				{
    					_htmlContentHistories.CollectionChanged += FixupHtmlContentHistories;
    					_htmlContentHistories.CollectionChanged += RaiseHtmlContentHistoriesChanged;
    				}
    				OnNavigationPropertyChanged("HtmlContentHistories");
    			}
    		}
    	}
    	private TrackableCollection<HtmlContentHistory> _htmlContentHistories;
    	partial void HtmlContentHistoriesChanged();
    	private void RaiseHtmlContentHistoriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlContentHistoriesChanged();
    	}
    
    	public TrackableCollection<Account> Accounts_1
    	{
    		get
    		{
    			if (_accounts_1 == null)
    			{
    				_accounts_1 = new TrackableCollection<Account>();
    				_accounts_1.CollectionChanged += FixupAccounts_1;
    				_accounts_1.CollectionChanged += RaiseAccounts_1Changed;
    			}
    			return _accounts_1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts_1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts_1 != null)
    				{
    					_accounts_1.CollectionChanged -= FixupAccounts_1;
    					_accounts_1.CollectionChanged -= RaiseAccounts_1Changed;
    				}
    				_accounts_1 = value;
    				if (_accounts_1 != null)
    				{
    					_accounts_1.CollectionChanged += FixupAccounts_1;
    					_accounts_1.CollectionChanged += RaiseAccounts_1Changed;
    				}
    				OnNavigationPropertyChanged("Accounts_1");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts_1;
    	partial void Accounts_1Changed();
    	private void RaiseAccounts_1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Accounts_1Changed();
    	}
    
    	public TrackableCollection<CorporateUser> CorporateUsers
    	{
    		get
    		{
    			if (_corporateUsers == null)
    			{
    				_corporateUsers = new TrackableCollection<CorporateUser>();
    				_corporateUsers.CollectionChanged += FixupCorporateUsers;
    				_corporateUsers.CollectionChanged += RaiseCorporateUsersChanged;
    			}
    			return _corporateUsers;
    		}
    		set
    		{
    			if (!ReferenceEquals(_corporateUsers, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_corporateUsers != null)
    				{
    					_corporateUsers.CollectionChanged -= FixupCorporateUsers;
    					_corporateUsers.CollectionChanged -= RaiseCorporateUsersChanged;
    				}
    				_corporateUsers = value;
    				if (_corporateUsers != null)
    				{
    					_corporateUsers.CollectionChanged += FixupCorporateUsers;
    					_corporateUsers.CollectionChanged += RaiseCorporateUsersChanged;
    				}
    				OnNavigationPropertyChanged("CorporateUsers");
    			}
    		}
    	}
    	private TrackableCollection<CorporateUser> _corporateUsers;
    	partial void CorporateUsersChanged();
    	private void RaiseCorporateUsersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CorporateUsersChanged();
    	}
    
    	public TrackableCollection<AccountLanguage> AccountLanguages
    	{
    		get
    		{
    			if (_accountLanguages == null)
    			{
    				_accountLanguages = new TrackableCollection<AccountLanguage>();
    				_accountLanguages.CollectionChanged += FixupAccountLanguages;
    				_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    			}
    			return _accountLanguages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountLanguages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountLanguages != null)
    				{
    					_accountLanguages.CollectionChanged -= FixupAccountLanguages;
    					_accountLanguages.CollectionChanged -= RaiseAccountLanguagesChanged;
    				}
    				_accountLanguages = value;
    				if (_accountLanguages != null)
    				{
    					_accountLanguages.CollectionChanged += FixupAccountLanguages;
    					_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    				}
    				OnNavigationPropertyChanged("AccountLanguages");
    			}
    		}
    	}
    	private TrackableCollection<AccountLanguage> _accountLanguages;
    	partial void AccountLanguagesChanged();
    	private void RaiseAccountLanguagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountLanguagesChanged();
    	}
    
    	public TrackableCollection<AccountListValue> AccountListValues
    	{
    		get
    		{
    			if (_accountListValues == null)
    			{
    				_accountListValues = new TrackableCollection<AccountListValue>();
    				_accountListValues.CollectionChanged += FixupAccountListValues;
    				_accountListValues.CollectionChanged += RaiseAccountListValuesChanged;
    			}
    			return _accountListValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountListValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountListValues != null)
    				{
    					_accountListValues.CollectionChanged -= FixupAccountListValues;
    					_accountListValues.CollectionChanged -= RaiseAccountListValuesChanged;
    				}
    				_accountListValues = value;
    				if (_accountListValues != null)
    				{
    					_accountListValues.CollectionChanged += FixupAccountListValues;
    					_accountListValues.CollectionChanged += RaiseAccountListValuesChanged;
    				}
    				OnNavigationPropertyChanged("AccountListValues");
    			}
    		}
    	}
    	private TrackableCollection<AccountListValue> _accountListValues;
    	partial void AccountListValuesChanged();
    	private void RaiseAccountListValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountListValuesChanged();
    	}
    
    	public TrackableCollection<AccountPaymentMethod> AccountPaymentMethods
    	{
    		get
    		{
    			if (_accountPaymentMethods == null)
    			{
    				_accountPaymentMethods = new TrackableCollection<AccountPaymentMethod>();
    				_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    				_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    			}
    			return _accountPaymentMethods;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPaymentMethods, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPaymentMethods != null)
    				{
    					_accountPaymentMethods.CollectionChanged -= FixupAccountPaymentMethods;
    					_accountPaymentMethods.CollectionChanged -= RaiseAccountPaymentMethodsChanged;
    				}
    				_accountPaymentMethods = value;
    				if (_accountPaymentMethods != null)
    				{
    					_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    					_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    				}
    				OnNavigationPropertyChanged("AccountPaymentMethods");
    			}
    		}
    	}
    	private TrackableCollection<AccountPaymentMethod> _accountPaymentMethods;
    	partial void AccountPaymentMethodsChanged();
    	private void RaiseAccountPaymentMethodsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPaymentMethodsChanged();
    	}
    
    	public TrackableCollection<AccountPhone> AccountPhones
    	{
    		get
    		{
    			if (_accountPhones == null)
    			{
    				_accountPhones = new TrackableCollection<AccountPhone>();
    				_accountPhones.CollectionChanged += FixupAccountPhones;
    				_accountPhones.CollectionChanged += RaiseAccountPhonesChanged;
    			}
    			return _accountPhones;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPhones, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPhones != null)
    				{
    					_accountPhones.CollectionChanged -= FixupAccountPhones;
    					_accountPhones.CollectionChanged -= RaiseAccountPhonesChanged;
    				}
    				_accountPhones = value;
    				if (_accountPhones != null)
    				{
    					_accountPhones.CollectionChanged += FixupAccountPhones;
    					_accountPhones.CollectionChanged += RaiseAccountPhonesChanged;
    				}
    				OnNavigationPropertyChanged("AccountPhones");
    			}
    		}
    	}
    	private TrackableCollection<AccountPhone> _accountPhones;
    	partial void AccountPhonesChanged();
    	private void RaiseAccountPhonesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPhonesChanged();
    	}
    
    	public TrackableCollection<AccountSponsor> AccountSponsors
    	{
    		get
    		{
    			if (_accountSponsors == null)
    			{
    				_accountSponsors = new TrackableCollection<AccountSponsor>();
    				_accountSponsors.CollectionChanged += FixupAccountSponsors;
    				_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    			}
    			return _accountSponsors;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountSponsors, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountSponsors != null)
    				{
    					_accountSponsors.CollectionChanged -= FixupAccountSponsors;
    					_accountSponsors.CollectionChanged -= RaiseAccountSponsorsChanged;
    				}
    				_accountSponsors = value;
    				if (_accountSponsors != null)
    				{
    					_accountSponsors.CollectionChanged += FixupAccountSponsors;
    					_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    				}
    				OnNavigationPropertyChanged("AccountSponsors");
    			}
    		}
    	}
    	private TrackableCollection<AccountSponsor> _accountSponsors;
    	partial void AccountSponsorsChanged();
    	private void RaiseAccountSponsorsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountSponsorsChanged();
    	}
    
    	public TrackableCollection<AccountStatusChangeReason> AccountStatusChangeReasons
    	{
    		get
    		{
    			if (_accountStatusChangeReasons == null)
    			{
    				_accountStatusChangeReasons = new TrackableCollection<AccountStatusChangeReason>();
    				_accountStatusChangeReasons.CollectionChanged += FixupAccountStatusChangeReasons;
    				_accountStatusChangeReasons.CollectionChanged += RaiseAccountStatusChangeReasonsChanged;
    			}
    			return _accountStatusChangeReasons;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountStatusChangeReasons, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountStatusChangeReasons != null)
    				{
    					_accountStatusChangeReasons.CollectionChanged -= FixupAccountStatusChangeReasons;
    					_accountStatusChangeReasons.CollectionChanged -= RaiseAccountStatusChangeReasonsChanged;
    				}
    				_accountStatusChangeReasons = value;
    				if (_accountStatusChangeReasons != null)
    				{
    					_accountStatusChangeReasons.CollectionChanged += FixupAccountStatusChangeReasons;
    					_accountStatusChangeReasons.CollectionChanged += RaiseAccountStatusChangeReasonsChanged;
    				}
    				OnNavigationPropertyChanged("AccountStatusChangeReasons");
    			}
    		}
    	}
    	private TrackableCollection<AccountStatusChangeReason> _accountStatusChangeReasons;
    	partial void AccountStatusChangeReasonsChanged();
    	private void RaiseAccountStatusChangeReasonsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountStatusChangeReasonsChanged();
    	}
    
    	public TrackableCollection<ArchiveType> ArchiveTypes
    	{
    		get
    		{
    			if (_archiveTypes == null)
    			{
    				_archiveTypes = new TrackableCollection<ArchiveType>();
    				_archiveTypes.CollectionChanged += FixupArchiveTypes;
    				_archiveTypes.CollectionChanged += RaiseArchiveTypesChanged;
    			}
    			return _archiveTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_archiveTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_archiveTypes != null)
    				{
    					_archiveTypes.CollectionChanged -= FixupArchiveTypes;
    					_archiveTypes.CollectionChanged -= RaiseArchiveTypesChanged;
    				}
    				_archiveTypes = value;
    				if (_archiveTypes != null)
    				{
    					_archiveTypes.CollectionChanged += FixupArchiveTypes;
    					_archiveTypes.CollectionChanged += RaiseArchiveTypesChanged;
    				}
    				OnNavigationPropertyChanged("ArchiveTypes");
    			}
    		}
    	}
    	private TrackableCollection<ArchiveType> _archiveTypes;
    	partial void ArchiveTypesChanged();
    	private void RaiseArchiveTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ArchiveTypesChanged();
    	}
    
    	public TrackableCollection<CorporateUser> CorporateUsers1
    	{
    		get
    		{
    			if (_corporateUsers1 == null)
    			{
    				_corporateUsers1 = new TrackableCollection<CorporateUser>();
    				_corporateUsers1.CollectionChanged += FixupCorporateUsers1;
    				_corporateUsers1.CollectionChanged += RaiseCorporateUsers1Changed;
    			}
    			return _corporateUsers1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_corporateUsers1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_corporateUsers1 != null)
    				{
    					_corporateUsers1.CollectionChanged -= FixupCorporateUsers1;
    					_corporateUsers1.CollectionChanged -= RaiseCorporateUsers1Changed;
    				}
    				_corporateUsers1 = value;
    				if (_corporateUsers1 != null)
    				{
    					_corporateUsers1.CollectionChanged += FixupCorporateUsers1;
    					_corporateUsers1.CollectionChanged += RaiseCorporateUsers1Changed;
    				}
    				OnNavigationPropertyChanged("CorporateUsers1");
    			}
    		}
    	}
    	private TrackableCollection<CorporateUser> _corporateUsers1;
    	partial void CorporateUsers1Changed();
    	private void RaiseCorporateUsers1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CorporateUsers1Changed();
    	}
    
    	public TrackableCollection<NewsType> NewsTypes
    	{
    		get
    		{
    			if (_newsTypes == null)
    			{
    				_newsTypes = new TrackableCollection<NewsType>();
    				_newsTypes.CollectionChanged += FixupNewsTypes;
    				_newsTypes.CollectionChanged += RaiseNewsTypesChanged;
    			}
    			return _newsTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_newsTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_newsTypes != null)
    				{
    					_newsTypes.CollectionChanged -= FixupNewsTypes;
    					_newsTypes.CollectionChanged -= RaiseNewsTypesChanged;
    				}
    				_newsTypes = value;
    				if (_newsTypes != null)
    				{
    					_newsTypes.CollectionChanged += FixupNewsTypes;
    					_newsTypes.CollectionChanged += RaiseNewsTypesChanged;
    				}
    				OnNavigationPropertyChanged("NewsTypes");
    			}
    		}
    	}
    	private TrackableCollection<NewsType> _newsTypes;
    	partial void NewsTypesChanged();
    	private void RaiseNewsTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewsTypesChanged();
    	}
    
    	public TrackableCollection<OrderCustomer> OrderCustomers
    	{
    		get
    		{
    			if (_orderCustomers == null)
    			{
    				_orderCustomers = new TrackableCollection<OrderCustomer>();
    				_orderCustomers.CollectionChanged += FixupOrderCustomers;
    				_orderCustomers.CollectionChanged += RaiseOrderCustomersChanged;
    			}
    			return _orderCustomers;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderCustomers, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderCustomers != null)
    				{
    					_orderCustomers.CollectionChanged -= FixupOrderCustomers;
    					_orderCustomers.CollectionChanged -= RaiseOrderCustomersChanged;
    				}
    				_orderCustomers = value;
    				if (_orderCustomers != null)
    				{
    					_orderCustomers.CollectionChanged += FixupOrderCustomers;
    					_orderCustomers.CollectionChanged += RaiseOrderCustomersChanged;
    				}
    				OnNavigationPropertyChanged("OrderCustomers");
    			}
    		}
    	}
    	private TrackableCollection<OrderCustomer> _orderCustomers;
    	partial void OrderCustomersChanged();
    	private void RaiseOrderCustomersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderCustomersChanged();
    	}
    
    	public TrackableCollection<OrderPayment> OrderPayments
    	{
    		get
    		{
    			if (_orderPayments == null)
    			{
    				_orderPayments = new TrackableCollection<OrderPayment>();
    				_orderPayments.CollectionChanged += FixupOrderPayments;
    				_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    			}
    			return _orderPayments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPayments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged -= FixupOrderPayments;
    					_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    				}
    				_orderPayments = value;
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged += FixupOrderPayments;
    					_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPayments");
    			}
    		}
    	}
    	private TrackableCollection<OrderPayment> _orderPayments;
    	partial void OrderPaymentsChanged();
    	private void RaiseOrderPaymentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentsChanged();
    	}
    
    	public TrackableCollection<OrderShipment> OrderShipments
    	{
    		get
    		{
    			if (_orderShipments == null)
    			{
    				_orderShipments = new TrackableCollection<OrderShipment>();
    				_orderShipments.CollectionChanged += FixupOrderShipments;
    				_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    			}
    			return _orderShipments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderShipments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged -= FixupOrderShipments;
    					_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    				}
    				_orderShipments = value;
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged += FixupOrderShipments;
    					_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderShipments");
    			}
    		}
    	}
    	private TrackableCollection<OrderShipment> _orderShipments;
    	partial void OrderShipmentsChanged();
    	private void RaiseOrderShipmentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderShipmentsChanged();
    	}
    
    	public TrackableCollection<ReturnReason> ReturnReasons
    	{
    		get
    		{
    			if (_returnReasons == null)
    			{
    				_returnReasons = new TrackableCollection<ReturnReason>();
    				_returnReasons.CollectionChanged += FixupReturnReasons;
    				_returnReasons.CollectionChanged += RaiseReturnReasonsChanged;
    			}
    			return _returnReasons;
    		}
    		set
    		{
    			if (!ReferenceEquals(_returnReasons, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_returnReasons != null)
    				{
    					_returnReasons.CollectionChanged -= FixupReturnReasons;
    					_returnReasons.CollectionChanged -= RaiseReturnReasonsChanged;
    				}
    				_returnReasons = value;
    				if (_returnReasons != null)
    				{
    					_returnReasons.CollectionChanged += FixupReturnReasons;
    					_returnReasons.CollectionChanged += RaiseReturnReasonsChanged;
    				}
    				OnNavigationPropertyChanged("ReturnReasons");
    			}
    		}
    	}
    	private TrackableCollection<ReturnReason> _returnReasons;
    	partial void ReturnReasonsChanged();
    	private void RaiseReturnReasonsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ReturnReasonsChanged();
    	}
    
    	public TrackableCollection<ReturnType> ReturnTypes
    	{
    		get
    		{
    			if (_returnTypes == null)
    			{
    				_returnTypes = new TrackableCollection<ReturnType>();
    				_returnTypes.CollectionChanged += FixupReturnTypes;
    				_returnTypes.CollectionChanged += RaiseReturnTypesChanged;
    			}
    			return _returnTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_returnTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_returnTypes != null)
    				{
    					_returnTypes.CollectionChanged -= FixupReturnTypes;
    					_returnTypes.CollectionChanged -= RaiseReturnTypesChanged;
    				}
    				_returnTypes = value;
    				if (_returnTypes != null)
    				{
    					_returnTypes.CollectionChanged += FixupReturnTypes;
    					_returnTypes.CollectionChanged += RaiseReturnTypesChanged;
    				}
    				OnNavigationPropertyChanged("ReturnTypes");
    			}
    		}
    	}
    	private TrackableCollection<ReturnType> _returnTypes;
    	partial void ReturnTypesChanged();
    	private void RaiseReturnTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ReturnTypesChanged();
    	}
    
    	public User User1
    	{
    		get { return _user1; }
    		set
    		{
    			if (!ReferenceEquals(_user1, value))
    			{
    				var previousValue = _user1;
    				_user1 = value;
    				FixupUser1(previousValue);
    				OnNavigationPropertyChanged("User1");
    			}
    		}
    	}
    	private User _user1;
    
    	public TrackableCollection<Archive> Archives
    	{
    		get
    		{
    			if (_archives == null)
    			{
    				_archives = new TrackableCollection<Archive>();
    				_archives.CollectionChanged += FixupArchives;
    				_archives.CollectionChanged += RaiseArchivesChanged;
    			}
    			return _archives;
    		}
    		set
    		{
    			if (!ReferenceEquals(_archives, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_archives != null)
    				{
    					_archives.CollectionChanged -= FixupArchives;
    					_archives.CollectionChanged -= RaiseArchivesChanged;
    				}
    				_archives = value;
    				if (_archives != null)
    				{
    					_archives.CollectionChanged += FixupArchives;
    					_archives.CollectionChanged += RaiseArchivesChanged;
    				}
    				OnNavigationPropertyChanged("Archives");
    			}
    		}
    	}
    	private TrackableCollection<Archive> _archives;
    	partial void ArchivesChanged();
    	private void RaiseArchivesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ArchivesChanged();
    	}
    
    	public TrackableCollection<CalendarEvent> CalendarEvents
    	{
    		get
    		{
    			if (_calendarEvents == null)
    			{
    				_calendarEvents = new TrackableCollection<CalendarEvent>();
    				_calendarEvents.CollectionChanged += FixupCalendarEvents;
    				_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    			}
    			return _calendarEvents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    					_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    				}
    				_calendarEvents = value;
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged += FixupCalendarEvents;
    					_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    				}
    				OnNavigationPropertyChanged("CalendarEvents");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents;
    	partial void CalendarEventsChanged();
    	private void RaiseCalendarEventsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEventsChanged();
    	}
    
    	public TrackableCollection<MailAccount> MailAccounts
    	{
    		get
    		{
    			if (_mailAccounts == null)
    			{
    				_mailAccounts = new TrackableCollection<MailAccount>();
    				_mailAccounts.CollectionChanged += FixupMailAccounts;
    				_mailAccounts.CollectionChanged += RaiseMailAccountsChanged;
    			}
    			return _mailAccounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_mailAccounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_mailAccounts != null)
    				{
    					_mailAccounts.CollectionChanged -= FixupMailAccounts;
    					_mailAccounts.CollectionChanged -= RaiseMailAccountsChanged;
    				}
    				_mailAccounts = value;
    				if (_mailAccounts != null)
    				{
    					_mailAccounts.CollectionChanged += FixupMailAccounts;
    					_mailAccounts.CollectionChanged += RaiseMailAccountsChanged;
    				}
    				OnNavigationPropertyChanged("MailAccounts");
    			}
    		}
    	}
    	private TrackableCollection<MailAccount> _mailAccounts;
    	partial void MailAccountsChanged();
    	private void RaiseMailAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		MailAccountsChanged();
    	}
    
    	public TrackableCollection<News> News
    	{
    		get
    		{
    			if (_news == null)
    			{
    				_news = new TrackableCollection<News>();
    				_news.CollectionChanged += FixupNews;
    				_news.CollectionChanged += RaiseNewsChanged;
    			}
    			return _news;
    		}
    		set
    		{
    			if (!ReferenceEquals(_news, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_news != null)
    				{
    					_news.CollectionChanged -= FixupNews;
    					_news.CollectionChanged -= RaiseNewsChanged;
    				}
    				_news = value;
    				if (_news != null)
    				{
    					_news.CollectionChanged += FixupNews;
    					_news.CollectionChanged += RaiseNewsChanged;
    				}
    				OnNavigationPropertyChanged("News");
    			}
    		}
    	}
    	private TrackableCollection<News> _news;
    	partial void NewsChanged();
    	private void RaiseNewsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewsChanged();
    	}
    
    	public TrackableCollection<SiteUrl> SiteUrls
    	{
    		get
    		{
    			if (_siteUrls == null)
    			{
    				_siteUrls = new TrackableCollection<SiteUrl>();
    				_siteUrls.CollectionChanged += FixupSiteUrls;
    				_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    			}
    			return _siteUrls;
    		}
    		set
    		{
    			if (!ReferenceEquals(_siteUrls, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_siteUrls != null)
    				{
    					_siteUrls.CollectionChanged -= FixupSiteUrls;
    					_siteUrls.CollectionChanged -= RaiseSiteUrlsChanged;
    				}
    				_siteUrls = value;
    				if (_siteUrls != null)
    				{
    					_siteUrls.CollectionChanged += FixupSiteUrls;
    					_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    				}
    				OnNavigationPropertyChanged("SiteUrls");
    			}
    		}
    	}
    	private TrackableCollection<SiteUrl> _siteUrls;
    	partial void SiteUrlsChanged();
    	private void RaiseSiteUrlsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SiteUrlsChanged();
    	}
    
    	public TrackableCollection<UserFunctionOverride> UserFunctionOverrides
    	{
    		get
    		{
    			if (_userFunctionOverrides == null)
    			{
    				_userFunctionOverrides = new TrackableCollection<UserFunctionOverride>();
    				_userFunctionOverrides.CollectionChanged += FixupUserFunctionOverrides;
    				_userFunctionOverrides.CollectionChanged += RaiseUserFunctionOverridesChanged;
    			}
    			return _userFunctionOverrides;
    		}
    		set
    		{
    			if (!ReferenceEquals(_userFunctionOverrides, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_userFunctionOverrides != null)
    				{
    					_userFunctionOverrides.CollectionChanged -= FixupUserFunctionOverrides;
    					_userFunctionOverrides.CollectionChanged -= RaiseUserFunctionOverridesChanged;
    				}
    				_userFunctionOverrides = value;
    				if (_userFunctionOverrides != null)
    				{
    					_userFunctionOverrides.CollectionChanged += FixupUserFunctionOverrides;
    					_userFunctionOverrides.CollectionChanged += RaiseUserFunctionOverridesChanged;
    				}
    				OnNavigationPropertyChanged("UserFunctionOverrides");
    			}
    		}
    	}
    	private TrackableCollection<UserFunctionOverride> _userFunctionOverrides;
    	partial void UserFunctionOverridesChanged();
    	private void RaiseUserFunctionOverridesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		UserFunctionOverridesChanged();
    	}
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public TrackableCollection<AccountPublicContactInfo> AccountPublicContactInfoes
    	{
    		get
    		{
    			if (_accountPublicContactInfoes == null)
    			{
    				_accountPublicContactInfoes = new TrackableCollection<AccountPublicContactInfo>();
    				_accountPublicContactInfoes.CollectionChanged += FixupAccountPublicContactInfoes;
    				_accountPublicContactInfoes.CollectionChanged += RaiseAccountPublicContactInfoesChanged;
    			}
    			return _accountPublicContactInfoes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPublicContactInfoes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPublicContactInfoes != null)
    				{
    					_accountPublicContactInfoes.CollectionChanged -= FixupAccountPublicContactInfoes;
    					_accountPublicContactInfoes.CollectionChanged -= RaiseAccountPublicContactInfoesChanged;
    				}
    				_accountPublicContactInfoes = value;
    				if (_accountPublicContactInfoes != null)
    				{
    					_accountPublicContactInfoes.CollectionChanged += FixupAccountPublicContactInfoes;
    					_accountPublicContactInfoes.CollectionChanged += RaiseAccountPublicContactInfoesChanged;
    				}
    				OnNavigationPropertyChanged("AccountPublicContactInfoes");
    			}
    		}
    	}
    	private TrackableCollection<AccountPublicContactInfo> _accountPublicContactInfoes;
    	partial void AccountPublicContactInfoesChanged();
    	private void RaiseAccountPublicContactInfoesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPublicContactInfoesChanged();
    	}
    
    	public TrackableCollection<AutoshipBatch> AutoshipBatches
    	{
    		get
    		{
    			if (_autoshipBatches == null)
    			{
    				_autoshipBatches = new TrackableCollection<AutoshipBatch>();
    				_autoshipBatches.CollectionChanged += FixupAutoshipBatches;
    				_autoshipBatches.CollectionChanged += RaiseAutoshipBatchesChanged;
    			}
    			return _autoshipBatches;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipBatches, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipBatches != null)
    				{
    					_autoshipBatches.CollectionChanged -= FixupAutoshipBatches;
    					_autoshipBatches.CollectionChanged -= RaiseAutoshipBatchesChanged;
    				}
    				_autoshipBatches = value;
    				if (_autoshipBatches != null)
    				{
    					_autoshipBatches.CollectionChanged += FixupAutoshipBatches;
    					_autoshipBatches.CollectionChanged += RaiseAutoshipBatchesChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipBatches");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipBatch> _autoshipBatches;
    	partial void AutoshipBatchesChanged();
    	private void RaiseAutoshipBatchesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipBatchesChanged();
    	}
    
    	public TrackableCollection<OrderItem> OrderItems
    	{
    		get
    		{
    			if (_orderItems == null)
    			{
    				_orderItems = new TrackableCollection<OrderItem>();
    				_orderItems.CollectionChanged += FixupOrderItems;
    				_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    			}
    			return _orderItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged -= FixupOrderItems;
    					_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    				}
    				_orderItems = value;
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged += FixupOrderItems;
    					_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    				}
    				OnNavigationPropertyChanged("OrderItems");
    			}
    		}
    	}
    	private TrackableCollection<OrderItem> _orderItems;
    	partial void OrderItemsChanged();
    	private void RaiseOrderItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemsChanged();
    	}
    
    	public TrackableCollection<Order> Orders
    	{
    		get
    		{
    			if (_orders == null)
    			{
    				_orders = new TrackableCollection<Order>();
    				_orders.CollectionChanged += FixupOrders;
    				_orders.CollectionChanged += RaiseOrdersChanged;
    			}
    			return _orders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orders != null)
    				{
    					_orders.CollectionChanged -= FixupOrders;
    					_orders.CollectionChanged -= RaiseOrdersChanged;
    				}
    				_orders = value;
    				if (_orders != null)
    				{
    					_orders.CollectionChanged += FixupOrders;
    					_orders.CollectionChanged += RaiseOrdersChanged;
    				}
    				OnNavigationPropertyChanged("Orders");
    			}
    		}
    	}
    	private TrackableCollection<Order> _orders;
    	partial void OrdersChanged();
    	private void RaiseOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrdersChanged();
    	}
    
    	public TrackableCollection<Order> Orders1
    	{
    		get
    		{
    			if (_orders1 == null)
    			{
    				_orders1 = new TrackableCollection<Order>();
    				_orders1.CollectionChanged += FixupOrders1;
    				_orders1.CollectionChanged += RaiseOrders1Changed;
    			}
    			return _orders1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orders1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orders1 != null)
    				{
    					_orders1.CollectionChanged -= FixupOrders1;
    					_orders1.CollectionChanged -= RaiseOrders1Changed;
    				}
    				_orders1 = value;
    				if (_orders1 != null)
    				{
    					_orders1.CollectionChanged += FixupOrders1;
    					_orders1.CollectionChanged += RaiseOrders1Changed;
    				}
    				OnNavigationPropertyChanged("Orders1");
    			}
    		}
    	}
    	private TrackableCollection<Order> _orders1;
    	partial void Orders1Changed();
    	private void RaiseOrders1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Orders1Changed();
    	}
    
    	public TrackableCollection<Navigation> Navigations
    	{
    		get
    		{
    			if (_navigations == null)
    			{
    				_navigations = new TrackableCollection<Navigation>();
    				_navigations.CollectionChanged += FixupNavigations;
    				_navigations.CollectionChanged += RaiseNavigationsChanged;
    			}
    			return _navigations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_navigations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_navigations != null)
    				{
    					_navigations.CollectionChanged -= FixupNavigations;
    					_navigations.CollectionChanged -= RaiseNavigationsChanged;
    				}
    				_navigations = value;
    				if (_navigations != null)
    				{
    					_navigations.CollectionChanged += FixupNavigations;
    					_navigations.CollectionChanged += RaiseNavigationsChanged;
    				}
    				OnNavigationPropertyChanged("Navigations");
    			}
    		}
    	}
    	private TrackableCollection<Navigation> _navigations;
    	partial void NavigationsChanged();
    	private void RaiseNavigationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NavigationsChanged();
    	}
    
    	public TrackableCollection<Address> Addresses
    	{
    		get
    		{
    			if (_addresses == null)
    			{
    				_addresses = new TrackableCollection<Address>();
    				_addresses.CollectionChanged += FixupAddresses;
    				_addresses.CollectionChanged += RaiseAddressesChanged;
    			}
    			return _addresses;
    		}
    		set
    		{
    			if (!ReferenceEquals(_addresses, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged -= FixupAddresses;
    					_addresses.CollectionChanged -= RaiseAddressesChanged;
    				}
    				_addresses = value;
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged += FixupAddresses;
    					_addresses.CollectionChanged += RaiseAddressesChanged;
    				}
    				OnNavigationPropertyChanged("Addresses");
    			}
    		}
    	}
    	private TrackableCollection<Address> _addresses;
    	partial void AddressesChanged();
    	private void RaiseAddressesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AddressesChanged();
    	}
    
    	public TrackableCollection<AccountContactTag> AccountContactTags
    	{
    		get
    		{
    			if (_accountContactTags == null)
    			{
    				_accountContactTags = new TrackableCollection<AccountContactTag>();
    				_accountContactTags.CollectionChanged += FixupAccountContactTags;
    				_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    			}
    			return _accountContactTags;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountContactTags, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountContactTags != null)
    				{
    					_accountContactTags.CollectionChanged -= FixupAccountContactTags;
    					_accountContactTags.CollectionChanged -= RaiseAccountContactTagsChanged;
    				}
    				_accountContactTags = value;
    				if (_accountContactTags != null)
    				{
    					_accountContactTags.CollectionChanged += FixupAccountContactTags;
    					_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    				}
    				OnNavigationPropertyChanged("AccountContactTags");
    			}
    		}
    	}
    	private TrackableCollection<AccountContactTag> _accountContactTags;
    	partial void AccountContactTagsChanged();
    	private void RaiseAccountContactTagsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountContactTagsChanged();
    	}
    
    	public TrackableCollection<Site> Sites
    	{
    		get
    		{
    			if (_sites == null)
    			{
    				_sites = new TrackableCollection<Site>();
    				_sites.CollectionChanged += FixupSites;
    				_sites.CollectionChanged += RaiseSitesChanged;
    			}
    			return _sites;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites != null)
    				{
    					_sites.CollectionChanged -= FixupSites;
    					_sites.CollectionChanged -= RaiseSitesChanged;
    				}
    				_sites = value;
    				if (_sites != null)
    				{
    					_sites.CollectionChanged += FixupSites;
    					_sites.CollectionChanged += RaiseSitesChanged;
    				}
    				OnNavigationPropertyChanged("Sites");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites;
    	partial void SitesChanged();
    	private void RaiseSitesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SitesChanged();
    	}
    
    	public TrackableCollection<Site> Sites1
    	{
    		get
    		{
    			if (_sites1 == null)
    			{
    				_sites1 = new TrackableCollection<Site>();
    				_sites1.CollectionChanged += FixupSites1;
    				_sites1.CollectionChanged += RaiseSites1Changed;
    			}
    			return _sites1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites1 != null)
    				{
    					_sites1.CollectionChanged -= FixupSites1;
    					_sites1.CollectionChanged -= RaiseSites1Changed;
    				}
    				_sites1 = value;
    				if (_sites1 != null)
    				{
    					_sites1.CollectionChanged += FixupSites1;
    					_sites1.CollectionChanged += RaiseSites1Changed;
    				}
    				OnNavigationPropertyChanged("Sites1");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites1;
    	partial void Sites1Changed();
    	private void RaiseSites1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Sites1Changed();
    	}
    
    	public TrackableCollection<HtmlContentWorkflow> HtmlContentWorkflows
    	{
    		get
    		{
    			if (_htmlContentWorkflows == null)
    			{
    				_htmlContentWorkflows = new TrackableCollection<HtmlContentWorkflow>();
    				_htmlContentWorkflows.CollectionChanged += FixupHtmlContentWorkflows;
    				_htmlContentWorkflows.CollectionChanged += RaiseHtmlContentWorkflowsChanged;
    			}
    			return _htmlContentWorkflows;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlContentWorkflows, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlContentWorkflows != null)
    				{
    					_htmlContentWorkflows.CollectionChanged -= FixupHtmlContentWorkflows;
    					_htmlContentWorkflows.CollectionChanged -= RaiseHtmlContentWorkflowsChanged;
    				}
    				_htmlContentWorkflows = value;
    				if (_htmlContentWorkflows != null)
    				{
    					_htmlContentWorkflows.CollectionChanged += FixupHtmlContentWorkflows;
    					_htmlContentWorkflows.CollectionChanged += RaiseHtmlContentWorkflowsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlContentWorkflows");
    			}
    		}
    	}
    	private TrackableCollection<HtmlContentWorkflow> _htmlContentWorkflows;
    	partial void HtmlContentWorkflowsChanged();
    	private void RaiseHtmlContentWorkflowsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlContentWorkflowsChanged();
    	}
    
    	public TrackableCollection<AccountReportType> AccountReportTypes
    	{
    		get
    		{
    			if (_accountReportTypes == null)
    			{
    				_accountReportTypes = new TrackableCollection<AccountReportType>();
    				_accountReportTypes.CollectionChanged += FixupAccountReportTypes;
    				_accountReportTypes.CollectionChanged += RaiseAccountReportTypesChanged;
    			}
    			return _accountReportTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountReportTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountReportTypes != null)
    				{
    					_accountReportTypes.CollectionChanged -= FixupAccountReportTypes;
    					_accountReportTypes.CollectionChanged -= RaiseAccountReportTypesChanged;
    				}
    				_accountReportTypes = value;
    				if (_accountReportTypes != null)
    				{
    					_accountReportTypes.CollectionChanged += FixupAccountReportTypes;
    					_accountReportTypes.CollectionChanged += RaiseAccountReportTypesChanged;
    				}
    				OnNavigationPropertyChanged("AccountReportTypes");
    			}
    		}
    	}
    	private TrackableCollection<AccountReportType> _accountReportTypes;
    	partial void AccountReportTypesChanged();
    	private void RaiseAccountReportTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountReportTypesChanged();
    	}
    
    	public TrackableCollection<UserSiteWidget> UserSiteWidgets
    	{
    		get
    		{
    			if (_userSiteWidgets == null)
    			{
    				_userSiteWidgets = new TrackableCollection<UserSiteWidget>();
    				_userSiteWidgets.CollectionChanged += FixupUserSiteWidgets;
    				_userSiteWidgets.CollectionChanged += RaiseUserSiteWidgetsChanged;
    			}
    			return _userSiteWidgets;
    		}
    		set
    		{
    			if (!ReferenceEquals(_userSiteWidgets, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_userSiteWidgets != null)
    				{
    					_userSiteWidgets.CollectionChanged -= FixupUserSiteWidgets;
    					_userSiteWidgets.CollectionChanged -= RaiseUserSiteWidgetsChanged;
    				}
    				_userSiteWidgets = value;
    				if (_userSiteWidgets != null)
    				{
    					_userSiteWidgets.CollectionChanged += FixupUserSiteWidgets;
    					_userSiteWidgets.CollectionChanged += RaiseUserSiteWidgetsChanged;
    				}
    				OnNavigationPropertyChanged("UserSiteWidgets");
    			}
    		}
    	}
    	private TrackableCollection<UserSiteWidget> _userSiteWidgets;
    	partial void UserSiteWidgetsChanged();
    	private void RaiseUserSiteWidgetsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		UserSiteWidgetsChanged();
    	}
    
    	public TrackableCollection<Note> Notes
    	{
    		get
    		{
    			if (_notes == null)
    			{
    				_notes = new TrackableCollection<Note>();
    				_notes.CollectionChanged += FixupNotes;
    				_notes.CollectionChanged += RaiseNotesChanged;
    			}
    			return _notes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_notes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_notes != null)
    				{
    					_notes.CollectionChanged -= FixupNotes;
    					_notes.CollectionChanged -= RaiseNotesChanged;
    				}
    				_notes = value;
    				if (_notes != null)
    				{
    					_notes.CollectionChanged += FixupNotes;
    					_notes.CollectionChanged += RaiseNotesChanged;
    				}
    				OnNavigationPropertyChanged("Notes");
    			}
    		}
    	}
    	private TrackableCollection<Note> _notes;
    	partial void NotesChanged();
    	private void RaiseNotesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NotesChanged();
    	}
    
    	public TrackableCollection<Note> Notes1
    	{
    		get
    		{
    			if (_notes1 == null)
    			{
    				_notes1 = new TrackableCollection<Note>();
    				_notes1.CollectionChanged += FixupNotes1;
    				_notes1.CollectionChanged += RaiseNotes1Changed;
    			}
    			return _notes1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_notes1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_notes1 != null)
    				{
    					_notes1.CollectionChanged -= FixupNotes1;
    					_notes1.CollectionChanged -= RaiseNotes1Changed;
    				}
    				_notes1 = value;
    				if (_notes1 != null)
    				{
    					_notes1.CollectionChanged += FixupNotes1;
    					_notes1.CollectionChanged += RaiseNotes1Changed;
    				}
    				OnNavigationPropertyChanged("Notes1");
    			}
    		}
    	}
    	private TrackableCollection<Note> _notes1;
    	partial void Notes1Changed();
    	private void RaiseNotes1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Notes1Changed();
    	}
    
    	public TrackableCollection<Party> Parties
    	{
    		get
    		{
    			if (_parties == null)
    			{
    				_parties = new TrackableCollection<Party>();
    				_parties.CollectionChanged += FixupParties;
    				_parties.CollectionChanged += RaisePartiesChanged;
    			}
    			return _parties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_parties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_parties != null)
    				{
    					_parties.CollectionChanged -= FixupParties;
    					_parties.CollectionChanged -= RaisePartiesChanged;
    				}
    				_parties = value;
    				if (_parties != null)
    				{
    					_parties.CollectionChanged += FixupParties;
    					_parties.CollectionChanged += RaisePartiesChanged;
    				}
    				OnNavigationPropertyChanged("Parties");
    			}
    		}
    	}
    	private TrackableCollection<Party> _parties;
    	partial void PartiesChanged();
    	private void RaisePartiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PartiesChanged();
    	}
    
    	public TrackableCollection<HtmlContent> HtmlContents
    	{
    		get
    		{
    			if (_htmlContents == null)
    			{
    				_htmlContents = new TrackableCollection<HtmlContent>();
    				_htmlContents.CollectionChanged += FixupHtmlContents;
    				_htmlContents.CollectionChanged += RaiseHtmlContentsChanged;
    			}
    			return _htmlContents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlContents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlContents != null)
    				{
    					_htmlContents.CollectionChanged -= FixupHtmlContents;
    					_htmlContents.CollectionChanged -= RaiseHtmlContentsChanged;
    				}
    				_htmlContents = value;
    				if (_htmlContents != null)
    				{
    					_htmlContents.CollectionChanged += FixupHtmlContents;
    					_htmlContents.CollectionChanged += RaiseHtmlContentsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlContents");
    			}
    		}
    	}
    	private TrackableCollection<HtmlContent> _htmlContents;
    	partial void HtmlContentsChanged();
    	private void RaiseHtmlContentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlContentsChanged();
    	}
    
    	public TrackableCollection<AccountPolicy> AccountPolicies
    	{
    		get
    		{
    			if (_accountPolicies == null)
    			{
    				_accountPolicies = new TrackableCollection<AccountPolicy>();
    				_accountPolicies.CollectionChanged += FixupAccountPolicies;
    				_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    			}
    			return _accountPolicies;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPolicies, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPolicies != null)
    				{
    					_accountPolicies.CollectionChanged -= FixupAccountPolicies;
    					_accountPolicies.CollectionChanged -= RaiseAccountPoliciesChanged;
    				}
    				_accountPolicies = value;
    				if (_accountPolicies != null)
    				{
    					_accountPolicies.CollectionChanged += FixupAccountPolicies;
    					_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    				}
    				OnNavigationPropertyChanged("AccountPolicies");
    			}
    		}
    	}
    	private TrackableCollection<AccountPolicy> _accountPolicies;
    	partial void AccountPoliciesChanged();
    	private void RaiseAccountPoliciesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPoliciesChanged();
    	}
    
    	public TrackableCollection<OrderPaymentResult> OrderPaymentResults
    	{
    		get
    		{
    			if (_orderPaymentResults == null)
    			{
    				_orderPaymentResults = new TrackableCollection<OrderPaymentResult>();
    				_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    				_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    			}
    			return _orderPaymentResults;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPaymentResults, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPaymentResults != null)
    				{
    					_orderPaymentResults.CollectionChanged -= FixupOrderPaymentResults;
    					_orderPaymentResults.CollectionChanged -= RaiseOrderPaymentResultsChanged;
    				}
    				_orderPaymentResults = value;
    				if (_orderPaymentResults != null)
    				{
    					_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    					_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPaymentResults");
    			}
    		}
    	}
    	private TrackableCollection<OrderPaymentResult> _orderPaymentResults;
    	partial void OrderPaymentResultsChanged();
    	private void RaiseOrderPaymentResultsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentResultsChanged();
    	}
    
    	public TrackableCollection<SupportTicket> SupportTickets
    	{
    		get
    		{
    			if (_supportTickets == null)
    			{
    				_supportTickets = new TrackableCollection<SupportTicket>();
    				_supportTickets.CollectionChanged += FixupSupportTickets;
    				_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    			}
    			return _supportTickets;
    		}
    		set
    		{
    			if (!ReferenceEquals(_supportTickets, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_supportTickets != null)
    				{
    					_supportTickets.CollectionChanged -= FixupSupportTickets;
    					_supportTickets.CollectionChanged -= RaiseSupportTicketsChanged;
    				}
    				_supportTickets = value;
    				if (_supportTickets != null)
    				{
    					_supportTickets.CollectionChanged += FixupSupportTickets;
    					_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    				}
    				OnNavigationPropertyChanged("SupportTickets");
    			}
    		}
    	}
    	private TrackableCollection<SupportTicket> _supportTickets;
    	partial void SupportTicketsChanged();
    	private void RaiseSupportTicketsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SupportTicketsChanged();
    	}
    
    	public TrackableCollection<SupportTicket> SupportTickets1
    	{
    		get
    		{
    			if (_supportTickets1 == null)
    			{
    				_supportTickets1 = new TrackableCollection<SupportTicket>();
    				_supportTickets1.CollectionChanged += FixupSupportTickets1;
    				_supportTickets1.CollectionChanged += RaiseSupportTickets1Changed;
    			}
    			return _supportTickets1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_supportTickets1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_supportTickets1 != null)
    				{
    					_supportTickets1.CollectionChanged -= FixupSupportTickets1;
    					_supportTickets1.CollectionChanged -= RaiseSupportTickets1Changed;
    				}
    				_supportTickets1 = value;
    				if (_supportTickets1 != null)
    				{
    					_supportTickets1.CollectionChanged += FixupSupportTickets1;
    					_supportTickets1.CollectionChanged += RaiseSupportTickets1Changed;
    				}
    				OnNavigationPropertyChanged("SupportTickets1");
    			}
    		}
    	}
    	private TrackableCollection<SupportTicket> _supportTickets1;
    	partial void SupportTickets1Changed();
    	private void RaiseSupportTickets1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SupportTickets1Changed();
    	}
    
    	public TrackableCollection<SupportTicket> SupportTickets2
    	{
    		get
    		{
    			if (_supportTickets2 == null)
    			{
    				_supportTickets2 = new TrackableCollection<SupportTicket>();
    				_supportTickets2.CollectionChanged += FixupSupportTickets2;
    				_supportTickets2.CollectionChanged += RaiseSupportTickets2Changed;
    			}
    			return _supportTickets2;
    		}
    		set
    		{
    			if (!ReferenceEquals(_supportTickets2, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_supportTickets2 != null)
    				{
    					_supportTickets2.CollectionChanged -= FixupSupportTickets2;
    					_supportTickets2.CollectionChanged -= RaiseSupportTickets2Changed;
    				}
    				_supportTickets2 = value;
    				if (_supportTickets2 != null)
    				{
    					_supportTickets2.CollectionChanged += FixupSupportTickets2;
    					_supportTickets2.CollectionChanged += RaiseSupportTickets2Changed;
    				}
    				OnNavigationPropertyChanged("SupportTickets2");
    			}
    		}
    	}
    	private TrackableCollection<SupportTicket> _supportTickets2;
    	partial void SupportTickets2Changed();
    	private void RaiseSupportTickets2Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SupportTickets2Changed();
    	}
    
    	public TrackableCollection<AccountReport> AccountReports
    	{
    		get
    		{
    			if (_accountReports == null)
    			{
    				_accountReports = new TrackableCollection<AccountReport>();
    				_accountReports.CollectionChanged += FixupAccountReports;
    				_accountReports.CollectionChanged += RaiseAccountReportsChanged;
    			}
    			return _accountReports;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountReports, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountReports != null)
    				{
    					_accountReports.CollectionChanged -= FixupAccountReports;
    					_accountReports.CollectionChanged -= RaiseAccountReportsChanged;
    				}
    				_accountReports = value;
    				if (_accountReports != null)
    				{
    					_accountReports.CollectionChanged += FixupAccountReports;
    					_accountReports.CollectionChanged += RaiseAccountReportsChanged;
    				}
    				OnNavigationPropertyChanged("AccountReports");
    			}
    		}
    	}
    	private TrackableCollection<AccountReport> _accountReports;
    	partial void AccountReportsChanged();
    	private void RaiseAccountReportsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountReportsChanged();
    	}
    
    	public TrackableCollection<AccountReport> AccountReports1
    	{
    		get
    		{
    			if (_accountReports1 == null)
    			{
    				_accountReports1 = new TrackableCollection<AccountReport>();
    				_accountReports1.CollectionChanged += FixupAccountReports1;
    				_accountReports1.CollectionChanged += RaiseAccountReports1Changed;
    			}
    			return _accountReports1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountReports1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountReports1 != null)
    				{
    					_accountReports1.CollectionChanged -= FixupAccountReports1;
    					_accountReports1.CollectionChanged -= RaiseAccountReports1Changed;
    				}
    				_accountReports1 = value;
    				if (_accountReports1 != null)
    				{
    					_accountReports1.CollectionChanged += FixupAccountReports1;
    					_accountReports1.CollectionChanged += RaiseAccountReports1Changed;
    				}
    				OnNavigationPropertyChanged("AccountReports1");
    			}
    		}
    	}
    	private TrackableCollection<AccountReport> _accountReports1;
    	partial void AccountReports1Changed();
    	private void RaiseAccountReports1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountReports1Changed();
    	}
    
    	public TrackableCollection<Campaign> Campaigns
    	{
    		get
    		{
    			if (_campaigns == null)
    			{
    				_campaigns = new TrackableCollection<Campaign>();
    				_campaigns.CollectionChanged += FixupCampaigns;
    				_campaigns.CollectionChanged += RaiseCampaignsChanged;
    			}
    			return _campaigns;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaigns, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaigns != null)
    				{
    					_campaigns.CollectionChanged -= FixupCampaigns;
    					_campaigns.CollectionChanged -= RaiseCampaignsChanged;
    				}
    				_campaigns = value;
    				if (_campaigns != null)
    				{
    					_campaigns.CollectionChanged += FixupCampaigns;
    					_campaigns.CollectionChanged += RaiseCampaignsChanged;
    				}
    				OnNavigationPropertyChanged("Campaigns");
    			}
    		}
    	}
    	private TrackableCollection<Campaign> _campaigns;
    	partial void CampaignsChanged();
    	private void RaiseCampaignsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignsChanged();
    	}
    
    	public TrackableCollection<Role> Roles
    	{
    		get
    		{
    			if (_roles == null)
    			{
    				_roles = new TrackableCollection<Role>();
    				_roles.CollectionChanged += FixupRoles;
    				_roles.CollectionChanged += RaiseRolesChanged;
    			}
    			return _roles;
    		}
    		set
    		{
    			if (!ReferenceEquals(_roles, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_roles != null)
    				{
    					_roles.CollectionChanged -= FixupRoles;
    					_roles.CollectionChanged -= RaiseRolesChanged;
    				}
    				_roles = value;
    				if (_roles != null)
    				{
    					_roles.CollectionChanged += FixupRoles;
    					_roles.CollectionChanged += RaiseRolesChanged;
    				}
    				OnNavigationPropertyChanged("Roles");
    			}
    		}
    	}
    	private TrackableCollection<Role> _roles;
    	partial void RolesChanged();
    	private void RaiseRolesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		RolesChanged();
    	}
    
    	public TrackableCollection<Page> Pages
    	{
    		get
    		{
    			if (_pages == null)
    			{
    				_pages = new TrackableCollection<Page>();
    				_pages.CollectionChanged += FixupPages;
    				_pages.CollectionChanged += RaisePagesChanged;
    			}
    			return _pages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_pages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_pages != null)
    				{
    					_pages.CollectionChanged -= FixupPages;
    					_pages.CollectionChanged -= RaisePagesChanged;
    				}
    				_pages = value;
    				if (_pages != null)
    				{
    					_pages.CollectionChanged += FixupPages;
    					_pages.CollectionChanged += RaisePagesChanged;
    				}
    				OnNavigationPropertyChanged("Pages");
    			}
    		}
    	}
    	private TrackableCollection<Page> _pages;
    	partial void PagesChanged();
    	private void RaisePagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PagesChanged();
    	}
    
    	public TrackableCollection<ProductBase> ProductBases
    	{
    		get
    		{
    			if (_productBases == null)
    			{
    				_productBases = new TrackableCollection<ProductBase>();
    				_productBases.CollectionChanged += FixupProductBases;
    				_productBases.CollectionChanged += RaiseProductBasesChanged;
    			}
    			return _productBases;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productBases, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productBases != null)
    				{
    					_productBases.CollectionChanged -= FixupProductBases;
    					_productBases.CollectionChanged -= RaiseProductBasesChanged;
    				}
    				_productBases = value;
    				if (_productBases != null)
    				{
    					_productBases.CollectionChanged += FixupProductBases;
    					_productBases.CollectionChanged += RaiseProductBasesChanged;
    				}
    				OnNavigationPropertyChanged("ProductBases");
    			}
    		}
    	}
    	private TrackableCollection<ProductBase> _productBases;
    	partial void ProductBasesChanged();
    	private void RaiseProductBasesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductBasesChanged();
    	}
    
    	public TrackableCollection<ProductFile> ProductFiles
    	{
    		get
    		{
    			if (_productFiles == null)
    			{
    				_productFiles = new TrackableCollection<ProductFile>();
    				_productFiles.CollectionChanged += FixupProductFiles;
    				_productFiles.CollectionChanged += RaiseProductFilesChanged;
    			}
    			return _productFiles;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productFiles, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productFiles != null)
    				{
    					_productFiles.CollectionChanged -= FixupProductFiles;
    					_productFiles.CollectionChanged -= RaiseProductFilesChanged;
    				}
    				_productFiles = value;
    				if (_productFiles != null)
    				{
    					_productFiles.CollectionChanged += FixupProductFiles;
    					_productFiles.CollectionChanged += RaiseProductFilesChanged;
    				}
    				OnNavigationPropertyChanged("ProductFiles");
    			}
    		}
    	}
    	private TrackableCollection<ProductFile> _productFiles;
    	partial void ProductFilesChanged();
    	private void RaiseProductFilesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductFilesChanged();
    	}
    
    	public TrackableCollection<ProductPrice> ProductPrices
    	{
    		get
    		{
    			if (_productPrices == null)
    			{
    				_productPrices = new TrackableCollection<ProductPrice>();
    				_productPrices.CollectionChanged += FixupProductPrices;
    				_productPrices.CollectionChanged += RaiseProductPricesChanged;
    			}
    			return _productPrices;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productPrices, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productPrices != null)
    				{
    					_productPrices.CollectionChanged -= FixupProductPrices;
    					_productPrices.CollectionChanged -= RaiseProductPricesChanged;
    				}
    				_productPrices = value;
    				if (_productPrices != null)
    				{
    					_productPrices.CollectionChanged += FixupProductPrices;
    					_productPrices.CollectionChanged += RaiseProductPricesChanged;
    				}
    				OnNavigationPropertyChanged("ProductPrices");
    			}
    		}
    	}
    	private TrackableCollection<ProductPrice> _productPrices;
    	partial void ProductPricesChanged();
    	private void RaiseProductPricesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPricesChanged();
    	}
    
    	public TrackableCollection<FileResource> FileResources
    	{
    		get
    		{
    			if (_fileResources == null)
    			{
    				_fileResources = new TrackableCollection<FileResource>();
    				_fileResources.CollectionChanged += FixupFileResources;
    				_fileResources.CollectionChanged += RaiseFileResourcesChanged;
    			}
    			return _fileResources;
    		}
    		set
    		{
    			if (!ReferenceEquals(_fileResources, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_fileResources != null)
    				{
    					_fileResources.CollectionChanged -= FixupFileResources;
    					_fileResources.CollectionChanged -= RaiseFileResourcesChanged;
    				}
    				_fileResources = value;
    				if (_fileResources != null)
    				{
    					_fileResources.CollectionChanged += FixupFileResources;
    					_fileResources.CollectionChanged += RaiseFileResourcesChanged;
    				}
    				OnNavigationPropertyChanged("FileResources");
    			}
    		}
    	}
    	private TrackableCollection<FileResource> _fileResources;
    	partial void FileResourcesChanged();
    	private void RaiseFileResourcesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		FileResourcesChanged();
    	}
    
    	public TrackableCollection<Product> Products
    	{
    		get
    		{
    			if (_products == null)
    			{
    				_products = new TrackableCollection<Product>();
    				_products.CollectionChanged += FixupProducts;
    				_products.CollectionChanged += RaiseProductsChanged;
    			}
    			return _products;
    		}
    		set
    		{
    			if (!ReferenceEquals(_products, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_products != null)
    				{
    					_products.CollectionChanged -= FixupProducts;
    					_products.CollectionChanged -= RaiseProductsChanged;
    				}
    				_products = value;
    				if (_products != null)
    				{
    					_products.CollectionChanged += FixupProducts;
    					_products.CollectionChanged += RaiseProductsChanged;
    				}
    				OnNavigationPropertyChanged("Products");
    			}
    		}
    	}
    	private TrackableCollection<Product> _products;
    	partial void ProductsChanged();
    	private void RaiseProductsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductsChanged();
    	}
    
    	public TrackableCollection<SupportTicket> SupportTickets2_1
    	{
    		get
    		{
    			if (_supportTickets2_1 == null)
    			{
    				_supportTickets2_1 = new TrackableCollection<SupportTicket>();
    				_supportTickets2_1.CollectionChanged += FixupSupportTickets2_1;
    				_supportTickets2_1.CollectionChanged += RaiseSupportTickets2_1Changed;
    			}
    			return _supportTickets2_1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_supportTickets2_1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_supportTickets2_1 != null)
    				{
    					_supportTickets2_1.CollectionChanged -= FixupSupportTickets2_1;
    					_supportTickets2_1.CollectionChanged -= RaiseSupportTickets2_1Changed;
    				}
    				_supportTickets2_1 = value;
    				if (_supportTickets2_1 != null)
    				{
    					_supportTickets2_1.CollectionChanged += FixupSupportTickets2_1;
    					_supportTickets2_1.CollectionChanged += RaiseSupportTickets2_1Changed;
    				}
    				OnNavigationPropertyChanged("SupportTickets2_1");
    			}
    		}
    	}
    	private TrackableCollection<SupportTicket> _supportTickets2_1;
    	partial void SupportTickets2_1Changed();
    	private void RaiseSupportTickets2_1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SupportTickets2_1Changed();
    	}
    
    	public TrackableCollection<OrderTracking> OrderTrackings
    	{
    		get
    		{
    			if (_orderTrackings == null)
    			{
    				_orderTrackings = new TrackableCollection<OrderTracking>();
    				_orderTrackings.CollectionChanged += FixupOrderTrackings;
    				_orderTrackings.CollectionChanged += RaiseOrderTrackingsChanged;
    			}
    			return _orderTrackings;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderTrackings, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderTrackings != null)
    				{
    					_orderTrackings.CollectionChanged -= FixupOrderTrackings;
    					_orderTrackings.CollectionChanged -= RaiseOrderTrackingsChanged;
    				}
    				_orderTrackings = value;
    				if (_orderTrackings != null)
    				{
    					_orderTrackings.CollectionChanged += FixupOrderTrackings;
    					_orderTrackings.CollectionChanged += RaiseOrderTrackingsChanged;
    				}
    				OnNavigationPropertyChanged("OrderTrackings");
    			}
    		}
    	}
    	private TrackableCollection<OrderTracking> _orderTrackings;
    	partial void OrderTrackingsChanged();
    	private void RaiseOrderTrackingsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderTrackingsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_applicationUsageLogs != null)
    		{
    			_applicationUsageLogs.CollectionChanged -= FixupApplicationUsageLogs;
    			_applicationUsageLogs.CollectionChanged -= RaiseApplicationUsageLogsChanged;
    			_applicationUsageLogs.CollectionChanged += FixupApplicationUsageLogs;
    			_applicationUsageLogs.CollectionChanged += RaiseApplicationUsageLogsChanged;
    		}
    		if (_accounts != null)
    		{
    			_accounts.CollectionChanged -= FixupAccounts;
    			_accounts.CollectionChanged -= RaiseAccountsChanged;
    			_accounts.CollectionChanged += FixupAccounts;
    			_accounts.CollectionChanged += RaiseAccountsChanged;
    		}
    		if (_accounts1 != null)
    		{
    			_accounts1.CollectionChanged -= FixupAccounts1;
    			_accounts1.CollectionChanged -= RaiseAccounts1Changed;
    			_accounts1.CollectionChanged += FixupAccounts1;
    			_accounts1.CollectionChanged += RaiseAccounts1Changed;
    		}
    		if (_htmlContentHistories != null)
    		{
    			_htmlContentHistories.CollectionChanged -= FixupHtmlContentHistories;
    			_htmlContentHistories.CollectionChanged -= RaiseHtmlContentHistoriesChanged;
    			_htmlContentHistories.CollectionChanged += FixupHtmlContentHistories;
    			_htmlContentHistories.CollectionChanged += RaiseHtmlContentHistoriesChanged;
    		}
    		if (_accounts_1 != null)
    		{
    			_accounts_1.CollectionChanged -= FixupAccounts_1;
    			_accounts_1.CollectionChanged -= RaiseAccounts_1Changed;
    			_accounts_1.CollectionChanged += FixupAccounts_1;
    			_accounts_1.CollectionChanged += RaiseAccounts_1Changed;
    		}
    		if (_corporateUsers != null)
    		{
    			_corporateUsers.CollectionChanged -= FixupCorporateUsers;
    			_corporateUsers.CollectionChanged -= RaiseCorporateUsersChanged;
    			_corporateUsers.CollectionChanged += FixupCorporateUsers;
    			_corporateUsers.CollectionChanged += RaiseCorporateUsersChanged;
    		}
    		if (_accountLanguages != null)
    		{
    			_accountLanguages.CollectionChanged -= FixupAccountLanguages;
    			_accountLanguages.CollectionChanged -= RaiseAccountLanguagesChanged;
    			_accountLanguages.CollectionChanged += FixupAccountLanguages;
    			_accountLanguages.CollectionChanged += RaiseAccountLanguagesChanged;
    		}
    		if (_accountListValues != null)
    		{
    			_accountListValues.CollectionChanged -= FixupAccountListValues;
    			_accountListValues.CollectionChanged -= RaiseAccountListValuesChanged;
    			_accountListValues.CollectionChanged += FixupAccountListValues;
    			_accountListValues.CollectionChanged += RaiseAccountListValuesChanged;
    		}
    		if (_accountPaymentMethods != null)
    		{
    			_accountPaymentMethods.CollectionChanged -= FixupAccountPaymentMethods;
    			_accountPaymentMethods.CollectionChanged -= RaiseAccountPaymentMethodsChanged;
    			_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    			_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    		}
    		if (_accountPhones != null)
    		{
    			_accountPhones.CollectionChanged -= FixupAccountPhones;
    			_accountPhones.CollectionChanged -= RaiseAccountPhonesChanged;
    			_accountPhones.CollectionChanged += FixupAccountPhones;
    			_accountPhones.CollectionChanged += RaiseAccountPhonesChanged;
    		}
    		if (_accountSponsors != null)
    		{
    			_accountSponsors.CollectionChanged -= FixupAccountSponsors;
    			_accountSponsors.CollectionChanged -= RaiseAccountSponsorsChanged;
    			_accountSponsors.CollectionChanged += FixupAccountSponsors;
    			_accountSponsors.CollectionChanged += RaiseAccountSponsorsChanged;
    		}
    		if (_accountStatusChangeReasons != null)
    		{
    			_accountStatusChangeReasons.CollectionChanged -= FixupAccountStatusChangeReasons;
    			_accountStatusChangeReasons.CollectionChanged -= RaiseAccountStatusChangeReasonsChanged;
    			_accountStatusChangeReasons.CollectionChanged += FixupAccountStatusChangeReasons;
    			_accountStatusChangeReasons.CollectionChanged += RaiseAccountStatusChangeReasonsChanged;
    		}
    		if (_archiveTypes != null)
    		{
    			_archiveTypes.CollectionChanged -= FixupArchiveTypes;
    			_archiveTypes.CollectionChanged -= RaiseArchiveTypesChanged;
    			_archiveTypes.CollectionChanged += FixupArchiveTypes;
    			_archiveTypes.CollectionChanged += RaiseArchiveTypesChanged;
    		}
    		if (_corporateUsers1 != null)
    		{
    			_corporateUsers1.CollectionChanged -= FixupCorporateUsers1;
    			_corporateUsers1.CollectionChanged -= RaiseCorporateUsers1Changed;
    			_corporateUsers1.CollectionChanged += FixupCorporateUsers1;
    			_corporateUsers1.CollectionChanged += RaiseCorporateUsers1Changed;
    		}
    		if (_newsTypes != null)
    		{
    			_newsTypes.CollectionChanged -= FixupNewsTypes;
    			_newsTypes.CollectionChanged -= RaiseNewsTypesChanged;
    			_newsTypes.CollectionChanged += FixupNewsTypes;
    			_newsTypes.CollectionChanged += RaiseNewsTypesChanged;
    		}
    		if (_orderCustomers != null)
    		{
    			_orderCustomers.CollectionChanged -= FixupOrderCustomers;
    			_orderCustomers.CollectionChanged -= RaiseOrderCustomersChanged;
    			_orderCustomers.CollectionChanged += FixupOrderCustomers;
    			_orderCustomers.CollectionChanged += RaiseOrderCustomersChanged;
    		}
    		if (_orderPayments != null)
    		{
    			_orderPayments.CollectionChanged -= FixupOrderPayments;
    			_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    			_orderPayments.CollectionChanged += FixupOrderPayments;
    			_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    		}
    		if (_orderShipments != null)
    		{
    			_orderShipments.CollectionChanged -= FixupOrderShipments;
    			_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    			_orderShipments.CollectionChanged += FixupOrderShipments;
    			_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    		}
    		if (_returnReasons != null)
    		{
    			_returnReasons.CollectionChanged -= FixupReturnReasons;
    			_returnReasons.CollectionChanged -= RaiseReturnReasonsChanged;
    			_returnReasons.CollectionChanged += FixupReturnReasons;
    			_returnReasons.CollectionChanged += RaiseReturnReasonsChanged;
    		}
    		if (_returnTypes != null)
    		{
    			_returnTypes.CollectionChanged -= FixupReturnTypes;
    			_returnTypes.CollectionChanged -= RaiseReturnTypesChanged;
    			_returnTypes.CollectionChanged += FixupReturnTypes;
    			_returnTypes.CollectionChanged += RaiseReturnTypesChanged;
    		}
    		if (_archives != null)
    		{
    			_archives.CollectionChanged -= FixupArchives;
    			_archives.CollectionChanged -= RaiseArchivesChanged;
    			_archives.CollectionChanged += FixupArchives;
    			_archives.CollectionChanged += RaiseArchivesChanged;
    		}
    		if (_calendarEvents != null)
    		{
    			_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    			_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    			_calendarEvents.CollectionChanged += FixupCalendarEvents;
    			_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    		}
    		if (_mailAccounts != null)
    		{
    			_mailAccounts.CollectionChanged -= FixupMailAccounts;
    			_mailAccounts.CollectionChanged -= RaiseMailAccountsChanged;
    			_mailAccounts.CollectionChanged += FixupMailAccounts;
    			_mailAccounts.CollectionChanged += RaiseMailAccountsChanged;
    		}
    		if (_news != null)
    		{
    			_news.CollectionChanged -= FixupNews;
    			_news.CollectionChanged -= RaiseNewsChanged;
    			_news.CollectionChanged += FixupNews;
    			_news.CollectionChanged += RaiseNewsChanged;
    		}
    		if (_siteUrls != null)
    		{
    			_siteUrls.CollectionChanged -= FixupSiteUrls;
    			_siteUrls.CollectionChanged -= RaiseSiteUrlsChanged;
    			_siteUrls.CollectionChanged += FixupSiteUrls;
    			_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    		}
    		if (_userFunctionOverrides != null)
    		{
    			_userFunctionOverrides.CollectionChanged -= FixupUserFunctionOverrides;
    			_userFunctionOverrides.CollectionChanged -= RaiseUserFunctionOverridesChanged;
    			_userFunctionOverrides.CollectionChanged += FixupUserFunctionOverrides;
    			_userFunctionOverrides.CollectionChanged += RaiseUserFunctionOverridesChanged;
    		}
    		if (_accountPublicContactInfoes != null)
    		{
    			_accountPublicContactInfoes.CollectionChanged -= FixupAccountPublicContactInfoes;
    			_accountPublicContactInfoes.CollectionChanged -= RaiseAccountPublicContactInfoesChanged;
    			_accountPublicContactInfoes.CollectionChanged += FixupAccountPublicContactInfoes;
    			_accountPublicContactInfoes.CollectionChanged += RaiseAccountPublicContactInfoesChanged;
    		}
    		if (_autoshipBatches != null)
    		{
    			_autoshipBatches.CollectionChanged -= FixupAutoshipBatches;
    			_autoshipBatches.CollectionChanged -= RaiseAutoshipBatchesChanged;
    			_autoshipBatches.CollectionChanged += FixupAutoshipBatches;
    			_autoshipBatches.CollectionChanged += RaiseAutoshipBatchesChanged;
    		}
    		if (_orderItems != null)
    		{
    			_orderItems.CollectionChanged -= FixupOrderItems;
    			_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    			_orderItems.CollectionChanged += FixupOrderItems;
    			_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    		}
    		if (_orders != null)
    		{
    			_orders.CollectionChanged -= FixupOrders;
    			_orders.CollectionChanged -= RaiseOrdersChanged;
    			_orders.CollectionChanged += FixupOrders;
    			_orders.CollectionChanged += RaiseOrdersChanged;
    		}
    		if (_orders1 != null)
    		{
    			_orders1.CollectionChanged -= FixupOrders1;
    			_orders1.CollectionChanged -= RaiseOrders1Changed;
    			_orders1.CollectionChanged += FixupOrders1;
    			_orders1.CollectionChanged += RaiseOrders1Changed;
    		}
    		if (_navigations != null)
    		{
    			_navigations.CollectionChanged -= FixupNavigations;
    			_navigations.CollectionChanged -= RaiseNavigationsChanged;
    			_navigations.CollectionChanged += FixupNavigations;
    			_navigations.CollectionChanged += RaiseNavigationsChanged;
    		}
    		if (_addresses != null)
    		{
    			_addresses.CollectionChanged -= FixupAddresses;
    			_addresses.CollectionChanged -= RaiseAddressesChanged;
    			_addresses.CollectionChanged += FixupAddresses;
    			_addresses.CollectionChanged += RaiseAddressesChanged;
    		}
    		if (_accountContactTags != null)
    		{
    			_accountContactTags.CollectionChanged -= FixupAccountContactTags;
    			_accountContactTags.CollectionChanged -= RaiseAccountContactTagsChanged;
    			_accountContactTags.CollectionChanged += FixupAccountContactTags;
    			_accountContactTags.CollectionChanged += RaiseAccountContactTagsChanged;
    		}
    		if (_sites != null)
    		{
    			_sites.CollectionChanged -= FixupSites;
    			_sites.CollectionChanged -= RaiseSitesChanged;
    			_sites.CollectionChanged += FixupSites;
    			_sites.CollectionChanged += RaiseSitesChanged;
    		}
    		if (_sites1 != null)
    		{
    			_sites1.CollectionChanged -= FixupSites1;
    			_sites1.CollectionChanged -= RaiseSites1Changed;
    			_sites1.CollectionChanged += FixupSites1;
    			_sites1.CollectionChanged += RaiseSites1Changed;
    		}
    		if (_htmlContentWorkflows != null)
    		{
    			_htmlContentWorkflows.CollectionChanged -= FixupHtmlContentWorkflows;
    			_htmlContentWorkflows.CollectionChanged -= RaiseHtmlContentWorkflowsChanged;
    			_htmlContentWorkflows.CollectionChanged += FixupHtmlContentWorkflows;
    			_htmlContentWorkflows.CollectionChanged += RaiseHtmlContentWorkflowsChanged;
    		}
    		if (_accountReportTypes != null)
    		{
    			_accountReportTypes.CollectionChanged -= FixupAccountReportTypes;
    			_accountReportTypes.CollectionChanged -= RaiseAccountReportTypesChanged;
    			_accountReportTypes.CollectionChanged += FixupAccountReportTypes;
    			_accountReportTypes.CollectionChanged += RaiseAccountReportTypesChanged;
    		}
    		if (_userSiteWidgets != null)
    		{
    			_userSiteWidgets.CollectionChanged -= FixupUserSiteWidgets;
    			_userSiteWidgets.CollectionChanged -= RaiseUserSiteWidgetsChanged;
    			_userSiteWidgets.CollectionChanged += FixupUserSiteWidgets;
    			_userSiteWidgets.CollectionChanged += RaiseUserSiteWidgetsChanged;
    		}
    		if (_notes != null)
    		{
    			_notes.CollectionChanged -= FixupNotes;
    			_notes.CollectionChanged -= RaiseNotesChanged;
    			_notes.CollectionChanged += FixupNotes;
    			_notes.CollectionChanged += RaiseNotesChanged;
    		}
    		if (_notes1 != null)
    		{
    			_notes1.CollectionChanged -= FixupNotes1;
    			_notes1.CollectionChanged -= RaiseNotes1Changed;
    			_notes1.CollectionChanged += FixupNotes1;
    			_notes1.CollectionChanged += RaiseNotes1Changed;
    		}
    		if (_parties != null)
    		{
    			_parties.CollectionChanged -= FixupParties;
    			_parties.CollectionChanged -= RaisePartiesChanged;
    			_parties.CollectionChanged += FixupParties;
    			_parties.CollectionChanged += RaisePartiesChanged;
    		}
    		if (_htmlContents != null)
    		{
    			_htmlContents.CollectionChanged -= FixupHtmlContents;
    			_htmlContents.CollectionChanged -= RaiseHtmlContentsChanged;
    			_htmlContents.CollectionChanged += FixupHtmlContents;
    			_htmlContents.CollectionChanged += RaiseHtmlContentsChanged;
    		}
    		if (_accountPolicies != null)
    		{
    			_accountPolicies.CollectionChanged -= FixupAccountPolicies;
    			_accountPolicies.CollectionChanged -= RaiseAccountPoliciesChanged;
    			_accountPolicies.CollectionChanged += FixupAccountPolicies;
    			_accountPolicies.CollectionChanged += RaiseAccountPoliciesChanged;
    		}
    		if (_orderPaymentResults != null)
    		{
    			_orderPaymentResults.CollectionChanged -= FixupOrderPaymentResults;
    			_orderPaymentResults.CollectionChanged -= RaiseOrderPaymentResultsChanged;
    			_orderPaymentResults.CollectionChanged += FixupOrderPaymentResults;
    			_orderPaymentResults.CollectionChanged += RaiseOrderPaymentResultsChanged;
    		}
    		if (_supportTickets != null)
    		{
    			_supportTickets.CollectionChanged -= FixupSupportTickets;
    			_supportTickets.CollectionChanged -= RaiseSupportTicketsChanged;
    			_supportTickets.CollectionChanged += FixupSupportTickets;
    			_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    		}
    		if (_supportTickets1 != null)
    		{
    			_supportTickets1.CollectionChanged -= FixupSupportTickets1;
    			_supportTickets1.CollectionChanged -= RaiseSupportTickets1Changed;
    			_supportTickets1.CollectionChanged += FixupSupportTickets1;
    			_supportTickets1.CollectionChanged += RaiseSupportTickets1Changed;
    		}
    		if (_supportTickets2 != null)
    		{
    			_supportTickets2.CollectionChanged -= FixupSupportTickets2;
    			_supportTickets2.CollectionChanged -= RaiseSupportTickets2Changed;
    			_supportTickets2.CollectionChanged += FixupSupportTickets2;
    			_supportTickets2.CollectionChanged += RaiseSupportTickets2Changed;
    		}
    		if (_accountReports != null)
    		{
    			_accountReports.CollectionChanged -= FixupAccountReports;
    			_accountReports.CollectionChanged -= RaiseAccountReportsChanged;
    			_accountReports.CollectionChanged += FixupAccountReports;
    			_accountReports.CollectionChanged += RaiseAccountReportsChanged;
    		}
    		if (_accountReports1 != null)
    		{
    			_accountReports1.CollectionChanged -= FixupAccountReports1;
    			_accountReports1.CollectionChanged -= RaiseAccountReports1Changed;
    			_accountReports1.CollectionChanged += FixupAccountReports1;
    			_accountReports1.CollectionChanged += RaiseAccountReports1Changed;
    		}
    		if (_campaigns != null)
    		{
    			_campaigns.CollectionChanged -= FixupCampaigns;
    			_campaigns.CollectionChanged -= RaiseCampaignsChanged;
    			_campaigns.CollectionChanged += FixupCampaigns;
    			_campaigns.CollectionChanged += RaiseCampaignsChanged;
    		}
    		if (_roles != null)
    		{
    			_roles.CollectionChanged -= FixupRoles;
    			_roles.CollectionChanged -= RaiseRolesChanged;
    			_roles.CollectionChanged += FixupRoles;
    			_roles.CollectionChanged += RaiseRolesChanged;
    		}
    		if (_pages != null)
    		{
    			_pages.CollectionChanged -= FixupPages;
    			_pages.CollectionChanged -= RaisePagesChanged;
    			_pages.CollectionChanged += FixupPages;
    			_pages.CollectionChanged += RaisePagesChanged;
    		}
    		if (_productBases != null)
    		{
    			_productBases.CollectionChanged -= FixupProductBases;
    			_productBases.CollectionChanged -= RaiseProductBasesChanged;
    			_productBases.CollectionChanged += FixupProductBases;
    			_productBases.CollectionChanged += RaiseProductBasesChanged;
    		}
    		if (_productFiles != null)
    		{
    			_productFiles.CollectionChanged -= FixupProductFiles;
    			_productFiles.CollectionChanged -= RaiseProductFilesChanged;
    			_productFiles.CollectionChanged += FixupProductFiles;
    			_productFiles.CollectionChanged += RaiseProductFilesChanged;
    		}
    		if (_productPrices != null)
    		{
    			_productPrices.CollectionChanged -= FixupProductPrices;
    			_productPrices.CollectionChanged -= RaiseProductPricesChanged;
    			_productPrices.CollectionChanged += FixupProductPrices;
    			_productPrices.CollectionChanged += RaiseProductPricesChanged;
    		}
    		if (_fileResources != null)
    		{
    			_fileResources.CollectionChanged -= FixupFileResources;
    			_fileResources.CollectionChanged -= RaiseFileResourcesChanged;
    			_fileResources.CollectionChanged += FixupFileResources;
    			_fileResources.CollectionChanged += RaiseFileResourcesChanged;
    		}
    		if (_products != null)
    		{
    			_products.CollectionChanged -= FixupProducts;
    			_products.CollectionChanged -= RaiseProductsChanged;
    			_products.CollectionChanged += FixupProducts;
    			_products.CollectionChanged += RaiseProductsChanged;
    		}
    		if (_supportTickets2_1 != null)
    		{
    			_supportTickets2_1.CollectionChanged -= FixupSupportTickets2_1;
    			_supportTickets2_1.CollectionChanged -= RaiseSupportTickets2_1Changed;
    			_supportTickets2_1.CollectionChanged += FixupSupportTickets2_1;
    			_supportTickets2_1.CollectionChanged += RaiseSupportTickets2_1Changed;
    		}
    		if (_orderTrackings != null)
    		{
    			_orderTrackings.CollectionChanged -= FixupOrderTrackings;
    			_orderTrackings.CollectionChanged -= RaiseOrderTrackingsChanged;
    			_orderTrackings.CollectionChanged += FixupOrderTrackings;
    			_orderTrackings.CollectionChanged += RaiseOrderTrackingsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ApplicationUsageLogs.Clear();
    		UserType = null;
    		Accounts.Clear();
    		Accounts1.Clear();
    		UserStatus = null;
    		HtmlContentHistories.Clear();
    		Accounts_1.Clear();
    		CorporateUsers.Clear();
    		AccountLanguages.Clear();
    		AccountListValues.Clear();
    		AccountPaymentMethods.Clear();
    		AccountPhones.Clear();
    		AccountSponsors.Clear();
    		AccountStatusChangeReasons.Clear();
    		ArchiveTypes.Clear();
    		CorporateUsers1.Clear();
    		NewsTypes.Clear();
    		OrderCustomers.Clear();
    		OrderPayments.Clear();
    		OrderShipments.Clear();
    		ReturnReasons.Clear();
    		ReturnTypes.Clear();
    		User1 = null;
    		Archives.Clear();
    		CalendarEvents.Clear();
    		MailAccounts.Clear();
    		News.Clear();
    		SiteUrls.Clear();
    		UserFunctionOverrides.Clear();
    		Language = null;
    		AccountPublicContactInfoes.Clear();
    		AutoshipBatches.Clear();
    		OrderItems.Clear();
    		Orders.Clear();
    		Orders1.Clear();
    		Navigations.Clear();
    		Addresses.Clear();
    		AccountContactTags.Clear();
    		Sites.Clear();
    		Sites1.Clear();
    		HtmlContentWorkflows.Clear();
    		AccountReportTypes.Clear();
    		UserSiteWidgets.Clear();
    		Notes.Clear();
    		Notes1.Clear();
    		Parties.Clear();
    		HtmlContents.Clear();
    		AccountPolicies.Clear();
    		OrderPaymentResults.Clear();
    		SupportTickets.Clear();
    		SupportTickets1.Clear();
    		SupportTickets2.Clear();
    		AccountReports.Clear();
    		AccountReports1.Clear();
    		Campaigns.Clear();
    		Roles.Clear();
    		Pages.Clear();
    		ProductBases.Clear();
    		ProductFiles.Clear();
    		ProductPrices.Clear();
    		FileResources.Clear();
    		Products.Clear();
    		SupportTickets2_1.Clear();
    		OrderTrackings.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupUserType(UserType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Users.Contains(this))
    		{
    			previousValue.Users.Remove(this);
    		}
    
    		if (UserType != null)
    		{
    			if (!UserType.Users.Contains(this))
    			{
    				UserType.Users.Add(this);
    			}
    
    			UserTypeID = UserType.UserTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("UserType")
    				&& (ChangeTracker.OriginalValues["UserType"] == UserType))
    			{
    				ChangeTracker.OriginalValues.Remove("UserType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("UserType", previousValue);
    			}
    			if (UserType != null && !UserType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				UserType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUserStatus(UserStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Users.Contains(this))
    		{
    			previousValue.Users.Remove(this);
    		}
    
    		if (UserStatus != null)
    		{
    			if (!UserStatus.Users.Contains(this))
    			{
    				UserStatus.Users.Add(this);
    			}
    
    			UserStatusID = UserStatus.UserStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("UserStatus")
    				&& (ChangeTracker.OriginalValues["UserStatus"] == UserStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("UserStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("UserStatus", previousValue);
    			}
    			if (UserStatus != null && !UserStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				UserStatus.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser1(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (User1 != null)
    		{
    			ModifiedByUserID = User1.UserID;
    		}
    
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User1")
    				&& (ChangeTracker.OriginalValues["User1"] == User1))
    			{
    				ChangeTracker.OriginalValues.Remove("User1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User1", previousValue);
    			}
    			if (User1 != null && !User1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupLanguage(Language previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Users.Contains(this))
    		{
    			previousValue.Users.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.Users.Contains(this))
    			{
    				Language.Users.Add(this);
    			}
    
    			DefaultLanguageID = Language.LanguageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupApplicationUsageLogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ApplicationUsageLog item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ApplicationUsageLogs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ApplicationUsageLog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ApplicationUsageLogs", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				item.CreatedByUser = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (ReferenceEquals(item.CreatedByUser, this))
    				{
    					item.CreatedByUser = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				item.ModifiedByUser = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ModifiedByUser, this))
    				{
    					item.ModifiedByUser = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlContentHistories(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlContentHistory item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlContentHistories", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlContentHistory item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlContentHistories", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts_1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts_1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts_1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCorporateUsers(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CorporateUser item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CorporateUsers", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CorporateUser item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CorporateUsers", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountLanguages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountLanguage item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountLanguages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountLanguage item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountLanguages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountListValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountListValue item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountListValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountListValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountListValues", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPaymentMethods(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPaymentMethod item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPaymentMethods", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPaymentMethod item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPaymentMethods", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPhones(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPhone item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPhones", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPhone item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPhones", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountSponsors(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountSponsor item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountSponsors", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountSponsor item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountSponsors", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountStatusChangeReasons(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountStatusChangeReason item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountStatusChangeReasons", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountStatusChangeReason item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountStatusChangeReasons", item);
    				}
    			}
    		}
    	}
    
    	private void FixupArchiveTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ArchiveType item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ArchiveTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ArchiveType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ArchiveTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCorporateUsers1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CorporateUser item in e.NewItems)
    			{
    				item.User1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CorporateUsers1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CorporateUser item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User1, this))
    				{
    					item.User1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CorporateUsers1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNewsTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (NewsType item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("NewsTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (NewsType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("NewsTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderCustomers(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderCustomer item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderCustomers", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderCustomer item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderCustomers", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderPayments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPayment item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPayment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderShipments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderShipment item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderShipment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupReturnReasons(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ReturnReason item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ReturnReasons", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ReturnReason item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ReturnReasons", item);
    				}
    			}
    		}
    	}
    
    	private void FixupReturnTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ReturnType item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ReturnTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ReturnType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ReturnTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupArchives(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Archive item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Archives", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Archive item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Archives", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupMailAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (MailAccount item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("MailAccounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (MailAccount item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("MailAccounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNews(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (News item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("News", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (News item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("News", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSiteUrls(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SiteUrl item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SiteUrls", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SiteUrl item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SiteUrls", item);
    				}
    			}
    		}
    	}
    
    	private void FixupUserFunctionOverrides(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (UserFunctionOverride item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("UserFunctionOverrides", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (UserFunctionOverride item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("UserFunctionOverrides", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPublicContactInfoes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPublicContactInfo item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPublicContactInfoes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPublicContactInfo item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPublicContactInfoes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAutoshipBatches(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipBatch item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipBatches", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipBatch item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipBatches", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItem item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Order item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Order item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrders1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Order item in e.NewItems)
    			{
    				item.User1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Orders1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Order item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User1, this))
    				{
    					item.User1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Orders1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNavigations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Navigation item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Navigations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Navigation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Navigations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAddresses(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Address item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Addresses", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Address item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Addresses", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountContactTags(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountContactTag item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountContactTags", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountContactTag item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountContactTags", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				item.User1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User1, this))
    				{
    					item.User1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlContentWorkflows(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlContentWorkflow item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlContentWorkflows", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlContentWorkflow item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlContentWorkflows", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountReportTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountReportType item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountReportTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountReportType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountReportTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupUserSiteWidgets(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (UserSiteWidget item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("UserSiteWidgets", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (UserSiteWidget item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("UserSiteWidgets", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNotes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Note item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Notes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Note item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Notes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNotes1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Note item in e.NewItems)
    			{
    				item.User1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Notes1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Note item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User1, this))
    				{
    					item.User1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Notes1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupParties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Party item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Parties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Party item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Parties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlContents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlContent item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlContents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlContent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlContents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPolicies(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPolicy item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPolicies", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPolicy item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPolicies", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderPaymentResults(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPaymentResult item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPaymentResults", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPaymentResult item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPaymentResults", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSupportTickets(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SupportTicket item in e.NewItems)
    			{
    				item.CreatedByUser = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SupportTickets", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SupportTicket item in e.OldItems)
    			{
    				if (ReferenceEquals(item.CreatedByUser, this))
    				{
    					item.CreatedByUser = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SupportTickets", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSupportTickets1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SupportTicket item in e.NewItems)
    			{
    				item.ModifiedByUser = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SupportTickets1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SupportTicket item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ModifiedByUser, this))
    				{
    					item.ModifiedByUser = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SupportTickets1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSupportTickets2(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SupportTicket item in e.NewItems)
    			{
    				item.AssignedUser = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SupportTickets2", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SupportTicket item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AssignedUser, this))
    				{
    					item.AssignedUser = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SupportTickets2", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountReports(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountReport item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountReports", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountReport item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountReports", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountReports1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountReport item in e.NewItems)
    			{
    				item.User1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountReports1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountReport item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User1, this))
    				{
    					item.User1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountReports1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaigns(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Campaign item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Campaigns", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Campaign item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Campaigns", item);
    				}
    			}
    		}
    	}
    
    	private void FixupRoles(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Role item in e.NewItems)
    			{
    				if (!item.Users.Contains(this))
    				{
    					item.Users.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Roles", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Role item in e.OldItems)
    			{
    				if (item.Users.Contains(this))
    				{
    					item.Users.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Roles", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Page item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Pages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Page item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Pages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductBases(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductBase item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductBases", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductBase item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductBases", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductFiles(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductFile item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductFiles", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductFile item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductFiles", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductPrices(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductPrice item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductPrices", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductPrice item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductPrices", item);
    				}
    			}
    		}
    	}
    
    	private void FixupFileResources(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (FileResource item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("FileResources", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (FileResource item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("FileResources", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Product item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Products", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Product item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Products", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSupportTickets2_1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SupportTicket item in e.NewItems)
    			{
    				item.User2 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SupportTickets2_1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SupportTicket item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User2, this))
    				{
    					item.User2 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SupportTickets2_1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderTrackings(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderTracking item in e.NewItems)
    			{
    				item.User = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderTrackings", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderTracking item in e.OldItems)
    			{
    				if (ReferenceEquals(item.User, this))
    				{
    					item.User = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderTrackings", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

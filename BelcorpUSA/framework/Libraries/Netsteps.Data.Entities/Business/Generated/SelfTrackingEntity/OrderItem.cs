//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderCustomer))]
    [KnownType(typeof(OrderItemReturn))]
    [KnownType(typeof(OrderItem))]
    [KnownType(typeof(OrderItemType))]
    [KnownType(typeof(ProductPriceType))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(User))]
    [KnownType(typeof(HostessRewardRule))]
    [KnownType(typeof(DynamicKitGroup))]
    [KnownType(typeof(OrderShipmentPackageItem))]
    [KnownType(typeof(OrderItemParentType))]
    [KnownType(typeof(OrderItemProperty))]
    [KnownType(typeof(GiftCard))]
    [KnownType(typeof(OrderItemPrice))]
    [KnownType(typeof(OrderItemReplacement))]
    [KnownType(typeof(OrderAdjustmentOrderLineModification))]
    [KnownType(typeof(OrderItemMessage))]
    [Serializable]
    public partial class OrderItem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderItemIDChanged();
    	public int OrderItemID
    	{
    		get { return _orderItemID; }
    		set
    		{
    			if (_orderItemID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderItemID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderItemID = value;
    				OrderItemIDChanged();
    				OnPropertyChanged("OrderItemID");
    			}
    		}
    	}
    	private int _orderItemID;
    	partial void OrderCustomerIDChanged();
    	public int OrderCustomerID
    	{
    		get { return _orderCustomerID; }
    		set
    		{
    			if (_orderCustomerID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderCustomerID", _orderCustomerID);
    				if (!IsDeserializing)
    				{
    					if (OrderCustomer != null && OrderCustomer.OrderCustomerID != value)
    					{
    						OrderCustomer = null;
    					}
    				}
    				_orderCustomerID = value;
    				OrderCustomerIDChanged();
    				OnPropertyChanged("OrderCustomerID");
    			}
    		}
    	}
    	private int _orderCustomerID;
    	partial void OrderItemTypeIDChanged();
    	public short OrderItemTypeID
    	{
    		get { return _orderItemTypeID; }
    		set
    		{
    			if (_orderItemTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemTypeID", _orderItemTypeID);
    				if (!IsDeserializing)
    				{
    					if (OrderItemType != null && OrderItemType.OrderItemTypeID != value)
    					{
    						OrderItemType = null;
    					}
    				}
    				_orderItemTypeID = value;
    				OrderItemTypeIDChanged();
    				OnPropertyChanged("OrderItemTypeID");
    			}
    		}
    	}
    	private short _orderItemTypeID;
    	partial void HostessRewardRuleIDChanged();
    	public Nullable<int> HostessRewardRuleID
    	{
    		get { return _hostessRewardRuleID; }
    		set
    		{
    			if (_hostessRewardRuleID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HostessRewardRuleID", _hostessRewardRuleID);
    				if (!IsDeserializing)
    				{
    					if (HostessRewardRule != null && HostessRewardRule.HostessRewardRuleID != value)
    					{
    						HostessRewardRule = null;
    					}
    				}
    				_hostessRewardRuleID = value;
    				HostessRewardRuleIDChanged();
    				OnPropertyChanged("HostessRewardRuleID");
    			}
    		}
    	}
    	private Nullable<int> _hostessRewardRuleID;
    	partial void ParentOrderItemIDChanged();
    	public Nullable<int> ParentOrderItemID
    	{
    		get { return _parentOrderItemID; }
    		set
    		{
    			if (_parentOrderItemID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParentOrderItemID", _parentOrderItemID);
    				if (!IsDeserializing)
    				{
    					if (ParentOrderItem != null && ParentOrderItem.OrderItemID != value)
    					{
    						ParentOrderItem = null;
    					}
    				}
    				_parentOrderItemID = value;
    				ParentOrderItemIDChanged();
    				OnPropertyChanged("ParentOrderItemID");
    			}
    		}
    	}
    	private Nullable<int> _parentOrderItemID;
    	partial void ProductIDChanged();
    	public Nullable<int> ProductID
    	{
    		get { return _productID; }
    		set
    		{
    			if (_productID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductID", _productID);
    				if (!IsDeserializing)
    				{
    					if (Product != null && Product.ProductID != value)
    					{
    						Product = null;
    					}
    				}
    				_productID = value;
    				ProductIDChanged();
    				OnPropertyChanged("ProductID");
    			}
    		}
    	}
    	private Nullable<int> _productID;
    	partial void ProductPriceTypeIDChanged();
    	public Nullable<int> ProductPriceTypeID
    	{
    		get { return _productPriceTypeID; }
    		set
    		{
    			if (_productPriceTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductPriceTypeID", _productPriceTypeID);
    				if (!IsDeserializing)
    				{
    					if (ProductPriceType != null && ProductPriceType.ProductPriceTypeID != value)
    					{
    						ProductPriceType = null;
    					}
    				}
    				_productPriceTypeID = value;
    				ProductPriceTypeIDChanged();
    				OnPropertyChanged("ProductPriceTypeID");
    			}
    		}
    	}
    	private Nullable<int> _productPriceTypeID;
    	partial void ProductNameChanged();
    	public string ProductName
    	{
    		get { return _productName; }
    		set
    		{
    			if (_productName != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductName", _productName);
    				_productName = value;
    				ProductNameChanged();
    				OnPropertyChanged("ProductName");
    			}
    		}
    	}
    	private string _productName;
    	partial void SKUChanged();
    	public string SKU
    	{
    		get { return _sKU; }
    		set
    		{
    			if (_sKU != value)
    			{
    				ChangeTracker.RecordOriginalValue("SKU", _sKU);
    				_sKU = value;
    				SKUChanged();
    				OnPropertyChanged("SKU");
    			}
    		}
    	}
    	private string _sKU;
    	partial void CatalogIDChanged();
    	public Nullable<int> CatalogID
    	{
    		get { return _catalogID; }
    		set
    		{
    			if (_catalogID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CatalogID", _catalogID);
    				_catalogID = value;
    				CatalogIDChanged();
    				OnPropertyChanged("CatalogID");
    			}
    		}
    	}
    	private Nullable<int> _catalogID;
    	partial void QuantityChanged();
    	public int Quantity
    	{
    		get { return _quantity; }
    		set
    		{
    			if (_quantity != value)
    			{
    				ChangeTracker.RecordOriginalValue("Quantity", _quantity);
    				_quantity = value;
    				QuantityChanged();
    				OnPropertyChanged("Quantity");
    			}
    		}
    	}
    	private int _quantity;
    	partial void ItemPriceChanged();
    	public decimal ItemPrice
    	{
    		get { return _itemPrice; }
    		set
    		{
    			if (_itemPrice != value)
    			{
    				ChangeTracker.RecordOriginalValue("ItemPrice", _itemPrice);
    				_itemPrice = value;
    				ItemPriceChanged();
    				OnPropertyChanged("ItemPrice");
    			}
    		}
    	}
    	private decimal _itemPrice;
    	partial void DiscountChanged();
    	public Nullable<decimal> Discount
    	{
    		get { return _discount; }
    		set
    		{
    			if (_discount != value)
    			{
    				ChangeTracker.RecordOriginalValue("Discount", _discount);
    				_discount = value;
    				DiscountChanged();
    				OnPropertyChanged("Discount");
    			}
    		}
    	}
    	private Nullable<decimal> _discount;
    	partial void DiscountPercentChanged();
    	public Nullable<decimal> DiscountPercent
    	{
    		get { return _discountPercent; }
    		set
    		{
    			if (_discountPercent != value)
    			{
    				ChangeTracker.RecordOriginalValue("DiscountPercent", _discountPercent);
    				_discountPercent = value;
    				DiscountPercentChanged();
    				OnPropertyChanged("DiscountPercent");
    			}
    		}
    	}
    	private Nullable<decimal> _discountPercent;
    	partial void AdjustedPriceChanged();
    	public Nullable<decimal> AdjustedPrice
    	{
    		get { return _adjustedPrice; }
    		set
    		{
    			if (_adjustedPrice != value)
    			{
    				ChangeTracker.RecordOriginalValue("AdjustedPrice", _adjustedPrice);
    				_adjustedPrice = value;
    				AdjustedPriceChanged();
    				OnPropertyChanged("AdjustedPrice");
    			}
    		}
    	}
    	private Nullable<decimal> _adjustedPrice;
    	partial void CommissionableTotalChanged();
    	public Nullable<decimal> CommissionableTotal
    	{
    		get { return _commissionableTotal; }
    		set
    		{
    			if (_commissionableTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("CommissionableTotal", _commissionableTotal);
    				_commissionableTotal = value;
    				CommissionableTotalChanged();
    				OnPropertyChanged("CommissionableTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _commissionableTotal;
    	partial void CommissionableTotalOverrideChanged();
    	public Nullable<decimal> CommissionableTotalOverride
    	{
    		get { return _commissionableTotalOverride; }
    		set
    		{
    			if (_commissionableTotalOverride != value)
    			{
    				ChangeTracker.RecordOriginalValue("CommissionableTotalOverride", _commissionableTotalOverride);
    				_commissionableTotalOverride = value;
    				CommissionableTotalOverrideChanged();
    				OnPropertyChanged("CommissionableTotalOverride");
    			}
    		}
    	}
    	private Nullable<decimal> _commissionableTotalOverride;
    	partial void ChargeTaxChanged();
    	public bool ChargeTax
    	{
    		get { return _chargeTax; }
    		set
    		{
    			if (_chargeTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChargeTax", _chargeTax);
    				_chargeTax = value;
    				ChargeTaxChanged();
    				OnPropertyChanged("ChargeTax");
    			}
    		}
    	}
    	private bool _chargeTax;
    	partial void ChargeShippingChanged();
    	public bool ChargeShipping
    	{
    		get { return _chargeShipping; }
    		set
    		{
    			if (_chargeShipping != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChargeShipping", _chargeShipping);
    				_chargeShipping = value;
    				ChargeShippingChanged();
    				OnPropertyChanged("ChargeShipping");
    			}
    		}
    	}
    	private bool _chargeShipping;
    	partial void PointsChanged();
    	public Nullable<int> Points
    	{
    		get { return _points; }
    		set
    		{
    			if (_points != value)
    			{
    				ChangeTracker.RecordOriginalValue("Points", _points);
    				_points = value;
    				PointsChanged();
    				OnPropertyChanged("Points");
    			}
    		}
    	}
    	private Nullable<int> _points;
    	partial void MinCustomerSubtotalChanged();
    	public Nullable<decimal> MinCustomerSubtotal
    	{
    		get { return _minCustomerSubtotal; }
    		set
    		{
    			if (_minCustomerSubtotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("MinCustomerSubtotal", _minCustomerSubtotal);
    				_minCustomerSubtotal = value;
    				MinCustomerSubtotalChanged();
    				OnPropertyChanged("MinCustomerSubtotal");
    			}
    		}
    	}
    	private Nullable<decimal> _minCustomerSubtotal;
    	partial void MaxCustomerSubtotalChanged();
    	public Nullable<decimal> MaxCustomerSubtotal
    	{
    		get { return _maxCustomerSubtotal; }
    		set
    		{
    			if (_maxCustomerSubtotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaxCustomerSubtotal", _maxCustomerSubtotal);
    				_maxCustomerSubtotal = value;
    				MaxCustomerSubtotalChanged();
    				OnPropertyChanged("MaxCustomerSubtotal");
    			}
    		}
    	}
    	private Nullable<decimal> _maxCustomerSubtotal;
    	partial void TaxPercentChanged();
    	public Nullable<decimal> TaxPercent
    	{
    		get { return _taxPercent; }
    		set
    		{
    			if (_taxPercent != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercent", _taxPercent);
    				_taxPercent = value;
    				TaxPercentChanged();
    				OnPropertyChanged("TaxPercent");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercent;
    	partial void TaxAmountChanged();
    	public Nullable<decimal> TaxAmount
    	{
    		get { return _taxAmount; }
    		set
    		{
    			if (_taxAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmount", _taxAmount);
    				_taxAmount = value;
    				TaxAmountChanged();
    				OnPropertyChanged("TaxAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmount;
    	partial void TaxPercentCityChanged();
    	public Nullable<decimal> TaxPercentCity
    	{
    		get { return _taxPercentCity; }
    		set
    		{
    			if (_taxPercentCity != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentCity", _taxPercentCity);
    				_taxPercentCity = value;
    				TaxPercentCityChanged();
    				OnPropertyChanged("TaxPercentCity");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentCity;
    	partial void TaxAmountCityChanged();
    	public Nullable<decimal> TaxAmountCity
    	{
    		get { return _taxAmountCity; }
    		set
    		{
    			if (_taxAmountCity != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountCity", _taxAmountCity);
    				_taxAmountCity = value;
    				TaxAmountCityChanged();
    				OnPropertyChanged("TaxAmountCity");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountCity;
    	partial void TaxAmountCityLocalChanged();
    	public Nullable<decimal> TaxAmountCityLocal
    	{
    		get { return _taxAmountCityLocal; }
    		set
    		{
    			if (_taxAmountCityLocal != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountCityLocal", _taxAmountCityLocal);
    				_taxAmountCityLocal = value;
    				TaxAmountCityLocalChanged();
    				OnPropertyChanged("TaxAmountCityLocal");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountCityLocal;
    	partial void TaxPercentStateChanged();
    	public Nullable<decimal> TaxPercentState
    	{
    		get { return _taxPercentState; }
    		set
    		{
    			if (_taxPercentState != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentState", _taxPercentState);
    				_taxPercentState = value;
    				TaxPercentStateChanged();
    				OnPropertyChanged("TaxPercentState");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentState;
    	partial void TaxAmountStateChanged();
    	public Nullable<decimal> TaxAmountState
    	{
    		get { return _taxAmountState; }
    		set
    		{
    			if (_taxAmountState != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountState", _taxAmountState);
    				_taxAmountState = value;
    				TaxAmountStateChanged();
    				OnPropertyChanged("TaxAmountState");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountState;
    	partial void TaxPercentCountyChanged();
    	public Nullable<decimal> TaxPercentCounty
    	{
    		get { return _taxPercentCounty; }
    		set
    		{
    			if (_taxPercentCounty != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentCounty", _taxPercentCounty);
    				_taxPercentCounty = value;
    				TaxPercentCountyChanged();
    				OnPropertyChanged("TaxPercentCounty");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentCounty;
    	partial void TaxAmountCountyChanged();
    	public Nullable<decimal> TaxAmountCounty
    	{
    		get { return _taxAmountCounty; }
    		set
    		{
    			if (_taxAmountCounty != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountCounty", _taxAmountCounty);
    				_taxAmountCounty = value;
    				TaxAmountCountyChanged();
    				OnPropertyChanged("TaxAmountCounty");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountCounty;
    	partial void TaxAmountCountyLocalChanged();
    	public Nullable<decimal> TaxAmountCountyLocal
    	{
    		get { return _taxAmountCountyLocal; }
    		set
    		{
    			if (_taxAmountCountyLocal != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountCountyLocal", _taxAmountCountyLocal);
    				_taxAmountCountyLocal = value;
    				TaxAmountCountyLocalChanged();
    				OnPropertyChanged("TaxAmountCountyLocal");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountCountyLocal;
    	partial void TaxPercentDistrictChanged();
    	public Nullable<decimal> TaxPercentDistrict
    	{
    		get { return _taxPercentDistrict; }
    		set
    		{
    			if (_taxPercentDistrict != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentDistrict", _taxPercentDistrict);
    				_taxPercentDistrict = value;
    				TaxPercentDistrictChanged();
    				OnPropertyChanged("TaxPercentDistrict");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentDistrict;
    	partial void TaxAmountDistrictChanged();
    	public Nullable<decimal> TaxAmountDistrict
    	{
    		get { return _taxAmountDistrict; }
    		set
    		{
    			if (_taxAmountDistrict != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountDistrict", _taxAmountDistrict);
    				_taxAmountDistrict = value;
    				TaxAmountDistrictChanged();
    				OnPropertyChanged("TaxAmountDistrict");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountDistrict;
    	partial void TaxPercentCountryChanged();
    	public Nullable<decimal> TaxPercentCountry
    	{
    		get { return _taxPercentCountry; }
    		set
    		{
    			if (_taxPercentCountry != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentCountry", _taxPercentCountry);
    				_taxPercentCountry = value;
    				TaxPercentCountryChanged();
    				OnPropertyChanged("TaxPercentCountry");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentCountry;
    	partial void TaxAmountCountryChanged();
    	public Nullable<decimal> TaxAmountCountry
    	{
    		get { return _taxAmountCountry; }
    		set
    		{
    			if (_taxAmountCountry != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxAmountCountry", _taxAmountCountry);
    				_taxAmountCountry = value;
    				TaxAmountCountryChanged();
    				OnPropertyChanged("TaxAmountCountry");
    			}
    		}
    	}
    	private Nullable<decimal> _taxAmountCountry;
    	partial void TaxableTotalChanged();
    	public Nullable<decimal> TaxableTotal
    	{
    		get { return _taxableTotal; }
    		set
    		{
    			if (_taxableTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxableTotal", _taxableTotal);
    				_taxableTotal = value;
    				TaxableTotalChanged();
    				OnPropertyChanged("TaxableTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _taxableTotal;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void ShippingTotalChanged();
    	public Nullable<decimal> ShippingTotal
    	{
    		get { return _shippingTotal; }
    		set
    		{
    			if (_shippingTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingTotal", _shippingTotal);
    				_shippingTotal = value;
    				ShippingTotalChanged();
    				OnPropertyChanged("ShippingTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _shippingTotal;
    	partial void HandlingTotalChanged();
    	public Nullable<decimal> HandlingTotal
    	{
    		get { return _handlingTotal; }
    		set
    		{
    			if (_handlingTotal != value)
    			{
    				ChangeTracker.RecordOriginalValue("HandlingTotal", _handlingTotal);
    				_handlingTotal = value;
    				HandlingTotalChanged();
    				OnPropertyChanged("HandlingTotal");
    			}
    		}
    	}
    	private Nullable<decimal> _handlingTotal;
    	partial void ShippingTotalOverrideChanged();
    	public Nullable<decimal> ShippingTotalOverride
    	{
    		get { return _shippingTotalOverride; }
    		set
    		{
    			if (_shippingTotalOverride != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingTotalOverride", _shippingTotalOverride);
    				_shippingTotalOverride = value;
    				ShippingTotalOverrideChanged();
    				OnPropertyChanged("ShippingTotalOverride");
    			}
    		}
    	}
    	private Nullable<decimal> _shippingTotalOverride;
    	partial void DynamicKitGroupIDChanged();
    	public Nullable<int> DynamicKitGroupID
    	{
    		get { return _dynamicKitGroupID; }
    		set
    		{
    			if (_dynamicKitGroupID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DynamicKitGroupID", _dynamicKitGroupID);
    				if (!IsDeserializing)
    				{
    					if (DynamicKitGroup != null && DynamicKitGroup.DynamicKitGroupID != value)
    					{
    						DynamicKitGroup = null;
    					}
    				}
    				_dynamicKitGroupID = value;
    				DynamicKitGroupIDChanged();
    				OnPropertyChanged("DynamicKitGroupID");
    			}
    		}
    	}
    	private Nullable<int> _dynamicKitGroupID;
    	partial void OrderItemParentTypeIDChanged();
    	public Nullable<short> OrderItemParentTypeID
    	{
    		get { return _orderItemParentTypeID; }
    		set
    		{
    			if (_orderItemParentTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemParentTypeID", _orderItemParentTypeID);
    				if (!IsDeserializing)
    				{
    					if (OrderItemParentType != null && OrderItemParentType.OrderItemParentTypeID != value)
    					{
    						OrderItemParentType = null;
    					}
    				}
    				_orderItemParentTypeID = value;
    				OrderItemParentTypeIDChanged();
    				OnPropertyChanged("OrderItemParentTypeID");
    			}
    		}
    	}
    	private Nullable<short> _orderItemParentTypeID;
    	partial void ItemPriceActualChanged();
    	public Nullable<decimal> ItemPriceActual
    	{
    		get { return _itemPriceActual; }
    		set
    		{
    			if (_itemPriceActual != value)
    			{
    				ChangeTracker.RecordOriginalValue("ItemPriceActual", _itemPriceActual);
    				_itemPriceActual = value;
    				ItemPriceActualChanged();
    				OnPropertyChanged("ItemPriceActual");
    			}
    		}
    	}
    	private Nullable<decimal> _itemPriceActual;
    	partial void TaxNumberChanged();
    	public string TaxNumber
    	{
    		get { return _taxNumber; }
    		set
    		{
    			if (_taxNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxNumber", _taxNumber);
    				_taxNumber = value;
    				TaxNumberChanged();
    				OnPropertyChanged("TaxNumber");
    			}
    		}
    	}
    	private string _taxNumber;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;
    	partial void AttendedChanged();
    	public Nullable<bool> Attended
    	{
    		get { return _attended; }
    		set
    		{
    			if (_attended != value)
    			{
    				ChangeTracker.RecordOriginalValue("Attended", _attended);
    				_attended = value;
    				AttendedChanged();
    				OnPropertyChanged("Attended");
    			}
    		}
    	}
    	private Nullable<bool> _attended;
    	partial void MaterialIDChanged();
    	public Nullable<int> MaterialID
    	{
    		get { return _materialID; }
    		set
    		{
    			if (_materialID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaterialID", _materialID);
    				_materialID = value;
    				MaterialIDChanged();
    				OnPropertyChanged("MaterialID");
    			}
    		}
    	}
    	private Nullable<int> _materialID;
    	partial void OfertTypeIDChanged();
    	public Nullable<int> OfertTypeID
    	{
    		get { return _ofertTypeID; }
    		set
    		{
    			if (_ofertTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OfertTypeID", _ofertTypeID);
    				_ofertTypeID = value;
    				OfertTypeIDChanged();
    				OnPropertyChanged("OfertTypeID");
    			}
    		}
    	}
    	private Nullable<int> _ofertTypeID;
    	partial void ParticipationPercentageChanged();
    	public Nullable<decimal> ParticipationPercentage
    	{
    		get { return _participationPercentage; }
    		set
    		{
    			if (_participationPercentage != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParticipationPercentage", _participationPercentage);
    				_participationPercentage = value;
    				ParticipationPercentageChanged();
    				OnPropertyChanged("ParticipationPercentage");
    			}
    		}
    	}
    	private Nullable<decimal> _participationPercentage;

        #endregion
        #region Navigation Properties
    
    	public OrderCustomer OrderCustomer
    	{
    		get { return _orderCustomer; }
    		set
    		{
    			if (!ReferenceEquals(_orderCustomer, value))
    			{
    				var previousValue = _orderCustomer;
    				_orderCustomer = value;
    				FixupOrderCustomer(previousValue);
    				OnNavigationPropertyChanged("OrderCustomer");
    			}
    		}
    	}
    	private OrderCustomer _orderCustomer;
    
    	public TrackableCollection<OrderItemReturn> OrderItemReturns
    	{
    		get
    		{
    			if (_orderItemReturns == null)
    			{
    				_orderItemReturns = new TrackableCollection<OrderItemReturn>();
    				_orderItemReturns.CollectionChanged += FixupOrderItemReturns;
    				_orderItemReturns.CollectionChanged += RaiseOrderItemReturnsChanged;
    			}
    			return _orderItemReturns;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItemReturns, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItemReturns != null)
    				{
    					_orderItemReturns.CollectionChanged -= FixupOrderItemReturns;
    					_orderItemReturns.CollectionChanged -= RaiseOrderItemReturnsChanged;
    				}
    				_orderItemReturns = value;
    				if (_orderItemReturns != null)
    				{
    					_orderItemReturns.CollectionChanged += FixupOrderItemReturns;
    					_orderItemReturns.CollectionChanged += RaiseOrderItemReturnsChanged;
    				}
    				OnNavigationPropertyChanged("OrderItemReturns");
    			}
    		}
    	}
    	private TrackableCollection<OrderItemReturn> _orderItemReturns;
    	partial void OrderItemReturnsChanged();
    	private void RaiseOrderItemReturnsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemReturnsChanged();
    	}
    
    	public TrackableCollection<OrderItem> ChildOrderItems
    	{
    		get
    		{
    			if (_childOrderItems == null)
    			{
    				_childOrderItems = new TrackableCollection<OrderItem>();
    				_childOrderItems.CollectionChanged += FixupChildOrderItems;
    				_childOrderItems.CollectionChanged += RaiseChildOrderItemsChanged;
    			}
    			return _childOrderItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_childOrderItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_childOrderItems != null)
    				{
    					_childOrderItems.CollectionChanged -= FixupChildOrderItems;
    					_childOrderItems.CollectionChanged -= RaiseChildOrderItemsChanged;
    				}
    				_childOrderItems = value;
    				if (_childOrderItems != null)
    				{
    					_childOrderItems.CollectionChanged += FixupChildOrderItems;
    					_childOrderItems.CollectionChanged += RaiseChildOrderItemsChanged;
    				}
    				OnNavigationPropertyChanged("ChildOrderItems");
    			}
    		}
    	}
    	private TrackableCollection<OrderItem> _childOrderItems;
    	partial void ChildOrderItemsChanged();
    	private void RaiseChildOrderItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ChildOrderItemsChanged();
    	}
    
    	public OrderItem ParentOrderItem
    	{
    		get { return _parentOrderItem; }
    		set
    		{
    			if (!ReferenceEquals(_parentOrderItem, value))
    			{
    				var previousValue = _parentOrderItem;
    				_parentOrderItem = value;
    				FixupParentOrderItem(previousValue);
    				OnNavigationPropertyChanged("ParentOrderItem");
    			}
    		}
    	}
    	private OrderItem _parentOrderItem;
    
    	public OrderItemType OrderItemType
    	{
    		get { return _orderItemType; }
    		set
    		{
    			if (!ReferenceEquals(_orderItemType, value))
    			{
    				var previousValue = _orderItemType;
    				_orderItemType = value;
    				FixupOrderItemType(previousValue);
    				OnNavigationPropertyChanged("OrderItemType");
    			}
    		}
    	}
    	private OrderItemType _orderItemType;
    
    	public ProductPriceType ProductPriceType
    	{
    		get { return _productPriceType; }
    		set
    		{
    			if (!ReferenceEquals(_productPriceType, value))
    			{
    				var previousValue = _productPriceType;
    				_productPriceType = value;
    				FixupProductPriceType(previousValue);
    				OnNavigationPropertyChanged("ProductPriceType");
    			}
    		}
    	}
    	private ProductPriceType _productPriceType;
    
    	public Product Product
    	{
    		get { return _product; }
    		set
    		{
    			if (!ReferenceEquals(_product, value))
    			{
    				var previousValue = _product;
    				_product = value;
    				FixupProduct(previousValue);
    				OnNavigationPropertyChanged("Product");
    			}
    		}
    	}
    	private Product _product;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public HostessRewardRule HostessRewardRule
    	{
    		get { return _hostessRewardRule; }
    		set
    		{
    			if (!ReferenceEquals(_hostessRewardRule, value))
    			{
    				var previousValue = _hostessRewardRule;
    				_hostessRewardRule = value;
    				FixupHostessRewardRule(previousValue);
    				OnNavigationPropertyChanged("HostessRewardRule");
    			}
    		}
    	}
    	private HostessRewardRule _hostessRewardRule;
    
    	public DynamicKitGroup DynamicKitGroup
    	{
    		get { return _dynamicKitGroup; }
    		set
    		{
    			if (!ReferenceEquals(_dynamicKitGroup, value))
    			{
    				var previousValue = _dynamicKitGroup;
    				_dynamicKitGroup = value;
    				FixupDynamicKitGroup(previousValue);
    				OnNavigationPropertyChanged("DynamicKitGroup");
    			}
    		}
    	}
    	private DynamicKitGroup _dynamicKitGroup;
    
    	public TrackableCollection<OrderShipmentPackageItem> OrderShipmentPackageItems
    	{
    		get
    		{
    			if (_orderShipmentPackageItems == null)
    			{
    				_orderShipmentPackageItems = new TrackableCollection<OrderShipmentPackageItem>();
    				_orderShipmentPackageItems.CollectionChanged += FixupOrderShipmentPackageItems;
    				_orderShipmentPackageItems.CollectionChanged += RaiseOrderShipmentPackageItemsChanged;
    			}
    			return _orderShipmentPackageItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderShipmentPackageItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderShipmentPackageItems != null)
    				{
    					_orderShipmentPackageItems.CollectionChanged -= FixupOrderShipmentPackageItems;
    					_orderShipmentPackageItems.CollectionChanged -= RaiseOrderShipmentPackageItemsChanged;
    				}
    				_orderShipmentPackageItems = value;
    				if (_orderShipmentPackageItems != null)
    				{
    					_orderShipmentPackageItems.CollectionChanged += FixupOrderShipmentPackageItems;
    					_orderShipmentPackageItems.CollectionChanged += RaiseOrderShipmentPackageItemsChanged;
    				}
    				OnNavigationPropertyChanged("OrderShipmentPackageItems");
    			}
    		}
    	}
    	private TrackableCollection<OrderShipmentPackageItem> _orderShipmentPackageItems;
    	partial void OrderShipmentPackageItemsChanged();
    	private void RaiseOrderShipmentPackageItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderShipmentPackageItemsChanged();
    	}
    
    	public TrackableCollection<OrderItemReturn> OriginalOrderItemReturns
    	{
    		get
    		{
    			if (_originalOrderItemReturns == null)
    			{
    				_originalOrderItemReturns = new TrackableCollection<OrderItemReturn>();
    				_originalOrderItemReturns.CollectionChanged += FixupOriginalOrderItemReturns;
    				_originalOrderItemReturns.CollectionChanged += RaiseOriginalOrderItemReturnsChanged;
    			}
    			return _originalOrderItemReturns;
    		}
    		set
    		{
    			if (!ReferenceEquals(_originalOrderItemReturns, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_originalOrderItemReturns != null)
    				{
    					_originalOrderItemReturns.CollectionChanged -= FixupOriginalOrderItemReturns;
    					_originalOrderItemReturns.CollectionChanged -= RaiseOriginalOrderItemReturnsChanged;
    				}
    				_originalOrderItemReturns = value;
    				if (_originalOrderItemReturns != null)
    				{
    					_originalOrderItemReturns.CollectionChanged += FixupOriginalOrderItemReturns;
    					_originalOrderItemReturns.CollectionChanged += RaiseOriginalOrderItemReturnsChanged;
    				}
    				OnNavigationPropertyChanged("OriginalOrderItemReturns");
    			}
    		}
    	}
    	private TrackableCollection<OrderItemReturn> _originalOrderItemReturns;
    	partial void OriginalOrderItemReturnsChanged();
    	private void RaiseOriginalOrderItemReturnsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OriginalOrderItemReturnsChanged();
    	}
    
    	public OrderItemParentType OrderItemParentType
    	{
    		get { return _orderItemParentType; }
    		set
    		{
    			if (!ReferenceEquals(_orderItemParentType, value))
    			{
    				var previousValue = _orderItemParentType;
    				_orderItemParentType = value;
    				FixupOrderItemParentType(previousValue);
    				OnNavigationPropertyChanged("OrderItemParentType");
    			}
    		}
    	}
    	private OrderItemParentType _orderItemParentType;
    
    	public TrackableCollection<OrderItemProperty> OrderItemProperties
    	{
    		get
    		{
    			if (_orderItemProperties == null)
    			{
    				_orderItemProperties = new TrackableCollection<OrderItemProperty>();
    				_orderItemProperties.CollectionChanged += FixupOrderItemProperties;
    				_orderItemProperties.CollectionChanged += RaiseOrderItemPropertiesChanged;
    			}
    			return _orderItemProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItemProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItemProperties != null)
    				{
    					_orderItemProperties.CollectionChanged -= FixupOrderItemProperties;
    					_orderItemProperties.CollectionChanged -= RaiseOrderItemPropertiesChanged;
    				}
    				_orderItemProperties = value;
    				if (_orderItemProperties != null)
    				{
    					_orderItemProperties.CollectionChanged += FixupOrderItemProperties;
    					_orderItemProperties.CollectionChanged += RaiseOrderItemPropertiesChanged;
    				}
    				OnNavigationPropertyChanged("OrderItemProperties");
    			}
    		}
    	}
    	private TrackableCollection<OrderItemProperty> _orderItemProperties;
    	partial void OrderItemPropertiesChanged();
    	private void RaiseOrderItemPropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemPropertiesChanged();
    	}
    
    	public TrackableCollection<GiftCard> GiftCards
    	{
    		get
    		{
    			if (_giftCards == null)
    			{
    				_giftCards = new TrackableCollection<GiftCard>();
    				_giftCards.CollectionChanged += FixupGiftCards;
    				_giftCards.CollectionChanged += RaiseGiftCardsChanged;
    			}
    			return _giftCards;
    		}
    		set
    		{
    			if (!ReferenceEquals(_giftCards, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_giftCards != null)
    				{
    					_giftCards.CollectionChanged -= FixupGiftCards;
    					_giftCards.CollectionChanged -= RaiseGiftCardsChanged;
    				}
    				_giftCards = value;
    				if (_giftCards != null)
    				{
    					_giftCards.CollectionChanged += FixupGiftCards;
    					_giftCards.CollectionChanged += RaiseGiftCardsChanged;
    				}
    				OnNavigationPropertyChanged("GiftCards");
    			}
    		}
    	}
    	private TrackableCollection<GiftCard> _giftCards;
    	partial void GiftCardsChanged();
    	private void RaiseGiftCardsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		GiftCardsChanged();
    	}
    
    	public TrackableCollection<OrderItemPrice> OrderItemPrices
    	{
    		get
    		{
    			if (_orderItemPrices == null)
    			{
    				_orderItemPrices = new TrackableCollection<OrderItemPrice>();
    				_orderItemPrices.CollectionChanged += FixupOrderItemPrices;
    				_orderItemPrices.CollectionChanged += RaiseOrderItemPricesChanged;
    			}
    			return _orderItemPrices;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItemPrices, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItemPrices != null)
    				{
    					_orderItemPrices.CollectionChanged -= FixupOrderItemPrices;
    					_orderItemPrices.CollectionChanged -= RaiseOrderItemPricesChanged;
    				}
    				_orderItemPrices = value;
    				if (_orderItemPrices != null)
    				{
    					_orderItemPrices.CollectionChanged += FixupOrderItemPrices;
    					_orderItemPrices.CollectionChanged += RaiseOrderItemPricesChanged;
    				}
    				OnNavigationPropertyChanged("OrderItemPrices");
    			}
    		}
    	}
    	private TrackableCollection<OrderItemPrice> _orderItemPrices;
    	partial void OrderItemPricesChanged();
    	private void RaiseOrderItemPricesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemPricesChanged();
    	}
    
    	public OrderItemReplacement OrderItemReplacement
    	{
    		get { return _orderItemReplacement; }
    		set
    		{
    			if (!ReferenceEquals(_orderItemReplacement, value))
    			{
    				var previousValue = _orderItemReplacement;
    				_orderItemReplacement = value;
    				FixupOrderItemReplacement(previousValue);
    				OnNavigationPropertyChanged("OrderItemReplacement");
    			}
    		}
    	}
    	private OrderItemReplacement _orderItemReplacement;
    
    	public TrackableCollection<OrderAdjustmentOrderLineModification> OrderAdjustmentOrderLineModifications
    	{
    		get
    		{
    			if (_orderAdjustmentOrderLineModifications == null)
    			{
    				_orderAdjustmentOrderLineModifications = new TrackableCollection<OrderAdjustmentOrderLineModification>();
    				_orderAdjustmentOrderLineModifications.CollectionChanged += FixupOrderAdjustmentOrderLineModifications;
    				_orderAdjustmentOrderLineModifications.CollectionChanged += RaiseOrderAdjustmentOrderLineModificationsChanged;
    			}
    			return _orderAdjustmentOrderLineModifications;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderAdjustmentOrderLineModifications, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderAdjustmentOrderLineModifications != null)
    				{
    					_orderAdjustmentOrderLineModifications.CollectionChanged -= FixupOrderAdjustmentOrderLineModifications;
    					_orderAdjustmentOrderLineModifications.CollectionChanged -= RaiseOrderAdjustmentOrderLineModificationsChanged;
    				}
    				_orderAdjustmentOrderLineModifications = value;
    				if (_orderAdjustmentOrderLineModifications != null)
    				{
    					_orderAdjustmentOrderLineModifications.CollectionChanged += FixupOrderAdjustmentOrderLineModifications;
    					_orderAdjustmentOrderLineModifications.CollectionChanged += RaiseOrderAdjustmentOrderLineModificationsChanged;
    				}
    				OnNavigationPropertyChanged("OrderAdjustmentOrderLineModifications");
    			}
    		}
    	}
    	private TrackableCollection<OrderAdjustmentOrderLineModification> _orderAdjustmentOrderLineModifications;
    	partial void OrderAdjustmentOrderLineModificationsChanged();
    	private void RaiseOrderAdjustmentOrderLineModificationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderAdjustmentOrderLineModificationsChanged();
    	}
    
    	public TrackableCollection<OrderItemMessage> OrderItemMessages
    	{
    		get
    		{
    			if (_orderItemMessages == null)
    			{
    				_orderItemMessages = new TrackableCollection<OrderItemMessage>();
    				_orderItemMessages.CollectionChanged += FixupOrderItemMessages;
    				_orderItemMessages.CollectionChanged += RaiseOrderItemMessagesChanged;
    			}
    			return _orderItemMessages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItemMessages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItemMessages != null)
    				{
    					_orderItemMessages.CollectionChanged -= FixupOrderItemMessages;
    					_orderItemMessages.CollectionChanged -= RaiseOrderItemMessagesChanged;
    				}
    				_orderItemMessages = value;
    				if (_orderItemMessages != null)
    				{
    					_orderItemMessages.CollectionChanged += FixupOrderItemMessages;
    					_orderItemMessages.CollectionChanged += RaiseOrderItemMessagesChanged;
    				}
    				OnNavigationPropertyChanged("OrderItemMessages");
    			}
    		}
    	}
    	private TrackableCollection<OrderItemMessage> _orderItemMessages;
    	partial void OrderItemMessagesChanged();
    	private void RaiseOrderItemMessagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemMessagesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderItemReturns != null)
    		{
    			_orderItemReturns.CollectionChanged -= FixupOrderItemReturns;
    			_orderItemReturns.CollectionChanged -= RaiseOrderItemReturnsChanged;
    			_orderItemReturns.CollectionChanged += FixupOrderItemReturns;
    			_orderItemReturns.CollectionChanged += RaiseOrderItemReturnsChanged;
    		}
    		if (_childOrderItems != null)
    		{
    			_childOrderItems.CollectionChanged -= FixupChildOrderItems;
    			_childOrderItems.CollectionChanged -= RaiseChildOrderItemsChanged;
    			_childOrderItems.CollectionChanged += FixupChildOrderItems;
    			_childOrderItems.CollectionChanged += RaiseChildOrderItemsChanged;
    		}
    		if (_orderShipmentPackageItems != null)
    		{
    			_orderShipmentPackageItems.CollectionChanged -= FixupOrderShipmentPackageItems;
    			_orderShipmentPackageItems.CollectionChanged -= RaiseOrderShipmentPackageItemsChanged;
    			_orderShipmentPackageItems.CollectionChanged += FixupOrderShipmentPackageItems;
    			_orderShipmentPackageItems.CollectionChanged += RaiseOrderShipmentPackageItemsChanged;
    		}
    		if (_originalOrderItemReturns != null)
    		{
    			_originalOrderItemReturns.CollectionChanged -= FixupOriginalOrderItemReturns;
    			_originalOrderItemReturns.CollectionChanged -= RaiseOriginalOrderItemReturnsChanged;
    			_originalOrderItemReturns.CollectionChanged += FixupOriginalOrderItemReturns;
    			_originalOrderItemReturns.CollectionChanged += RaiseOriginalOrderItemReturnsChanged;
    		}
    		if (_orderItemProperties != null)
    		{
    			_orderItemProperties.CollectionChanged -= FixupOrderItemProperties;
    			_orderItemProperties.CollectionChanged -= RaiseOrderItemPropertiesChanged;
    			_orderItemProperties.CollectionChanged += FixupOrderItemProperties;
    			_orderItemProperties.CollectionChanged += RaiseOrderItemPropertiesChanged;
    		}
    		if (_giftCards != null)
    		{
    			_giftCards.CollectionChanged -= FixupGiftCards;
    			_giftCards.CollectionChanged -= RaiseGiftCardsChanged;
    			_giftCards.CollectionChanged += FixupGiftCards;
    			_giftCards.CollectionChanged += RaiseGiftCardsChanged;
    		}
    		if (_orderItemPrices != null)
    		{
    			_orderItemPrices.CollectionChanged -= FixupOrderItemPrices;
    			_orderItemPrices.CollectionChanged -= RaiseOrderItemPricesChanged;
    			_orderItemPrices.CollectionChanged += FixupOrderItemPrices;
    			_orderItemPrices.CollectionChanged += RaiseOrderItemPricesChanged;
    		}
    		if (_orderAdjustmentOrderLineModifications != null)
    		{
    			_orderAdjustmentOrderLineModifications.CollectionChanged -= FixupOrderAdjustmentOrderLineModifications;
    			_orderAdjustmentOrderLineModifications.CollectionChanged -= RaiseOrderAdjustmentOrderLineModificationsChanged;
    			_orderAdjustmentOrderLineModifications.CollectionChanged += FixupOrderAdjustmentOrderLineModifications;
    			_orderAdjustmentOrderLineModifications.CollectionChanged += RaiseOrderAdjustmentOrderLineModificationsChanged;
    		}
    		if (_orderItemMessages != null)
    		{
    			_orderItemMessages.CollectionChanged -= FixupOrderItemMessages;
    			_orderItemMessages.CollectionChanged -= RaiseOrderItemMessagesChanged;
    			_orderItemMessages.CollectionChanged += FixupOrderItemMessages;
    			_orderItemMessages.CollectionChanged += RaiseOrderItemMessagesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderCustomer = null;
    		OrderItemReturns.Clear();
    		ChildOrderItems.Clear();
    		ParentOrderItem = null;
    		OrderItemType = null;
    		ProductPriceType = null;
    		Product = null;
    		User = null;
    		HostessRewardRule = null;
    		DynamicKitGroup = null;
    		OrderShipmentPackageItems.Clear();
    		OriginalOrderItemReturns.Clear();
    		OrderItemParentType = null;
    		OrderItemProperties.Clear();
    		GiftCards.Clear();
    		OrderItemPrices.Clear();
    		OrderItemReplacement = null;
    		OrderAdjustmentOrderLineModifications.Clear();
    		OrderItemMessages.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderCustomer(OrderCustomer previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItems.Contains(this))
    		{
    			previousValue.OrderItems.Remove(this);
    		}
    
    		if (OrderCustomer != null)
    		{
    			if (!OrderCustomer.OrderItems.Contains(this))
    			{
    				OrderCustomer.OrderItems.Add(this);
    			}
    
    			OrderCustomerID = OrderCustomer.OrderCustomerID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderCustomer")
    				&& (ChangeTracker.OriginalValues["OrderCustomer"] == OrderCustomer))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderCustomer");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderCustomer", previousValue);
    			}
    			if (OrderCustomer != null && !OrderCustomer.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderCustomer.StartTracking();
    			}
    		}
    	}
    
    	private void FixupParentOrderItem(OrderItem previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ChildOrderItems.Contains(this))
    		{
    			previousValue.ChildOrderItems.Remove(this);
    		}
    
    		if (ParentOrderItem != null)
    		{
    			if (!ParentOrderItem.ChildOrderItems.Contains(this))
    			{
    				ParentOrderItem.ChildOrderItems.Add(this);
    			}
    
    			ParentOrderItemID = ParentOrderItem.OrderItemID;
    		}
    		else if (!skipKeys)
    		{
    			ParentOrderItemID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ParentOrderItem")
    				&& (ChangeTracker.OriginalValues["ParentOrderItem"] == ParentOrderItem))
    			{
    				ChangeTracker.OriginalValues.Remove("ParentOrderItem");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ParentOrderItem", previousValue);
    			}
    			if (ParentOrderItem != null && !ParentOrderItem.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ParentOrderItem.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderItemType(OrderItemType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItems.Contains(this))
    		{
    			previousValue.OrderItems.Remove(this);
    		}
    
    		if (OrderItemType != null)
    		{
    			if (!OrderItemType.OrderItems.Contains(this))
    			{
    				OrderItemType.OrderItems.Add(this);
    			}
    
    			OrderItemTypeID = OrderItemType.OrderItemTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItemType")
    				&& (ChangeTracker.OriginalValues["OrderItemType"] == OrderItemType))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItemType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemType", previousValue);
    			}
    			if (OrderItemType != null && !OrderItemType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItemType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductPriceType(ProductPriceType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItems.Contains(this))
    		{
    			previousValue.OrderItems.Remove(this);
    		}
    
    		if (ProductPriceType != null)
    		{
    			if (!ProductPriceType.OrderItems.Contains(this))
    			{
    				ProductPriceType.OrderItems.Add(this);
    			}
    
    			ProductPriceTypeID = ProductPriceType.ProductPriceTypeID;
    		}
    		else if (!skipKeys)
    		{
    			ProductPriceTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductPriceType")
    				&& (ChangeTracker.OriginalValues["ProductPriceType"] == ProductPriceType))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductPriceType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductPriceType", previousValue);
    			}
    			if (ProductPriceType != null && !ProductPriceType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductPriceType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProduct(Product previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItems.Contains(this))
    		{
    			previousValue.OrderItems.Remove(this);
    		}
    
    		if (Product != null)
    		{
    			if (!Product.OrderItems.Contains(this))
    			{
    				Product.OrderItems.Add(this);
    			}
    
    			ProductID = Product.ProductID;
    		}
    		else if (!skipKeys)
    		{
    			ProductID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Product")
    				&& (ChangeTracker.OriginalValues["Product"] == Product))
    			{
    				ChangeTracker.OriginalValues.Remove("Product");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Product", previousValue);
    			}
    			if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Product.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItems.Contains(this))
    		{
    			previousValue.OrderItems.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.OrderItems.Contains(this))
    			{
    				User.OrderItems.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupHostessRewardRule(HostessRewardRule previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItems.Contains(this))
    		{
    			previousValue.OrderItems.Remove(this);
    		}
    
    		if (HostessRewardRule != null)
    		{
    			if (!HostessRewardRule.OrderItems.Contains(this))
    			{
    				HostessRewardRule.OrderItems.Add(this);
    			}
    
    			HostessRewardRuleID = HostessRewardRule.HostessRewardRuleID;
    		}
    		else if (!skipKeys)
    		{
    			HostessRewardRuleID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HostessRewardRule")
    				&& (ChangeTracker.OriginalValues["HostessRewardRule"] == HostessRewardRule))
    			{
    				ChangeTracker.OriginalValues.Remove("HostessRewardRule");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HostessRewardRule", previousValue);
    			}
    			if (HostessRewardRule != null && !HostessRewardRule.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HostessRewardRule.StartTracking();
    			}
    		}
    	}
    
    	private void FixupDynamicKitGroup(DynamicKitGroup previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItems.Contains(this))
    		{
    			previousValue.OrderItems.Remove(this);
    		}
    
    		if (DynamicKitGroup != null)
    		{
    			if (!DynamicKitGroup.OrderItems.Contains(this))
    			{
    				DynamicKitGroup.OrderItems.Add(this);
    			}
    
    			DynamicKitGroupID = DynamicKitGroup.DynamicKitGroupID;
    		}
    		else if (!skipKeys)
    		{
    			DynamicKitGroupID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("DynamicKitGroup")
    				&& (ChangeTracker.OriginalValues["DynamicKitGroup"] == DynamicKitGroup))
    			{
    				ChangeTracker.OriginalValues.Remove("DynamicKitGroup");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("DynamicKitGroup", previousValue);
    			}
    			if (DynamicKitGroup != null && !DynamicKitGroup.ChangeTracker.ChangeTrackingEnabled)
    			{
    				DynamicKitGroup.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderItemParentType(OrderItemParentType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderItems.Contains(this))
    		{
    			previousValue.OrderItems.Remove(this);
    		}
    
    		if (OrderItemParentType != null)
    		{
    			if (!OrderItemParentType.OrderItems.Contains(this))
    			{
    				OrderItemParentType.OrderItems.Add(this);
    			}
    
    			OrderItemParentTypeID = OrderItemParentType.OrderItemParentTypeID;
    		}
    		else if (!skipKeys)
    		{
    			OrderItemParentTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItemParentType")
    				&& (ChangeTracker.OriginalValues["OrderItemParentType"] == OrderItemParentType))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItemParentType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemParentType", previousValue);
    			}
    			if (OrderItemParentType != null && !OrderItemParentType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItemParentType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderItemReplacement(OrderItemReplacement previousValue)
    	{
    		// This is the principal end in an association that performs cascade deletes.
    		// Update the event listener to refer to the new dependent.
    		if (previousValue != null)
    		{
    			ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
    		}
    
    		if (OrderItemReplacement != null)
    		{
    			ChangeTracker.ObjectStateChanging += OrderItemReplacement.HandleCascadeDelete;
    		}
    
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && ReferenceEquals(previousValue.OrderItem, this))
    		{
    			previousValue.OrderItem = null;
    		}
    
    		if (OrderItemReplacement != null)
    		{
    			OrderItemReplacement.OrderItem = this;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItemReplacement")
    				&& (ChangeTracker.OriginalValues["OrderItemReplacement"] == OrderItemReplacement))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItemReplacement");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemReplacement", previousValue);
    				// This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
    				// If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
    				if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
    				{
    					previousValue.MarkAsDeleted();
    				}
    			}
    			if (OrderItemReplacement != null && !OrderItemReplacement.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItemReplacement.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderItemReturns(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItemReturn item in e.NewItems)
    			{
    				item.OrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItemReturns", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItemReturn item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderItem, this))
    				{
    					item.OrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItemReturns", item);
    				}
    			}
    		}
    	}
    
    	private void FixupChildOrderItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItem item in e.NewItems)
    			{
    				item.ParentOrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ChildOrderItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ParentOrderItem, this))
    				{
    					item.ParentOrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ChildOrderItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderShipmentPackageItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderShipmentPackageItem item in e.NewItems)
    			{
    				item.OrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderShipmentPackageItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderShipmentPackageItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderItem, this))
    				{
    					item.OrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderShipmentPackageItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOriginalOrderItemReturns(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItemReturn item in e.NewItems)
    			{
    				item.OriginalOrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OriginalOrderItemReturns", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItemReturn item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OriginalOrderItem, this))
    				{
    					item.OriginalOrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OriginalOrderItemReturns", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderItemProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItemProperty item in e.NewItems)
    			{
    				item.OrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItemProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItemProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderItem, this))
    				{
    					item.OrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItemProperties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupGiftCards(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (GiftCard item in e.NewItems)
    			{
    				item.OrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("GiftCards", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (GiftCard item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderItem, this))
    				{
    					item.OrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("GiftCards", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderItemPrices(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItemPrice item in e.NewItems)
    			{
    				item.OrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItemPrices", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItemPrice item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderItem, this))
    				{
    					item.OrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItemPrices", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderAdjustmentOrderLineModifications(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderAdjustmentOrderLineModification item in e.NewItems)
    			{
    				item.OrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderAdjustmentOrderLineModifications", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderAdjustmentOrderLineModification item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderItem, this))
    				{
    					item.OrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderAdjustmentOrderLineModifications", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderItemMessages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItemMessage item in e.NewItems)
    			{
    				item.OrderItem = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItemMessages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItemMessage item in e.OldItems)
    			{
    				if (ReferenceEquals(item.OrderItem, this))
    				{
    					item.OrderItem = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItemMessages", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AutoshipBatch))]
    [KnownType(typeof(Order))]
    [Serializable]
    public partial class AutoshipLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AutoshipLogIDChanged();
    	public int AutoshipLogID
    	{
    		get { return _autoshipLogID; }
    		set
    		{
    			if (_autoshipLogID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AutoshipLogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_autoshipLogID = value;
    				AutoshipLogIDChanged();
    				OnPropertyChanged("AutoshipLogID");
    			}
    		}
    	}
    	private int _autoshipLogID;
    	partial void AutoshipBatchIDChanged();
    	public Nullable<int> AutoshipBatchID
    	{
    		get { return _autoshipBatchID; }
    		set
    		{
    			if (_autoshipBatchID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipBatchID", _autoshipBatchID);
    				if (!IsDeserializing)
    				{
    					if (AutoshipBatch != null && AutoshipBatch.AutoshipBatchID != value)
    					{
    						AutoshipBatch = null;
    					}
    				}
    				_autoshipBatchID = value;
    				AutoshipBatchIDChanged();
    				OnPropertyChanged("AutoshipBatchID");
    			}
    		}
    	}
    	private Nullable<int> _autoshipBatchID;
    	partial void TemplateOrderIDChanged();
    	public int TemplateOrderID
    	{
    		get { return _templateOrderID; }
    		set
    		{
    			if (_templateOrderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TemplateOrderID", _templateOrderID);
    				if (!IsDeserializing)
    				{
    					if (TemplateOrder != null && TemplateOrder.OrderID != value)
    					{
    						TemplateOrder = null;
    					}
    				}
    				_templateOrderID = value;
    				TemplateOrderIDChanged();
    				OnPropertyChanged("TemplateOrderID");
    			}
    		}
    	}
    	private int _templateOrderID;
    	partial void SucceededChanged();
    	public bool Succeeded
    	{
    		get { return _succeeded; }
    		set
    		{
    			if (_succeeded != value)
    			{
    				ChangeTracker.RecordOriginalValue("Succeeded", _succeeded);
    				_succeeded = value;
    				SucceededChanged();
    				OnPropertyChanged("Succeeded");
    			}
    		}
    	}
    	private bool _succeeded;
    	partial void ResultsChanged();
    	public string Results
    	{
    		get { return _results; }
    		set
    		{
    			if (_results != value)
    			{
    				ChangeTracker.RecordOriginalValue("Results", _results);
    				_results = value;
    				ResultsChanged();
    				OnPropertyChanged("Results");
    			}
    		}
    	}
    	private string _results;
    	partial void NewOrderIDChanged();
    	public Nullable<int> NewOrderID
    	{
    		get { return _newOrderID; }
    		set
    		{
    			if (_newOrderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("NewOrderID", _newOrderID);
    				if (!IsDeserializing)
    				{
    					if (NewOrder != null && NewOrder.OrderID != value)
    					{
    						NewOrder = null;
    					}
    				}
    				_newOrderID = value;
    				NewOrderIDChanged();
    				OnPropertyChanged("NewOrderID");
    			}
    		}
    	}
    	private Nullable<int> _newOrderID;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void RunDateChanged();
    	public System.DateTime RunDate
    	{
    		get { return _runDate; }
    		set
    		{
    			if (_runDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("RunDate", _runDate);
    				_runDate = value;
    				RunDateChanged();
    				OnPropertyChanged("RunDate");
    			}
    		}
    	}
    	private System.DateTime _runDate;

        #endregion
        #region Navigation Properties
    
    	public AutoshipBatch AutoshipBatch
    	{
    		get { return _autoshipBatch; }
    		set
    		{
    			if (!ReferenceEquals(_autoshipBatch, value))
    			{
    				var previousValue = _autoshipBatch;
    				_autoshipBatch = value;
    				FixupAutoshipBatch(previousValue);
    				OnNavigationPropertyChanged("AutoshipBatch");
    			}
    		}
    	}
    	private AutoshipBatch _autoshipBatch;
    
    	public Order NewOrder
    	{
    		get { return _newOrder; }
    		set
    		{
    			if (!ReferenceEquals(_newOrder, value))
    			{
    				var previousValue = _newOrder;
    				_newOrder = value;
    				FixupNewOrder(previousValue);
    				OnNavigationPropertyChanged("NewOrder");
    			}
    		}
    	}
    	private Order _newOrder;
    
    	public Order TemplateOrder
    	{
    		get { return _templateOrder; }
    		set
    		{
    			if (!ReferenceEquals(_templateOrder, value))
    			{
    				var previousValue = _templateOrder;
    				_templateOrder = value;
    				FixupTemplateOrder(previousValue);
    				OnNavigationPropertyChanged("TemplateOrder");
    			}
    		}
    	}
    	private Order _templateOrder;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AutoshipBatch = null;
    		NewOrder = null;
    		TemplateOrder = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAutoshipBatch(AutoshipBatch previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipLogs.Contains(this))
    		{
    			previousValue.AutoshipLogs.Remove(this);
    		}
    
    		if (AutoshipBatch != null)
    		{
    			if (!AutoshipBatch.AutoshipLogs.Contains(this))
    			{
    				AutoshipBatch.AutoshipLogs.Add(this);
    			}
    
    			AutoshipBatchID = AutoshipBatch.AutoshipBatchID;
    		}
    		else if (!skipKeys)
    		{
    			AutoshipBatchID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AutoshipBatch")
    				&& (ChangeTracker.OriginalValues["AutoshipBatch"] == AutoshipBatch))
    			{
    				ChangeTracker.OriginalValues.Remove("AutoshipBatch");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipBatch", previousValue);
    			}
    			if (AutoshipBatch != null && !AutoshipBatch.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AutoshipBatch.StartTracking();
    			}
    		}
    	}
    
    	private void FixupNewOrder(Order previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipLogs.Contains(this))
    		{
    			previousValue.AutoshipLogs.Remove(this);
    		}
    
    		if (NewOrder != null)
    		{
    			if (!NewOrder.AutoshipLogs.Contains(this))
    			{
    				NewOrder.AutoshipLogs.Add(this);
    			}
    
    			NewOrderID = NewOrder.OrderID;
    		}
    		else if (!skipKeys)
    		{
    			NewOrderID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("NewOrder")
    				&& (ChangeTracker.OriginalValues["NewOrder"] == NewOrder))
    			{
    				ChangeTracker.OriginalValues.Remove("NewOrder");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("NewOrder", previousValue);
    			}
    			if (NewOrder != null && !NewOrder.ChangeTracker.ChangeTrackingEnabled)
    			{
    				NewOrder.StartTracking();
    			}
    		}
    	}
    
    	private void FixupTemplateOrder(Order previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipLogs1.Contains(this))
    		{
    			previousValue.AutoshipLogs1.Remove(this);
    		}
    
    		if (TemplateOrder != null)
    		{
    			if (!TemplateOrder.AutoshipLogs1.Contains(this))
    			{
    				TemplateOrder.AutoshipLogs1.Add(this);
    			}
    
    			TemplateOrderID = TemplateOrder.OrderID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("TemplateOrder")
    				&& (ChangeTracker.OriginalValues["TemplateOrder"] == TemplateOrder))
    			{
    				ChangeTracker.OriginalValues.Remove("TemplateOrder");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("TemplateOrder", previousValue);
    			}
    			if (TemplateOrder != null && !TemplateOrder.ChangeTracker.ChangeTrackingEnabled)
    			{
    				TemplateOrder.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

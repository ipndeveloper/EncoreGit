//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductType))]
    [KnownType(typeof(TaxCategory))]
    [KnownType(typeof(Category))]
    [KnownType(typeof(Testimonial))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(DescriptionTranslation))]
    [KnownType(typeof(User))]
    [KnownType(typeof(ProductBasePropertyValue))]
    [KnownType(typeof(ProductBaseProperty))]
    [KnownType(typeof(StateProvince))]
    [Serializable]
    public partial class ProductBase: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductBaseIDChanged();
    	public int ProductBaseID
    	{
    		get { return _productBaseID; }
    		set
    		{
    			if (_productBaseID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductBaseID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productBaseID = value;
    				ProductBaseIDChanged();
    				OnPropertyChanged("ProductBaseID");
    			}
    		}
    	}
    	private int _productBaseID;
    	partial void ProductTypeIDChanged();
    	public int ProductTypeID
    	{
    		get { return _productTypeID; }
    		set
    		{
    			if (_productTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductTypeID", _productTypeID);
    				if (!IsDeserializing)
    				{
    					if (ProductType != null && ProductType.ProductTypeID != value)
    					{
    						ProductType = null;
    					}
    				}
    				_productTypeID = value;
    				ProductTypeIDChanged();
    				OnPropertyChanged("ProductTypeID");
    			}
    		}
    	}
    	private int _productTypeID;
    	partial void TaxCategoryIDChanged();
    	public Nullable<int> TaxCategoryID
    	{
    		get { return _taxCategoryID; }
    		set
    		{
    			if (_taxCategoryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxCategoryID", _taxCategoryID);
    				if (!IsDeserializing)
    				{
    					if (TaxCategory != null && TaxCategory.TaxCategoryID != value)
    					{
    						TaxCategory = null;
    					}
    				}
    				_taxCategoryID = value;
    				TaxCategoryIDChanged();
    				OnPropertyChanged("TaxCategoryID");
    			}
    		}
    	}
    	private Nullable<int> _taxCategoryID;
    	partial void BaseSKUChanged();
    	public string BaseSKU
    	{
    		get { return _baseSKU; }
    		set
    		{
    			if (_baseSKU != value)
    			{
    				ChangeTracker.RecordOriginalValue("BaseSKU", _baseSKU);
    				_baseSKU = value;
    				BaseSKUChanged();
    				OnPropertyChanged("BaseSKU");
    			}
    		}
    	}
    	private string _baseSKU;
    	partial void ChargeShippingChanged();
    	public bool ChargeShipping
    	{
    		get { return _chargeShipping; }
    		set
    		{
    			if (_chargeShipping != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChargeShipping", _chargeShipping);
    				_chargeShipping = value;
    				ChargeShippingChanged();
    				OnPropertyChanged("ChargeShipping");
    			}
    		}
    	}
    	private bool _chargeShipping;
    	partial void ChargeTaxChanged();
    	public bool ChargeTax
    	{
    		get { return _chargeTax; }
    		set
    		{
    			if (_chargeTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChargeTax", _chargeTax);
    				_chargeTax = value;
    				ChargeTaxChanged();
    				OnPropertyChanged("ChargeTax");
    			}
    		}
    	}
    	private bool _chargeTax;
    	partial void ChargeTaxOnShippingChanged();
    	public bool ChargeTaxOnShipping
    	{
    		get { return _chargeTaxOnShipping; }
    		set
    		{
    			if (_chargeTaxOnShipping != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChargeTaxOnShipping", _chargeTaxOnShipping);
    				_chargeTaxOnShipping = value;
    				ChargeTaxOnShippingChanged();
    				OnPropertyChanged("ChargeTaxOnShipping");
    			}
    		}
    	}
    	private bool _chargeTaxOnShipping;
    	partial void IsTaxedAtChildChanged();
    	public Nullable<bool> IsTaxedAtChild
    	{
    		get { return _isTaxedAtChild; }
    		set
    		{
    			if (_isTaxedAtChild != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsTaxedAtChild", _isTaxedAtChild);
    				_isTaxedAtChild = value;
    				IsTaxedAtChildChanged();
    				OnPropertyChanged("IsTaxedAtChild");
    			}
    		}
    	}
    	private Nullable<bool> _isTaxedAtChild;
    	partial void IsShippableChanged();
    	public bool IsShippable
    	{
    		get { return _isShippable; }
    		set
    		{
    			if (_isShippable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsShippable", _isShippable);
    				_isShippable = value;
    				IsShippableChanged();
    				OnPropertyChanged("IsShippable");
    			}
    		}
    	}
    	private bool _isShippable;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void EditableChanged();
    	public bool Editable
    	{
    		get { return _editable; }
    		set
    		{
    			if (_editable != value)
    			{
    				ChangeTracker.RecordOriginalValue("Editable", _editable);
    				_editable = value;
    				EditableChanged();
    				OnPropertyChanged("Editable");
    			}
    		}
    	}
    	private bool _editable;
    	partial void UpdateInventoryOnBaseChanged();
    	public bool UpdateInventoryOnBase
    	{
    		get { return _updateInventoryOnBase; }
    		set
    		{
    			if (_updateInventoryOnBase != value)
    			{
    				ChangeTracker.RecordOriginalValue("UpdateInventoryOnBase", _updateInventoryOnBase);
    				_updateInventoryOnBase = value;
    				UpdateInventoryOnBaseChanged();
    				OnPropertyChanged("UpdateInventoryOnBase");
    			}
    		}
    	}
    	private bool _updateInventoryOnBase;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public ProductType ProductType
    	{
    		get { return _productType; }
    		set
    		{
    			if (!ReferenceEquals(_productType, value))
    			{
    				var previousValue = _productType;
    				_productType = value;
    				FixupProductType(previousValue);
    				OnNavigationPropertyChanged("ProductType");
    			}
    		}
    	}
    	private ProductType _productType;
    
    	public TaxCategory TaxCategory
    	{
    		get { return _taxCategory; }
    		set
    		{
    			if (!ReferenceEquals(_taxCategory, value))
    			{
    				var previousValue = _taxCategory;
    				_taxCategory = value;
    				FixupTaxCategory(previousValue);
    				OnNavigationPropertyChanged("TaxCategory");
    			}
    		}
    	}
    	private TaxCategory _taxCategory;
    
    	public TrackableCollection<Category> Categories
    	{
    		get
    		{
    			if (_categories == null)
    			{
    				_categories = new TrackableCollection<Category>();
    				_categories.CollectionChanged += FixupCategories;
    				_categories.CollectionChanged += RaiseCategoriesChanged;
    			}
    			return _categories;
    		}
    		set
    		{
    			if (!ReferenceEquals(_categories, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_categories != null)
    				{
    					_categories.CollectionChanged -= FixupCategories;
    					_categories.CollectionChanged -= RaiseCategoriesChanged;
    				}
    				_categories = value;
    				if (_categories != null)
    				{
    					_categories.CollectionChanged += FixupCategories;
    					_categories.CollectionChanged += RaiseCategoriesChanged;
    				}
    				OnNavigationPropertyChanged("Categories");
    			}
    		}
    	}
    	private TrackableCollection<Category> _categories;
    	partial void CategoriesChanged();
    	private void RaiseCategoriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CategoriesChanged();
    	}
    
    	public TrackableCollection<Testimonial> Testimonials
    	{
    		get
    		{
    			if (_testimonials == null)
    			{
    				_testimonials = new TrackableCollection<Testimonial>();
    				_testimonials.CollectionChanged += FixupTestimonials;
    				_testimonials.CollectionChanged += RaiseTestimonialsChanged;
    			}
    			return _testimonials;
    		}
    		set
    		{
    			if (!ReferenceEquals(_testimonials, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_testimonials != null)
    				{
    					_testimonials.CollectionChanged -= FixupTestimonials;
    					_testimonials.CollectionChanged -= RaiseTestimonialsChanged;
    				}
    				_testimonials = value;
    				if (_testimonials != null)
    				{
    					_testimonials.CollectionChanged += FixupTestimonials;
    					_testimonials.CollectionChanged += RaiseTestimonialsChanged;
    				}
    				OnNavigationPropertyChanged("Testimonials");
    			}
    		}
    	}
    	private TrackableCollection<Testimonial> _testimonials;
    	partial void TestimonialsChanged();
    	private void RaiseTestimonialsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TestimonialsChanged();
    	}
    
    	public TrackableCollection<Product> Products
    	{
    		get
    		{
    			if (_products == null)
    			{
    				_products = new TrackableCollection<Product>();
    				_products.CollectionChanged += FixupProducts;
    				_products.CollectionChanged += RaiseProductsChanged;
    			}
    			return _products;
    		}
    		set
    		{
    			if (!ReferenceEquals(_products, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_products != null)
    				{
    					_products.CollectionChanged -= FixupProducts;
    					_products.CollectionChanged -= RaiseProductsChanged;
    				}
    				_products = value;
    				if (_products != null)
    				{
    					_products.CollectionChanged += FixupProducts;
    					_products.CollectionChanged += RaiseProductsChanged;
    				}
    				OnNavigationPropertyChanged("Products");
    			}
    		}
    	}
    	private TrackableCollection<Product> _products;
    	partial void ProductsChanged();
    	private void RaiseProductsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductsChanged();
    	}
    
    	public TrackableCollection<DescriptionTranslation> Translations
    	{
    		get
    		{
    			if (_translations == null)
    			{
    				_translations = new TrackableCollection<DescriptionTranslation>();
    				_translations.CollectionChanged += FixupTranslations;
    				_translations.CollectionChanged += RaiseTranslationsChanged;
    			}
    			return _translations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_translations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_translations != null)
    				{
    					_translations.CollectionChanged -= FixupTranslations;
    					_translations.CollectionChanged -= RaiseTranslationsChanged;
    				}
    				_translations = value;
    				if (_translations != null)
    				{
    					_translations.CollectionChanged += FixupTranslations;
    					_translations.CollectionChanged += RaiseTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("Translations");
    			}
    		}
    	}
    	private TrackableCollection<DescriptionTranslation> _translations;
    	partial void TranslationsChanged();
    	private void RaiseTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TranslationsChanged();
    	}
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<ProductBasePropertyValue> ProductBasePropertyValues
    	{
    		get
    		{
    			if (_productBasePropertyValues == null)
    			{
    				_productBasePropertyValues = new TrackableCollection<ProductBasePropertyValue>();
    				_productBasePropertyValues.CollectionChanged += FixupProductBasePropertyValues;
    				_productBasePropertyValues.CollectionChanged += RaiseProductBasePropertyValuesChanged;
    			}
    			return _productBasePropertyValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productBasePropertyValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productBasePropertyValues != null)
    				{
    					_productBasePropertyValues.CollectionChanged -= FixupProductBasePropertyValues;
    					_productBasePropertyValues.CollectionChanged -= RaiseProductBasePropertyValuesChanged;
    				}
    				_productBasePropertyValues = value;
    				if (_productBasePropertyValues != null)
    				{
    					_productBasePropertyValues.CollectionChanged += FixupProductBasePropertyValues;
    					_productBasePropertyValues.CollectionChanged += RaiseProductBasePropertyValuesChanged;
    				}
    				OnNavigationPropertyChanged("ProductBasePropertyValues");
    			}
    		}
    	}
    	private TrackableCollection<ProductBasePropertyValue> _productBasePropertyValues;
    	partial void ProductBasePropertyValuesChanged();
    	private void RaiseProductBasePropertyValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductBasePropertyValuesChanged();
    	}
    
    	public TrackableCollection<ProductBaseProperty> ProductBaseProperties
    	{
    		get
    		{
    			if (_productBaseProperties == null)
    			{
    				_productBaseProperties = new TrackableCollection<ProductBaseProperty>();
    				_productBaseProperties.CollectionChanged += FixupProductBaseProperties;
    				_productBaseProperties.CollectionChanged += RaiseProductBasePropertiesChanged;
    			}
    			return _productBaseProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productBaseProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productBaseProperties != null)
    				{
    					_productBaseProperties.CollectionChanged -= FixupProductBaseProperties;
    					_productBaseProperties.CollectionChanged -= RaiseProductBasePropertiesChanged;
    				}
    				_productBaseProperties = value;
    				if (_productBaseProperties != null)
    				{
    					_productBaseProperties.CollectionChanged += FixupProductBaseProperties;
    					_productBaseProperties.CollectionChanged += RaiseProductBasePropertiesChanged;
    				}
    				OnNavigationPropertyChanged("ProductBaseProperties");
    			}
    		}
    	}
    	private TrackableCollection<ProductBaseProperty> _productBaseProperties;
    	partial void ProductBasePropertiesChanged();
    	private void RaiseProductBasePropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductBasePropertiesChanged();
    	}
    
    	public TrackableCollection<StateProvince> ExcludedStateProvinces
    	{
    		get
    		{
    			if (_excludedStateProvinces == null)
    			{
    				_excludedStateProvinces = new TrackableCollection<StateProvince>();
    				_excludedStateProvinces.CollectionChanged += FixupExcludedStateProvinces;
    				_excludedStateProvinces.CollectionChanged += RaiseExcludedStateProvincesChanged;
    			}
    			return _excludedStateProvinces;
    		}
    		set
    		{
    			if (!ReferenceEquals(_excludedStateProvinces, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_excludedStateProvinces != null)
    				{
    					_excludedStateProvinces.CollectionChanged -= FixupExcludedStateProvinces;
    					_excludedStateProvinces.CollectionChanged -= RaiseExcludedStateProvincesChanged;
    				}
    				_excludedStateProvinces = value;
    				if (_excludedStateProvinces != null)
    				{
    					_excludedStateProvinces.CollectionChanged += FixupExcludedStateProvinces;
    					_excludedStateProvinces.CollectionChanged += RaiseExcludedStateProvincesChanged;
    				}
    				OnNavigationPropertyChanged("ExcludedStateProvinces");
    			}
    		}
    	}
    	private TrackableCollection<StateProvince> _excludedStateProvinces;
    	partial void ExcludedStateProvincesChanged();
    	private void RaiseExcludedStateProvincesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ExcludedStateProvincesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_categories != null)
    		{
    			_categories.CollectionChanged -= FixupCategories;
    			_categories.CollectionChanged -= RaiseCategoriesChanged;
    			_categories.CollectionChanged += FixupCategories;
    			_categories.CollectionChanged += RaiseCategoriesChanged;
    		}
    		if (_testimonials != null)
    		{
    			_testimonials.CollectionChanged -= FixupTestimonials;
    			_testimonials.CollectionChanged -= RaiseTestimonialsChanged;
    			_testimonials.CollectionChanged += FixupTestimonials;
    			_testimonials.CollectionChanged += RaiseTestimonialsChanged;
    		}
    		if (_products != null)
    		{
    			_products.CollectionChanged -= FixupProducts;
    			_products.CollectionChanged -= RaiseProductsChanged;
    			_products.CollectionChanged += FixupProducts;
    			_products.CollectionChanged += RaiseProductsChanged;
    		}
    		if (_translations != null)
    		{
    			_translations.CollectionChanged -= FixupTranslations;
    			_translations.CollectionChanged -= RaiseTranslationsChanged;
    			_translations.CollectionChanged += FixupTranslations;
    			_translations.CollectionChanged += RaiseTranslationsChanged;
    		}
    		if (_productBasePropertyValues != null)
    		{
    			_productBasePropertyValues.CollectionChanged -= FixupProductBasePropertyValues;
    			_productBasePropertyValues.CollectionChanged -= RaiseProductBasePropertyValuesChanged;
    			_productBasePropertyValues.CollectionChanged += FixupProductBasePropertyValues;
    			_productBasePropertyValues.CollectionChanged += RaiseProductBasePropertyValuesChanged;
    		}
    		if (_productBaseProperties != null)
    		{
    			_productBaseProperties.CollectionChanged -= FixupProductBaseProperties;
    			_productBaseProperties.CollectionChanged -= RaiseProductBasePropertiesChanged;
    			_productBaseProperties.CollectionChanged += FixupProductBaseProperties;
    			_productBaseProperties.CollectionChanged += RaiseProductBasePropertiesChanged;
    		}
    		if (_excludedStateProvinces != null)
    		{
    			_excludedStateProvinces.CollectionChanged -= FixupExcludedStateProvinces;
    			_excludedStateProvinces.CollectionChanged -= RaiseExcludedStateProvincesChanged;
    			_excludedStateProvinces.CollectionChanged += FixupExcludedStateProvinces;
    			_excludedStateProvinces.CollectionChanged += RaiseExcludedStateProvincesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductType = null;
    		TaxCategory = null;
    		Categories.Clear();
    		Testimonials.Clear();
    		Products.Clear();
    		Translations.Clear();
    		User = null;
    		ProductBasePropertyValues.Clear();
    		ProductBaseProperties.Clear();
    		ExcludedStateProvinces.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductType(ProductType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductBases.Contains(this))
    		{
    			previousValue.ProductBases.Remove(this);
    		}
    
    		if (ProductType != null)
    		{
    			if (!ProductType.ProductBases.Contains(this))
    			{
    				ProductType.ProductBases.Add(this);
    			}
    
    			ProductTypeID = ProductType.ProductTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductType")
    				&& (ChangeTracker.OriginalValues["ProductType"] == ProductType))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductType", previousValue);
    			}
    			if (ProductType != null && !ProductType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupTaxCategory(TaxCategory previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductBases.Contains(this))
    		{
    			previousValue.ProductBases.Remove(this);
    		}
    
    		if (TaxCategory != null)
    		{
    			if (!TaxCategory.ProductBases.Contains(this))
    			{
    				TaxCategory.ProductBases.Add(this);
    			}
    
    			TaxCategoryID = TaxCategory.TaxCategoryID;
    		}
    		else if (!skipKeys)
    		{
    			TaxCategoryID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("TaxCategory")
    				&& (ChangeTracker.OriginalValues["TaxCategory"] == TaxCategory))
    			{
    				ChangeTracker.OriginalValues.Remove("TaxCategory");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("TaxCategory", previousValue);
    			}
    			if (TaxCategory != null && !TaxCategory.ChangeTracker.ChangeTrackingEnabled)
    			{
    				TaxCategory.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductBases.Contains(this))
    		{
    			previousValue.ProductBases.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.ProductBases.Contains(this))
    			{
    				User.ProductBases.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCategories(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Category item in e.NewItems)
    			{
    				if (!item.ProductBases.Contains(this))
    				{
    					item.ProductBases.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Categories", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Category item in e.OldItems)
    			{
    				if (item.ProductBases.Contains(this))
    				{
    					item.ProductBases.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Categories", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTestimonials(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Testimonial item in e.NewItems)
    			{
    				if (!item.ProductBases.Contains(this))
    				{
    					item.ProductBases.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Testimonials", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Testimonial item in e.OldItems)
    			{
    				if (item.ProductBases.Contains(this))
    				{
    					item.ProductBases.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Testimonials", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Product item in e.NewItems)
    			{
    				item.ProductBase = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Products", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Product item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductBase, this))
    				{
    					item.ProductBase = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Products", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DescriptionTranslation item in e.NewItems)
    			{
    				if (!item.ProductBases.Contains(this))
    				{
    					item.ProductBases.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Translations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DescriptionTranslation item in e.OldItems)
    			{
    				if (item.ProductBases.Contains(this))
    				{
    					item.ProductBases.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Translations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductBasePropertyValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductBasePropertyValue item in e.NewItems)
    			{
    				item.ProductBas = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductBasePropertyValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductBasePropertyValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductBas, this))
    				{
    					item.ProductBas = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductBasePropertyValues", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductBaseProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductBaseProperty item in e.NewItems)
    			{
    				item.ProductBas = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductBaseProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductBaseProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductBas, this))
    				{
    					item.ProductBas = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductBaseProperties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupExcludedStateProvinces(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (StateProvince item in e.NewItems)
    			{
    				if (!item.ExcludedProductBases.Contains(this))
    				{
    					item.ExcludedProductBases.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ExcludedStateProvinces", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (StateProvince item in e.OldItems)
    			{
    				if (item.ExcludedProductBases.Contains(this))
    				{
    					item.ExcludedProductBases.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ExcludedStateProvinces", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

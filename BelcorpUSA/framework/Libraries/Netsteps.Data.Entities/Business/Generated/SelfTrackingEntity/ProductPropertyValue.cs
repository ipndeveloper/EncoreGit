//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductProperty))]
    [KnownType(typeof(ProductPropertyType))]
    [KnownType(typeof(ProductBasePropertyValue))]
    [Serializable]
    public partial class ProductPropertyValue: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductPropertyValueIDChanged();
    	public int ProductPropertyValueID
    	{
    		get { return _productPropertyValueID; }
    		set
    		{
    			if (_productPropertyValueID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductPropertyValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productPropertyValueID = value;
    				ProductPropertyValueIDChanged();
    				OnPropertyChanged("ProductPropertyValueID");
    			}
    		}
    	}
    	private int _productPropertyValueID;
    	partial void ProductPropertyTypeIDChanged();
    	public int ProductPropertyTypeID
    	{
    		get { return _productPropertyTypeID; }
    		set
    		{
    			if (_productPropertyTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductPropertyTypeID", _productPropertyTypeID);
    				if (!IsDeserializing)
    				{
    					if (ProductPropertyType != null && ProductPropertyType.ProductPropertyTypeID != value)
    					{
    						ProductPropertyType = null;
    					}
    				}
    				_productPropertyTypeID = value;
    				ProductPropertyTypeIDChanged();
    				OnPropertyChanged("ProductPropertyTypeID");
    			}
    		}
    	}
    	private int _productPropertyTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;
    	partial void FilePathChanged();
    	public string FilePath
    	{
    		get { return _filePath; }
    		set
    		{
    			if (_filePath != value)
    			{
    				ChangeTracker.RecordOriginalValue("FilePath", _filePath);
    				_filePath = value;
    				FilePathChanged();
    				OnPropertyChanged("FilePath");
    			}
    		}
    	}
    	private string _filePath;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<ProductProperty> ProductProperties
    	{
    		get
    		{
    			if (_productProperties == null)
    			{
    				_productProperties = new TrackableCollection<ProductProperty>();
    				_productProperties.CollectionChanged += FixupProductProperties;
    				_productProperties.CollectionChanged += RaiseProductPropertiesChanged;
    			}
    			return _productProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productProperties != null)
    				{
    					_productProperties.CollectionChanged -= FixupProductProperties;
    					_productProperties.CollectionChanged -= RaiseProductPropertiesChanged;
    				}
    				_productProperties = value;
    				if (_productProperties != null)
    				{
    					_productProperties.CollectionChanged += FixupProductProperties;
    					_productProperties.CollectionChanged += RaiseProductPropertiesChanged;
    				}
    				OnNavigationPropertyChanged("ProductProperties");
    			}
    		}
    	}
    	private TrackableCollection<ProductProperty> _productProperties;
    	partial void ProductPropertiesChanged();
    	private void RaiseProductPropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPropertiesChanged();
    	}
    
    	public ProductPropertyType ProductPropertyType
    	{
    		get { return _productPropertyType; }
    		set
    		{
    			if (!ReferenceEquals(_productPropertyType, value))
    			{
    				var previousValue = _productPropertyType;
    				_productPropertyType = value;
    				FixupProductPropertyType(previousValue);
    				OnNavigationPropertyChanged("ProductPropertyType");
    			}
    		}
    	}
    	private ProductPropertyType _productPropertyType;
    
    	public TrackableCollection<ProductBasePropertyValue> ProductBasePropertyValues
    	{
    		get
    		{
    			if (_productBasePropertyValues == null)
    			{
    				_productBasePropertyValues = new TrackableCollection<ProductBasePropertyValue>();
    				_productBasePropertyValues.CollectionChanged += FixupProductBasePropertyValues;
    				_productBasePropertyValues.CollectionChanged += RaiseProductBasePropertyValuesChanged;
    			}
    			return _productBasePropertyValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productBasePropertyValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productBasePropertyValues != null)
    				{
    					_productBasePropertyValues.CollectionChanged -= FixupProductBasePropertyValues;
    					_productBasePropertyValues.CollectionChanged -= RaiseProductBasePropertyValuesChanged;
    				}
    				_productBasePropertyValues = value;
    				if (_productBasePropertyValues != null)
    				{
    					_productBasePropertyValues.CollectionChanged += FixupProductBasePropertyValues;
    					_productBasePropertyValues.CollectionChanged += RaiseProductBasePropertyValuesChanged;
    				}
    				OnNavigationPropertyChanged("ProductBasePropertyValues");
    			}
    		}
    	}
    	private TrackableCollection<ProductBasePropertyValue> _productBasePropertyValues;
    	partial void ProductBasePropertyValuesChanged();
    	private void RaiseProductBasePropertyValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductBasePropertyValuesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_productProperties != null)
    		{
    			_productProperties.CollectionChanged -= FixupProductProperties;
    			_productProperties.CollectionChanged -= RaiseProductPropertiesChanged;
    			_productProperties.CollectionChanged += FixupProductProperties;
    			_productProperties.CollectionChanged += RaiseProductPropertiesChanged;
    		}
    		if (_productBasePropertyValues != null)
    		{
    			_productBasePropertyValues.CollectionChanged -= FixupProductBasePropertyValues;
    			_productBasePropertyValues.CollectionChanged -= RaiseProductBasePropertyValuesChanged;
    			_productBasePropertyValues.CollectionChanged += FixupProductBasePropertyValues;
    			_productBasePropertyValues.CollectionChanged += RaiseProductBasePropertyValuesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductProperties.Clear();
    		ProductPropertyType = null;
    		ProductBasePropertyValues.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductPropertyType(ProductPropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductPropertyValues.Contains(this))
    		{
    			previousValue.ProductPropertyValues.Remove(this);
    		}
    
    		if (ProductPropertyType != null)
    		{
    			if (!ProductPropertyType.ProductPropertyValues.Contains(this))
    			{
    				ProductPropertyType.ProductPropertyValues.Add(this);
    			}
    
    			ProductPropertyTypeID = ProductPropertyType.ProductPropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductPropertyType")
    				&& (ChangeTracker.OriginalValues["ProductPropertyType"] == ProductPropertyType))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductPropertyType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductPropertyType", previousValue);
    			}
    			if (ProductPropertyType != null && !ProductPropertyType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductPropertyType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductProperty item in e.NewItems)
    			{
    				item.ProductPropertyValue = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPropertyValue, this))
    				{
    					item.ProductPropertyValue = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductProperties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductBasePropertyValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductBasePropertyValue item in e.NewItems)
    			{
    				item.ProductPropertyValue = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductBasePropertyValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductBasePropertyValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPropertyValue, this))
    				{
    					item.ProductPropertyValue = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductBasePropertyValues", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

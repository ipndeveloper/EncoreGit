//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Language))]
    [KnownType(typeof(Page))]
    [Serializable]
    public partial class PageTranslation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void PageTranslationIDChanged();
    	public int PageTranslationID
    	{
    		get { return _pageTranslationID; }
    		set
    		{
    			if (_pageTranslationID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'PageTranslationID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_pageTranslationID = value;
    				PageTranslationIDChanged();
    				OnPropertyChanged("PageTranslationID");
    			}
    		}
    	}
    	private int _pageTranslationID;
    	partial void PageIDChanged();
    	public int PageID
    	{
    		get { return _pageID; }
    		set
    		{
    			if (_pageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PageID", _pageID);
    				if (!IsDeserializing)
    				{
    					if (Page != null && Page.PageID != value)
    					{
    						Page = null;
    					}
    				}
    				_pageID = value;
    				PageIDChanged();
    				OnPropertyChanged("PageID");
    			}
    		}
    	}
    	private int _pageID;
    	partial void LanguageIDChanged();
    	public int LanguageID
    	{
    		get { return _languageID; }
    		set
    		{
    			if (_languageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("LanguageID", _languageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_languageID = value;
    				LanguageIDChanged();
    				OnPropertyChanged("LanguageID");
    			}
    		}
    	}
    	private int _languageID;
    	partial void TitleChanged();
    	public string Title
    	{
    		get { return _title; }
    		set
    		{
    			if (_title != value)
    			{
    				ChangeTracker.RecordOriginalValue("Title", _title);
    				_title = value;
    				TitleChanged();
    				OnPropertyChanged("Title");
    			}
    		}
    	}
    	private string _title;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void KeywordsChanged();
    	public string Keywords
    	{
    		get { return _keywords; }
    		set
    		{
    			if (_keywords != value)
    			{
    				ChangeTracker.RecordOriginalValue("Keywords", _keywords);
    				_keywords = value;
    				KeywordsChanged();
    				OnPropertyChanged("Keywords");
    			}
    		}
    	}
    	private string _keywords;

        #endregion
        #region Navigation Properties
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public Page Page
    	{
    		get { return _page; }
    		set
    		{
    			if (!ReferenceEquals(_page, value))
    			{
    				var previousValue = _page;
    				_page = value;
    				FixupPage(previousValue);
    				OnNavigationPropertyChanged("Page");
    			}
    		}
    	}
    	private Page _page;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Language = null;
    		Page = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupLanguage(Language previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.PageTranslations.Contains(this))
    		{
    			previousValue.PageTranslations.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.PageTranslations.Contains(this))
    			{
    				Language.PageTranslations.Add(this);
    			}
    
    			LanguageID = Language.LanguageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPage(Page previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Translations.Contains(this))
    		{
    			previousValue.Translations.Remove(this);
    		}
    
    		if (Page != null)
    		{
    			if (!Page.Translations.Contains(this))
    			{
    				Page.Translations.Add(this);
    			}
    
    			PageID = Page.PageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Page")
    				&& (ChangeTracker.OriginalValues["Page"] == Page))
    			{
    				ChangeTracker.OriginalValues.Remove("Page");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Page", previousValue);
    			}
    			if (Page != null && !Page.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Page.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Country))]
    [KnownType(typeof(OrderType))]
    [KnownType(typeof(ShippingMethod))]
    [KnownType(typeof(ShippingRateGroup))]
    [KnownType(typeof(ShippingRegion))]
    [KnownType(typeof(LogisticsProvider))]
    [KnownType(typeof(Warehouse))]
    [Serializable]
    public partial class ShippingOrderType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ShippingOrderTypeIDChanged();
    	public int ShippingOrderTypeID
    	{
    		get { return _shippingOrderTypeID; }
    		set
    		{
    			if (_shippingOrderTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ShippingOrderTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_shippingOrderTypeID = value;
    				ShippingOrderTypeIDChanged();
    				OnPropertyChanged("ShippingOrderTypeID");
    			}
    		}
    	}
    	private int _shippingOrderTypeID;
    	partial void OrderTypeIDChanged();
    	public short OrderTypeID
    	{
    		get { return _orderTypeID; }
    		set
    		{
    			if (_orderTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderTypeID", _orderTypeID);
    				if (!IsDeserializing)
    				{
    					if (OrderType != null && OrderType.OrderTypeID != value)
    					{
    						OrderType = null;
    					}
    				}
    				_orderTypeID = value;
    				OrderTypeIDChanged();
    				OnPropertyChanged("OrderTypeID");
    			}
    		}
    	}
    	private short _orderTypeID;
    	partial void ShippingMethodIDChanged();
    	public int ShippingMethodID
    	{
    		get { return _shippingMethodID; }
    		set
    		{
    			if (_shippingMethodID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingMethodID", _shippingMethodID);
    				if (!IsDeserializing)
    				{
    					if (ShippingMethod != null && ShippingMethod.ShippingMethodID != value)
    					{
    						ShippingMethod = null;
    					}
    				}
    				_shippingMethodID = value;
    				ShippingMethodIDChanged();
    				OnPropertyChanged("ShippingMethodID");
    			}
    		}
    	}
    	private int _shippingMethodID;
    	partial void ShippingRegionIDChanged();
    	public Nullable<int> ShippingRegionID
    	{
    		get { return _shippingRegionID; }
    		set
    		{
    			if (_shippingRegionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRegionID", _shippingRegionID);
    				if (!IsDeserializing)
    				{
    					if (ShippingRegion != null && ShippingRegion.ShippingRegionID != value)
    					{
    						ShippingRegion = null;
    					}
    				}
    				_shippingRegionID = value;
    				ShippingRegionIDChanged();
    				OnPropertyChanged("ShippingRegionID");
    			}
    		}
    	}
    	private Nullable<int> _shippingRegionID;
    	partial void ShippingRateGroupIDChanged();
    	public int ShippingRateGroupID
    	{
    		get { return _shippingRateGroupID; }
    		set
    		{
    			if (_shippingRateGroupID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRateGroupID", _shippingRateGroupID);
    				if (!IsDeserializing)
    				{
    					if (ShippingRateGroup != null && ShippingRateGroup.ShippingRateGroupID != value)
    					{
    						ShippingRateGroup = null;
    					}
    				}
    				_shippingRateGroupID = value;
    				ShippingRateGroupIDChanged();
    				OnPropertyChanged("ShippingRateGroupID");
    			}
    		}
    	}
    	private int _shippingRateGroupID;
    	partial void CountryIDChanged();
    	public int CountryID
    	{
    		get { return _countryID; }
    		set
    		{
    			if (_countryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryID", _countryID);
    				if (!IsDeserializing)
    				{
    					if (Country != null && Country.CountryID != value)
    					{
    						Country = null;
    					}
    				}
    				_countryID = value;
    				CountryIDChanged();
    				OnPropertyChanged("CountryID");
    			}
    		}
    	}
    	private int _countryID;
    	partial void OverrideAmountChanged();
    	public Nullable<decimal> OverrideAmount
    	{
    		get { return _overrideAmount; }
    		set
    		{
    			if (_overrideAmount != value)
    			{
    				ChangeTracker.RecordOriginalValue("OverrideAmount", _overrideAmount);
    				_overrideAmount = value;
    				OverrideAmountChanged();
    				OnPropertyChanged("OverrideAmount");
    			}
    		}
    	}
    	private Nullable<decimal> _overrideAmount;
    	partial void OverrideInclusiveChanged();
    	public Nullable<bool> OverrideInclusive
    	{
    		get { return _overrideInclusive; }
    		set
    		{
    			if (_overrideInclusive != value)
    			{
    				ChangeTracker.RecordOriginalValue("OverrideInclusive", _overrideInclusive);
    				_overrideInclusive = value;
    				OverrideInclusiveChanged();
    				OnPropertyChanged("OverrideInclusive");
    			}
    		}
    	}
    	private Nullable<bool> _overrideInclusive;
    	partial void AllowDirectShipmentsChanged();
    	public bool AllowDirectShipments
    	{
    		get { return _allowDirectShipments; }
    		set
    		{
    			if (_allowDirectShipments != value)
    			{
    				ChangeTracker.RecordOriginalValue("AllowDirectShipments", _allowDirectShipments);
    				_allowDirectShipments = value;
    				AllowDirectShipmentsChanged();
    				OnPropertyChanged("AllowDirectShipments");
    			}
    		}
    	}
    	private bool _allowDirectShipments;
    	partial void IsDefaultShippingMethodChanged();
    	public bool IsDefaultShippingMethod
    	{
    		get { return _isDefaultShippingMethod; }
    		set
    		{
    			if (_isDefaultShippingMethod != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsDefaultShippingMethod", _isDefaultShippingMethod);
    				_isDefaultShippingMethod = value;
    				IsDefaultShippingMethodChanged();
    				OnPropertyChanged("IsDefaultShippingMethod");
    			}
    		}
    	}
    	private bool _isDefaultShippingMethod;
    	partial void WarehouseIDChanged();
    	public Nullable<int> WarehouseID
    	{
    		get { return _warehouseID; }
    		set
    		{
    			if (_warehouseID != value)
    			{
    				ChangeTracker.RecordOriginalValue("WarehouseID", _warehouseID);
    				if (!IsDeserializing)
    				{
    					if (Warehouse != null && Warehouse.WarehouseID != value)
    					{
    						Warehouse = null;
    					}
    				}
    				_warehouseID = value;
    				WarehouseIDChanged();
    				OnPropertyChanged("WarehouseID");
    			}
    		}
    	}
    	private Nullable<int> _warehouseID;
    	partial void LogisticsProviderIDChanged();
    	public Nullable<short> LogisticsProviderID
    	{
    		get { return _logisticsProviderID; }
    		set
    		{
    			if (_logisticsProviderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("LogisticsProviderID", _logisticsProviderID);
    				if (!IsDeserializing)
    				{
    					if (LogisticsProvider != null && LogisticsProvider.LogisticsProviderID != value)
    					{
    						LogisticsProvider = null;
    					}
    				}
    				_logisticsProviderID = value;
    				LogisticsProviderIDChanged();
    				OnPropertyChanged("LogisticsProviderID");
    			}
    		}
    	}
    	private Nullable<short> _logisticsProviderID;
    	partial void DaysForDeliveryChanged();
    	public Nullable<short> DaysForDelivery
    	{
    		get { return _daysForDelivery; }
    		set
    		{
    			if (_daysForDelivery != value)
    			{
    				ChangeTracker.RecordOriginalValue("DaysForDelivery", _daysForDelivery);
    				_daysForDelivery = value;
    				DaysForDeliveryChanged();
    				OnPropertyChanged("DaysForDelivery");
    			}
    		}
    	}
    	private Nullable<short> _daysForDelivery;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public Country Country
    	{
    		get { return _country; }
    		set
    		{
    			if (!ReferenceEquals(_country, value))
    			{
    				var previousValue = _country;
    				_country = value;
    				FixupCountry(previousValue);
    				OnNavigationPropertyChanged("Country");
    			}
    		}
    	}
    	private Country _country;
    
    	public OrderType OrderType
    	{
    		get { return _orderType; }
    		set
    		{
    			if (!ReferenceEquals(_orderType, value))
    			{
    				var previousValue = _orderType;
    				_orderType = value;
    				FixupOrderType(previousValue);
    				OnNavigationPropertyChanged("OrderType");
    			}
    		}
    	}
    	private OrderType _orderType;
    
    	public ShippingMethod ShippingMethod
    	{
    		get { return _shippingMethod; }
    		set
    		{
    			if (!ReferenceEquals(_shippingMethod, value))
    			{
    				var previousValue = _shippingMethod;
    				_shippingMethod = value;
    				FixupShippingMethod(previousValue);
    				OnNavigationPropertyChanged("ShippingMethod");
    			}
    		}
    	}
    	private ShippingMethod _shippingMethod;
    
    	public ShippingRateGroup ShippingRateGroup
    	{
    		get { return _shippingRateGroup; }
    		set
    		{
    			if (!ReferenceEquals(_shippingRateGroup, value))
    			{
    				var previousValue = _shippingRateGroup;
    				_shippingRateGroup = value;
    				FixupShippingRateGroup(previousValue);
    				OnNavigationPropertyChanged("ShippingRateGroup");
    			}
    		}
    	}
    	private ShippingRateGroup _shippingRateGroup;
    
    	public ShippingRegion ShippingRegion
    	{
    		get { return _shippingRegion; }
    		set
    		{
    			if (!ReferenceEquals(_shippingRegion, value))
    			{
    				var previousValue = _shippingRegion;
    				_shippingRegion = value;
    				FixupShippingRegion(previousValue);
    				OnNavigationPropertyChanged("ShippingRegion");
    			}
    		}
    	}
    	private ShippingRegion _shippingRegion;
    
    	public LogisticsProvider LogisticsProvider
    	{
    		get { return _logisticsProvider; }
    		set
    		{
    			if (!ReferenceEquals(_logisticsProvider, value))
    			{
    				var previousValue = _logisticsProvider;
    				_logisticsProvider = value;
    				FixupLogisticsProvider(previousValue);
    				OnNavigationPropertyChanged("LogisticsProvider");
    			}
    		}
    	}
    	private LogisticsProvider _logisticsProvider;
    
    	public Warehouse Warehouse
    	{
    		get { return _warehouse; }
    		set
    		{
    			if (!ReferenceEquals(_warehouse, value))
    			{
    				var previousValue = _warehouse;
    				_warehouse = value;
    				FixupWarehouse(previousValue);
    				OnNavigationPropertyChanged("Warehouse");
    			}
    		}
    	}
    	private Warehouse _warehouse;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Country = null;
    		OrderType = null;
    		ShippingMethod = null;
    		ShippingRateGroup = null;
    		ShippingRegion = null;
    		LogisticsProvider = null;
    		Warehouse = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCountry(Country previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingOrderTypes.Contains(this))
    		{
    			previousValue.ShippingOrderTypes.Remove(this);
    		}
    
    		if (Country != null)
    		{
    			if (!Country.ShippingOrderTypes.Contains(this))
    			{
    				Country.ShippingOrderTypes.Add(this);
    			}
    
    			CountryID = Country.CountryID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Country")
    				&& (ChangeTracker.OriginalValues["Country"] == Country))
    			{
    				ChangeTracker.OriginalValues.Remove("Country");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Country", previousValue);
    			}
    			if (Country != null && !Country.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Country.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderType(OrderType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingOrderTypes.Contains(this))
    		{
    			previousValue.ShippingOrderTypes.Remove(this);
    		}
    
    		if (OrderType != null)
    		{
    			if (!OrderType.ShippingOrderTypes.Contains(this))
    			{
    				OrderType.ShippingOrderTypes.Add(this);
    			}
    
    			OrderTypeID = OrderType.OrderTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderType")
    				&& (ChangeTracker.OriginalValues["OrderType"] == OrderType))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderType", previousValue);
    			}
    			if (OrderType != null && !OrderType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupShippingMethod(ShippingMethod previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingOrderTypes.Contains(this))
    		{
    			previousValue.ShippingOrderTypes.Remove(this);
    		}
    
    		if (ShippingMethod != null)
    		{
    			if (!ShippingMethod.ShippingOrderTypes.Contains(this))
    			{
    				ShippingMethod.ShippingOrderTypes.Add(this);
    			}
    
    			ShippingMethodID = ShippingMethod.ShippingMethodID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ShippingMethod")
    				&& (ChangeTracker.OriginalValues["ShippingMethod"] == ShippingMethod))
    			{
    				ChangeTracker.OriginalValues.Remove("ShippingMethod");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ShippingMethod", previousValue);
    			}
    			if (ShippingMethod != null && !ShippingMethod.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ShippingMethod.StartTracking();
    			}
    		}
    	}
    
    	private void FixupShippingRateGroup(ShippingRateGroup previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingOrderTypes.Contains(this))
    		{
    			previousValue.ShippingOrderTypes.Remove(this);
    		}
    
    		if (ShippingRateGroup != null)
    		{
    			if (!ShippingRateGroup.ShippingOrderTypes.Contains(this))
    			{
    				ShippingRateGroup.ShippingOrderTypes.Add(this);
    			}
    
    			ShippingRateGroupID = ShippingRateGroup.ShippingRateGroupID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ShippingRateGroup")
    				&& (ChangeTracker.OriginalValues["ShippingRateGroup"] == ShippingRateGroup))
    			{
    				ChangeTracker.OriginalValues.Remove("ShippingRateGroup");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRateGroup", previousValue);
    			}
    			if (ShippingRateGroup != null && !ShippingRateGroup.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ShippingRateGroup.StartTracking();
    			}
    		}
    	}
    
    	private void FixupShippingRegion(ShippingRegion previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingOrderTypes.Contains(this))
    		{
    			previousValue.ShippingOrderTypes.Remove(this);
    		}
    
    		if (ShippingRegion != null)
    		{
    			if (!ShippingRegion.ShippingOrderTypes.Contains(this))
    			{
    				ShippingRegion.ShippingOrderTypes.Add(this);
    			}
    
    			ShippingRegionID = ShippingRegion.ShippingRegionID;
    		}
    		else if (!skipKeys)
    		{
    			ShippingRegionID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ShippingRegion")
    				&& (ChangeTracker.OriginalValues["ShippingRegion"] == ShippingRegion))
    			{
    				ChangeTracker.OriginalValues.Remove("ShippingRegion");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRegion", previousValue);
    			}
    			if (ShippingRegion != null && !ShippingRegion.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ShippingRegion.StartTracking();
    			}
    		}
    	}
    
    	private void FixupLogisticsProvider(LogisticsProvider previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingOrderTypes.Contains(this))
    		{
    			previousValue.ShippingOrderTypes.Remove(this);
    		}
    
    		if (LogisticsProvider != null)
    		{
    			if (!LogisticsProvider.ShippingOrderTypes.Contains(this))
    			{
    				LogisticsProvider.ShippingOrderTypes.Add(this);
    			}
    
    			LogisticsProviderID = LogisticsProvider.LogisticsProviderID;
    		}
    		else if (!skipKeys)
    		{
    			LogisticsProviderID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("LogisticsProvider")
    				&& (ChangeTracker.OriginalValues["LogisticsProvider"] == LogisticsProvider))
    			{
    				ChangeTracker.OriginalValues.Remove("LogisticsProvider");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("LogisticsProvider", previousValue);
    			}
    			if (LogisticsProvider != null && !LogisticsProvider.ChangeTracker.ChangeTrackingEnabled)
    			{
    				LogisticsProvider.StartTracking();
    			}
    		}
    	}
    
    	private void FixupWarehouse(Warehouse previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ShippingOrderTypes.Contains(this))
    		{
    			previousValue.ShippingOrderTypes.Remove(this);
    		}
    
    		if (Warehouse != null)
    		{
    			if (!Warehouse.ShippingOrderTypes.Contains(this))
    			{
    				Warehouse.ShippingOrderTypes.Add(this);
    			}
    
    			WarehouseID = Warehouse.WarehouseID;
    		}
    		else if (!skipKeys)
    		{
    			WarehouseID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Warehouse")
    				&& (ChangeTracker.OriginalValues["Warehouse"] == Warehouse))
    			{
    				ChangeTracker.OriginalValues.Remove("Warehouse");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Warehouse", previousValue);
    			}
    			if (Warehouse != null && !Warehouse.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Warehouse.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Catalog))]
    [KnownType(typeof(Category))]
    [KnownType(typeof(StoreFront))]
    [KnownType(typeof(DescriptionTranslation))]
    [KnownType(typeof(CatalogItem))]
    [KnownType(typeof(HostessRewardType))]
    [KnownType(typeof(CatalogType))]
    [KnownType(typeof(AccountType))]
    [KnownType(typeof(ProductPrice))]
    [Serializable]
    public partial class Catalog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CatalogIDChanged();
    	public int CatalogID
    	{
    		get { return _catalogID; }
    		set
    		{
    			if (_catalogID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CatalogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_catalogID = value;
    				CatalogIDChanged();
    				OnPropertyChanged("CatalogID");
    			}
    		}
    	}
    	private int _catalogID;
    	partial void ParentCatalogIDChanged();
    	public Nullable<int> ParentCatalogID
    	{
    		get { return _parentCatalogID; }
    		set
    		{
    			if (_parentCatalogID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParentCatalogID", _parentCatalogID);
    				if (!IsDeserializing)
    				{
    					if (Catalog1 != null && Catalog1.CatalogID != value)
    					{
    						Catalog1 = null;
    					}
    				}
    				_parentCatalogID = value;
    				ParentCatalogIDChanged();
    				OnPropertyChanged("ParentCatalogID");
    			}
    		}
    	}
    	private Nullable<int> _parentCatalogID;
    	partial void CategoryIDChanged();
    	public int CategoryID
    	{
    		get { return _categoryID; }
    		set
    		{
    			if (_categoryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CategoryID", _categoryID);
    				if (!IsDeserializing)
    				{
    					if (Category != null && Category.CategoryID != value)
    					{
    						Category = null;
    					}
    				}
    				_categoryID = value;
    				CategoryIDChanged();
    				OnPropertyChanged("CategoryID");
    			}
    		}
    	}
    	private int _categoryID;
    	partial void DisplayImageChanged();
    	public string DisplayImage
    	{
    		get { return _displayImage; }
    		set
    		{
    			if (_displayImage != value)
    			{
    				ChangeTracker.RecordOriginalValue("DisplayImage", _displayImage);
    				_displayImage = value;
    				DisplayImageChanged();
    				OnPropertyChanged("DisplayImage");
    			}
    		}
    	}
    	private string _displayImage;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;
    	partial void StartDateUTCChanged();
    	public Nullable<System.DateTime> StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void CatalogTypeIDChanged();
    	public short CatalogTypeID
    	{
    		get { return _catalogTypeID; }
    		set
    		{
    			if (_catalogTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CatalogTypeID", _catalogTypeID);
    				if (!IsDeserializing)
    				{
    					if (CatalogType != null && CatalogType.CatalogTypeID != value)
    					{
    						CatalogType = null;
    					}
    				}
    				_catalogTypeID = value;
    				CatalogTypeIDChanged();
    				OnPropertyChanged("CatalogTypeID");
    			}
    		}
    	}
    	private short _catalogTypeID;
    	partial void EditableChanged();
    	public bool Editable
    	{
    		get { return _editable; }
    		set
    		{
    			if (_editable != value)
    			{
    				ChangeTracker.RecordOriginalValue("Editable", _editable);
    				_editable = value;
    				EditableChanged();
    				OnPropertyChanged("Editable");
    			}
    		}
    	}
    	private bool _editable;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<Catalog> Catalogs1
    	{
    		get
    		{
    			if (_catalogs1 == null)
    			{
    				_catalogs1 = new TrackableCollection<Catalog>();
    				_catalogs1.CollectionChanged += FixupCatalogs1;
    				_catalogs1.CollectionChanged += RaiseCatalogs1Changed;
    			}
    			return _catalogs1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_catalogs1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_catalogs1 != null)
    				{
    					_catalogs1.CollectionChanged -= FixupCatalogs1;
    					_catalogs1.CollectionChanged -= RaiseCatalogs1Changed;
    				}
    				_catalogs1 = value;
    				if (_catalogs1 != null)
    				{
    					_catalogs1.CollectionChanged += FixupCatalogs1;
    					_catalogs1.CollectionChanged += RaiseCatalogs1Changed;
    				}
    				OnNavigationPropertyChanged("Catalogs1");
    			}
    		}
    	}
    	private TrackableCollection<Catalog> _catalogs1;
    	partial void Catalogs1Changed();
    	private void RaiseCatalogs1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Catalogs1Changed();
    	}
    
    	public Catalog Catalog1
    	{
    		get { return _catalog1; }
    		set
    		{
    			if (!ReferenceEquals(_catalog1, value))
    			{
    				var previousValue = _catalog1;
    				_catalog1 = value;
    				FixupCatalog1(previousValue);
    				OnNavigationPropertyChanged("Catalog1");
    			}
    		}
    	}
    	private Catalog _catalog1;
    
    	public Category Category
    	{
    		get { return _category; }
    		set
    		{
    			if (!ReferenceEquals(_category, value))
    			{
    				var previousValue = _category;
    				_category = value;
    				FixupCategory(previousValue);
    				OnNavigationPropertyChanged("Category");
    			}
    		}
    	}
    	private Category _category;
    
    	public TrackableCollection<StoreFront> StoreFronts
    	{
    		get
    		{
    			if (_storeFronts == null)
    			{
    				_storeFronts = new TrackableCollection<StoreFront>();
    				_storeFronts.CollectionChanged += FixupStoreFronts;
    				_storeFronts.CollectionChanged += RaiseStoreFrontsChanged;
    			}
    			return _storeFronts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_storeFronts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_storeFronts != null)
    				{
    					_storeFronts.CollectionChanged -= FixupStoreFronts;
    					_storeFronts.CollectionChanged -= RaiseStoreFrontsChanged;
    				}
    				_storeFronts = value;
    				if (_storeFronts != null)
    				{
    					_storeFronts.CollectionChanged += FixupStoreFronts;
    					_storeFronts.CollectionChanged += RaiseStoreFrontsChanged;
    				}
    				OnNavigationPropertyChanged("StoreFronts");
    			}
    		}
    	}
    	private TrackableCollection<StoreFront> _storeFronts;
    	partial void StoreFrontsChanged();
    	private void RaiseStoreFrontsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		StoreFrontsChanged();
    	}
    
    	public TrackableCollection<DescriptionTranslation> Translations
    	{
    		get
    		{
    			if (_translations == null)
    			{
    				_translations = new TrackableCollection<DescriptionTranslation>();
    				_translations.CollectionChanged += FixupTranslations;
    				_translations.CollectionChanged += RaiseTranslationsChanged;
    			}
    			return _translations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_translations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_translations != null)
    				{
    					_translations.CollectionChanged -= FixupTranslations;
    					_translations.CollectionChanged -= RaiseTranslationsChanged;
    				}
    				_translations = value;
    				if (_translations != null)
    				{
    					_translations.CollectionChanged += FixupTranslations;
    					_translations.CollectionChanged += RaiseTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("Translations");
    			}
    		}
    	}
    	private TrackableCollection<DescriptionTranslation> _translations;
    	partial void TranslationsChanged();
    	private void RaiseTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TranslationsChanged();
    	}
    
    	public TrackableCollection<CatalogItem> CatalogItems
    	{
    		get
    		{
    			if (_catalogItems == null)
    			{
    				_catalogItems = new TrackableCollection<CatalogItem>();
    				_catalogItems.CollectionChanged += FixupCatalogItems;
    				_catalogItems.CollectionChanged += RaiseCatalogItemsChanged;
    			}
    			return _catalogItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_catalogItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_catalogItems != null)
    				{
    					_catalogItems.CollectionChanged -= FixupCatalogItems;
    					_catalogItems.CollectionChanged -= RaiseCatalogItemsChanged;
    				}
    				_catalogItems = value;
    				if (_catalogItems != null)
    				{
    					_catalogItems.CollectionChanged += FixupCatalogItems;
    					_catalogItems.CollectionChanged += RaiseCatalogItemsChanged;
    				}
    				OnNavigationPropertyChanged("CatalogItems");
    			}
    		}
    	}
    	private TrackableCollection<CatalogItem> _catalogItems;
    	partial void CatalogItemsChanged();
    	private void RaiseCatalogItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CatalogItemsChanged();
    	}
    
    	public TrackableCollection<HostessRewardType> HostessRewardTypes
    	{
    		get
    		{
    			if (_hostessRewardTypes == null)
    			{
    				_hostessRewardTypes = new TrackableCollection<HostessRewardType>();
    				_hostessRewardTypes.CollectionChanged += FixupHostessRewardTypes;
    				_hostessRewardTypes.CollectionChanged += RaiseHostessRewardTypesChanged;
    			}
    			return _hostessRewardTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_hostessRewardTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_hostessRewardTypes != null)
    				{
    					_hostessRewardTypes.CollectionChanged -= FixupHostessRewardTypes;
    					_hostessRewardTypes.CollectionChanged -= RaiseHostessRewardTypesChanged;
    				}
    				_hostessRewardTypes = value;
    				if (_hostessRewardTypes != null)
    				{
    					_hostessRewardTypes.CollectionChanged += FixupHostessRewardTypes;
    					_hostessRewardTypes.CollectionChanged += RaiseHostessRewardTypesChanged;
    				}
    				OnNavigationPropertyChanged("HostessRewardTypes");
    			}
    		}
    	}
    	private TrackableCollection<HostessRewardType> _hostessRewardTypes;
    	partial void HostessRewardTypesChanged();
    	private void RaiseHostessRewardTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HostessRewardTypesChanged();
    	}
    
    	public CatalogType CatalogType
    	{
    		get { return _catalogType; }
    		set
    		{
    			if (!ReferenceEquals(_catalogType, value))
    			{
    				var previousValue = _catalogType;
    				_catalogType = value;
    				FixupCatalogType(previousValue);
    				OnNavigationPropertyChanged("CatalogType");
    			}
    		}
    	}
    	private CatalogType _catalogType;
    
    	public TrackableCollection<AccountType> AccountTypes
    	{
    		get
    		{
    			if (_accountTypes == null)
    			{
    				_accountTypes = new TrackableCollection<AccountType>();
    				_accountTypes.CollectionChanged += FixupAccountTypes;
    				_accountTypes.CollectionChanged += RaiseAccountTypesChanged;
    			}
    			return _accountTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountTypes != null)
    				{
    					_accountTypes.CollectionChanged -= FixupAccountTypes;
    					_accountTypes.CollectionChanged -= RaiseAccountTypesChanged;
    				}
    				_accountTypes = value;
    				if (_accountTypes != null)
    				{
    					_accountTypes.CollectionChanged += FixupAccountTypes;
    					_accountTypes.CollectionChanged += RaiseAccountTypesChanged;
    				}
    				OnNavigationPropertyChanged("AccountTypes");
    			}
    		}
    	}
    	private TrackableCollection<AccountType> _accountTypes;
    	partial void AccountTypesChanged();
    	private void RaiseAccountTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountTypesChanged();
    	}
    
    	public TrackableCollection<ProductPrice> ProductPrices
    	{
    		get
    		{
    			if (_productPrices == null)
    			{
    				_productPrices = new TrackableCollection<ProductPrice>();
    				_productPrices.CollectionChanged += FixupProductPrices;
    				_productPrices.CollectionChanged += RaiseProductPricesChanged;
    			}
    			return _productPrices;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productPrices, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productPrices != null)
    				{
    					_productPrices.CollectionChanged -= FixupProductPrices;
    					_productPrices.CollectionChanged -= RaiseProductPricesChanged;
    				}
    				_productPrices = value;
    				if (_productPrices != null)
    				{
    					_productPrices.CollectionChanged += FixupProductPrices;
    					_productPrices.CollectionChanged += RaiseProductPricesChanged;
    				}
    				OnNavigationPropertyChanged("ProductPrices");
    			}
    		}
    	}
    	private TrackableCollection<ProductPrice> _productPrices;
    	partial void ProductPricesChanged();
    	private void RaiseProductPricesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPricesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_catalogs1 != null)
    		{
    			_catalogs1.CollectionChanged -= FixupCatalogs1;
    			_catalogs1.CollectionChanged -= RaiseCatalogs1Changed;
    			_catalogs1.CollectionChanged += FixupCatalogs1;
    			_catalogs1.CollectionChanged += RaiseCatalogs1Changed;
    		}
    		if (_storeFronts != null)
    		{
    			_storeFronts.CollectionChanged -= FixupStoreFronts;
    			_storeFronts.CollectionChanged -= RaiseStoreFrontsChanged;
    			_storeFronts.CollectionChanged += FixupStoreFronts;
    			_storeFronts.CollectionChanged += RaiseStoreFrontsChanged;
    		}
    		if (_translations != null)
    		{
    			_translations.CollectionChanged -= FixupTranslations;
    			_translations.CollectionChanged -= RaiseTranslationsChanged;
    			_translations.CollectionChanged += FixupTranslations;
    			_translations.CollectionChanged += RaiseTranslationsChanged;
    		}
    		if (_catalogItems != null)
    		{
    			_catalogItems.CollectionChanged -= FixupCatalogItems;
    			_catalogItems.CollectionChanged -= RaiseCatalogItemsChanged;
    			_catalogItems.CollectionChanged += FixupCatalogItems;
    			_catalogItems.CollectionChanged += RaiseCatalogItemsChanged;
    		}
    		if (_hostessRewardTypes != null)
    		{
    			_hostessRewardTypes.CollectionChanged -= FixupHostessRewardTypes;
    			_hostessRewardTypes.CollectionChanged -= RaiseHostessRewardTypesChanged;
    			_hostessRewardTypes.CollectionChanged += FixupHostessRewardTypes;
    			_hostessRewardTypes.CollectionChanged += RaiseHostessRewardTypesChanged;
    		}
    		if (_accountTypes != null)
    		{
    			_accountTypes.CollectionChanged -= FixupAccountTypes;
    			_accountTypes.CollectionChanged -= RaiseAccountTypesChanged;
    			_accountTypes.CollectionChanged += FixupAccountTypes;
    			_accountTypes.CollectionChanged += RaiseAccountTypesChanged;
    		}
    		if (_productPrices != null)
    		{
    			_productPrices.CollectionChanged -= FixupProductPrices;
    			_productPrices.CollectionChanged -= RaiseProductPricesChanged;
    			_productPrices.CollectionChanged += FixupProductPrices;
    			_productPrices.CollectionChanged += RaiseProductPricesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Catalogs1.Clear();
    		Catalog1 = null;
    		Category = null;
    		StoreFronts.Clear();
    		Translations.Clear();
    		CatalogItems.Clear();
    		HostessRewardTypes.Clear();
    		CatalogType = null;
    		AccountTypes.Clear();
    		ProductPrices.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCatalog1(Catalog previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Catalogs1.Contains(this))
    		{
    			previousValue.Catalogs1.Remove(this);
    		}
    
    		if (Catalog1 != null)
    		{
    			if (!Catalog1.Catalogs1.Contains(this))
    			{
    				Catalog1.Catalogs1.Add(this);
    			}
    
    			ParentCatalogID = Catalog1.CatalogID;
    		}
    		else if (!skipKeys)
    		{
    			ParentCatalogID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Catalog1")
    				&& (ChangeTracker.OriginalValues["Catalog1"] == Catalog1))
    			{
    				ChangeTracker.OriginalValues.Remove("Catalog1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Catalog1", previousValue);
    			}
    			if (Catalog1 != null && !Catalog1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Catalog1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCategory(Category previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Catalogs.Contains(this))
    		{
    			previousValue.Catalogs.Remove(this);
    		}
    
    		if (Category != null)
    		{
    			if (!Category.Catalogs.Contains(this))
    			{
    				Category.Catalogs.Add(this);
    			}
    
    			CategoryID = Category.CategoryID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Category")
    				&& (ChangeTracker.OriginalValues["Category"] == Category))
    			{
    				ChangeTracker.OriginalValues.Remove("Category");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Category", previousValue);
    			}
    			if (Category != null && !Category.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Category.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCatalogType(CatalogType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Catalogs.Contains(this))
    		{
    			previousValue.Catalogs.Remove(this);
    		}
    
    		if (CatalogType != null)
    		{
    			if (!CatalogType.Catalogs.Contains(this))
    			{
    				CatalogType.Catalogs.Add(this);
    			}
    
    			CatalogTypeID = CatalogType.CatalogTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CatalogType")
    				&& (ChangeTracker.OriginalValues["CatalogType"] == CatalogType))
    			{
    				ChangeTracker.OriginalValues.Remove("CatalogType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CatalogType", previousValue);
    			}
    			if (CatalogType != null && !CatalogType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CatalogType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCatalogs1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Catalog item in e.NewItems)
    			{
    				item.Catalog1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Catalogs1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Catalog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Catalog1, this))
    				{
    					item.Catalog1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Catalogs1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupStoreFronts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (StoreFront item in e.NewItems)
    			{
    				if (!item.Catalogs.Contains(this))
    				{
    					item.Catalogs.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("StoreFronts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (StoreFront item in e.OldItems)
    			{
    				if (item.Catalogs.Contains(this))
    				{
    					item.Catalogs.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("StoreFronts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DescriptionTranslation item in e.NewItems)
    			{
    				if (!item.Catalogs.Contains(this))
    				{
    					item.Catalogs.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Translations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DescriptionTranslation item in e.OldItems)
    			{
    				if (item.Catalogs.Contains(this))
    				{
    					item.Catalogs.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Translations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCatalogItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CatalogItem item in e.NewItems)
    			{
    				item.Catalog = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CatalogItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CatalogItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Catalog, this))
    				{
    					item.Catalog = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CatalogItems", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHostessRewardTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HostessRewardType item in e.NewItems)
    			{
    				if (!item.Catalogs.Contains(this))
    				{
    					item.Catalogs.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HostessRewardTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HostessRewardType item in e.OldItems)
    			{
    				if (item.Catalogs.Contains(this))
    				{
    					item.Catalogs.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HostessRewardTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountType item in e.NewItems)
    			{
    				if (!item.Catalogs.Contains(this))
    				{
    					item.Catalogs.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountType item in e.OldItems)
    			{
    				if (item.Catalogs.Contains(this))
    				{
    					item.Catalogs.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductPrices(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductPrice item in e.NewItems)
    			{
    				item.Catalog = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductPrices", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductPrice item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Catalog, this))
    				{
    					item.Catalog = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductPrices", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductPrice))]
    [KnownType(typeof(AccountPriceType))]
    [KnownType(typeof(OrderItem))]
    [Serializable]
    public partial class ProductPriceType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductPriceTypeIDChanged();
    	public int ProductPriceTypeID
    	{
    		get { return _productPriceTypeID; }
    		set
    		{
    			if (_productPriceTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductPriceTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productPriceTypeID = value;
    				ProductPriceTypeIDChanged();
    				OnPropertyChanged("ProductPriceTypeID");
    			}
    		}
    	}
    	private int _productPriceTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void EditableChanged();
    	public bool Editable
    	{
    		get { return _editable; }
    		set
    		{
    			if (_editable != value)
    			{
    				ChangeTracker.RecordOriginalValue("Editable", _editable);
    				_editable = value;
    				EditableChanged();
    				OnPropertyChanged("Editable");
    			}
    		}
    	}
    	private bool _editable;
    	partial void MandatoryChanged();
    	public bool Mandatory
    	{
    		get { return _mandatory; }
    		set
    		{
    			if (_mandatory != value)
    			{
    				ChangeTracker.RecordOriginalValue("Mandatory", _mandatory);
    				_mandatory = value;
    				MandatoryChanged();
    				OnPropertyChanged("Mandatory");
    			}
    		}
    	}
    	private bool _mandatory;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<ProductPrice> ProductPrices
    	{
    		get
    		{
    			if (_productPrices == null)
    			{
    				_productPrices = new TrackableCollection<ProductPrice>();
    				_productPrices.CollectionChanged += FixupProductPrices;
    				_productPrices.CollectionChanged += RaiseProductPricesChanged;
    			}
    			return _productPrices;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productPrices, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productPrices != null)
    				{
    					_productPrices.CollectionChanged -= FixupProductPrices;
    					_productPrices.CollectionChanged -= RaiseProductPricesChanged;
    				}
    				_productPrices = value;
    				if (_productPrices != null)
    				{
    					_productPrices.CollectionChanged += FixupProductPrices;
    					_productPrices.CollectionChanged += RaiseProductPricesChanged;
    				}
    				OnNavigationPropertyChanged("ProductPrices");
    			}
    		}
    	}
    	private TrackableCollection<ProductPrice> _productPrices;
    	partial void ProductPricesChanged();
    	private void RaiseProductPricesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPricesChanged();
    	}
    
    	public TrackableCollection<AccountPriceType> AccountPriceTypes
    	{
    		get
    		{
    			if (_accountPriceTypes == null)
    			{
    				_accountPriceTypes = new TrackableCollection<AccountPriceType>();
    				_accountPriceTypes.CollectionChanged += FixupAccountPriceTypes;
    				_accountPriceTypes.CollectionChanged += RaiseAccountPriceTypesChanged;
    			}
    			return _accountPriceTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPriceTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPriceTypes != null)
    				{
    					_accountPriceTypes.CollectionChanged -= FixupAccountPriceTypes;
    					_accountPriceTypes.CollectionChanged -= RaiseAccountPriceTypesChanged;
    				}
    				_accountPriceTypes = value;
    				if (_accountPriceTypes != null)
    				{
    					_accountPriceTypes.CollectionChanged += FixupAccountPriceTypes;
    					_accountPriceTypes.CollectionChanged += RaiseAccountPriceTypesChanged;
    				}
    				OnNavigationPropertyChanged("AccountPriceTypes");
    			}
    		}
    	}
    	private TrackableCollection<AccountPriceType> _accountPriceTypes;
    	partial void AccountPriceTypesChanged();
    	private void RaiseAccountPriceTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPriceTypesChanged();
    	}
    
    	public TrackableCollection<OrderItem> OrderItems
    	{
    		get
    		{
    			if (_orderItems == null)
    			{
    				_orderItems = new TrackableCollection<OrderItem>();
    				_orderItems.CollectionChanged += FixupOrderItems;
    				_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    			}
    			return _orderItems;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderItems, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged -= FixupOrderItems;
    					_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    				}
    				_orderItems = value;
    				if (_orderItems != null)
    				{
    					_orderItems.CollectionChanged += FixupOrderItems;
    					_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    				}
    				OnNavigationPropertyChanged("OrderItems");
    			}
    		}
    	}
    	private TrackableCollection<OrderItem> _orderItems;
    	partial void OrderItemsChanged();
    	private void RaiseOrderItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderItemsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_productPrices != null)
    		{
    			_productPrices.CollectionChanged -= FixupProductPrices;
    			_productPrices.CollectionChanged -= RaiseProductPricesChanged;
    			_productPrices.CollectionChanged += FixupProductPrices;
    			_productPrices.CollectionChanged += RaiseProductPricesChanged;
    		}
    		if (_accountPriceTypes != null)
    		{
    			_accountPriceTypes.CollectionChanged -= FixupAccountPriceTypes;
    			_accountPriceTypes.CollectionChanged -= RaiseAccountPriceTypesChanged;
    			_accountPriceTypes.CollectionChanged += FixupAccountPriceTypes;
    			_accountPriceTypes.CollectionChanged += RaiseAccountPriceTypesChanged;
    		}
    		if (_orderItems != null)
    		{
    			_orderItems.CollectionChanged -= FixupOrderItems;
    			_orderItems.CollectionChanged -= RaiseOrderItemsChanged;
    			_orderItems.CollectionChanged += FixupOrderItems;
    			_orderItems.CollectionChanged += RaiseOrderItemsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductPrices.Clear();
    		AccountPriceTypes.Clear();
    		OrderItems.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductPrices(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductPrice item in e.NewItems)
    			{
    				item.ProductPriceType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductPrices", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductPrice item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPriceType, this))
    				{
    					item.ProductPriceType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductPrices", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPriceTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPriceType item in e.NewItems)
    			{
    				item.ProductPriceType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPriceTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPriceType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPriceType, this))
    				{
    					item.ProductPriceType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPriceTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderItems(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderItem item in e.NewItems)
    			{
    				item.ProductPriceType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderItem item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPriceType, this))
    				{
    					item.ProductPriceType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderItems", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(HtmlSection))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(Page))]
    [KnownType(typeof(PageType))]
    [Serializable]
    public partial class Layout: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void LayoutIDChanged();
    	public int LayoutID
    	{
    		get { return _layoutID; }
    		set
    		{
    			if (_layoutID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'LayoutID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_layoutID = value;
    				LayoutIDChanged();
    				OnPropertyChanged("LayoutID");
    			}
    		}
    	}
    	private int _layoutID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ViewNameChanged();
    	public string ViewName
    	{
    		get { return _viewName; }
    		set
    		{
    			if (_viewName != value)
    			{
    				ChangeTracker.RecordOriginalValue("ViewName", _viewName);
    				_viewName = value;
    				ViewNameChanged();
    				OnPropertyChanged("ViewName");
    			}
    		}
    	}
    	private string _viewName;
    	partial void ThumbnailPathChanged();
    	public string ThumbnailPath
    	{
    		get { return _thumbnailPath; }
    		set
    		{
    			if (_thumbnailPath != value)
    			{
    				ChangeTracker.RecordOriginalValue("ThumbnailPath", _thumbnailPath);
    				_thumbnailPath = value;
    				ThumbnailPathChanged();
    				OnPropertyChanged("ThumbnailPath");
    			}
    		}
    	}
    	private string _thumbnailPath;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<HtmlSection> HtmlSections
    	{
    		get
    		{
    			if (_htmlSections == null)
    			{
    				_htmlSections = new TrackableCollection<HtmlSection>();
    				_htmlSections.CollectionChanged += FixupHtmlSections;
    				_htmlSections.CollectionChanged += RaiseHtmlSectionsChanged;
    			}
    			return _htmlSections;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlSections, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlSections != null)
    				{
    					_htmlSections.CollectionChanged -= FixupHtmlSections;
    					_htmlSections.CollectionChanged -= RaiseHtmlSectionsChanged;
    				}
    				_htmlSections = value;
    				if (_htmlSections != null)
    				{
    					_htmlSections.CollectionChanged += FixupHtmlSections;
    					_htmlSections.CollectionChanged += RaiseHtmlSectionsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlSections");
    			}
    		}
    	}
    	private TrackableCollection<HtmlSection> _htmlSections;
    	partial void HtmlSectionsChanged();
    	private void RaiseHtmlSectionsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlSectionsChanged();
    	}
    
    	public TrackableCollection<Site> Sites
    	{
    		get
    		{
    			if (_sites == null)
    			{
    				_sites = new TrackableCollection<Site>();
    				_sites.CollectionChanged += FixupSites;
    				_sites.CollectionChanged += RaiseSitesChanged;
    			}
    			return _sites;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites != null)
    				{
    					_sites.CollectionChanged -= FixupSites;
    					_sites.CollectionChanged -= RaiseSitesChanged;
    				}
    				_sites = value;
    				if (_sites != null)
    				{
    					_sites.CollectionChanged += FixupSites;
    					_sites.CollectionChanged += RaiseSitesChanged;
    				}
    				OnNavigationPropertyChanged("Sites");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites;
    	partial void SitesChanged();
    	private void RaiseSitesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SitesChanged();
    	}
    
    	public TrackableCollection<Page> Pages
    	{
    		get
    		{
    			if (_pages == null)
    			{
    				_pages = new TrackableCollection<Page>();
    				_pages.CollectionChanged += FixupPages;
    				_pages.CollectionChanged += RaisePagesChanged;
    			}
    			return _pages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_pages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_pages != null)
    				{
    					_pages.CollectionChanged -= FixupPages;
    					_pages.CollectionChanged -= RaisePagesChanged;
    				}
    				_pages = value;
    				if (_pages != null)
    				{
    					_pages.CollectionChanged += FixupPages;
    					_pages.CollectionChanged += RaisePagesChanged;
    				}
    				OnNavigationPropertyChanged("Pages");
    			}
    		}
    	}
    	private TrackableCollection<Page> _pages;
    	partial void PagesChanged();
    	private void RaisePagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PagesChanged();
    	}
    
    	public TrackableCollection<PageType> PageTypes
    	{
    		get
    		{
    			if (_pageTypes == null)
    			{
    				_pageTypes = new TrackableCollection<PageType>();
    				_pageTypes.CollectionChanged += FixupPageTypes;
    				_pageTypes.CollectionChanged += RaisePageTypesChanged;
    			}
    			return _pageTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_pageTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_pageTypes != null)
    				{
    					_pageTypes.CollectionChanged -= FixupPageTypes;
    					_pageTypes.CollectionChanged -= RaisePageTypesChanged;
    				}
    				_pageTypes = value;
    				if (_pageTypes != null)
    				{
    					_pageTypes.CollectionChanged += FixupPageTypes;
    					_pageTypes.CollectionChanged += RaisePageTypesChanged;
    				}
    				OnNavigationPropertyChanged("PageTypes");
    			}
    		}
    	}
    	private TrackableCollection<PageType> _pageTypes;
    	partial void PageTypesChanged();
    	private void RaisePageTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PageTypesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_htmlSections != null)
    		{
    			_htmlSections.CollectionChanged -= FixupHtmlSections;
    			_htmlSections.CollectionChanged -= RaiseHtmlSectionsChanged;
    			_htmlSections.CollectionChanged += FixupHtmlSections;
    			_htmlSections.CollectionChanged += RaiseHtmlSectionsChanged;
    		}
    		if (_sites != null)
    		{
    			_sites.CollectionChanged -= FixupSites;
    			_sites.CollectionChanged -= RaiseSitesChanged;
    			_sites.CollectionChanged += FixupSites;
    			_sites.CollectionChanged += RaiseSitesChanged;
    		}
    		if (_pages != null)
    		{
    			_pages.CollectionChanged -= FixupPages;
    			_pages.CollectionChanged -= RaisePagesChanged;
    			_pages.CollectionChanged += FixupPages;
    			_pages.CollectionChanged += RaisePagesChanged;
    		}
    		if (_pageTypes != null)
    		{
    			_pageTypes.CollectionChanged -= FixupPageTypes;
    			_pageTypes.CollectionChanged -= RaisePageTypesChanged;
    			_pageTypes.CollectionChanged += FixupPageTypes;
    			_pageTypes.CollectionChanged += RaisePageTypesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		HtmlSections.Clear();
    		Sites.Clear();
    		Pages.Clear();
    		PageTypes.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHtmlSections(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlSection item in e.NewItems)
    			{
    				if (!item.Layouts.Contains(this))
    				{
    					item.Layouts.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlSections", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlSection item in e.OldItems)
    			{
    				if (item.Layouts.Contains(this))
    				{
    					item.Layouts.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlSections", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				if (!item.Layouts.Contains(this))
    				{
    					item.Layouts.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (item.Layouts.Contains(this))
    				{
    					item.Layouts.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Page item in e.NewItems)
    			{
    				item.Layout = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Pages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Page item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Layout, this))
    				{
    					item.Layout = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Pages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPageTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PageType item in e.NewItems)
    			{
    				if (!item.Layouts.Contains(this))
    				{
    					item.Layouts.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PageTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PageType item in e.OldItems)
    			{
    				if (item.Layouts.Contains(this))
    				{
    					item.Layouts.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PageTypes", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

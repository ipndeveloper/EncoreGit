//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ApplicationUsageLog))]
    [KnownType(typeof(ApplicationRunningInstance))]
    [Serializable]
    public partial class Application: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ApplicationIDChanged();
    	public short ApplicationID
    	{
    		get { return _applicationID; }
    		set
    		{
    			if (_applicationID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ApplicationID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_applicationID = value;
    				ApplicationIDChanged();
    				OnPropertyChanged("ApplicationID");
    			}
    		}
    	}
    	private short _applicationID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<ApplicationUsageLog> ApplicationUsageLogs
    	{
    		get
    		{
    			if (_applicationUsageLogs == null)
    			{
    				_applicationUsageLogs = new TrackableCollection<ApplicationUsageLog>();
    				_applicationUsageLogs.CollectionChanged += FixupApplicationUsageLogs;
    				_applicationUsageLogs.CollectionChanged += RaiseApplicationUsageLogsChanged;
    			}
    			return _applicationUsageLogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_applicationUsageLogs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_applicationUsageLogs != null)
    				{
    					_applicationUsageLogs.CollectionChanged -= FixupApplicationUsageLogs;
    					_applicationUsageLogs.CollectionChanged -= RaiseApplicationUsageLogsChanged;
    				}
    				_applicationUsageLogs = value;
    				if (_applicationUsageLogs != null)
    				{
    					_applicationUsageLogs.CollectionChanged += FixupApplicationUsageLogs;
    					_applicationUsageLogs.CollectionChanged += RaiseApplicationUsageLogsChanged;
    				}
    				OnNavigationPropertyChanged("ApplicationUsageLogs");
    			}
    		}
    	}
    	private TrackableCollection<ApplicationUsageLog> _applicationUsageLogs;
    	partial void ApplicationUsageLogsChanged();
    	private void RaiseApplicationUsageLogsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ApplicationUsageLogsChanged();
    	}
    
    	public TrackableCollection<ApplicationRunningInstance> ApplicationRunningInstances
    	{
    		get
    		{
    			if (_applicationRunningInstances == null)
    			{
    				_applicationRunningInstances = new TrackableCollection<ApplicationRunningInstance>();
    				_applicationRunningInstances.CollectionChanged += FixupApplicationRunningInstances;
    				_applicationRunningInstances.CollectionChanged += RaiseApplicationRunningInstancesChanged;
    			}
    			return _applicationRunningInstances;
    		}
    		set
    		{
    			if (!ReferenceEquals(_applicationRunningInstances, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_applicationRunningInstances != null)
    				{
    					_applicationRunningInstances.CollectionChanged -= FixupApplicationRunningInstances;
    					_applicationRunningInstances.CollectionChanged -= RaiseApplicationRunningInstancesChanged;
    				}
    				_applicationRunningInstances = value;
    				if (_applicationRunningInstances != null)
    				{
    					_applicationRunningInstances.CollectionChanged += FixupApplicationRunningInstances;
    					_applicationRunningInstances.CollectionChanged += RaiseApplicationRunningInstancesChanged;
    				}
    				OnNavigationPropertyChanged("ApplicationRunningInstances");
    			}
    		}
    	}
    	private TrackableCollection<ApplicationRunningInstance> _applicationRunningInstances;
    	partial void ApplicationRunningInstancesChanged();
    	private void RaiseApplicationRunningInstancesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ApplicationRunningInstancesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_applicationUsageLogs != null)
    		{
    			_applicationUsageLogs.CollectionChanged -= FixupApplicationUsageLogs;
    			_applicationUsageLogs.CollectionChanged -= RaiseApplicationUsageLogsChanged;
    			_applicationUsageLogs.CollectionChanged += FixupApplicationUsageLogs;
    			_applicationUsageLogs.CollectionChanged += RaiseApplicationUsageLogsChanged;
    		}
    		if (_applicationRunningInstances != null)
    		{
    			_applicationRunningInstances.CollectionChanged -= FixupApplicationRunningInstances;
    			_applicationRunningInstances.CollectionChanged -= RaiseApplicationRunningInstancesChanged;
    			_applicationRunningInstances.CollectionChanged += FixupApplicationRunningInstances;
    			_applicationRunningInstances.CollectionChanged += RaiseApplicationRunningInstancesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ApplicationUsageLogs.Clear();
    		ApplicationRunningInstances.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupApplicationUsageLogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ApplicationUsageLog item in e.NewItems)
    			{
    				item.Application = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ApplicationUsageLogs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ApplicationUsageLog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Application, this))
    				{
    					item.Application = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ApplicationUsageLogs", item);
    				}
    			}
    		}
    	}
    
    	private void FixupApplicationRunningInstances(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ApplicationRunningInstance item in e.NewItems)
    			{
    				item.Application = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ApplicationRunningInstances", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ApplicationRunningInstance item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Application, this))
    				{
    					item.Application = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ApplicationRunningInstances", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(HtmlElement))]
    [Serializable]
    public partial class HtmlElementType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void HtmlElementTypeIDChanged();
    	public byte HtmlElementTypeID
    	{
    		get { return _htmlElementTypeID; }
    		set
    		{
    			if (_htmlElementTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'HtmlElementTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_htmlElementTypeID = value;
    				HtmlElementTypeIDChanged();
    				OnPropertyChanged("HtmlElementTypeID");
    			}
    		}
    	}
    	private byte _htmlElementTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void ContainerTagNameChanged();
    	public string ContainerTagName
    	{
    		get { return _containerTagName; }
    		set
    		{
    			if (_containerTagName != value)
    			{
    				ChangeTracker.RecordOriginalValue("ContainerTagName", _containerTagName);
    				_containerTagName = value;
    				ContainerTagNameChanged();
    				OnPropertyChanged("ContainerTagName");
    			}
    		}
    	}
    	private string _containerTagName;
    	partial void ContainerCssClassChanged();
    	public string ContainerCssClass
    	{
    		get { return _containerCssClass; }
    		set
    		{
    			if (_containerCssClass != value)
    			{
    				ChangeTracker.RecordOriginalValue("ContainerCssClass", _containerCssClass);
    				_containerCssClass = value;
    				ContainerCssClassChanged();
    				OnPropertyChanged("ContainerCssClass");
    			}
    		}
    	}
    	private string _containerCssClass;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<HtmlElement> HtmlElements
    	{
    		get
    		{
    			if (_htmlElements == null)
    			{
    				_htmlElements = new TrackableCollection<HtmlElement>();
    				_htmlElements.CollectionChanged += FixupHtmlElements;
    				_htmlElements.CollectionChanged += RaiseHtmlElementsChanged;
    			}
    			return _htmlElements;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlElements, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlElements != null)
    				{
    					_htmlElements.CollectionChanged -= FixupHtmlElements;
    					_htmlElements.CollectionChanged -= RaiseHtmlElementsChanged;
    				}
    				_htmlElements = value;
    				if (_htmlElements != null)
    				{
    					_htmlElements.CollectionChanged += FixupHtmlElements;
    					_htmlElements.CollectionChanged += RaiseHtmlElementsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlElements");
    			}
    		}
    	}
    	private TrackableCollection<HtmlElement> _htmlElements;
    	partial void HtmlElementsChanged();
    	private void RaiseHtmlElementsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlElementsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_htmlElements != null)
    		{
    			_htmlElements.CollectionChanged -= FixupHtmlElements;
    			_htmlElements.CollectionChanged -= RaiseHtmlElementsChanged;
    			_htmlElements.CollectionChanged += FixupHtmlElements;
    			_htmlElements.CollectionChanged += RaiseHtmlElementsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		HtmlElements.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHtmlElements(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlElement item in e.NewItems)
    			{
    				item.HtmlElementType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlElements", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlElement item in e.OldItems)
    			{
    				if (ReferenceEquals(item.HtmlElementType, this))
    				{
    					item.HtmlElementType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlElements", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

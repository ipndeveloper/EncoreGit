//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderItem))]
    [KnownType(typeof(OrderShipmentPackage))]
    [Serializable]
    public partial class OrderShipmentPackageItem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void OrderShipmentPackageItemIDChanged();
    	public int OrderShipmentPackageItemID
    	{
    		get { return _orderShipmentPackageItemID; }
    		set
    		{
    			if (_orderShipmentPackageItemID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'OrderShipmentPackageItemID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_orderShipmentPackageItemID = value;
    				OrderShipmentPackageItemIDChanged();
    				OnPropertyChanged("OrderShipmentPackageItemID");
    			}
    		}
    	}
    	private int _orderShipmentPackageItemID;
    	partial void OrderShipmentPackageIDChanged();
    	public int OrderShipmentPackageID
    	{
    		get { return _orderShipmentPackageID; }
    		set
    		{
    			if (_orderShipmentPackageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderShipmentPackageID", _orderShipmentPackageID);
    				if (!IsDeserializing)
    				{
    					if (OrderShipmentPackage != null && OrderShipmentPackage.OrderShipmentPackageID != value)
    					{
    						OrderShipmentPackage = null;
    					}
    				}
    				_orderShipmentPackageID = value;
    				OrderShipmentPackageIDChanged();
    				OnPropertyChanged("OrderShipmentPackageID");
    			}
    		}
    	}
    	private int _orderShipmentPackageID;
    	partial void OrderItemIDChanged();
    	public int OrderItemID
    	{
    		get { return _orderItemID; }
    		set
    		{
    			if (_orderItemID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderItemID", _orderItemID);
    				if (!IsDeserializing)
    				{
    					if (OrderItem != null && OrderItem.OrderItemID != value)
    					{
    						OrderItem = null;
    					}
    				}
    				_orderItemID = value;
    				OrderItemIDChanged();
    				OnPropertyChanged("OrderItemID");
    			}
    		}
    	}
    	private int _orderItemID;
    	partial void QuantityChanged();
    	public int Quantity
    	{
    		get { return _quantity; }
    		set
    		{
    			if (_quantity != value)
    			{
    				ChangeTracker.RecordOriginalValue("Quantity", _quantity);
    				_quantity = value;
    				QuantityChanged();
    				OnPropertyChanged("Quantity");
    			}
    		}
    	}
    	private int _quantity;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public OrderItem OrderItem
    	{
    		get { return _orderItem; }
    		set
    		{
    			if (!ReferenceEquals(_orderItem, value))
    			{
    				var previousValue = _orderItem;
    				_orderItem = value;
    				FixupOrderItem(previousValue);
    				OnNavigationPropertyChanged("OrderItem");
    			}
    		}
    	}
    	private OrderItem _orderItem;
    
    	public OrderShipmentPackage OrderShipmentPackage
    	{
    		get { return _orderShipmentPackage; }
    		set
    		{
    			if (!ReferenceEquals(_orderShipmentPackage, value))
    			{
    				var previousValue = _orderShipmentPackage;
    				_orderShipmentPackage = value;
    				FixupOrderShipmentPackage(previousValue);
    				OnNavigationPropertyChanged("OrderShipmentPackage");
    			}
    		}
    	}
    	private OrderShipmentPackage _orderShipmentPackage;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderItem = null;
    		OrderShipmentPackage = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderItem(OrderItem previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderShipmentPackageItems.Contains(this))
    		{
    			previousValue.OrderShipmentPackageItems.Remove(this);
    		}
    
    		if (OrderItem != null)
    		{
    			if (!OrderItem.OrderShipmentPackageItems.Contains(this))
    			{
    				OrderItem.OrderShipmentPackageItems.Add(this);
    			}
    
    			OrderItemID = OrderItem.OrderItemID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderItem")
    				&& (ChangeTracker.OriginalValues["OrderItem"] == OrderItem))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderItem");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderItem", previousValue);
    			}
    			if (OrderItem != null && !OrderItem.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderItem.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderShipmentPackage(OrderShipmentPackage previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.OrderShipmentPackageItems.Contains(this))
    		{
    			previousValue.OrderShipmentPackageItems.Remove(this);
    		}
    
    		if (OrderShipmentPackage != null)
    		{
    			if (!OrderShipmentPackage.OrderShipmentPackageItems.Contains(this))
    			{
    				OrderShipmentPackage.OrderShipmentPackageItems.Add(this);
    			}
    
    			OrderShipmentPackageID = OrderShipmentPackage.OrderShipmentPackageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("OrderShipmentPackage")
    				&& (ChangeTracker.OriginalValues["OrderShipmentPackage"] == OrderShipmentPackage))
    			{
    				ChangeTracker.OriginalValues.Remove("OrderShipmentPackage");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("OrderShipmentPackage", previousValue);
    			}
    			if (OrderShipmentPackage != null && !OrderShipmentPackage.ChangeTracker.ChangeTrackingEnabled)
    			{
    				OrderShipmentPackage.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

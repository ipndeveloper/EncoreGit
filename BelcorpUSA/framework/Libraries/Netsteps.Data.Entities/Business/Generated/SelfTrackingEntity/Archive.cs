//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ArchiveType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Category))]
    [KnownType(typeof(DescriptionTranslation))]
    [KnownType(typeof(Language))]
    [KnownType(typeof(Site))]
    [Serializable]
    public partial class Archive: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ArchiveIDChanged();
    	public int ArchiveID
    	{
    		get { return _archiveID; }
    		set
    		{
    			if (_archiveID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ArchiveID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_archiveID = value;
    				ArchiveIDChanged();
    				OnPropertyChanged("ArchiveID");
    			}
    		}
    	}
    	private int _archiveID;
    	partial void ArchiveTypeIDChanged();
    	public short ArchiveTypeID
    	{
    		get { return _archiveTypeID; }
    		set
    		{
    			if (_archiveTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ArchiveTypeID", _archiveTypeID);
    				if (!IsDeserializing)
    				{
    					if (ArchiveType != null && ArchiveType.ArchiveTypeID != value)
    					{
    						ArchiveType = null;
    					}
    				}
    				_archiveTypeID = value;
    				ArchiveTypeIDChanged();
    				OnPropertyChanged("ArchiveTypeID");
    			}
    		}
    	}
    	private short _archiveTypeID;
    	partial void ArchiveDateUTCChanged();
    	public Nullable<System.DateTime> ArchiveDateUTC
    	{
    		get { return _archiveDateUTC; }
    		set
    		{
    			if (_archiveDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ArchiveDateUTC", _archiveDateUTC);
    				_archiveDateUTC = value;
    				ArchiveDateUTCChanged();
    				OnPropertyChanged("ArchiveDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _archiveDateUTC;
    	partial void StartDateUTCChanged();
    	public Nullable<System.DateTime> StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void ArchiveIconChanged();
    	public string ArchiveIcon
    	{
    		get { return _archiveIcon; }
    		set
    		{
    			if (_archiveIcon != value)
    			{
    				ChangeTracker.RecordOriginalValue("ArchiveIcon", _archiveIcon);
    				_archiveIcon = value;
    				ArchiveIconChanged();
    				OnPropertyChanged("ArchiveIcon");
    			}
    		}
    	}
    	private string _archiveIcon;
    	partial void ArchiveImageChanged();
    	public string ArchiveImage
    	{
    		get { return _archiveImage; }
    		set
    		{
    			if (_archiveImage != value)
    			{
    				ChangeTracker.RecordOriginalValue("ArchiveImage", _archiveImage);
    				_archiveImage = value;
    				ArchiveImageChanged();
    				OnPropertyChanged("ArchiveImage");
    			}
    		}
    	}
    	private string _archiveImage;
    	partial void ArchivePathChanged();
    	public string ArchivePath
    	{
    		get { return _archivePath; }
    		set
    		{
    			if (_archivePath != value)
    			{
    				ChangeTracker.RecordOriginalValue("ArchivePath", _archivePath);
    				_archivePath = value;
    				ArchivePathChanged();
    				OnPropertyChanged("ArchivePath");
    			}
    		}
    	}
    	private string _archivePath;
    	partial void TotalDownloadsChanged();
    	public int TotalDownloads
    	{
    		get { return _totalDownloads; }
    		set
    		{
    			if (_totalDownloads != value)
    			{
    				ChangeTracker.RecordOriginalValue("TotalDownloads", _totalDownloads);
    				_totalDownloads = value;
    				TotalDownloadsChanged();
    				OnPropertyChanged("TotalDownloads");
    			}
    		}
    	}
    	private int _totalDownloads;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void IsEmailableChanged();
    	public bool IsEmailable
    	{
    		get { return _isEmailable; }
    		set
    		{
    			if (_isEmailable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsEmailable", _isEmailable);
    				_isEmailable = value;
    				IsEmailableChanged();
    				OnPropertyChanged("IsEmailable");
    			}
    		}
    	}
    	private bool _isEmailable;
    	partial void IsDownloadableChanged();
    	public bool IsDownloadable
    	{
    		get { return _isDownloadable; }
    		set
    		{
    			if (_isDownloadable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsDownloadable", _isDownloadable);
    				_isDownloadable = value;
    				IsDownloadableChanged();
    				OnPropertyChanged("IsDownloadable");
    			}
    		}
    	}
    	private bool _isDownloadable;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void AccessibilityInfoChanged();
    	public string AccessibilityInfo
    	{
    		get { return _accessibilityInfo; }
    		set
    		{
    			if (_accessibilityInfo != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccessibilityInfo", _accessibilityInfo);
    				_accessibilityInfo = value;
    				AccessibilityInfoChanged();
    				OnPropertyChanged("AccessibilityInfo");
    			}
    		}
    	}
    	private string _accessibilityInfo;
    	partial void LanguageIDChanged();
    	public int LanguageID
    	{
    		get { return _languageID; }
    		set
    		{
    			if (_languageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("LanguageID", _languageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_languageID = value;
    				LanguageIDChanged();
    				OnPropertyChanged("LanguageID");
    			}
    		}
    	}
    	private int _languageID;
    	partial void IsFeaturedChanged();
    	public bool IsFeatured
    	{
    		get { return _isFeatured; }
    		set
    		{
    			if (_isFeatured != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsFeatured", _isFeatured);
    				_isFeatured = value;
    				IsFeaturedChanged();
    				OnPropertyChanged("IsFeatured");
    			}
    		}
    	}
    	private bool _isFeatured;

        #endregion
        #region Navigation Properties
    
    	public ArchiveType ArchiveType
    	{
    		get { return _archiveType; }
    		set
    		{
    			if (!ReferenceEquals(_archiveType, value))
    			{
    				var previousValue = _archiveType;
    				_archiveType = value;
    				FixupArchiveType(previousValue);
    				OnNavigationPropertyChanged("ArchiveType");
    			}
    		}
    	}
    	private ArchiveType _archiveType;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<Category> Categories
    	{
    		get
    		{
    			if (_categories == null)
    			{
    				_categories = new TrackableCollection<Category>();
    				_categories.CollectionChanged += FixupCategories;
    				_categories.CollectionChanged += RaiseCategoriesChanged;
    			}
    			return _categories;
    		}
    		set
    		{
    			if (!ReferenceEquals(_categories, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_categories != null)
    				{
    					_categories.CollectionChanged -= FixupCategories;
    					_categories.CollectionChanged -= RaiseCategoriesChanged;
    				}
    				_categories = value;
    				if (_categories != null)
    				{
    					_categories.CollectionChanged += FixupCategories;
    					_categories.CollectionChanged += RaiseCategoriesChanged;
    				}
    				OnNavigationPropertyChanged("Categories");
    			}
    		}
    	}
    	private TrackableCollection<Category> _categories;
    	partial void CategoriesChanged();
    	private void RaiseCategoriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CategoriesChanged();
    	}
    
    	public TrackableCollection<DescriptionTranslation> Translations
    	{
    		get
    		{
    			if (_translations == null)
    			{
    				_translations = new TrackableCollection<DescriptionTranslation>();
    				_translations.CollectionChanged += FixupTranslations;
    				_translations.CollectionChanged += RaiseTranslationsChanged;
    			}
    			return _translations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_translations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_translations != null)
    				{
    					_translations.CollectionChanged -= FixupTranslations;
    					_translations.CollectionChanged -= RaiseTranslationsChanged;
    				}
    				_translations = value;
    				if (_translations != null)
    				{
    					_translations.CollectionChanged += FixupTranslations;
    					_translations.CollectionChanged += RaiseTranslationsChanged;
    				}
    				OnNavigationPropertyChanged("Translations");
    			}
    		}
    	}
    	private TrackableCollection<DescriptionTranslation> _translations;
    	partial void TranslationsChanged();
    	private void RaiseTranslationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		TranslationsChanged();
    	}
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public TrackableCollection<Site> Sites
    	{
    		get
    		{
    			if (_sites == null)
    			{
    				_sites = new TrackableCollection<Site>();
    				_sites.CollectionChanged += FixupSites;
    				_sites.CollectionChanged += RaiseSitesChanged;
    			}
    			return _sites;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites != null)
    				{
    					_sites.CollectionChanged -= FixupSites;
    					_sites.CollectionChanged -= RaiseSitesChanged;
    				}
    				_sites = value;
    				if (_sites != null)
    				{
    					_sites.CollectionChanged += FixupSites;
    					_sites.CollectionChanged += RaiseSitesChanged;
    				}
    				OnNavigationPropertyChanged("Sites");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites;
    	partial void SitesChanged();
    	private void RaiseSitesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SitesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_categories != null)
    		{
    			_categories.CollectionChanged -= FixupCategories;
    			_categories.CollectionChanged -= RaiseCategoriesChanged;
    			_categories.CollectionChanged += FixupCategories;
    			_categories.CollectionChanged += RaiseCategoriesChanged;
    		}
    		if (_translations != null)
    		{
    			_translations.CollectionChanged -= FixupTranslations;
    			_translations.CollectionChanged -= RaiseTranslationsChanged;
    			_translations.CollectionChanged += FixupTranslations;
    			_translations.CollectionChanged += RaiseTranslationsChanged;
    		}
    		if (_sites != null)
    		{
    			_sites.CollectionChanged -= FixupSites;
    			_sites.CollectionChanged -= RaiseSitesChanged;
    			_sites.CollectionChanged += FixupSites;
    			_sites.CollectionChanged += RaiseSitesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ArchiveType = null;
    		User = null;
    		Categories.Clear();
    		Translations.Clear();
    		Language = null;
    		Sites.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupArchiveType(ArchiveType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Archives.Contains(this))
    		{
    			previousValue.Archives.Remove(this);
    		}
    
    		if (ArchiveType != null)
    		{
    			if (!ArchiveType.Archives.Contains(this))
    			{
    				ArchiveType.Archives.Add(this);
    			}
    
    			ArchiveTypeID = ArchiveType.ArchiveTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ArchiveType")
    				&& (ChangeTracker.OriginalValues["ArchiveType"] == ArchiveType))
    			{
    				ChangeTracker.OriginalValues.Remove("ArchiveType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ArchiveType", previousValue);
    			}
    			if (ArchiveType != null && !ArchiveType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ArchiveType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Archives.Contains(this))
    		{
    			previousValue.Archives.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Archives.Contains(this))
    			{
    				User.Archives.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupLanguage(Language previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Archives.Contains(this))
    		{
    			previousValue.Archives.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.Archives.Contains(this))
    			{
    				Language.Archives.Add(this);
    			}
    
    			LanguageID = Language.LanguageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCategories(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Category item in e.NewItems)
    			{
    				if (!item.Archives.Contains(this))
    				{
    					item.Archives.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Categories", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Category item in e.OldItems)
    			{
    				if (item.Archives.Contains(this))
    				{
    					item.Archives.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Categories", item);
    				}
    			}
    		}
    	}
    
    	private void FixupTranslations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DescriptionTranslation item in e.NewItems)
    			{
    				if (!item.Archives.Contains(this))
    				{
    					item.Archives.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Translations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DescriptionTranslation item in e.OldItems)
    			{
    				if (item.Archives.Contains(this))
    				{
    					item.Archives.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Translations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				if (!item.Archives.Contains(this))
    				{
    					item.Archives.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (item.Archives.Contains(this))
    				{
    					item.Archives.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

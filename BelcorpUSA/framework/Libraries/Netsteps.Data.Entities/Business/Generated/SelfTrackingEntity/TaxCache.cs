//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Country))]
    [KnownType(typeof(TaxCategory))]
    [KnownType(typeof(TaxDataSource))]
    [KnownType(typeof(Address))]
    [Serializable]
    public partial class TaxCache: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void TaxCacheIDChanged();
    	public int TaxCacheID
    	{
    		get { return _taxCacheID; }
    		set
    		{
    			if (_taxCacheID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'TaxCacheID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_taxCacheID = value;
    				TaxCacheIDChanged();
    				OnPropertyChanged("TaxCacheID");
    			}
    		}
    	}
    	private int _taxCacheID;
    	partial void TaxDataSourceIDChanged();
    	public Nullable<short> TaxDataSourceID
    	{
    		get { return _taxDataSourceID; }
    		set
    		{
    			if (_taxDataSourceID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxDataSourceID", _taxDataSourceID);
    				if (!IsDeserializing)
    				{
    					if (TaxDataSource != null && TaxDataSource.TaxDataSourceID != value)
    					{
    						TaxDataSource = null;
    					}
    				}
    				_taxDataSourceID = value;
    				TaxDataSourceIDChanged();
    				OnPropertyChanged("TaxDataSourceID");
    			}
    		}
    	}
    	private Nullable<short> _taxDataSourceID;
    	partial void WarehouseAddressIDChanged();
    	public Nullable<int> WarehouseAddressID
    	{
    		get { return _warehouseAddressID; }
    		set
    		{
    			if (_warehouseAddressID != value)
    			{
    				ChangeTracker.RecordOriginalValue("WarehouseAddressID", _warehouseAddressID);
    				if (!IsDeserializing)
    				{
    					if (Address != null && Address.AddressID != value)
    					{
    						Address = null;
    					}
    				}
    				_warehouseAddressID = value;
    				WarehouseAddressIDChanged();
    				OnPropertyChanged("WarehouseAddressID");
    			}
    		}
    	}
    	private Nullable<int> _warehouseAddressID;
    	partial void TaxCategoryIDChanged();
    	public Nullable<int> TaxCategoryID
    	{
    		get { return _taxCategoryID; }
    		set
    		{
    			if (_taxCategoryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxCategoryID", _taxCategoryID);
    				if (!IsDeserializing)
    				{
    					if (TaxCategory != null && TaxCategory.TaxCategoryID != value)
    					{
    						TaxCategory = null;
    					}
    				}
    				_taxCategoryID = value;
    				TaxCategoryIDChanged();
    				OnPropertyChanged("TaxCategoryID");
    			}
    		}
    	}
    	private Nullable<int> _taxCategoryID;
    	partial void PostalCodeChanged();
    	public string PostalCode
    	{
    		get { return _postalCode; }
    		set
    		{
    			if (_postalCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("PostalCode", _postalCode);
    				_postalCode = value;
    				PostalCodeChanged();
    				OnPropertyChanged("PostalCode");
    			}
    		}
    	}
    	private string _postalCode;
    	partial void StateChanged();
    	public string State
    	{
    		get { return _state; }
    		set
    		{
    			if (_state != value)
    			{
    				ChangeTracker.RecordOriginalValue("State", _state);
    				_state = value;
    				StateChanged();
    				OnPropertyChanged("State");
    			}
    		}
    	}
    	private string _state;
    	partial void StateAbbreviationChanged();
    	public string StateAbbreviation
    	{
    		get { return _stateAbbreviation; }
    		set
    		{
    			if (_stateAbbreviation != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateAbbreviation", _stateAbbreviation);
    				_stateAbbreviation = value;
    				StateAbbreviationChanged();
    				OnPropertyChanged("StateAbbreviation");
    			}
    		}
    	}
    	private string _stateAbbreviation;
    	partial void CityChanged();
    	public string City
    	{
    		get { return _city; }
    		set
    		{
    			if (_city != value)
    			{
    				ChangeTracker.RecordOriginalValue("City", _city);
    				_city = value;
    				CityChanged();
    				OnPropertyChanged("City");
    			}
    		}
    	}
    	private string _city;
    	partial void CountyChanged();
    	public string County
    	{
    		get { return _county; }
    		set
    		{
    			if (_county != value)
    			{
    				ChangeTracker.RecordOriginalValue("County", _county);
    				_county = value;
    				CountyChanged();
    				OnPropertyChanged("County");
    			}
    		}
    	}
    	private string _county;
    	partial void CountryIDChanged();
    	public Nullable<int> CountryID
    	{
    		get { return _countryID; }
    		set
    		{
    			if (_countryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryID", _countryID);
    				if (!IsDeserializing)
    				{
    					if (Country != null && Country.CountryID != value)
    					{
    						Country = null;
    					}
    				}
    				_countryID = value;
    				CountryIDChanged();
    				OnPropertyChanged("CountryID");
    			}
    		}
    	}
    	private Nullable<int> _countryID;
    	partial void CountyFIPSChanged();
    	public string CountyFIPS
    	{
    		get { return _countyFIPS; }
    		set
    		{
    			if (_countyFIPS != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyFIPS", _countyFIPS);
    				_countyFIPS = value;
    				CountyFIPSChanged();
    				OnPropertyChanged("CountyFIPS");
    			}
    		}
    	}
    	private string _countyFIPS;
    	partial void CitySalesTaxChanged();
    	public decimal CitySalesTax
    	{
    		get { return _citySalesTax; }
    		set
    		{
    			if (_citySalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CitySalesTax", _citySalesTax);
    				_citySalesTax = value;
    				CitySalesTaxChanged();
    				OnPropertyChanged("CitySalesTax");
    			}
    		}
    	}
    	private decimal _citySalesTax;
    	partial void CityUseTaxChanged();
    	public Nullable<decimal> CityUseTax
    	{
    		get { return _cityUseTax; }
    		set
    		{
    			if (_cityUseTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CityUseTax", _cityUseTax);
    				_cityUseTax = value;
    				CityUseTaxChanged();
    				OnPropertyChanged("CityUseTax");
    			}
    		}
    	}
    	private Nullable<decimal> _cityUseTax;
    	partial void CityLocalSalesChanged();
    	public Nullable<decimal> CityLocalSales
    	{
    		get { return _cityLocalSales; }
    		set
    		{
    			if (_cityLocalSales != value)
    			{
    				ChangeTracker.RecordOriginalValue("CityLocalSales", _cityLocalSales);
    				_cityLocalSales = value;
    				CityLocalSalesChanged();
    				OnPropertyChanged("CityLocalSales");
    			}
    		}
    	}
    	private Nullable<decimal> _cityLocalSales;
    	partial void CityLocalUseChanged();
    	public Nullable<decimal> CityLocalUse
    	{
    		get { return _cityLocalUse; }
    		set
    		{
    			if (_cityLocalUse != value)
    			{
    				ChangeTracker.RecordOriginalValue("CityLocalUse", _cityLocalUse);
    				_cityLocalUse = value;
    				CityLocalUseChanged();
    				OnPropertyChanged("CityLocalUse");
    			}
    		}
    	}
    	private Nullable<decimal> _cityLocalUse;
    	partial void CountySalesTaxChanged();
    	public decimal CountySalesTax
    	{
    		get { return _countySalesTax; }
    		set
    		{
    			if (_countySalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountySalesTax", _countySalesTax);
    				_countySalesTax = value;
    				CountySalesTaxChanged();
    				OnPropertyChanged("CountySalesTax");
    			}
    		}
    	}
    	private decimal _countySalesTax;
    	partial void CountyUseTaxChanged();
    	public Nullable<decimal> CountyUseTax
    	{
    		get { return _countyUseTax; }
    		set
    		{
    			if (_countyUseTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyUseTax", _countyUseTax);
    				_countyUseTax = value;
    				CountyUseTaxChanged();
    				OnPropertyChanged("CountyUseTax");
    			}
    		}
    	}
    	private Nullable<decimal> _countyUseTax;
    	partial void CountyLocalSalesChanged();
    	public Nullable<decimal> CountyLocalSales
    	{
    		get { return _countyLocalSales; }
    		set
    		{
    			if (_countyLocalSales != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyLocalSales", _countyLocalSales);
    				_countyLocalSales = value;
    				CountyLocalSalesChanged();
    				OnPropertyChanged("CountyLocalSales");
    			}
    		}
    	}
    	private Nullable<decimal> _countyLocalSales;
    	partial void CountyLocalUseChanged();
    	public Nullable<decimal> CountyLocalUse
    	{
    		get { return _countyLocalUse; }
    		set
    		{
    			if (_countyLocalUse != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyLocalUse", _countyLocalUse);
    				_countyLocalUse = value;
    				CountyLocalUseChanged();
    				OnPropertyChanged("CountyLocalUse");
    			}
    		}
    	}
    	private Nullable<decimal> _countyLocalUse;
    	partial void CountrySalesTaxChanged();
    	public Nullable<decimal> CountrySalesTax
    	{
    		get { return _countrySalesTax; }
    		set
    		{
    			if (_countrySalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountrySalesTax", _countrySalesTax);
    				_countrySalesTax = value;
    				CountrySalesTaxChanged();
    				OnPropertyChanged("CountrySalesTax");
    			}
    		}
    	}
    	private Nullable<decimal> _countrySalesTax;
    	partial void DistrictSalesTaxChanged();
    	public decimal DistrictSalesTax
    	{
    		get { return _districtSalesTax; }
    		set
    		{
    			if (_districtSalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("DistrictSalesTax", _districtSalesTax);
    				_districtSalesTax = value;
    				DistrictSalesTaxChanged();
    				OnPropertyChanged("DistrictSalesTax");
    			}
    		}
    	}
    	private decimal _districtSalesTax;
    	partial void StateSalesTaxChanged();
    	public decimal StateSalesTax
    	{
    		get { return _stateSalesTax; }
    		set
    		{
    			if (_stateSalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateSalesTax", _stateSalesTax);
    				_stateSalesTax = value;
    				StateSalesTaxChanged();
    				OnPropertyChanged("StateSalesTax");
    			}
    		}
    	}
    	private decimal _stateSalesTax;
    	partial void StateUseTaxChanged();
    	public Nullable<decimal> StateUseTax
    	{
    		get { return _stateUseTax; }
    		set
    		{
    			if (_stateUseTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateUseTax", _stateUseTax);
    				_stateUseTax = value;
    				StateUseTaxChanged();
    				OnPropertyChanged("StateUseTax");
    			}
    		}
    	}
    	private Nullable<decimal> _stateUseTax;
    	partial void CombinedSalesTaxChanged();
    	public Nullable<decimal> CombinedSalesTax
    	{
    		get { return _combinedSalesTax; }
    		set
    		{
    			if (_combinedSalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CombinedSalesTax", _combinedSalesTax);
    				_combinedSalesTax = value;
    				CombinedSalesTaxChanged();
    				OnPropertyChanged("CombinedSalesTax");
    			}
    		}
    	}
    	private Nullable<decimal> _combinedSalesTax;
    	partial void CombinedUseTaxChanged();
    	public Nullable<decimal> CombinedUseTax
    	{
    		get { return _combinedUseTax; }
    		set
    		{
    			if (_combinedUseTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CombinedUseTax", _combinedUseTax);
    				_combinedUseTax = value;
    				CombinedUseTaxChanged();
    				OnPropertyChanged("CombinedUseTax");
    			}
    		}
    	}
    	private Nullable<decimal> _combinedUseTax;
    	partial void CountyDefaultChanged();
    	public Nullable<bool> CountyDefault
    	{
    		get { return _countyDefault; }
    		set
    		{
    			if (_countyDefault != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyDefault", _countyDefault);
    				_countyDefault = value;
    				CountyDefaultChanged();
    				OnPropertyChanged("CountyDefault");
    			}
    		}
    	}
    	private Nullable<bool> _countyDefault;
    	partial void GeneralDefaultChanged();
    	public Nullable<bool> GeneralDefault
    	{
    		get { return _generalDefault; }
    		set
    		{
    			if (_generalDefault != value)
    			{
    				ChangeTracker.RecordOriginalValue("GeneralDefault", _generalDefault);
    				_generalDefault = value;
    				GeneralDefaultChanged();
    				OnPropertyChanged("GeneralDefault");
    			}
    		}
    	}
    	private Nullable<bool> _generalDefault;
    	partial void InCityLimitsChanged();
    	public Nullable<bool> InCityLimits
    	{
    		get { return _inCityLimits; }
    		set
    		{
    			if (_inCityLimits != value)
    			{
    				ChangeTracker.RecordOriginalValue("InCityLimits", _inCityLimits);
    				_inCityLimits = value;
    				InCityLimitsChanged();
    				OnPropertyChanged("InCityLimits");
    			}
    		}
    	}
    	private Nullable<bool> _inCityLimits;
    	partial void ChargeTaxOnShippingChanged();
    	public bool ChargeTaxOnShipping
    	{
    		get { return _chargeTaxOnShipping; }
    		set
    		{
    			if (_chargeTaxOnShipping != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChargeTaxOnShipping", _chargeTaxOnShipping);
    				_chargeTaxOnShipping = value;
    				ChargeTaxOnShippingChanged();
    				OnPropertyChanged("ChargeTaxOnShipping");
    			}
    		}
    	}
    	private bool _chargeTaxOnShipping;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void DateCachedUTCChanged();
    	public System.DateTime DateCachedUTC
    	{
    		get { return _dateCachedUTC; }
    		set
    		{
    			if (_dateCachedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCachedUTC", _dateCachedUTC);
    				_dateCachedUTC = value;
    				DateCachedUTCChanged();
    				OnPropertyChanged("DateCachedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCachedUTC;
    	partial void EffectiveDateUTCChanged();
    	public Nullable<System.DateTime> EffectiveDateUTC
    	{
    		get { return _effectiveDateUTC; }
    		set
    		{
    			if (_effectiveDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EffectiveDateUTC", _effectiveDateUTC);
    				_effectiveDateUTC = value;
    				EffectiveDateUTCChanged();
    				OnPropertyChanged("EffectiveDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _effectiveDateUTC;
    	partial void ExpirationDateUTCChanged();
    	public Nullable<System.DateTime> ExpirationDateUTC
    	{
    		get { return _expirationDateUTC; }
    		set
    		{
    			if (_expirationDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpirationDateUTC", _expirationDateUTC);
    				_expirationDateUTC = value;
    				ExpirationDateUTCChanged();
    				OnPropertyChanged("ExpirationDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _expirationDateUTC;
    	partial void LatitudeChanged();
    	public Nullable<double> Latitude
    	{
    		get { return _latitude; }
    		set
    		{
    			if (_latitude != value)
    			{
    				ChangeTracker.RecordOriginalValue("Latitude", _latitude);
    				_latitude = value;
    				LatitudeChanged();
    				OnPropertyChanged("Latitude");
    			}
    		}
    	}
    	private Nullable<double> _latitude;
    	partial void LongitudeChanged();
    	public Nullable<double> Longitude
    	{
    		get { return _longitude; }
    		set
    		{
    			if (_longitude != value)
    			{
    				ChangeTracker.RecordOriginalValue("Longitude", _longitude);
    				_longitude = value;
    				LongitudeChanged();
    				OnPropertyChanged("Longitude");
    			}
    		}
    	}
    	private Nullable<double> _longitude;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void SpecialTaxChanged();
    	public Nullable<decimal> SpecialTax
    	{
    		get { return _specialTax; }
    		set
    		{
    			if (_specialTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("SpecialTax", _specialTax);
    				_specialTax = value;
    				SpecialTaxChanged();
    				OnPropertyChanged("SpecialTax");
    			}
    		}
    	}
    	private Nullable<decimal> _specialTax;
    	partial void MiscTaxChanged();
    	public Nullable<decimal> MiscTax
    	{
    		get { return _miscTax; }
    		set
    		{
    			if (_miscTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("MiscTax", _miscTax);
    				_miscTax = value;
    				MiscTaxChanged();
    				OnPropertyChanged("MiscTax");
    			}
    		}
    	}
    	private Nullable<decimal> _miscTax;
    	partial void TaxPercentageChanged();
    	public Nullable<decimal> TaxPercentage
    	{
    		get { return _taxPercentage; }
    		set
    		{
    			if (_taxPercentage != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxPercentage", _taxPercentage);
    				_taxPercentage = value;
    				TaxPercentageChanged();
    				OnPropertyChanged("TaxPercentage");
    			}
    		}
    	}
    	private Nullable<decimal> _taxPercentage;
    	partial void StreetChanged();
    	public string Street
    	{
    		get { return _street; }
    		set
    		{
    			if (_street != value)
    			{
    				ChangeTracker.RecordOriginalValue("Street", _street);
    				_street = value;
    				StreetChanged();
    				OnPropertyChanged("Street");
    			}
    		}
    	}
    	private string _street;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void StateCodeChanged();
    	public Nullable<int> StateCode
    	{
    		get { return _stateCode; }
    		set
    		{
    			if (_stateCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateCode", _stateCode);
    				_stateCode = value;
    				StateCodeChanged();
    				OnPropertyChanged("StateCode");
    			}
    		}
    	}
    	private Nullable<int> _stateCode;
    	partial void CityCodeChanged();
    	public Nullable<int> CityCode
    	{
    		get { return _cityCode; }
    		set
    		{
    			if (_cityCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("CityCode", _cityCode);
    				_cityCode = value;
    				CityCodeChanged();
    				OnPropertyChanged("CityCode");
    			}
    		}
    	}
    	private Nullable<int> _cityCode;
    	partial void CountyCodeChanged();
    	public Nullable<int> CountyCode
    	{
    		get { return _countyCode; }
    		set
    		{
    			if (_countyCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyCode", _countyCode);
    				_countyCode = value;
    				CountyCodeChanged();
    				OnPropertyChanged("CountyCode");
    			}
    		}
    	}
    	private Nullable<int> _countyCode;
    	partial void CountryCodeChanged();
    	public Nullable<int> CountryCode
    	{
    		get { return _countryCode; }
    		set
    		{
    			if (_countryCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryCode", _countryCode);
    				_countryCode = value;
    				CountryCodeChanged();
    				OnPropertyChanged("CountryCode");
    			}
    		}
    	}
    	private Nullable<int> _countryCode;

        #endregion
        #region Navigation Properties
    
    	public Country Country
    	{
    		get { return _country; }
    		set
    		{
    			if (!ReferenceEquals(_country, value))
    			{
    				var previousValue = _country;
    				_country = value;
    				FixupCountry(previousValue);
    				OnNavigationPropertyChanged("Country");
    			}
    		}
    	}
    	private Country _country;
    
    	public TaxCategory TaxCategory
    	{
    		get { return _taxCategory; }
    		set
    		{
    			if (!ReferenceEquals(_taxCategory, value))
    			{
    				var previousValue = _taxCategory;
    				_taxCategory = value;
    				FixupTaxCategory(previousValue);
    				OnNavigationPropertyChanged("TaxCategory");
    			}
    		}
    	}
    	private TaxCategory _taxCategory;
    
    	public TaxDataSource TaxDataSource
    	{
    		get { return _taxDataSource; }
    		set
    		{
    			if (!ReferenceEquals(_taxDataSource, value))
    			{
    				var previousValue = _taxDataSource;
    				_taxDataSource = value;
    				FixupTaxDataSource(previousValue);
    				OnNavigationPropertyChanged("TaxDataSource");
    			}
    		}
    	}
    	private TaxDataSource _taxDataSource;
    
    	public Address Address
    	{
    		get { return _address; }
    		set
    		{
    			if (!ReferenceEquals(_address, value))
    			{
    				var previousValue = _address;
    				_address = value;
    				FixupAddress(previousValue);
    				OnNavigationPropertyChanged("Address");
    			}
    		}
    	}
    	private Address _address;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Country = null;
    		TaxCategory = null;
    		TaxDataSource = null;
    		Address = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCountry(Country previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.TaxCaches.Contains(this))
    		{
    			previousValue.TaxCaches.Remove(this);
    		}
    
    		if (Country != null)
    		{
    			if (!Country.TaxCaches.Contains(this))
    			{
    				Country.TaxCaches.Add(this);
    			}
    
    			CountryID = Country.CountryID;
    		}
    		else if (!skipKeys)
    		{
    			CountryID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Country")
    				&& (ChangeTracker.OriginalValues["Country"] == Country))
    			{
    				ChangeTracker.OriginalValues.Remove("Country");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Country", previousValue);
    			}
    			if (Country != null && !Country.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Country.StartTracking();
    			}
    		}
    	}
    
    	private void FixupTaxCategory(TaxCategory previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.TaxCaches.Contains(this))
    		{
    			previousValue.TaxCaches.Remove(this);
    		}
    
    		if (TaxCategory != null)
    		{
    			if (!TaxCategory.TaxCaches.Contains(this))
    			{
    				TaxCategory.TaxCaches.Add(this);
    			}
    
    			TaxCategoryID = TaxCategory.TaxCategoryID;
    		}
    		else if (!skipKeys)
    		{
    			TaxCategoryID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("TaxCategory")
    				&& (ChangeTracker.OriginalValues["TaxCategory"] == TaxCategory))
    			{
    				ChangeTracker.OriginalValues.Remove("TaxCategory");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("TaxCategory", previousValue);
    			}
    			if (TaxCategory != null && !TaxCategory.ChangeTracker.ChangeTrackingEnabled)
    			{
    				TaxCategory.StartTracking();
    			}
    		}
    	}
    
    	private void FixupTaxDataSource(TaxDataSource previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.TaxCaches.Contains(this))
    		{
    			previousValue.TaxCaches.Remove(this);
    		}
    
    		if (TaxDataSource != null)
    		{
    			if (!TaxDataSource.TaxCaches.Contains(this))
    			{
    				TaxDataSource.TaxCaches.Add(this);
    			}
    
    			TaxDataSourceID = TaxDataSource.TaxDataSourceID;
    		}
    		else if (!skipKeys)
    		{
    			TaxDataSourceID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("TaxDataSource")
    				&& (ChangeTracker.OriginalValues["TaxDataSource"] == TaxDataSource))
    			{
    				ChangeTracker.OriginalValues.Remove("TaxDataSource");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("TaxDataSource", previousValue);
    			}
    			if (TaxDataSource != null && !TaxDataSource.ChangeTracker.ChangeTrackingEnabled)
    			{
    				TaxDataSource.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAddress(Address previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.TaxCaches.Contains(this))
    		{
    			previousValue.TaxCaches.Remove(this);
    		}
    
    		if (Address != null)
    		{
    			if (!Address.TaxCaches.Contains(this))
    			{
    				Address.TaxCaches.Add(this);
    			}
    
    			WarehouseAddressID = Address.AddressID;
    		}
    		else if (!skipKeys)
    		{
    			WarehouseAddressID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Address")
    				&& (ChangeTracker.OriginalValues["Address"] == Address))
    			{
    				ChangeTracker.OriginalValues.Remove("Address");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Address", previousValue);
    			}
    			if (Address != null && !Address.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Address.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(DeviceType))]
    [KnownType(typeof(DeviceNotification))]
    [Serializable]
    public partial class AccountDevice: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountDeviceIDChanged();
    	public int AccountDeviceID
    	{
    		get { return _accountDeviceID; }
    		set
    		{
    			if (_accountDeviceID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountDeviceID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountDeviceID = value;
    				AccountDeviceIDChanged();
    				OnPropertyChanged("AccountDeviceID");
    			}
    		}
    	}
    	private int _accountDeviceID;
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void DeviceTypeIDChanged();
    	public short DeviceTypeID
    	{
    		get { return _deviceTypeID; }
    		set
    		{
    			if (_deviceTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DeviceTypeID", _deviceTypeID);
    				if (!IsDeserializing)
    				{
    					if (DeviceType != null && DeviceType.DeviceTypeID != value)
    					{
    						DeviceType = null;
    					}
    				}
    				_deviceTypeID = value;
    				DeviceTypeIDChanged();
    				OnPropertyChanged("DeviceTypeID");
    			}
    		}
    	}
    	private short _deviceTypeID;
    	partial void DeviceIDChanged();
    	public string DeviceID
    	{
    		get { return _deviceID; }
    		set
    		{
    			if (_deviceID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DeviceID", _deviceID);
    				_deviceID = value;
    				DeviceIDChanged();
    				OnPropertyChanged("DeviceID");
    			}
    		}
    	}
    	private string _deviceID;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public DeviceType DeviceType
    	{
    		get { return _deviceType; }
    		set
    		{
    			if (!ReferenceEquals(_deviceType, value))
    			{
    				var previousValue = _deviceType;
    				_deviceType = value;
    				FixupDeviceType(previousValue);
    				OnNavigationPropertyChanged("DeviceType");
    			}
    		}
    	}
    	private DeviceType _deviceType;
    
    	public TrackableCollection<DeviceNotification> DeviceNotifications
    	{
    		get
    		{
    			if (_deviceNotifications == null)
    			{
    				_deviceNotifications = new TrackableCollection<DeviceNotification>();
    				_deviceNotifications.CollectionChanged += FixupDeviceNotifications;
    				_deviceNotifications.CollectionChanged += RaiseDeviceNotificationsChanged;
    			}
    			return _deviceNotifications;
    		}
    		set
    		{
    			if (!ReferenceEquals(_deviceNotifications, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_deviceNotifications != null)
    				{
    					_deviceNotifications.CollectionChanged -= FixupDeviceNotifications;
    					_deviceNotifications.CollectionChanged -= RaiseDeviceNotificationsChanged;
    				}
    				_deviceNotifications = value;
    				if (_deviceNotifications != null)
    				{
    					_deviceNotifications.CollectionChanged += FixupDeviceNotifications;
    					_deviceNotifications.CollectionChanged += RaiseDeviceNotificationsChanged;
    				}
    				OnNavigationPropertyChanged("DeviceNotifications");
    			}
    		}
    	}
    	private TrackableCollection<DeviceNotification> _deviceNotifications;
    	partial void DeviceNotificationsChanged();
    	private void RaiseDeviceNotificationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		DeviceNotificationsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_deviceNotifications != null)
    		{
    			_deviceNotifications.CollectionChanged -= FixupDeviceNotifications;
    			_deviceNotifications.CollectionChanged -= RaiseDeviceNotificationsChanged;
    			_deviceNotifications.CollectionChanged += FixupDeviceNotifications;
    			_deviceNotifications.CollectionChanged += RaiseDeviceNotificationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		DeviceType = null;
    		DeviceNotifications.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountDevices.Contains(this))
    		{
    			previousValue.AccountDevices.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AccountDevices.Contains(this))
    			{
    				Account.AccountDevices.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupDeviceType(DeviceType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountDevices.Contains(this))
    		{
    			previousValue.AccountDevices.Remove(this);
    		}
    
    		if (DeviceType != null)
    		{
    			if (!DeviceType.AccountDevices.Contains(this))
    			{
    				DeviceType.AccountDevices.Add(this);
    			}
    
    			DeviceTypeID = DeviceType.DeviceTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("DeviceType")
    				&& (ChangeTracker.OriginalValues["DeviceType"] == DeviceType))
    			{
    				ChangeTracker.OriginalValues.Remove("DeviceType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("DeviceType", previousValue);
    			}
    			if (DeviceType != null && !DeviceType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				DeviceType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupDeviceNotifications(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (DeviceNotification item in e.NewItems)
    			{
    				item.AccountDevice = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("DeviceNotifications", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (DeviceNotification item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AccountDevice, this))
    				{
    					item.AccountDevice = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("DeviceNotifications", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

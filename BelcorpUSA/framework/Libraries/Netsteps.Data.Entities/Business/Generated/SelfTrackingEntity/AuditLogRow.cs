//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    
    [Serializable]
    public partial class AuditLogRow : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
    	public string ChangeType
    	{
    		get { return _changeType; }
    		set
    		{
    			if (_changeType != value)
    			{
    				OnComplexPropertyChanging();
    				_changeType = value;
    				OnPropertyChanged("ChangeType");
    			}
    		}
    	}
    	private string _changeType;
    
    	public string TableName
    	{
    		get { return _tableName; }
    		set
    		{
    			if (_tableName != value)
    			{
    				OnComplexPropertyChanging();
    				_tableName = value;
    				OnPropertyChanged("TableName");
    			}
    		}
    	}
    	private string _tableName;
    
    	public int PK
    	{
    		get { return _pK; }
    		set
    		{
    			if (_pK != value)
    			{
    				OnComplexPropertyChanging();
    				_pK = value;
    				OnPropertyChanged("PK");
    			}
    		}
    	}
    	private int _pK;
    
    	public string ColumnName
    	{
    		get { return _columnName; }
    		set
    		{
    			if (_columnName != value)
    			{
    				OnComplexPropertyChanging();
    				_columnName = value;
    				OnPropertyChanged("ColumnName");
    			}
    		}
    	}
    	private string _columnName;
    
    	public string OldValue
    	{
    		get { return _oldValue; }
    		set
    		{
    			if (_oldValue != value)
    			{
    				OnComplexPropertyChanging();
    				_oldValue = value;
    				OnPropertyChanged("OldValue");
    			}
    		}
    	}
    	private string _oldValue;
    
    	public string NewValue
    	{
    		get { return _newValue; }
    		set
    		{
    			if (_newValue != value)
    			{
    				OnComplexPropertyChanging();
    				_newValue = value;
    				OnPropertyChanged("NewValue");
    			}
    		}
    	}
    	private string _newValue;
    
    	public System.DateTime DateChanged
    	{
    		get { return _dateChanged; }
    		set
    		{
    			if (_dateChanged != value)
    			{
    				OnComplexPropertyChanging();
    				_dateChanged = value;
    				OnPropertyChanged("DateChanged");
    			}
    		}
    	}
    	private System.DateTime _dateChanged;
    
    	public string Username
    	{
    		get { return _username; }
    		set
    		{
    			if (_username != value)
    			{
    				OnComplexPropertyChanging();
    				_username = value;
    				OnPropertyChanged("Username");
    			}
    		}
    	}
    	private string _username;
    
    	public string SqlUserName
    	{
    		get { return _sqlUserName; }
    		set
    		{
    			if (_sqlUserName != value)
    			{
    				OnComplexPropertyChanging();
    				_sqlUserName = value;
    				OnPropertyChanged("SqlUserName");
    			}
    		}
    	}
    	private string _sqlUserName;
    
    	public string MachineName
    	{
    		get { return _machineName; }
    		set
    		{
    			if (_machineName != value)
    			{
    				OnComplexPropertyChanging();
    				_machineName = value;
    				OnPropertyChanged("MachineName");
    			}
    		}
    	}
    	private string _machineName;
    
    	public string ApplicationName
    	{
    		get { return _applicationName; }
    		set
    		{
    			if (_applicationName != value)
    			{
    				OnComplexPropertyChanging();
    				_applicationName = value;
    				OnPropertyChanged("ApplicationName");
    			}
    		}
    	}
    	private string _applicationName;
    
    	public Nullable<long> row_number
    	{
    		get { return _row_number; }
    		set
    		{
    			if (_row_number != value)
    			{
    				OnComplexPropertyChanging();
    				_row_number = value;
    				OnPropertyChanged("row_number");
    			}
    		}
    	}
    	private Nullable<long> _row_number;

        #endregion
        #region ChangeTracking
    
    	private void OnComplexPropertyChanging()
    	{
    		if (_complexPropertyChanging != null)
    		{
    			_complexPropertyChanging(this, new EventArgs());
    		}
    	}
    
    	event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
    	private event EventHandler _complexPropertyChanging;
    
    	private void OnPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    
    	public static void RecordComplexOriginalValues(String parentPropertyName, AuditLogRow complexObject, ObjectChangeTracker changeTracker)
    	{
    		if (String.IsNullOrEmpty(parentPropertyName))
    		{
    			throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
    		}
    
    		if (changeTracker == null)
    		{
    			throw new ArgumentNullException("changeTracker");
    		}
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ChangeType", parentPropertyName), complexObject == null ? null : (object)complexObject.ChangeType);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TableName", parentPropertyName), complexObject == null ? null : (object)complexObject.TableName);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PK", parentPropertyName), complexObject == null ? null : (object)complexObject.PK);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ColumnName", parentPropertyName), complexObject == null ? null : (object)complexObject.ColumnName);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.OldValue", parentPropertyName), complexObject == null ? null : (object)complexObject.OldValue);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.NewValue", parentPropertyName), complexObject == null ? null : (object)complexObject.NewValue);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DateChanged", parentPropertyName), complexObject == null ? null : (object)complexObject.DateChanged);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Username", parentPropertyName), complexObject == null ? null : (object)complexObject.Username);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SqlUserName", parentPropertyName), complexObject == null ? null : (object)complexObject.SqlUserName);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.MachineName", parentPropertyName), complexObject == null ? null : (object)complexObject.MachineName);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ApplicationName", parentPropertyName), complexObject == null ? null : (object)complexObject.ApplicationName);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.row_number", parentPropertyName), complexObject == null ? null : (object)complexObject.row_number);
    	}

        #endregion
    }
}

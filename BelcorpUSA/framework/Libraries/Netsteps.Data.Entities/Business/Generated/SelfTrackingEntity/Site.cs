//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(AutoshipSchedule))]
    [KnownType(typeof(HtmlSectionContent))]
    [KnownType(typeof(Language))]
    [KnownType(typeof(Market))]
    [KnownType(typeof(Navigation))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(SiteStatusChangeReason))]
    [KnownType(typeof(SiteStatus))]
    [KnownType(typeof(SiteType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(SiteSetting))]
    [KnownType(typeof(SiteSettingValue))]
    [KnownType(typeof(SiteUrl))]
    [KnownType(typeof(CorporateUser))]
    [KnownType(typeof(Archive))]
    [KnownType(typeof(CalendarEvent))]
    [KnownType(typeof(HtmlSection))]
    [KnownType(typeof(News))]
    [KnownType(typeof(HtmlSectionChoice))]
    [KnownType(typeof(SiteWidget))]
    [KnownType(typeof(UserSiteWidget))]
    [KnownType(typeof(Layout))]
    [KnownType(typeof(Page))]
    [KnownType(typeof(AutoshipOrder))]
    [Serializable]
    public partial class Site: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void SiteIDChanged();
    	public int SiteID
    	{
    		get { return _siteID; }
    		set
    		{
    			if (_siteID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'SiteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_siteID = value;
    				SiteIDChanged();
    				OnPropertyChanged("SiteID");
    			}
    		}
    	}
    	private int _siteID;
    	partial void BaseSiteIDChanged();
    	public Nullable<int> BaseSiteID
    	{
    		get { return _baseSiteID; }
    		set
    		{
    			if (_baseSiteID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BaseSiteID", _baseSiteID);
    				if (!IsDeserializing)
    				{
    					if (Site1 != null && Site1.SiteID != value)
    					{
    						Site1 = null;
    					}
    				}
    				_baseSiteID = value;
    				BaseSiteIDChanged();
    				OnPropertyChanged("BaseSiteID");
    			}
    		}
    	}
    	private Nullable<int> _baseSiteID;
    	partial void SiteTypeIDChanged();
    	public short SiteTypeID
    	{
    		get { return _siteTypeID; }
    		set
    		{
    			if (_siteTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteTypeID", _siteTypeID);
    				if (!IsDeserializing)
    				{
    					if (SiteType != null && SiteType.SiteTypeID != value)
    					{
    						SiteType = null;
    					}
    				}
    				_siteTypeID = value;
    				SiteTypeIDChanged();
    				OnPropertyChanged("SiteTypeID");
    			}
    		}
    	}
    	private short _siteTypeID;
    	partial void SiteStatusIDChanged();
    	public short SiteStatusID
    	{
    		get { return _siteStatusID; }
    		set
    		{
    			if (_siteStatusID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteStatusID", _siteStatusID);
    				if (!IsDeserializing)
    				{
    					if (SiteStatus != null && SiteStatus.SiteStatusID != value)
    					{
    						SiteStatus = null;
    					}
    				}
    				_siteStatusID = value;
    				SiteStatusIDChanged();
    				OnPropertyChanged("SiteStatusID");
    			}
    		}
    	}
    	private short _siteStatusID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void DisplayNameChanged();
    	public string DisplayName
    	{
    		get { return _displayName; }
    		set
    		{
    			if (_displayName != value)
    			{
    				ChangeTracker.RecordOriginalValue("DisplayName", _displayName);
    				_displayName = value;
    				DisplayNameChanged();
    				OnPropertyChanged("DisplayName");
    			}
    		}
    	}
    	private string _displayName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void AccountNumberChanged();
    	public string AccountNumber
    	{
    		get { return _accountNumber; }
    		set
    		{
    			if (_accountNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountNumber", _accountNumber);
    				_accountNumber = value;
    				AccountNumberChanged();
    				OnPropertyChanged("AccountNumber");
    			}
    		}
    	}
    	private string _accountNumber;
    	partial void DateSignedUpUTCChanged();
    	public System.DateTime DateSignedUpUTC
    	{
    		get { return _dateSignedUpUTC; }
    		set
    		{
    			if (_dateSignedUpUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateSignedUpUTC", _dateSignedUpUTC);
    				_dateSignedUpUTC = value;
    				DateSignedUpUTCChanged();
    				OnPropertyChanged("DateSignedUpUTC");
    			}
    		}
    	}
    	private System.DateTime _dateSignedUpUTC;
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				if (!IsDeserializing)
    				{
    					if (Market != null && Market.MarketID != value)
    					{
    						Market = null;
    					}
    				}
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;
    	partial void IsBaseChanged();
    	public bool IsBase
    	{
    		get { return _isBase; }
    		set
    		{
    			if (_isBase != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsBase", _isBase);
    				_isBase = value;
    				IsBaseChanged();
    				OnPropertyChanged("IsBase");
    			}
    		}
    	}
    	private bool _isBase;
    	partial void DefaultLanguageIDChanged();
    	public int DefaultLanguageID
    	{
    		get { return _defaultLanguageID; }
    		set
    		{
    			if (_defaultLanguageID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DefaultLanguageID", _defaultLanguageID);
    				if (!IsDeserializing)
    				{
    					if (Language != null && Language.LanguageID != value)
    					{
    						Language = null;
    					}
    				}
    				_defaultLanguageID = value;
    				DefaultLanguageIDChanged();
    				OnPropertyChanged("DefaultLanguageID");
    			}
    		}
    	}
    	private int _defaultLanguageID;
    	partial void SiteStatusChangeReasonIDChanged();
    	public Nullable<short> SiteStatusChangeReasonID
    	{
    		get { return _siteStatusChangeReasonID; }
    		set
    		{
    			if (_siteStatusChangeReasonID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteStatusChangeReasonID", _siteStatusChangeReasonID);
    				if (!IsDeserializing)
    				{
    					if (SiteStatusChangeReason != null && SiteStatusChangeReason.SiteStatusChangeReasonID != value)
    					{
    						SiteStatusChangeReason = null;
    					}
    				}
    				_siteStatusChangeReasonID = value;
    				SiteStatusChangeReasonIDChanged();
    				OnPropertyChanged("SiteStatusChangeReasonID");
    			}
    		}
    	}
    	private Nullable<short> _siteStatusChangeReasonID;
    	partial void AutoshipOrderIDChanged();
    	public Nullable<int> AutoshipOrderID
    	{
    		get { return _autoshipOrderID; }
    		set
    		{
    			if (_autoshipOrderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipOrderID", _autoshipOrderID);
    				if (!IsDeserializing)
    				{
    					if (AutoshipOrder != null && AutoshipOrder.AutoshipOrderID != value)
    					{
    						AutoshipOrder = null;
    					}
    				}
    				_autoshipOrderID = value;
    				AutoshipOrderIDChanged();
    				OnPropertyChanged("AutoshipOrderID");
    			}
    		}
    	}
    	private Nullable<int> _autoshipOrderID;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void CreatedByUserIDChanged();
    	public Nullable<int> CreatedByUserID
    	{
    		get { return _createdByUserID; }
    		set
    		{
    			if (_createdByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CreatedByUserID", _createdByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_createdByUserID = value;
    				CreatedByUserIDChanged();
    				OnPropertyChanged("CreatedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _createdByUserID;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User1 != null && User1.UserID != value)
    					{
    						User1 = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void DateLastModifiedUTCChanged();
    	public Nullable<System.DateTime> DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateLastModifiedUTC;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public TrackableCollection<AutoshipSchedule> AutoshipSchedules
    	{
    		get
    		{
    			if (_autoshipSchedules == null)
    			{
    				_autoshipSchedules = new TrackableCollection<AutoshipSchedule>();
    				_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    				_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    			}
    			return _autoshipSchedules;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipSchedules, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipSchedules != null)
    				{
    					_autoshipSchedules.CollectionChanged -= FixupAutoshipSchedules;
    					_autoshipSchedules.CollectionChanged -= RaiseAutoshipSchedulesChanged;
    				}
    				_autoshipSchedules = value;
    				if (_autoshipSchedules != null)
    				{
    					_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    					_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipSchedules");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipSchedule> _autoshipSchedules;
    	partial void AutoshipSchedulesChanged();
    	private void RaiseAutoshipSchedulesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipSchedulesChanged();
    	}
    
    	public TrackableCollection<HtmlSectionContent> HtmlSectionContents
    	{
    		get
    		{
    			if (_htmlSectionContents == null)
    			{
    				_htmlSectionContents = new TrackableCollection<HtmlSectionContent>();
    				_htmlSectionContents.CollectionChanged += FixupHtmlSectionContents;
    				_htmlSectionContents.CollectionChanged += RaiseHtmlSectionContentsChanged;
    			}
    			return _htmlSectionContents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlSectionContents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlSectionContents != null)
    				{
    					_htmlSectionContents.CollectionChanged -= FixupHtmlSectionContents;
    					_htmlSectionContents.CollectionChanged -= RaiseHtmlSectionContentsChanged;
    				}
    				_htmlSectionContents = value;
    				if (_htmlSectionContents != null)
    				{
    					_htmlSectionContents.CollectionChanged += FixupHtmlSectionContents;
    					_htmlSectionContents.CollectionChanged += RaiseHtmlSectionContentsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlSectionContents");
    			}
    		}
    	}
    	private TrackableCollection<HtmlSectionContent> _htmlSectionContents;
    	partial void HtmlSectionContentsChanged();
    	private void RaiseHtmlSectionContentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlSectionContentsChanged();
    	}
    
    	public Language Language
    	{
    		get { return _language; }
    		set
    		{
    			if (!ReferenceEquals(_language, value))
    			{
    				var previousValue = _language;
    				_language = value;
    				FixupLanguage(previousValue);
    				OnNavigationPropertyChanged("Language");
    			}
    		}
    	}
    	private Language _language;
    
    	public Market Market
    	{
    		get { return _market; }
    		set
    		{
    			if (!ReferenceEquals(_market, value))
    			{
    				var previousValue = _market;
    				_market = value;
    				FixupMarket(previousValue);
    				OnNavigationPropertyChanged("Market");
    			}
    		}
    	}
    	private Market _market;
    
    	public TrackableCollection<Navigation> Navigations
    	{
    		get
    		{
    			if (_navigations == null)
    			{
    				_navigations = new TrackableCollection<Navigation>();
    				_navigations.CollectionChanged += FixupNavigations;
    				_navigations.CollectionChanged += RaiseNavigationsChanged;
    			}
    			return _navigations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_navigations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_navigations != null)
    				{
    					_navigations.CollectionChanged -= FixupNavigations;
    					_navigations.CollectionChanged -= RaiseNavigationsChanged;
    				}
    				_navigations = value;
    				if (_navigations != null)
    				{
    					_navigations.CollectionChanged += FixupNavigations;
    					_navigations.CollectionChanged += RaiseNavigationsChanged;
    				}
    				OnNavigationPropertyChanged("Navigations");
    			}
    		}
    	}
    	private TrackableCollection<Navigation> _navigations;
    	partial void NavigationsChanged();
    	private void RaiseNavigationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NavigationsChanged();
    	}
    
    	public TrackableCollection<Order> Orders
    	{
    		get
    		{
    			if (_orders == null)
    			{
    				_orders = new TrackableCollection<Order>();
    				_orders.CollectionChanged += FixupOrders;
    				_orders.CollectionChanged += RaiseOrdersChanged;
    			}
    			return _orders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orders != null)
    				{
    					_orders.CollectionChanged -= FixupOrders;
    					_orders.CollectionChanged -= RaiseOrdersChanged;
    				}
    				_orders = value;
    				if (_orders != null)
    				{
    					_orders.CollectionChanged += FixupOrders;
    					_orders.CollectionChanged += RaiseOrdersChanged;
    				}
    				OnNavigationPropertyChanged("Orders");
    			}
    		}
    	}
    	private TrackableCollection<Order> _orders;
    	partial void OrdersChanged();
    	private void RaiseOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrdersChanged();
    	}
    
    	public TrackableCollection<Site> Sites1
    	{
    		get
    		{
    			if (_sites1 == null)
    			{
    				_sites1 = new TrackableCollection<Site>();
    				_sites1.CollectionChanged += FixupSites1;
    				_sites1.CollectionChanged += RaiseSites1Changed;
    			}
    			return _sites1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites1 != null)
    				{
    					_sites1.CollectionChanged -= FixupSites1;
    					_sites1.CollectionChanged -= RaiseSites1Changed;
    				}
    				_sites1 = value;
    				if (_sites1 != null)
    				{
    					_sites1.CollectionChanged += FixupSites1;
    					_sites1.CollectionChanged += RaiseSites1Changed;
    				}
    				OnNavigationPropertyChanged("Sites1");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites1;
    	partial void Sites1Changed();
    	private void RaiseSites1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Sites1Changed();
    	}
    
    	public Site Site1
    	{
    		get { return _site1; }
    		set
    		{
    			if (!ReferenceEquals(_site1, value))
    			{
    				var previousValue = _site1;
    				_site1 = value;
    				FixupSite1(previousValue);
    				OnNavigationPropertyChanged("Site1");
    			}
    		}
    	}
    	private Site _site1;
    
    	public SiteStatusChangeReason SiteStatusChangeReason
    	{
    		get { return _siteStatusChangeReason; }
    		set
    		{
    			if (!ReferenceEquals(_siteStatusChangeReason, value))
    			{
    				var previousValue = _siteStatusChangeReason;
    				_siteStatusChangeReason = value;
    				FixupSiteStatusChangeReason(previousValue);
    				OnNavigationPropertyChanged("SiteStatusChangeReason");
    			}
    		}
    	}
    	private SiteStatusChangeReason _siteStatusChangeReason;
    
    	public SiteStatus SiteStatus
    	{
    		get { return _siteStatus; }
    		set
    		{
    			if (!ReferenceEquals(_siteStatus, value))
    			{
    				var previousValue = _siteStatus;
    				_siteStatus = value;
    				FixupSiteStatus(previousValue);
    				OnNavigationPropertyChanged("SiteStatus");
    			}
    		}
    	}
    	private SiteStatus _siteStatus;
    
    	public SiteType SiteType
    	{
    		get { return _siteType; }
    		set
    		{
    			if (!ReferenceEquals(_siteType, value))
    			{
    				var previousValue = _siteType;
    				_siteType = value;
    				FixupSiteType(previousValue);
    				OnNavigationPropertyChanged("SiteType");
    			}
    		}
    	}
    	private SiteType _siteType;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public User User1
    	{
    		get { return _user1; }
    		set
    		{
    			if (!ReferenceEquals(_user1, value))
    			{
    				var previousValue = _user1;
    				_user1 = value;
    				FixupUser1(previousValue);
    				OnNavigationPropertyChanged("User1");
    			}
    		}
    	}
    	private User _user1;
    
    	public TrackableCollection<SiteSetting> SiteSettings
    	{
    		get
    		{
    			if (_siteSettings == null)
    			{
    				_siteSettings = new TrackableCollection<SiteSetting>();
    				_siteSettings.CollectionChanged += FixupSiteSettings;
    				_siteSettings.CollectionChanged += RaiseSiteSettingsChanged;
    			}
    			return _siteSettings;
    		}
    		set
    		{
    			if (!ReferenceEquals(_siteSettings, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_siteSettings != null)
    				{
    					_siteSettings.CollectionChanged -= FixupSiteSettings;
    					_siteSettings.CollectionChanged -= RaiseSiteSettingsChanged;
    				}
    				_siteSettings = value;
    				if (_siteSettings != null)
    				{
    					_siteSettings.CollectionChanged += FixupSiteSettings;
    					_siteSettings.CollectionChanged += RaiseSiteSettingsChanged;
    				}
    				OnNavigationPropertyChanged("SiteSettings");
    			}
    		}
    	}
    	private TrackableCollection<SiteSetting> _siteSettings;
    	partial void SiteSettingsChanged();
    	private void RaiseSiteSettingsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SiteSettingsChanged();
    	}
    
    	public TrackableCollection<SiteSettingValue> SiteSettingValues
    	{
    		get
    		{
    			if (_siteSettingValues == null)
    			{
    				_siteSettingValues = new TrackableCollection<SiteSettingValue>();
    				_siteSettingValues.CollectionChanged += FixupSiteSettingValues;
    				_siteSettingValues.CollectionChanged += RaiseSiteSettingValuesChanged;
    			}
    			return _siteSettingValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_siteSettingValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_siteSettingValues != null)
    				{
    					_siteSettingValues.CollectionChanged -= FixupSiteSettingValues;
    					_siteSettingValues.CollectionChanged -= RaiseSiteSettingValuesChanged;
    				}
    				_siteSettingValues = value;
    				if (_siteSettingValues != null)
    				{
    					_siteSettingValues.CollectionChanged += FixupSiteSettingValues;
    					_siteSettingValues.CollectionChanged += RaiseSiteSettingValuesChanged;
    				}
    				OnNavigationPropertyChanged("SiteSettingValues");
    			}
    		}
    	}
    	private TrackableCollection<SiteSettingValue> _siteSettingValues;
    	partial void SiteSettingValuesChanged();
    	private void RaiseSiteSettingValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SiteSettingValuesChanged();
    	}
    
    	public TrackableCollection<SiteUrl> SiteUrls
    	{
    		get
    		{
    			if (_siteUrls == null)
    			{
    				_siteUrls = new TrackableCollection<SiteUrl>();
    				_siteUrls.CollectionChanged += FixupSiteUrls;
    				_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    			}
    			return _siteUrls;
    		}
    		set
    		{
    			if (!ReferenceEquals(_siteUrls, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_siteUrls != null)
    				{
    					_siteUrls.CollectionChanged -= FixupSiteUrls;
    					_siteUrls.CollectionChanged -= RaiseSiteUrlsChanged;
    				}
    				_siteUrls = value;
    				if (_siteUrls != null)
    				{
    					_siteUrls.CollectionChanged += FixupSiteUrls;
    					_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    				}
    				OnNavigationPropertyChanged("SiteUrls");
    			}
    		}
    	}
    	private TrackableCollection<SiteUrl> _siteUrls;
    	partial void SiteUrlsChanged();
    	private void RaiseSiteUrlsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SiteUrlsChanged();
    	}
    
    	public TrackableCollection<CorporateUser> CorporateUsers
    	{
    		get
    		{
    			if (_corporateUsers == null)
    			{
    				_corporateUsers = new TrackableCollection<CorporateUser>();
    				_corporateUsers.CollectionChanged += FixupCorporateUsers;
    				_corporateUsers.CollectionChanged += RaiseCorporateUsersChanged;
    			}
    			return _corporateUsers;
    		}
    		set
    		{
    			if (!ReferenceEquals(_corporateUsers, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_corporateUsers != null)
    				{
    					_corporateUsers.CollectionChanged -= FixupCorporateUsers;
    					_corporateUsers.CollectionChanged -= RaiseCorporateUsersChanged;
    				}
    				_corporateUsers = value;
    				if (_corporateUsers != null)
    				{
    					_corporateUsers.CollectionChanged += FixupCorporateUsers;
    					_corporateUsers.CollectionChanged += RaiseCorporateUsersChanged;
    				}
    				OnNavigationPropertyChanged("CorporateUsers");
    			}
    		}
    	}
    	private TrackableCollection<CorporateUser> _corporateUsers;
    	partial void CorporateUsersChanged();
    	private void RaiseCorporateUsersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CorporateUsersChanged();
    	}
    
    	public TrackableCollection<Archive> Archives
    	{
    		get
    		{
    			if (_archives == null)
    			{
    				_archives = new TrackableCollection<Archive>();
    				_archives.CollectionChanged += FixupArchives;
    				_archives.CollectionChanged += RaiseArchivesChanged;
    			}
    			return _archives;
    		}
    		set
    		{
    			if (!ReferenceEquals(_archives, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_archives != null)
    				{
    					_archives.CollectionChanged -= FixupArchives;
    					_archives.CollectionChanged -= RaiseArchivesChanged;
    				}
    				_archives = value;
    				if (_archives != null)
    				{
    					_archives.CollectionChanged += FixupArchives;
    					_archives.CollectionChanged += RaiseArchivesChanged;
    				}
    				OnNavigationPropertyChanged("Archives");
    			}
    		}
    	}
    	private TrackableCollection<Archive> _archives;
    	partial void ArchivesChanged();
    	private void RaiseArchivesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ArchivesChanged();
    	}
    
    	public TrackableCollection<CalendarEvent> CalendarEvents
    	{
    		get
    		{
    			if (_calendarEvents == null)
    			{
    				_calendarEvents = new TrackableCollection<CalendarEvent>();
    				_calendarEvents.CollectionChanged += FixupCalendarEvents;
    				_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    			}
    			return _calendarEvents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    					_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    				}
    				_calendarEvents = value;
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged += FixupCalendarEvents;
    					_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    				}
    				OnNavigationPropertyChanged("CalendarEvents");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents;
    	partial void CalendarEventsChanged();
    	private void RaiseCalendarEventsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEventsChanged();
    	}
    
    	public TrackableCollection<HtmlSection> HtmlSections
    	{
    		get
    		{
    			if (_htmlSections == null)
    			{
    				_htmlSections = new TrackableCollection<HtmlSection>();
    				_htmlSections.CollectionChanged += FixupHtmlSections;
    				_htmlSections.CollectionChanged += RaiseHtmlSectionsChanged;
    			}
    			return _htmlSections;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlSections, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlSections != null)
    				{
    					_htmlSections.CollectionChanged -= FixupHtmlSections;
    					_htmlSections.CollectionChanged -= RaiseHtmlSectionsChanged;
    				}
    				_htmlSections = value;
    				if (_htmlSections != null)
    				{
    					_htmlSections.CollectionChanged += FixupHtmlSections;
    					_htmlSections.CollectionChanged += RaiseHtmlSectionsChanged;
    				}
    				OnNavigationPropertyChanged("HtmlSections");
    			}
    		}
    	}
    	private TrackableCollection<HtmlSection> _htmlSections;
    	partial void HtmlSectionsChanged();
    	private void RaiseHtmlSectionsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlSectionsChanged();
    	}
    
    	public TrackableCollection<Language> Languages
    	{
    		get
    		{
    			if (_languages == null)
    			{
    				_languages = new TrackableCollection<Language>();
    				_languages.CollectionChanged += FixupLanguages;
    				_languages.CollectionChanged += RaiseLanguagesChanged;
    			}
    			return _languages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_languages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_languages != null)
    				{
    					_languages.CollectionChanged -= FixupLanguages;
    					_languages.CollectionChanged -= RaiseLanguagesChanged;
    				}
    				_languages = value;
    				if (_languages != null)
    				{
    					_languages.CollectionChanged += FixupLanguages;
    					_languages.CollectionChanged += RaiseLanguagesChanged;
    				}
    				OnNavigationPropertyChanged("Languages");
    			}
    		}
    	}
    	private TrackableCollection<Language> _languages;
    	partial void LanguagesChanged();
    	private void RaiseLanguagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		LanguagesChanged();
    	}
    
    	public TrackableCollection<News> News
    	{
    		get
    		{
    			if (_news == null)
    			{
    				_news = new TrackableCollection<News>();
    				_news.CollectionChanged += FixupNews;
    				_news.CollectionChanged += RaiseNewsChanged;
    			}
    			return _news;
    		}
    		set
    		{
    			if (!ReferenceEquals(_news, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_news != null)
    				{
    					_news.CollectionChanged -= FixupNews;
    					_news.CollectionChanged -= RaiseNewsChanged;
    				}
    				_news = value;
    				if (_news != null)
    				{
    					_news.CollectionChanged += FixupNews;
    					_news.CollectionChanged += RaiseNewsChanged;
    				}
    				OnNavigationPropertyChanged("News");
    			}
    		}
    	}
    	private TrackableCollection<News> _news;
    	partial void NewsChanged();
    	private void RaiseNewsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewsChanged();
    	}
    
    	public TrackableCollection<HtmlSectionChoice> HtmlSectionChoices
    	{
    		get
    		{
    			if (_htmlSectionChoices == null)
    			{
    				_htmlSectionChoices = new TrackableCollection<HtmlSectionChoice>();
    				_htmlSectionChoices.CollectionChanged += FixupHtmlSectionChoices;
    				_htmlSectionChoices.CollectionChanged += RaiseHtmlSectionChoicesChanged;
    			}
    			return _htmlSectionChoices;
    		}
    		set
    		{
    			if (!ReferenceEquals(_htmlSectionChoices, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_htmlSectionChoices != null)
    				{
    					_htmlSectionChoices.CollectionChanged -= FixupHtmlSectionChoices;
    					_htmlSectionChoices.CollectionChanged -= RaiseHtmlSectionChoicesChanged;
    				}
    				_htmlSectionChoices = value;
    				if (_htmlSectionChoices != null)
    				{
    					_htmlSectionChoices.CollectionChanged += FixupHtmlSectionChoices;
    					_htmlSectionChoices.CollectionChanged += RaiseHtmlSectionChoicesChanged;
    				}
    				OnNavigationPropertyChanged("HtmlSectionChoices");
    			}
    		}
    	}
    	private TrackableCollection<HtmlSectionChoice> _htmlSectionChoices;
    	partial void HtmlSectionChoicesChanged();
    	private void RaiseHtmlSectionChoicesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HtmlSectionChoicesChanged();
    	}
    
    	public TrackableCollection<SiteWidget> SiteWidgets
    	{
    		get
    		{
    			if (_siteWidgets == null)
    			{
    				_siteWidgets = new TrackableCollection<SiteWidget>();
    				_siteWidgets.CollectionChanged += FixupSiteWidgets;
    				_siteWidgets.CollectionChanged += RaiseSiteWidgetsChanged;
    			}
    			return _siteWidgets;
    		}
    		set
    		{
    			if (!ReferenceEquals(_siteWidgets, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_siteWidgets != null)
    				{
    					_siteWidgets.CollectionChanged -= FixupSiteWidgets;
    					_siteWidgets.CollectionChanged -= RaiseSiteWidgetsChanged;
    				}
    				_siteWidgets = value;
    				if (_siteWidgets != null)
    				{
    					_siteWidgets.CollectionChanged += FixupSiteWidgets;
    					_siteWidgets.CollectionChanged += RaiseSiteWidgetsChanged;
    				}
    				OnNavigationPropertyChanged("SiteWidgets");
    			}
    		}
    	}
    	private TrackableCollection<SiteWidget> _siteWidgets;
    	partial void SiteWidgetsChanged();
    	private void RaiseSiteWidgetsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SiteWidgetsChanged();
    	}
    
    	public TrackableCollection<UserSiteWidget> UserSiteWidgets
    	{
    		get
    		{
    			if (_userSiteWidgets == null)
    			{
    				_userSiteWidgets = new TrackableCollection<UserSiteWidget>();
    				_userSiteWidgets.CollectionChanged += FixupUserSiteWidgets;
    				_userSiteWidgets.CollectionChanged += RaiseUserSiteWidgetsChanged;
    			}
    			return _userSiteWidgets;
    		}
    		set
    		{
    			if (!ReferenceEquals(_userSiteWidgets, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_userSiteWidgets != null)
    				{
    					_userSiteWidgets.CollectionChanged -= FixupUserSiteWidgets;
    					_userSiteWidgets.CollectionChanged -= RaiseUserSiteWidgetsChanged;
    				}
    				_userSiteWidgets = value;
    				if (_userSiteWidgets != null)
    				{
    					_userSiteWidgets.CollectionChanged += FixupUserSiteWidgets;
    					_userSiteWidgets.CollectionChanged += RaiseUserSiteWidgetsChanged;
    				}
    				OnNavigationPropertyChanged("UserSiteWidgets");
    			}
    		}
    	}
    	private TrackableCollection<UserSiteWidget> _userSiteWidgets;
    	partial void UserSiteWidgetsChanged();
    	private void RaiseUserSiteWidgetsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		UserSiteWidgetsChanged();
    	}
    
    	public TrackableCollection<Layout> Layouts
    	{
    		get
    		{
    			if (_layouts == null)
    			{
    				_layouts = new TrackableCollection<Layout>();
    				_layouts.CollectionChanged += FixupLayouts;
    				_layouts.CollectionChanged += RaiseLayoutsChanged;
    			}
    			return _layouts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_layouts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_layouts != null)
    				{
    					_layouts.CollectionChanged -= FixupLayouts;
    					_layouts.CollectionChanged -= RaiseLayoutsChanged;
    				}
    				_layouts = value;
    				if (_layouts != null)
    				{
    					_layouts.CollectionChanged += FixupLayouts;
    					_layouts.CollectionChanged += RaiseLayoutsChanged;
    				}
    				OnNavigationPropertyChanged("Layouts");
    			}
    		}
    	}
    	private TrackableCollection<Layout> _layouts;
    	partial void LayoutsChanged();
    	private void RaiseLayoutsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		LayoutsChanged();
    	}
    
    	public TrackableCollection<Page> Pages
    	{
    		get
    		{
    			if (_pages == null)
    			{
    				_pages = new TrackableCollection<Page>();
    				_pages.CollectionChanged += FixupPages;
    				_pages.CollectionChanged += RaisePagesChanged;
    			}
    			return _pages;
    		}
    		set
    		{
    			if (!ReferenceEquals(_pages, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_pages != null)
    				{
    					_pages.CollectionChanged -= FixupPages;
    					_pages.CollectionChanged -= RaisePagesChanged;
    				}
    				_pages = value;
    				if (_pages != null)
    				{
    					_pages.CollectionChanged += FixupPages;
    					_pages.CollectionChanged += RaisePagesChanged;
    				}
    				OnNavigationPropertyChanged("Pages");
    			}
    		}
    	}
    	private TrackableCollection<Page> _pages;
    	partial void PagesChanged();
    	private void RaisePagesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PagesChanged();
    	}
    
    	public AutoshipOrder AutoshipOrder
    	{
    		get { return _autoshipOrder; }
    		set
    		{
    			if (!ReferenceEquals(_autoshipOrder, value))
    			{
    				var previousValue = _autoshipOrder;
    				_autoshipOrder = value;
    				FixupAutoshipOrder(previousValue);
    				OnNavigationPropertyChanged("AutoshipOrder");
    			}
    		}
    	}
    	private AutoshipOrder _autoshipOrder;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_autoshipSchedules != null)
    		{
    			_autoshipSchedules.CollectionChanged -= FixupAutoshipSchedules;
    			_autoshipSchedules.CollectionChanged -= RaiseAutoshipSchedulesChanged;
    			_autoshipSchedules.CollectionChanged += FixupAutoshipSchedules;
    			_autoshipSchedules.CollectionChanged += RaiseAutoshipSchedulesChanged;
    		}
    		if (_htmlSectionContents != null)
    		{
    			_htmlSectionContents.CollectionChanged -= FixupHtmlSectionContents;
    			_htmlSectionContents.CollectionChanged -= RaiseHtmlSectionContentsChanged;
    			_htmlSectionContents.CollectionChanged += FixupHtmlSectionContents;
    			_htmlSectionContents.CollectionChanged += RaiseHtmlSectionContentsChanged;
    		}
    		if (_navigations != null)
    		{
    			_navigations.CollectionChanged -= FixupNavigations;
    			_navigations.CollectionChanged -= RaiseNavigationsChanged;
    			_navigations.CollectionChanged += FixupNavigations;
    			_navigations.CollectionChanged += RaiseNavigationsChanged;
    		}
    		if (_orders != null)
    		{
    			_orders.CollectionChanged -= FixupOrders;
    			_orders.CollectionChanged -= RaiseOrdersChanged;
    			_orders.CollectionChanged += FixupOrders;
    			_orders.CollectionChanged += RaiseOrdersChanged;
    		}
    		if (_sites1 != null)
    		{
    			_sites1.CollectionChanged -= FixupSites1;
    			_sites1.CollectionChanged -= RaiseSites1Changed;
    			_sites1.CollectionChanged += FixupSites1;
    			_sites1.CollectionChanged += RaiseSites1Changed;
    		}
    		if (_siteSettings != null)
    		{
    			_siteSettings.CollectionChanged -= FixupSiteSettings;
    			_siteSettings.CollectionChanged -= RaiseSiteSettingsChanged;
    			_siteSettings.CollectionChanged += FixupSiteSettings;
    			_siteSettings.CollectionChanged += RaiseSiteSettingsChanged;
    		}
    		if (_siteSettingValues != null)
    		{
    			_siteSettingValues.CollectionChanged -= FixupSiteSettingValues;
    			_siteSettingValues.CollectionChanged -= RaiseSiteSettingValuesChanged;
    			_siteSettingValues.CollectionChanged += FixupSiteSettingValues;
    			_siteSettingValues.CollectionChanged += RaiseSiteSettingValuesChanged;
    		}
    		if (_siteUrls != null)
    		{
    			_siteUrls.CollectionChanged -= FixupSiteUrls;
    			_siteUrls.CollectionChanged -= RaiseSiteUrlsChanged;
    			_siteUrls.CollectionChanged += FixupSiteUrls;
    			_siteUrls.CollectionChanged += RaiseSiteUrlsChanged;
    		}
    		if (_corporateUsers != null)
    		{
    			_corporateUsers.CollectionChanged -= FixupCorporateUsers;
    			_corporateUsers.CollectionChanged -= RaiseCorporateUsersChanged;
    			_corporateUsers.CollectionChanged += FixupCorporateUsers;
    			_corporateUsers.CollectionChanged += RaiseCorporateUsersChanged;
    		}
    		if (_archives != null)
    		{
    			_archives.CollectionChanged -= FixupArchives;
    			_archives.CollectionChanged -= RaiseArchivesChanged;
    			_archives.CollectionChanged += FixupArchives;
    			_archives.CollectionChanged += RaiseArchivesChanged;
    		}
    		if (_calendarEvents != null)
    		{
    			_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    			_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    			_calendarEvents.CollectionChanged += FixupCalendarEvents;
    			_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    		}
    		if (_htmlSections != null)
    		{
    			_htmlSections.CollectionChanged -= FixupHtmlSections;
    			_htmlSections.CollectionChanged -= RaiseHtmlSectionsChanged;
    			_htmlSections.CollectionChanged += FixupHtmlSections;
    			_htmlSections.CollectionChanged += RaiseHtmlSectionsChanged;
    		}
    		if (_languages != null)
    		{
    			_languages.CollectionChanged -= FixupLanguages;
    			_languages.CollectionChanged -= RaiseLanguagesChanged;
    			_languages.CollectionChanged += FixupLanguages;
    			_languages.CollectionChanged += RaiseLanguagesChanged;
    		}
    		if (_news != null)
    		{
    			_news.CollectionChanged -= FixupNews;
    			_news.CollectionChanged -= RaiseNewsChanged;
    			_news.CollectionChanged += FixupNews;
    			_news.CollectionChanged += RaiseNewsChanged;
    		}
    		if (_htmlSectionChoices != null)
    		{
    			_htmlSectionChoices.CollectionChanged -= FixupHtmlSectionChoices;
    			_htmlSectionChoices.CollectionChanged -= RaiseHtmlSectionChoicesChanged;
    			_htmlSectionChoices.CollectionChanged += FixupHtmlSectionChoices;
    			_htmlSectionChoices.CollectionChanged += RaiseHtmlSectionChoicesChanged;
    		}
    		if (_siteWidgets != null)
    		{
    			_siteWidgets.CollectionChanged -= FixupSiteWidgets;
    			_siteWidgets.CollectionChanged -= RaiseSiteWidgetsChanged;
    			_siteWidgets.CollectionChanged += FixupSiteWidgets;
    			_siteWidgets.CollectionChanged += RaiseSiteWidgetsChanged;
    		}
    		if (_userSiteWidgets != null)
    		{
    			_userSiteWidgets.CollectionChanged -= FixupUserSiteWidgets;
    			_userSiteWidgets.CollectionChanged -= RaiseUserSiteWidgetsChanged;
    			_userSiteWidgets.CollectionChanged += FixupUserSiteWidgets;
    			_userSiteWidgets.CollectionChanged += RaiseUserSiteWidgetsChanged;
    		}
    		if (_layouts != null)
    		{
    			_layouts.CollectionChanged -= FixupLayouts;
    			_layouts.CollectionChanged -= RaiseLayoutsChanged;
    			_layouts.CollectionChanged += FixupLayouts;
    			_layouts.CollectionChanged += RaiseLayoutsChanged;
    		}
    		if (_pages != null)
    		{
    			_pages.CollectionChanged -= FixupPages;
    			_pages.CollectionChanged -= RaisePagesChanged;
    			_pages.CollectionChanged += FixupPages;
    			_pages.CollectionChanged += RaisePagesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		AutoshipSchedules.Clear();
    		HtmlSectionContents.Clear();
    		Language = null;
    		Market = null;
    		Navigations.Clear();
    		Orders.Clear();
    		Sites1.Clear();
    		Site1 = null;
    		SiteStatusChangeReason = null;
    		SiteStatus = null;
    		SiteType = null;
    		User = null;
    		User1 = null;
    		SiteSettings.Clear();
    		SiteSettingValues.Clear();
    		SiteUrls.Clear();
    		CorporateUsers.Clear();
    		Archives.Clear();
    		CalendarEvents.Clear();
    		HtmlSections.Clear();
    		Languages.Clear();
    		News.Clear();
    		HtmlSectionChoices.Clear();
    		SiteWidgets.Clear();
    		UserSiteWidgets.Clear();
    		Layouts.Clear();
    		Pages.Clear();
    		AutoshipOrder = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites.Contains(this))
    		{
    			previousValue.Sites.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.Sites.Contains(this))
    			{
    				Account.Sites.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			AccountID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupLanguage(Language previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites.Contains(this))
    		{
    			previousValue.Sites.Remove(this);
    		}
    
    		if (Language != null)
    		{
    			if (!Language.Sites.Contains(this))
    			{
    				Language.Sites.Add(this);
    			}
    
    			DefaultLanguageID = Language.LanguageID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Language")
    				&& (ChangeTracker.OriginalValues["Language"] == Language))
    			{
    				ChangeTracker.OriginalValues.Remove("Language");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Language", previousValue);
    			}
    			if (Language != null && !Language.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Language.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMarket(Market previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites.Contains(this))
    		{
    			previousValue.Sites.Remove(this);
    		}
    
    		if (Market != null)
    		{
    			if (!Market.Sites.Contains(this))
    			{
    				Market.Sites.Add(this);
    			}
    
    			MarketID = Market.MarketID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Market")
    				&& (ChangeTracker.OriginalValues["Market"] == Market))
    			{
    				ChangeTracker.OriginalValues.Remove("Market");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Market", previousValue);
    			}
    			if (Market != null && !Market.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Market.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSite1(Site previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites1.Contains(this))
    		{
    			previousValue.Sites1.Remove(this);
    		}
    
    		if (Site1 != null)
    		{
    			if (!Site1.Sites1.Contains(this))
    			{
    				Site1.Sites1.Add(this);
    			}
    
    			BaseSiteID = Site1.SiteID;
    		}
    		else if (!skipKeys)
    		{
    			BaseSiteID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Site1")
    				&& (ChangeTracker.OriginalValues["Site1"] == Site1))
    			{
    				ChangeTracker.OriginalValues.Remove("Site1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Site1", previousValue);
    			}
    			if (Site1 != null && !Site1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Site1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSiteStatusChangeReason(SiteStatusChangeReason previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites.Contains(this))
    		{
    			previousValue.Sites.Remove(this);
    		}
    
    		if (SiteStatusChangeReason != null)
    		{
    			if (!SiteStatusChangeReason.Sites.Contains(this))
    			{
    				SiteStatusChangeReason.Sites.Add(this);
    			}
    
    			SiteStatusChangeReasonID = SiteStatusChangeReason.SiteStatusChangeReasonID;
    		}
    		else if (!skipKeys)
    		{
    			SiteStatusChangeReasonID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("SiteStatusChangeReason")
    				&& (ChangeTracker.OriginalValues["SiteStatusChangeReason"] == SiteStatusChangeReason))
    			{
    				ChangeTracker.OriginalValues.Remove("SiteStatusChangeReason");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("SiteStatusChangeReason", previousValue);
    			}
    			if (SiteStatusChangeReason != null && !SiteStatusChangeReason.ChangeTracker.ChangeTrackingEnabled)
    			{
    				SiteStatusChangeReason.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSiteStatus(SiteStatus previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites.Contains(this))
    		{
    			previousValue.Sites.Remove(this);
    		}
    
    		if (SiteStatus != null)
    		{
    			if (!SiteStatus.Sites.Contains(this))
    			{
    				SiteStatus.Sites.Add(this);
    			}
    
    			SiteStatusID = SiteStatus.SiteStatusID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("SiteStatus")
    				&& (ChangeTracker.OriginalValues["SiteStatus"] == SiteStatus))
    			{
    				ChangeTracker.OriginalValues.Remove("SiteStatus");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("SiteStatus", previousValue);
    			}
    			if (SiteStatus != null && !SiteStatus.ChangeTracker.ChangeTrackingEnabled)
    			{
    				SiteStatus.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSiteType(SiteType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites.Contains(this))
    		{
    			previousValue.Sites.Remove(this);
    		}
    
    		if (SiteType != null)
    		{
    			if (!SiteType.Sites.Contains(this))
    			{
    				SiteType.Sites.Add(this);
    			}
    
    			SiteTypeID = SiteType.SiteTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("SiteType")
    				&& (ChangeTracker.OriginalValues["SiteType"] == SiteType))
    			{
    				ChangeTracker.OriginalValues.Remove("SiteType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("SiteType", previousValue);
    			}
    			if (SiteType != null && !SiteType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				SiteType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites.Contains(this))
    		{
    			previousValue.Sites.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Sites.Contains(this))
    			{
    				User.Sites.Add(this);
    			}
    
    			CreatedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			CreatedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser1(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites1.Contains(this))
    		{
    			previousValue.Sites1.Remove(this);
    		}
    
    		if (User1 != null)
    		{
    			if (!User1.Sites1.Contains(this))
    			{
    				User1.Sites1.Add(this);
    			}
    
    			ModifiedByUserID = User1.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User1")
    				&& (ChangeTracker.OriginalValues["User1"] == User1))
    			{
    				ChangeTracker.OriginalValues.Remove("User1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User1", previousValue);
    			}
    			if (User1 != null && !User1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoshipOrder(AutoshipOrder previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Sites.Contains(this))
    		{
    			previousValue.Sites.Remove(this);
    		}
    
    		if (AutoshipOrder != null)
    		{
    			if (!AutoshipOrder.Sites.Contains(this))
    			{
    				AutoshipOrder.Sites.Add(this);
    			}
    
    			AutoshipOrderID = AutoshipOrder.AutoshipOrderID;
    		}
    		else if (!skipKeys)
    		{
    			AutoshipOrderID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AutoshipOrder")
    				&& (ChangeTracker.OriginalValues["AutoshipOrder"] == AutoshipOrder))
    			{
    				ChangeTracker.OriginalValues.Remove("AutoshipOrder");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipOrder", previousValue);
    			}
    			if (AutoshipOrder != null && !AutoshipOrder.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AutoshipOrder.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoshipSchedules(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipSchedule item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipSchedules", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipSchedule item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipSchedules", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlSectionContents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlSectionContent item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlSectionContents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlSectionContent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlSectionContents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNavigations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Navigation item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Navigations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Navigation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Navigations", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Order item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Order item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				item.Site1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site1, this))
    				{
    					item.Site1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSiteSettings(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SiteSetting item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SiteSettings", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SiteSetting item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SiteSettings", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSiteSettingValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SiteSettingValue item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SiteSettingValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SiteSettingValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SiteSettingValues", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSiteUrls(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SiteUrl item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SiteUrls", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SiteUrl item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SiteUrls", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCorporateUsers(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CorporateUser item in e.NewItems)
    			{
    				if (!item.Sites.Contains(this))
    				{
    					item.Sites.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CorporateUsers", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CorporateUser item in e.OldItems)
    			{
    				if (item.Sites.Contains(this))
    				{
    					item.Sites.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CorporateUsers", item);
    				}
    			}
    		}
    	}
    
    	private void FixupArchives(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Archive item in e.NewItems)
    			{
    				if (!item.Sites.Contains(this))
    				{
    					item.Sites.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Archives", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Archive item in e.OldItems)
    			{
    				if (item.Sites.Contains(this))
    				{
    					item.Sites.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Archives", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				if (!item.Sites.Contains(this))
    				{
    					item.Sites.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (item.Sites.Contains(this))
    				{
    					item.Sites.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlSections(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlSection item in e.NewItems)
    			{
    				if (!item.Sites.Contains(this))
    				{
    					item.Sites.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlSections", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlSection item in e.OldItems)
    			{
    				if (item.Sites.Contains(this))
    				{
    					item.Sites.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlSections", item);
    				}
    			}
    		}
    	}
    
    	private void FixupLanguages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Language item in e.NewItems)
    			{
    				if (!item.Sites1.Contains(this))
    				{
    					item.Sites1.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Languages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Language item in e.OldItems)
    			{
    				if (item.Sites1.Contains(this))
    				{
    					item.Sites1.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Languages", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNews(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (News item in e.NewItems)
    			{
    				if (!item.Sites.Contains(this))
    				{
    					item.Sites.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("News", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (News item in e.OldItems)
    			{
    				if (item.Sites.Contains(this))
    				{
    					item.Sites.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("News", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHtmlSectionChoices(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HtmlSectionChoice item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HtmlSectionChoices", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HtmlSectionChoice item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HtmlSectionChoices", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSiteWidgets(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SiteWidget item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SiteWidgets", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SiteWidget item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SiteWidgets", item);
    				}
    			}
    		}
    	}
    
    	private void FixupUserSiteWidgets(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (UserSiteWidget item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("UserSiteWidgets", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (UserSiteWidget item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("UserSiteWidgets", item);
    				}
    			}
    		}
    	}
    
    	private void FixupLayouts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Layout item in e.NewItems)
    			{
    				if (!item.Sites.Contains(this))
    				{
    					item.Sites.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Layouts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Layout item in e.OldItems)
    			{
    				if (item.Sites.Contains(this))
    				{
    					item.Sites.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Layouts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPages(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Page item in e.NewItems)
    			{
    				item.Site = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Pages", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Page item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Site, this))
    				{
    					item.Site = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Pages", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

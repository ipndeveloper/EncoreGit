//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(CalendarEvent))]
    [Serializable]
    public partial class CalendarEventAttribute: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void CalendarEventAttributeIDChanged();
    	public int CalendarEventAttributeID
    	{
    		get { return _calendarEventAttributeID; }
    		set
    		{
    			if (_calendarEventAttributeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'CalendarEventAttributeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_calendarEventAttributeID = value;
    				CalendarEventAttributeIDChanged();
    				OnPropertyChanged("CalendarEventAttributeID");
    			}
    		}
    	}
    	private int _calendarEventAttributeID;
    	partial void CalendarEventIDChanged();
    	public int CalendarEventID
    	{
    		get { return _calendarEventID; }
    		set
    		{
    			if (_calendarEventID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CalendarEventID", _calendarEventID);
    				if (!IsDeserializing)
    				{
    					if (CalendarEvent != null && CalendarEvent.CalendarEventID != value)
    					{
    						CalendarEvent = null;
    					}
    				}
    				_calendarEventID = value;
    				CalendarEventIDChanged();
    				OnPropertyChanged("CalendarEventID");
    			}
    		}
    	}
    	private int _calendarEventID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void ValueChanged();
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				ChangeTracker.RecordOriginalValue("Value", _value);
    				_value = value;
    				ValueChanged();
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;

        #endregion
        #region Navigation Properties
    
    	public CalendarEvent CalendarEvent
    	{
    		get { return _calendarEvent; }
    		set
    		{
    			if (!ReferenceEquals(_calendarEvent, value))
    			{
    				var previousValue = _calendarEvent;
    				_calendarEvent = value;
    				FixupCalendarEvent(previousValue);
    				OnNavigationPropertyChanged("CalendarEvent");
    			}
    		}
    	}
    	private CalendarEvent _calendarEvent;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		CalendarEvent = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCalendarEvent(CalendarEvent previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.CalendarEventAttributes.Contains(this))
    		{
    			previousValue.CalendarEventAttributes.Remove(this);
    		}
    
    		if (CalendarEvent != null)
    		{
    			if (!CalendarEvent.CalendarEventAttributes.Contains(this))
    			{
    				CalendarEvent.CalendarEventAttributes.Add(this);
    			}
    
    			CalendarEventID = CalendarEvent.CalendarEventID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CalendarEvent")
    				&& (ChangeTracker.OriginalValues["CalendarEvent"] == CalendarEvent))
    			{
    				ChangeTracker.OriginalValues.Remove("CalendarEvent");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CalendarEvent", previousValue);
    			}
    			if (CalendarEvent != null && !CalendarEvent.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CalendarEvent.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(DistributionList))]
    [Serializable]
    public partial class DistributionSubscriber: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void DistributionSubscriberIDChanged();
    	public int DistributionSubscriberID
    	{
    		get { return _distributionSubscriberID; }
    		set
    		{
    			if (_distributionSubscriberID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'DistributionSubscriberID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_distributionSubscriberID = value;
    				DistributionSubscriberIDChanged();
    				OnPropertyChanged("DistributionSubscriberID");
    			}
    		}
    	}
    	private int _distributionSubscriberID;
    	partial void DistributionListIDChanged();
    	public int DistributionListID
    	{
    		get { return _distributionListID; }
    		set
    		{
    			if (_distributionListID != value)
    			{
    				ChangeTracker.RecordOriginalValue("DistributionListID", _distributionListID);
    				if (!IsDeserializing)
    				{
    					if (DistributionList != null && DistributionList.DistributionListID != value)
    					{
    						DistributionList = null;
    					}
    				}
    				_distributionListID = value;
    				DistributionListIDChanged();
    				OnPropertyChanged("DistributionListID");
    			}
    		}
    	}
    	private int _distributionListID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void DateSubscribedUTCChanged();
    	public Nullable<System.DateTime> DateSubscribedUTC
    	{
    		get { return _dateSubscribedUTC; }
    		set
    		{
    			if (_dateSubscribedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateSubscribedUTC", _dateSubscribedUTC);
    				_dateSubscribedUTC = value;
    				DateSubscribedUTCChanged();
    				OnPropertyChanged("DateSubscribedUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateSubscribedUTC;
    	partial void DateCancelledUTCChanged();
    	public Nullable<System.DateTime> DateCancelledUTC
    	{
    		get { return _dateCancelledUTC; }
    		set
    		{
    			if (_dateCancelledUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCancelledUTC", _dateCancelledUTC);
    				_dateCancelledUTC = value;
    				DateCancelledUTCChanged();
    				OnPropertyChanged("DateCancelledUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateCancelledUTC;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public DistributionList DistributionList
    	{
    		get { return _distributionList; }
    		set
    		{
    			if (!ReferenceEquals(_distributionList, value))
    			{
    				var previousValue = _distributionList;
    				_distributionList = value;
    				FixupDistributionList(previousValue);
    				OnNavigationPropertyChanged("DistributionList");
    			}
    		}
    	}
    	private DistributionList _distributionList;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		DistributionList = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.DistributionSubscribers.Contains(this))
    		{
    			previousValue.DistributionSubscribers.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.DistributionSubscribers.Contains(this))
    			{
    				Account.DistributionSubscribers.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		else if (!skipKeys)
    		{
    			AccountID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupDistributionList(DistributionList previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.DistributionSubscribers.Contains(this))
    		{
    			previousValue.DistributionSubscribers.Remove(this);
    		}
    
    		if (DistributionList != null)
    		{
    			if (!DistributionList.DistributionSubscribers.Contains(this))
    			{
    				DistributionList.DistributionSubscribers.Add(this);
    			}
    
    			DistributionListID = DistributionList.DistributionListID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("DistributionList")
    				&& (ChangeTracker.OriginalValues["DistributionList"] == DistributionList))
    			{
    				ChangeTracker.OriginalValues.Remove("DistributionList");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("DistributionList", previousValue);
    			}
    			if (DistributionList != null && !DistributionList.ChangeTracker.ChangeTrackingEnabled)
    			{
    				DistributionList.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

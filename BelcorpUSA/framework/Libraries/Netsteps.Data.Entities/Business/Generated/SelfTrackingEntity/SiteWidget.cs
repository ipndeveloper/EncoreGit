//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Site))]
    [KnownType(typeof(Widget))]
    [Serializable]
    public partial class SiteWidget: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void SiteWidgetIDChanged();
    	public int SiteWidgetID
    	{
    		get { return _siteWidgetID; }
    		set
    		{
    			if (_siteWidgetID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'SiteWidgetID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_siteWidgetID = value;
    				SiteWidgetIDChanged();
    				OnPropertyChanged("SiteWidgetID");
    			}
    		}
    	}
    	private int _siteWidgetID;
    	partial void SiteIDChanged();
    	public int SiteID
    	{
    		get { return _siteID; }
    		set
    		{
    			if (_siteID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteID", _siteID);
    				if (!IsDeserializing)
    				{
    					if (Site != null && Site.SiteID != value)
    					{
    						Site = null;
    					}
    				}
    				_siteID = value;
    				SiteIDChanged();
    				OnPropertyChanged("SiteID");
    			}
    		}
    	}
    	private int _siteID;
    	partial void WidgetIDChanged();
    	public int WidgetID
    	{
    		get { return _widgetID; }
    		set
    		{
    			if (_widgetID != value)
    			{
    				ChangeTracker.RecordOriginalValue("WidgetID", _widgetID);
    				if (!IsDeserializing)
    				{
    					if (Widget != null && Widget.WidgetID != value)
    					{
    						Widget = null;
    					}
    				}
    				_widgetID = value;
    				WidgetIDChanged();
    				OnPropertyChanged("WidgetID");
    			}
    		}
    	}
    	private int _widgetID;
    	partial void DisplayColumnChanged();
    	public int DisplayColumn
    	{
    		get { return _displayColumn; }
    		set
    		{
    			if (_displayColumn != value)
    			{
    				ChangeTracker.RecordOriginalValue("DisplayColumn", _displayColumn);
    				_displayColumn = value;
    				DisplayColumnChanged();
    				OnPropertyChanged("DisplayColumn");
    			}
    		}
    	}
    	private int _displayColumn;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;
    	partial void IsOnTopChanged();
    	public bool IsOnTop
    	{
    		get { return _isOnTop; }
    		set
    		{
    			if (_isOnTop != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsOnTop", _isOnTop);
    				_isOnTop = value;
    				IsOnTopChanged();
    				OnPropertyChanged("IsOnTop");
    			}
    		}
    	}
    	private bool _isOnTop;
    	partial void EditableChanged();
    	public bool Editable
    	{
    		get { return _editable; }
    		set
    		{
    			if (_editable != value)
    			{
    				ChangeTracker.RecordOriginalValue("Editable", _editable);
    				_editable = value;
    				EditableChanged();
    				OnPropertyChanged("Editable");
    			}
    		}
    	}
    	private bool _editable;

        #endregion
        #region Navigation Properties
    
    	public Site Site
    	{
    		get { return _site; }
    		set
    		{
    			if (!ReferenceEquals(_site, value))
    			{
    				var previousValue = _site;
    				_site = value;
    				FixupSite(previousValue);
    				OnNavigationPropertyChanged("Site");
    			}
    		}
    	}
    	private Site _site;
    
    	public Widget Widget
    	{
    		get { return _widget; }
    		set
    		{
    			if (!ReferenceEquals(_widget, value))
    			{
    				var previousValue = _widget;
    				_widget = value;
    				FixupWidget(previousValue);
    				OnNavigationPropertyChanged("Widget");
    			}
    		}
    	}
    	private Widget _widget;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Site = null;
    		Widget = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupSite(Site previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.SiteWidgets.Contains(this))
    		{
    			previousValue.SiteWidgets.Remove(this);
    		}
    
    		if (Site != null)
    		{
    			if (!Site.SiteWidgets.Contains(this))
    			{
    				Site.SiteWidgets.Add(this);
    			}
    
    			SiteID = Site.SiteID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Site")
    				&& (ChangeTracker.OriginalValues["Site"] == Site))
    			{
    				ChangeTracker.OriginalValues.Remove("Site");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Site", previousValue);
    			}
    			if (Site != null && !Site.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Site.StartTracking();
    			}
    		}
    	}
    
    	private void FixupWidget(Widget previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.SiteWidgets.Contains(this))
    		{
    			previousValue.SiteWidgets.Remove(this);
    		}
    
    		if (Widget != null)
    		{
    			if (!Widget.SiteWidgets.Contains(this))
    			{
    				Widget.SiteWidgets.Add(this);
    			}
    
    			WidgetID = Widget.WidgetID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Widget")
    				&& (ChangeTracker.OriginalValues["Widget"] == Widget))
    			{
    				ChangeTracker.OriginalValues.Remove("Widget");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Widget", previousValue);
    			}
    			if (Widget != null && !Widget.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Widget.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

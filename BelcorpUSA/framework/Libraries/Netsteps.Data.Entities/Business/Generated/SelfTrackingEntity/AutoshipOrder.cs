//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(AutoshipSchedule))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(Site))]
    [Serializable]
    public partial class AutoshipOrder: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AutoshipOrderIDChanged();
    	public int AutoshipOrderID
    	{
    		get { return _autoshipOrderID; }
    		set
    		{
    			if (_autoshipOrderID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AutoshipOrderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_autoshipOrderID = value;
    				AutoshipOrderIDChanged();
    				OnPropertyChanged("AutoshipOrderID");
    			}
    		}
    	}
    	private int _autoshipOrderID;
    	partial void TemplateOrderIDChanged();
    	public int TemplateOrderID
    	{
    		get { return _templateOrderID; }
    		set
    		{
    			if (_templateOrderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TemplateOrderID", _templateOrderID);
    				if (!IsDeserializing)
    				{
    					if (Order != null && Order.OrderID != value)
    					{
    						Order = null;
    					}
    				}
    				_templateOrderID = value;
    				TemplateOrderIDChanged();
    				OnPropertyChanged("TemplateOrderID");
    			}
    		}
    	}
    	private int _templateOrderID;
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void AutoshipScheduleIDChanged();
    	public int AutoshipScheduleID
    	{
    		get { return _autoshipScheduleID; }
    		set
    		{
    			if (_autoshipScheduleID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipScheduleID", _autoshipScheduleID);
    				if (!IsDeserializing)
    				{
    					if (AutoshipSchedule != null && AutoshipSchedule.AutoshipScheduleID != value)
    					{
    						AutoshipSchedule = null;
    					}
    				}
    				_autoshipScheduleID = value;
    				AutoshipScheduleIDChanged();
    				OnPropertyChanged("AutoshipScheduleID");
    			}
    		}
    	}
    	private int _autoshipScheduleID;
    	partial void ConsecutiveOrdersChanged();
    	public int ConsecutiveOrders
    	{
    		get { return _consecutiveOrders; }
    		set
    		{
    			if (_consecutiveOrders != value)
    			{
    				ChangeTracker.RecordOriginalValue("ConsecutiveOrders", _consecutiveOrders);
    				_consecutiveOrders = value;
    				ConsecutiveOrdersChanged();
    				OnPropertyChanged("ConsecutiveOrders");
    			}
    		}
    	}
    	private int _consecutiveOrders;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void DayChanged();
    	public int Day
    	{
    		get { return _day; }
    		set
    		{
    			if (_day != value)
    			{
    				ChangeTracker.RecordOriginalValue("Day", _day);
    				_day = value;
    				DayChanged();
    				OnPropertyChanged("Day");
    			}
    		}
    	}
    	private int _day;
    	partial void DateLastCreatedChanged();
    	public Nullable<System.DateTime> DateLastCreated
    	{
    		get { return _dateLastCreated; }
    		set
    		{
    			if (_dateLastCreated != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastCreated", _dateLastCreated);
    				_dateLastCreated = value;
    				DateLastCreatedChanged();
    				OnPropertyChanged("DateLastCreated");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _dateLastCreated;
    	partial void LastRunDateChanged();
    	public Nullable<System.DateTime> LastRunDate
    	{
    		get { return _lastRunDate; }
    		set
    		{
    			if (_lastRunDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastRunDate", _lastRunDate);
    				_lastRunDate = value;
    				LastRunDateChanged();
    				OnPropertyChanged("LastRunDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _lastRunDate;
    	partial void NextRunDateChanged();
    	public Nullable<System.DateTime> NextRunDate
    	{
    		get { return _nextRunDate; }
    		set
    		{
    			if (_nextRunDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("NextRunDate", _nextRunDate);
    				_nextRunDate = value;
    				NextRunDateChanged();
    				OnPropertyChanged("NextRunDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _nextRunDate;
    	partial void StartDateChanged();
    	public Nullable<System.DateTime> StartDate
    	{
    		get { return _startDate; }
    		set
    		{
    			if (_startDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDate", _startDate);
    				_startDate = value;
    				StartDateChanged();
    				OnPropertyChanged("StartDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _startDate;
    	partial void EndDateChanged();
    	public Nullable<System.DateTime> EndDate
    	{
    		get { return _endDate; }
    		set
    		{
    			if (_endDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDate", _endDate);
    				_endDate = value;
    				EndDateChanged();
    				OnPropertyChanged("EndDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDate;
    	partial void AutoshipReminderNextRunDateChanged();
    	public Nullable<System.DateTime> AutoshipReminderNextRunDate
    	{
    		get { return _autoshipReminderNextRunDate; }
    		set
    		{
    			if (_autoshipReminderNextRunDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipReminderNextRunDate", _autoshipReminderNextRunDate);
    				_autoshipReminderNextRunDate = value;
    				AutoshipReminderNextRunDateChanged();
    				OnPropertyChanged("AutoshipReminderNextRunDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _autoshipReminderNextRunDate;
    	partial void DateLastModifiedUTCChanged();
    	public System.DateTime DateLastModifiedUTC
    	{
    		get { return _dateLastModifiedUTC; }
    		set
    		{
    			if (_dateLastModifiedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateLastModifiedUTC", _dateLastModifiedUTC);
    				_dateLastModifiedUTC = value;
    				DateLastModifiedUTCChanged();
    				OnPropertyChanged("DateLastModifiedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateLastModifiedUTC;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public AutoshipSchedule AutoshipSchedule
    	{
    		get { return _autoshipSchedule; }
    		set
    		{
    			if (!ReferenceEquals(_autoshipSchedule, value))
    			{
    				var previousValue = _autoshipSchedule;
    				_autoshipSchedule = value;
    				FixupAutoshipSchedule(previousValue);
    				OnNavigationPropertyChanged("AutoshipSchedule");
    			}
    		}
    	}
    	private AutoshipSchedule _autoshipSchedule;
    
    	public Order Order
    	{
    		get { return _order; }
    		set
    		{
    			if (!ReferenceEquals(_order, value))
    			{
    				var previousValue = _order;
    				_order = value;
    				FixupOrder(previousValue);
    				OnNavigationPropertyChanged("Order");
    			}
    		}
    	}
    	private Order _order;
    
    	public TrackableCollection<Site> Sites
    	{
    		get
    		{
    			if (_sites == null)
    			{
    				_sites = new TrackableCollection<Site>();
    				_sites.CollectionChanged += FixupSites;
    				_sites.CollectionChanged += RaiseSitesChanged;
    			}
    			return _sites;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites != null)
    				{
    					_sites.CollectionChanged -= FixupSites;
    					_sites.CollectionChanged -= RaiseSitesChanged;
    				}
    				_sites = value;
    				if (_sites != null)
    				{
    					_sites.CollectionChanged += FixupSites;
    					_sites.CollectionChanged += RaiseSitesChanged;
    				}
    				OnNavigationPropertyChanged("Sites");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites;
    	partial void SitesChanged();
    	private void RaiseSitesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SitesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_sites != null)
    		{
    			_sites.CollectionChanged -= FixupSites;
    			_sites.CollectionChanged -= RaiseSitesChanged;
    			_sites.CollectionChanged += FixupSites;
    			_sites.CollectionChanged += RaiseSitesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		AutoshipSchedule = null;
    		Order = null;
    		Sites.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipOrders.Contains(this))
    		{
    			previousValue.AutoshipOrders.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AutoshipOrders.Contains(this))
    			{
    				Account.AutoshipOrders.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoshipSchedule(AutoshipSchedule previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipOrders.Contains(this))
    		{
    			previousValue.AutoshipOrders.Remove(this);
    		}
    
    		if (AutoshipSchedule != null)
    		{
    			if (!AutoshipSchedule.AutoshipOrders.Contains(this))
    			{
    				AutoshipSchedule.AutoshipOrders.Add(this);
    			}
    
    			AutoshipScheduleID = AutoshipSchedule.AutoshipScheduleID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AutoshipSchedule")
    				&& (ChangeTracker.OriginalValues["AutoshipSchedule"] == AutoshipSchedule))
    			{
    				ChangeTracker.OriginalValues.Remove("AutoshipSchedule");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AutoshipSchedule", previousValue);
    			}
    			if (AutoshipSchedule != null && !AutoshipSchedule.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AutoshipSchedule.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrder(Order previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipOrders.Contains(this))
    		{
    			previousValue.AutoshipOrders.Remove(this);
    		}
    
    		if (Order != null)
    		{
    			if (!Order.AutoshipOrders.Contains(this))
    			{
    				Order.AutoshipOrders.Add(this);
    			}
    
    			TemplateOrderID = Order.OrderID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Order")
    				&& (ChangeTracker.OriginalValues["Order"] == Order))
    			{
    				ChangeTracker.OriginalValues.Remove("Order");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Order", previousValue);
    			}
    			if (Order != null && !Order.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Order.StartTracking();
    			}
    		}
    	}
    
    	private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				item.AutoshipOrder = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AutoshipOrder, this))
    				{
    					item.AutoshipOrder = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

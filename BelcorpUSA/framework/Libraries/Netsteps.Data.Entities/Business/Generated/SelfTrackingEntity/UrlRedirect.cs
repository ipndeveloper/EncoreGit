//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [Serializable]
    public partial class UrlRedirect: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void UrlRedirectIDChanged();
    	public int UrlRedirectID
    	{
    		get { return _urlRedirectID; }
    		set
    		{
    			if (_urlRedirectID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'UrlRedirectID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_urlRedirectID = value;
    				UrlRedirectIDChanged();
    				OnPropertyChanged("UrlRedirectID");
    			}
    		}
    	}
    	private int _urlRedirectID;
    	partial void SiteTypeIDChanged();
    	public short SiteTypeID
    	{
    		get { return _siteTypeID; }
    		set
    		{
    			if (_siteTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SiteTypeID", _siteTypeID);
    				_siteTypeID = value;
    				SiteTypeIDChanged();
    				OnPropertyChanged("SiteTypeID");
    			}
    		}
    	}
    	private short _siteTypeID;
    	partial void UrlChanged();
    	public string Url
    	{
    		get { return _url; }
    		set
    		{
    			if (_url != value)
    			{
    				ChangeTracker.RecordOriginalValue("Url", _url);
    				_url = value;
    				UrlChanged();
    				OnPropertyChanged("Url");
    			}
    		}
    	}
    	private string _url;
    	partial void TargetUrlChanged();
    	public string TargetUrl
    	{
    		get { return _targetUrl; }
    		set
    		{
    			if (_targetUrl != value)
    			{
    				ChangeTracker.RecordOriginalValue("TargetUrl", _targetUrl);
    				_targetUrl = value;
    				TargetUrlChanged();
    				OnPropertyChanged("TargetUrl");
    			}
    		}
    	}
    	private string _targetUrl;
    	partial void IsPermanentChanged();
    	public bool IsPermanent
    	{
    		get { return _isPermanent; }
    		set
    		{
    			if (_isPermanent != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsPermanent", _isPermanent);
    				_isPermanent = value;
    				IsPermanentChanged();
    				OnPropertyChanged("IsPermanent");
    			}
    		}
    	}
    	private bool _isPermanent;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    	}

        #endregion
    }
}

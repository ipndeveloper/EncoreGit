//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductPropertyType))]
    [KnownType(typeof(ProductRelationsType))]
    [Serializable]
    public partial class ProductPropertyTypeRelation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductRelationTypeIDChanged();
    	public int ProductRelationTypeID
    	{
    		get { return _productRelationTypeID; }
    		set
    		{
    			if (_productRelationTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductRelationTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				if (!IsDeserializing)
    				{
    					if (ProductRelationsType != null && ProductRelationsType.ProductRelationTypeID != value)
    					{
    						ProductRelationsType = null;
    					}
    				}
    				_productRelationTypeID = value;
    				ProductRelationTypeIDChanged();
    				OnPropertyChanged("ProductRelationTypeID");
    			}
    		}
    	}
    	private int _productRelationTypeID;
    	partial void ProductPropertyTypeIDChanged();
    	public int ProductPropertyTypeID
    	{
    		get { return _productPropertyTypeID; }
    		set
    		{
    			if (_productPropertyTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductPropertyTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				if (!IsDeserializing)
    				{
    					if (ProductPropertyType != null && ProductPropertyType.ProductPropertyTypeID != value)
    					{
    						ProductPropertyType = null;
    					}
    				}
    				_productPropertyTypeID = value;
    				ProductPropertyTypeIDChanged();
    				OnPropertyChanged("ProductPropertyTypeID");
    			}
    		}
    	}
    	private int _productPropertyTypeID;
    	partial void RelatedProductPropertyTypeIDChanged();
    	public int RelatedProductPropertyTypeID
    	{
    		get { return _relatedProductPropertyTypeID; }
    		set
    		{
    			if (_relatedProductPropertyTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'RelatedProductPropertyTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				if (!IsDeserializing)
    				{
    					if (ProductPropertyType1 != null && ProductPropertyType1.ProductPropertyTypeID != value)
    					{
    						ProductPropertyType1 = null;
    					}
    				}
    				_relatedProductPropertyTypeID = value;
    				RelatedProductPropertyTypeIDChanged();
    				OnPropertyChanged("RelatedProductPropertyTypeID");
    			}
    		}
    	}
    	private int _relatedProductPropertyTypeID;
    	partial void ExclusionChanged();
    	public Nullable<bool> Exclusion
    	{
    		get { return _exclusion; }
    		set
    		{
    			if (_exclusion != value)
    			{
    				ChangeTracker.RecordOriginalValue("Exclusion", _exclusion);
    				_exclusion = value;
    				ExclusionChanged();
    				OnPropertyChanged("Exclusion");
    			}
    		}
    	}
    	private Nullable<bool> _exclusion;

        #endregion
        #region Navigation Properties
    
    	public ProductPropertyType ProductPropertyType
    	{
    		get { return _productPropertyType; }
    		set
    		{
    			if (!ReferenceEquals(_productPropertyType, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
    				{
    					// This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
    					// otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
    					if (ProductPropertyTypeID != value.ProductPropertyTypeID)
    					{
    						throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
    					}
    				}
    				var previousValue = _productPropertyType;
    				_productPropertyType = value;
    				FixupProductPropertyType(previousValue);
    				OnNavigationPropertyChanged("ProductPropertyType");
    			}
    		}
    	}
    	private ProductPropertyType _productPropertyType;
    
    	public ProductPropertyType ProductPropertyType1
    	{
    		get { return _productPropertyType1; }
    		set
    		{
    			if (!ReferenceEquals(_productPropertyType1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
    				{
    					// This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
    					// otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
    					if (RelatedProductPropertyTypeID != value.ProductPropertyTypeID)
    					{
    						throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
    					}
    				}
    				var previousValue = _productPropertyType1;
    				_productPropertyType1 = value;
    				FixupProductPropertyType1(previousValue);
    				OnNavigationPropertyChanged("ProductPropertyType1");
    			}
    		}
    	}
    	private ProductPropertyType _productPropertyType1;
    
    	public ProductRelationsType ProductRelationsType
    	{
    		get { return _productRelationsType; }
    		set
    		{
    			if (!ReferenceEquals(_productRelationsType, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
    				{
    					// This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
    					// otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
    					if (ProductRelationTypeID != value.ProductRelationTypeID)
    					{
    						throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
    					}
    				}
    				var previousValue = _productRelationsType;
    				_productRelationsType = value;
    				FixupProductRelationsType(previousValue);
    				OnNavigationPropertyChanged("ProductRelationsType");
    			}
    		}
    	}
    	private ProductRelationsType _productRelationsType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	// This entity type is the dependent end in at least one association that performs cascade deletes.
    	// This event handler will process notifications that occur when the principal end is deleted.
    	internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			this.MarkAsDeleted();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductPropertyType = null;
    		ProductPropertyType1 = null;
    		ProductRelationsType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductPropertyType(ProductPropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductPropertyTypeRelations.Contains(this))
    		{
    			previousValue.ProductPropertyTypeRelations.Remove(this);
    		}
    
    		if (ProductPropertyType != null)
    		{
    			if (!ProductPropertyType.ProductPropertyTypeRelations.Contains(this))
    			{
    				ProductPropertyType.ProductPropertyTypeRelations.Add(this);
    			}
    
    			ProductPropertyTypeID = ProductPropertyType.ProductPropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductPropertyType")
    				&& (ChangeTracker.OriginalValues["ProductPropertyType"] == ProductPropertyType))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductPropertyType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductPropertyType", previousValue);
    			}
    			if (ProductPropertyType != null && !ProductPropertyType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductPropertyType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductPropertyType1(ProductPropertyType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductPropertyTypeRelations1.Contains(this))
    		{
    			previousValue.ProductPropertyTypeRelations1.Remove(this);
    		}
    
    		if (ProductPropertyType1 != null)
    		{
    			if (!ProductPropertyType1.ProductPropertyTypeRelations1.Contains(this))
    			{
    				ProductPropertyType1.ProductPropertyTypeRelations1.Add(this);
    			}
    
    			RelatedProductPropertyTypeID = ProductPropertyType1.ProductPropertyTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductPropertyType1")
    				&& (ChangeTracker.OriginalValues["ProductPropertyType1"] == ProductPropertyType1))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductPropertyType1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductPropertyType1", previousValue);
    			}
    			if (ProductPropertyType1 != null && !ProductPropertyType1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductPropertyType1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductRelationsType(ProductRelationsType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductPropertyTypeRelations.Contains(this))
    		{
    			previousValue.ProductPropertyTypeRelations.Remove(this);
    		}
    
    		if (ProductRelationsType != null)
    		{
    			if (!ProductRelationsType.ProductPropertyTypeRelations.Contains(this))
    			{
    				ProductRelationsType.ProductPropertyTypeRelations.Add(this);
    			}
    
    			ProductRelationTypeID = ProductRelationsType.ProductRelationTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductRelationsType")
    				&& (ChangeTracker.OriginalValues["ProductRelationsType"] == ProductRelationsType))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductRelationsType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductRelationsType", previousValue);
    			}
    			if (ProductRelationsType != null && !ProductRelationsType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductRelationsType.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

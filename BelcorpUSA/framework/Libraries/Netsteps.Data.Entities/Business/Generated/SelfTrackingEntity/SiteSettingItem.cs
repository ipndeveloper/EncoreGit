//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    
    [Serializable]
    public partial class SiteSettingItem : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				OnComplexPropertyChanging();
    				_name = value;
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    
    	public string Value
    	{
    		get { return _value; }
    		set
    		{
    			if (_value != value)
    			{
    				OnComplexPropertyChanging();
    				_value = value;
    				OnPropertyChanged("Value");
    			}
    		}
    	}
    	private string _value;
    
    	public Nullable<int> SiteID
    	{
    		get { return _siteID; }
    		set
    		{
    			if (_siteID != value)
    			{
    				OnComplexPropertyChanging();
    				_siteID = value;
    				OnPropertyChanged("SiteID");
    			}
    		}
    	}
    	private Nullable<int> _siteID;

        #endregion
        #region ChangeTracking
    
    	private void OnComplexPropertyChanging()
    	{
    		if (_complexPropertyChanging != null)
    		{
    			_complexPropertyChanging(this, new EventArgs());
    		}
    	}
    
    	event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
    	private event EventHandler _complexPropertyChanging;
    
    	private void OnPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    
    	public static void RecordComplexOriginalValues(String parentPropertyName, SiteSettingItem complexObject, ObjectChangeTracker changeTracker)
    	{
    		if (String.IsNullOrEmpty(parentPropertyName))
    		{
    			throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
    		}
    
    		if (changeTracker == null)
    		{
    			throw new ArgumentNullException("changeTracker");
    		}
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Name", parentPropertyName), complexObject == null ? null : (object)complexObject.Name);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Value", parentPropertyName), complexObject == null ? null : (object)complexObject.Value);
    		changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SiteID", parentPropertyName), complexObject == null ? null : (object)complexObject.SiteID);
    	}

        #endregion
    }
}

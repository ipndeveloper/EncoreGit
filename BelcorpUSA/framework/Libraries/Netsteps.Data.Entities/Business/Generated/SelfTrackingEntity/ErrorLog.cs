//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [Serializable]
    public partial class ErrorLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ErrorLogIDChanged();
    	public int ErrorLogID
    	{
    		get { return _errorLogID; }
    		set
    		{
    			if (_errorLogID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ErrorLogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_errorLogID = value;
    				ErrorLogIDChanged();
    				OnPropertyChanged("ErrorLogID");
    			}
    		}
    	}
    	private int _errorLogID;
    	partial void SessionIDChanged();
    	public string SessionID
    	{
    		get { return _sessionID; }
    		set
    		{
    			if (_sessionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("SessionID", _sessionID);
    				_sessionID = value;
    				SessionIDChanged();
    				OnPropertyChanged("SessionID");
    			}
    		}
    	}
    	private string _sessionID;
    	partial void ApplicationIDChanged();
    	public Nullable<short> ApplicationID
    	{
    		get { return _applicationID; }
    		set
    		{
    			if (_applicationID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ApplicationID", _applicationID);
    				_applicationID = value;
    				ApplicationIDChanged();
    				OnPropertyChanged("ApplicationID");
    			}
    		}
    	}
    	private Nullable<short> _applicationID;
    	partial void AccountIDChanged();
    	public Nullable<int> AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private Nullable<int> _accountID;
    	partial void UserIDChanged();
    	public Nullable<int> UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserID", _userID);
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private Nullable<int> _userID;
    	partial void OrderIDChanged();
    	public Nullable<int> OrderID
    	{
    		get { return _orderID; }
    		set
    		{
    			if (_orderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("OrderID", _orderID);
    				_orderID = value;
    				OrderIDChanged();
    				OnPropertyChanged("OrderID");
    			}
    		}
    	}
    	private Nullable<int> _orderID;
    	partial void LogDateUTCChanged();
    	public System.DateTime LogDateUTC
    	{
    		get { return _logDateUTC; }
    		set
    		{
    			if (_logDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("LogDateUTC", _logDateUTC);
    				_logDateUTC = value;
    				LogDateUTCChanged();
    				OnPropertyChanged("LogDateUTC");
    			}
    		}
    	}
    	private System.DateTime _logDateUTC;
    	partial void MachineNameChanged();
    	public string MachineName
    	{
    		get { return _machineName; }
    		set
    		{
    			if (_machineName != value)
    			{
    				ChangeTracker.RecordOriginalValue("MachineName", _machineName);
    				_machineName = value;
    				MachineNameChanged();
    				OnPropertyChanged("MachineName");
    			}
    		}
    	}
    	private string _machineName;
    	partial void ExceptionTypeNameChanged();
    	public string ExceptionTypeName
    	{
    		get { return _exceptionTypeName; }
    		set
    		{
    			if (_exceptionTypeName != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExceptionTypeName", _exceptionTypeName);
    				_exceptionTypeName = value;
    				ExceptionTypeNameChanged();
    				OnPropertyChanged("ExceptionTypeName");
    			}
    		}
    	}
    	private string _exceptionTypeName;
    	partial void SourceChanged();
    	public string Source
    	{
    		get { return _source; }
    		set
    		{
    			if (_source != value)
    			{
    				ChangeTracker.RecordOriginalValue("Source", _source);
    				_source = value;
    				SourceChanged();
    				OnPropertyChanged("Source");
    			}
    		}
    	}
    	private string _source;
    	partial void MessageChanged();
    	public string Message
    	{
    		get { return _message; }
    		set
    		{
    			if (_message != value)
    			{
    				ChangeTracker.RecordOriginalValue("Message", _message);
    				_message = value;
    				MessageChanged();
    				OnPropertyChanged("Message");
    			}
    		}
    	}
    	private string _message;
    	partial void PublicMessageChanged();
    	public string PublicMessage
    	{
    		get { return _publicMessage; }
    		set
    		{
    			if (_publicMessage != value)
    			{
    				ChangeTracker.RecordOriginalValue("PublicMessage", _publicMessage);
    				_publicMessage = value;
    				PublicMessageChanged();
    				OnPropertyChanged("PublicMessage");
    			}
    		}
    	}
    	private string _publicMessage;
    	partial void FormChanged();
    	public string Form
    	{
    		get { return _form; }
    		set
    		{
    			if (_form != value)
    			{
    				ChangeTracker.RecordOriginalValue("Form", _form);
    				_form = value;
    				FormChanged();
    				OnPropertyChanged("Form");
    			}
    		}
    	}
    	private string _form;
    	partial void QueryStringChanged();
    	public string QueryString
    	{
    		get { return _queryString; }
    		set
    		{
    			if (_queryString != value)
    			{
    				ChangeTracker.RecordOriginalValue("QueryString", _queryString);
    				_queryString = value;
    				QueryStringChanged();
    				OnPropertyChanged("QueryString");
    			}
    		}
    	}
    	private string _queryString;
    	partial void TargetSiteChanged();
    	public string TargetSite
    	{
    		get { return _targetSite; }
    		set
    		{
    			if (_targetSite != value)
    			{
    				ChangeTracker.RecordOriginalValue("TargetSite", _targetSite);
    				_targetSite = value;
    				TargetSiteChanged();
    				OnPropertyChanged("TargetSite");
    			}
    		}
    	}
    	private string _targetSite;
    	partial void StackTraceChanged();
    	public string StackTrace
    	{
    		get { return _stackTrace; }
    		set
    		{
    			if (_stackTrace != value)
    			{
    				ChangeTracker.RecordOriginalValue("StackTrace", _stackTrace);
    				_stackTrace = value;
    				StackTraceChanged();
    				OnPropertyChanged("StackTrace");
    			}
    		}
    	}
    	private string _stackTrace;
    	partial void ReferrerChanged();
    	public string Referrer
    	{
    		get { return _referrer; }
    		set
    		{
    			if (_referrer != value)
    			{
    				ChangeTracker.RecordOriginalValue("Referrer", _referrer);
    				_referrer = value;
    				ReferrerChanged();
    				OnPropertyChanged("Referrer");
    			}
    		}
    	}
    	private string _referrer;
    	partial void BrowserInfoChanged();
    	public string BrowserInfo
    	{
    		get { return _browserInfo; }
    		set
    		{
    			if (_browserInfo != value)
    			{
    				ChangeTracker.RecordOriginalValue("BrowserInfo", _browserInfo);
    				_browserInfo = value;
    				BrowserInfoChanged();
    				OnPropertyChanged("BrowserInfo");
    			}
    		}
    	}
    	private string _browserInfo;
    	partial void UserHostAddressChanged();
    	public string UserHostAddress
    	{
    		get { return _userHostAddress; }
    		set
    		{
    			if (_userHostAddress != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserHostAddress", _userHostAddress);
    				_userHostAddress = value;
    				UserHostAddressChanged();
    				OnPropertyChanged("UserHostAddress");
    			}
    		}
    	}
    	private string _userHostAddress;
    	partial void IsUnhandledExeptionChanged();
    	public Nullable<bool> IsUnhandledExeption
    	{
    		get { return _isUnhandledExeption; }
    		set
    		{
    			if (_isUnhandledExeption != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsUnhandledExeption", _isUnhandledExeption);
    				_isUnhandledExeption = value;
    				IsUnhandledExeptionChanged();
    				OnPropertyChanged("IsUnhandledExeption");
    			}
    		}
    	}
    	private Nullable<bool> _isUnhandledExeption;
    	partial void InternalMessageChanged();
    	public string InternalMessage
    	{
    		get { return _internalMessage; }
    		set
    		{
    			if (_internalMessage != value)
    			{
    				ChangeTracker.RecordOriginalValue("InternalMessage", _internalMessage);
    				_internalMessage = value;
    				InternalMessageChanged();
    				OnPropertyChanged("InternalMessage");
    			}
    		}
    	}
    	private string _internalMessage;
    	partial void ApplicationPoolNameChanged();
    	public string ApplicationPoolName
    	{
    		get { return _applicationPoolName; }
    		set
    		{
    			if (_applicationPoolName != value)
    			{
    				ChangeTracker.RecordOriginalValue("ApplicationPoolName", _applicationPoolName);
    				_applicationPoolName = value;
    				ApplicationPoolNameChanged();
    				OnPropertyChanged("ApplicationPoolName");
    			}
    		}
    	}
    	private string _applicationPoolName;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    	}

        #endregion
    }
}

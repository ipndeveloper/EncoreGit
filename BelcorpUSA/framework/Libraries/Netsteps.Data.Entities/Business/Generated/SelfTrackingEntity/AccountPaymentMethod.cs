//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(PaymentType))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Address))]
    [KnownType(typeof(BankAccountType))]
    [Serializable]
    public partial class AccountPaymentMethod: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountPaymentMethodIDChanged();
    	public int AccountPaymentMethodID
    	{
    		get { return _accountPaymentMethodID; }
    		set
    		{
    			if (_accountPaymentMethodID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountPaymentMethodID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountPaymentMethodID = value;
    				AccountPaymentMethodIDChanged();
    				OnPropertyChanged("AccountPaymentMethodID");
    			}
    		}
    	}
    	private int _accountPaymentMethodID;
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void PaymentTypeIDChanged();
    	public int PaymentTypeID
    	{
    		get { return _paymentTypeID; }
    		set
    		{
    			if (_paymentTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PaymentTypeID", _paymentTypeID);
    				if (!IsDeserializing)
    				{
    					if (PaymentType != null && PaymentType.PaymentTypeID != value)
    					{
    						PaymentType = null;
    					}
    				}
    				_paymentTypeID = value;
    				PaymentTypeIDChanged();
    				OnPropertyChanged("PaymentTypeID");
    			}
    		}
    	}
    	private int _paymentTypeID;
    	partial void ProfileNameChanged();
    	public string ProfileName
    	{
    		get { return _profileName; }
    		set
    		{
    			if (_profileName != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProfileName", _profileName);
    				_profileName = value;
    				ProfileNameChanged();
    				OnPropertyChanged("ProfileName");
    			}
    		}
    	}
    	private string _profileName;
    	partial void FirstNameChanged();
    	public string FirstName
    	{
    		get { return _firstName; }
    		set
    		{
    			if (_firstName != value)
    			{
    				ChangeTracker.RecordOriginalValue("FirstName", _firstName);
    				_firstName = value;
    				FirstNameChanged();
    				OnPropertyChanged("FirstName");
    			}
    		}
    	}
    	private string _firstName;
    	partial void LastNameChanged();
    	public string LastName
    	{
    		get { return _lastName; }
    		set
    		{
    			if (_lastName != value)
    			{
    				ChangeTracker.RecordOriginalValue("LastName", _lastName);
    				_lastName = value;
    				LastNameChanged();
    				OnPropertyChanged("LastName");
    			}
    		}
    	}
    	private string _lastName;
    	partial void NameOnCardChanged();
    	public string NameOnCard
    	{
    		get { return _nameOnCard; }
    		set
    		{
    			if (_nameOnCard != value)
    			{
    				ChangeTracker.RecordOriginalValue("NameOnCard", _nameOnCard);
    				_nameOnCard = value;
    				NameOnCardChanged();
    				OnPropertyChanged("NameOnCard");
    			}
    		}
    	}
    	private string _nameOnCard;
    	partial void AccountNumberChanged();
    	public string AccountNumber
    	{
    		get { return _accountNumber; }
    		internal set
    		{
    			if (_accountNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountNumber", _accountNumber);
    				_accountNumber = value;
    				AccountNumberChanged();
    				OnPropertyChanged("AccountNumber");
    			}
    		}
    	}
    	private string _accountNumber;
    	partial void ExpirationDateUTCChanged();
    	public Nullable<System.DateTime> ExpirationDateUTC
    	{
    		get { return _expirationDateUTC; }
    		set
    		{
    			if (_expirationDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpirationDateUTC", _expirationDateUTC);
    				_expirationDateUTC = value;
    				ExpirationDateUTCChanged();
    				OnPropertyChanged("ExpirationDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _expirationDateUTC;
    	partial void BillingAddressIDChanged();
    	public Nullable<int> BillingAddressID
    	{
    		get { return _billingAddressID; }
    		set
    		{
    			if (_billingAddressID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BillingAddressID", _billingAddressID);
    				if (!IsDeserializing)
    				{
    					if (BillingAddress != null && BillingAddress.AddressID != value)
    					{
    						BillingAddress = null;
    					}
    				}
    				_billingAddressID = value;
    				BillingAddressIDChanged();
    				OnPropertyChanged("BillingAddressID");
    			}
    		}
    	}
    	private Nullable<int> _billingAddressID;
    	partial void IsDefaultChanged();
    	public bool IsDefault
    	{
    		get { return _isDefault; }
    		set
    		{
    			if (_isDefault != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsDefault", _isDefault);
    				_isDefault = value;
    				IsDefaultChanged();
    				OnPropertyChanged("IsDefault");
    			}
    		}
    	}
    	private bool _isDefault;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void RoutingNumberChanged();
    	public string RoutingNumber
    	{
    		get { return _routingNumber; }
    		set
    		{
    			if (_routingNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("RoutingNumber", _routingNumber);
    				_routingNumber = value;
    				RoutingNumberChanged();
    				OnPropertyChanged("RoutingNumber");
    			}
    		}
    	}
    	private string _routingNumber;
    	partial void BankAccountTypeIDChanged();
    	public Nullable<short> BankAccountTypeID
    	{
    		get { return _bankAccountTypeID; }
    		set
    		{
    			if (_bankAccountTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("BankAccountTypeID", _bankAccountTypeID);
    				if (!IsDeserializing)
    				{
    					if (BankAccountType != null && BankAccountType.BankAccountTypeID != value)
    					{
    						BankAccountType = null;
    					}
    				}
    				_bankAccountTypeID = value;
    				BankAccountTypeIDChanged();
    				OnPropertyChanged("BankAccountTypeID");
    			}
    		}
    	}
    	private Nullable<short> _bankAccountTypeID;
    	partial void BankNameChanged();
    	public string BankName
    	{
    		get { return _bankName; }
    		set
    		{
    			if (_bankName != value)
    			{
    				ChangeTracker.RecordOriginalValue("BankName", _bankName);
    				_bankName = value;
    				BankNameChanged();
    				OnPropertyChanged("BankName");
    			}
    		}
    	}
    	private string _bankName;

        #endregion
        #region Navigation Properties
    
    	public PaymentType PaymentType
    	{
    		get { return _paymentType; }
    		set
    		{
    			if (!ReferenceEquals(_paymentType, value))
    			{
    				var previousValue = _paymentType;
    				_paymentType = value;
    				FixupPaymentType(previousValue);
    				OnNavigationPropertyChanged("PaymentType");
    			}
    		}
    	}
    	private PaymentType _paymentType;
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public Address BillingAddress
    	{
    		get { return _billingAddress; }
    		set
    		{
    			if (!ReferenceEquals(_billingAddress, value))
    			{
    				var previousValue = _billingAddress;
    				_billingAddress = value;
    				FixupBillingAddress(previousValue);
    				OnNavigationPropertyChanged("BillingAddress");
    			}
    		}
    	}
    	private Address _billingAddress;
    
    	public BankAccountType BankAccountType
    	{
    		get { return _bankAccountType; }
    		set
    		{
    			if (!ReferenceEquals(_bankAccountType, value))
    			{
    				var previousValue = _bankAccountType;
    				_bankAccountType = value;
    				FixupBankAccountType(previousValue);
    				OnNavigationPropertyChanged("BankAccountType");
    			}
    		}
    	}
    	private BankAccountType _bankAccountType;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		PaymentType = null;
    		Account = null;
    		User = null;
    		BillingAddress = null;
    		BankAccountType = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupPaymentType(PaymentType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPaymentMethods.Contains(this))
    		{
    			previousValue.AccountPaymentMethods.Remove(this);
    		}
    
    		if (PaymentType != null)
    		{
    			if (!PaymentType.AccountPaymentMethods.Contains(this))
    			{
    				PaymentType.AccountPaymentMethods.Add(this);
    			}
    
    			PaymentTypeID = PaymentType.PaymentTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("PaymentType")
    				&& (ChangeTracker.OriginalValues["PaymentType"] == PaymentType))
    			{
    				ChangeTracker.OriginalValues.Remove("PaymentType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("PaymentType", previousValue);
    			}
    			if (PaymentType != null && !PaymentType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				PaymentType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAccount(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPaymentMethods.Contains(this))
    		{
    			previousValue.AccountPaymentMethods.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AccountPaymentMethods.Contains(this))
    			{
    				Account.AccountPaymentMethods.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPaymentMethods.Contains(this))
    		{
    			previousValue.AccountPaymentMethods.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.AccountPaymentMethods.Contains(this))
    			{
    				User.AccountPaymentMethods.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupBillingAddress(Address previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPaymentMethods.Contains(this))
    		{
    			previousValue.AccountPaymentMethods.Remove(this);
    		}
    
    		if (BillingAddress != null)
    		{
    			if (!BillingAddress.AccountPaymentMethods.Contains(this))
    			{
    				BillingAddress.AccountPaymentMethods.Add(this);
    			}
    
    			BillingAddressID = BillingAddress.AddressID;
    		}
    		else if (!skipKeys)
    		{
    			BillingAddressID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("BillingAddress")
    				&& (ChangeTracker.OriginalValues["BillingAddress"] == BillingAddress))
    			{
    				ChangeTracker.OriginalValues.Remove("BillingAddress");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("BillingAddress", previousValue);
    			}
    			if (BillingAddress != null && !BillingAddress.ChangeTracker.ChangeTrackingEnabled)
    			{
    				BillingAddress.StartTracking();
    			}
    		}
    	}
    
    	private void FixupBankAccountType(BankAccountType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPaymentMethods.Contains(this))
    		{
    			previousValue.AccountPaymentMethods.Remove(this);
    		}
    
    		if (BankAccountType != null)
    		{
    			if (!BankAccountType.AccountPaymentMethods.Contains(this))
    			{
    				BankAccountType.AccountPaymentMethods.Add(this);
    			}
    
    			BankAccountTypeID = BankAccountType.BankAccountTypeID;
    		}
    		else if (!skipKeys)
    		{
    			BankAccountTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("BankAccountType")
    				&& (ChangeTracker.OriginalValues["BankAccountType"] == BankAccountType))
    			{
    				ChangeTracker.OriginalValues.Remove("BankAccountType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("BankAccountType", previousValue);
    			}
    			if (BankAccountType != null && !BankAccountType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				BankAccountType.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

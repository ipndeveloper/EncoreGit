//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(OrderPayment))]
    [KnownType(typeof(AccountPaymentMethod))]
    [KnownType(typeof(PaymentOrderType))]
    [Serializable]
    public partial class PaymentType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void PaymentTypeIDChanged();
    	public int PaymentTypeID
    	{
    		get { return _paymentTypeID; }
    		set
    		{
    			if (_paymentTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'PaymentTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_paymentTypeID = value;
    				PaymentTypeIDChanged();
    				OnPropertyChanged("PaymentTypeID");
    			}
    		}
    	}
    	private int _paymentTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void PaymentTypeCodeChanged();
    	public string PaymentTypeCode
    	{
    		get { return _paymentTypeCode; }
    		set
    		{
    			if (_paymentTypeCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("PaymentTypeCode", _paymentTypeCode);
    				_paymentTypeCode = value;
    				PaymentTypeCodeChanged();
    				OnPropertyChanged("PaymentTypeCode");
    			}
    		}
    	}
    	private string _paymentTypeCode;
    	partial void IsCreditCardChanged();
    	public bool IsCreditCard
    	{
    		get { return _isCreditCard; }
    		set
    		{
    			if (_isCreditCard != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsCreditCard", _isCreditCard);
    				_isCreditCard = value;
    				IsCreditCardChanged();
    				OnPropertyChanged("IsCreditCard");
    			}
    		}
    	}
    	private bool _isCreditCard;
    	partial void IsCashChanged();
    	public bool IsCash
    	{
    		get { return _isCash; }
    		set
    		{
    			if (_isCash != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsCash", _isCash);
    				_isCash = value;
    				IsCashChanged();
    				OnPropertyChanged("IsCash");
    			}
    		}
    	}
    	private bool _isCash;
    	partial void IsCheckChanged();
    	public bool IsCheck
    	{
    		get { return _isCheck; }
    		set
    		{
    			if (_isCheck != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsCheck", _isCheck);
    				_isCheck = value;
    				IsCheckChanged();
    				OnPropertyChanged("IsCheck");
    			}
    		}
    	}
    	private bool _isCheck;
    	partial void IsEFTChanged();
    	public bool IsEFT
    	{
    		get { return _isEFT; }
    		set
    		{
    			if (_isEFT != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsEFT", _isEFT);
    				_isEFT = value;
    				IsEFTChanged();
    				OnPropertyChanged("IsEFT");
    			}
    		}
    	}
    	private bool _isEFT;
    	partial void IsGiftCardChanged();
    	public bool IsGiftCard
    	{
    		get { return _isGiftCard; }
    		set
    		{
    			if (_isGiftCard != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsGiftCard", _isGiftCard);
    				_isGiftCard = value;
    				IsGiftCardChanged();
    				OnPropertyChanged("IsGiftCard");
    			}
    		}
    	}
    	private bool _isGiftCard;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void FunctionNameChanged();
    	public string FunctionName
    	{
    		get { return _functionName; }
    		set
    		{
    			if (_functionName != value)
    			{
    				ChangeTracker.RecordOriginalValue("FunctionName", _functionName);
    				_functionName = value;
    				FunctionNameChanged();
    				OnPropertyChanged("FunctionName");
    			}
    		}
    	}
    	private string _functionName;
    	partial void CanPayForShippingAndHandlingChanged();
    	public bool CanPayForShippingAndHandling
    	{
    		get { return _canPayForShippingAndHandling; }
    		set
    		{
    			if (_canPayForShippingAndHandling != value)
    			{
    				ChangeTracker.RecordOriginalValue("CanPayForShippingAndHandling", _canPayForShippingAndHandling);
    				_canPayForShippingAndHandling = value;
    				CanPayForShippingAndHandlingChanged();
    				OnPropertyChanged("CanPayForShippingAndHandling");
    			}
    		}
    	}
    	private bool _canPayForShippingAndHandling;
    	partial void CanPayForTaxChanged();
    	public bool CanPayForTax
    	{
    		get { return _canPayForTax; }
    		set
    		{
    			if (_canPayForTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CanPayForTax", _canPayForTax);
    				_canPayForTax = value;
    				CanPayForTaxChanged();
    				OnPropertyChanged("CanPayForTax");
    			}
    		}
    	}
    	private bool _canPayForTax;
    	partial void IsCommissionableChanged();
    	public bool IsCommissionable
    	{
    		get { return _isCommissionable; }
    		set
    		{
    			if (_isCommissionable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsCommissionable", _isCommissionable);
    				_isCommissionable = value;
    				IsCommissionableChanged();
    				OnPropertyChanged("IsCommissionable");
    			}
    		}
    	}
    	private bool _isCommissionable;
    	partial void IsPaymentTicketChanged();
    	public bool IsPaymentTicket
    	{
    		get { return _isPaymentTicket; }
    		set
    		{
    			if (_isPaymentTicket != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsPaymentTicket", _isPaymentTicket);
    				_isPaymentTicket = value;
    				IsPaymentTicketChanged();
    				OnPropertyChanged("IsPaymentTicket");
    			}
    		}
    	}
    	private bool _isPaymentTicket;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<OrderPayment> OrderPayments
    	{
    		get
    		{
    			if (_orderPayments == null)
    			{
    				_orderPayments = new TrackableCollection<OrderPayment>();
    				_orderPayments.CollectionChanged += FixupOrderPayments;
    				_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    			}
    			return _orderPayments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPayments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged -= FixupOrderPayments;
    					_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    				}
    				_orderPayments = value;
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged += FixupOrderPayments;
    					_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPayments");
    			}
    		}
    	}
    	private TrackableCollection<OrderPayment> _orderPayments;
    	partial void OrderPaymentsChanged();
    	private void RaiseOrderPaymentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentsChanged();
    	}
    
    	public TrackableCollection<AccountPaymentMethod> AccountPaymentMethods
    	{
    		get
    		{
    			if (_accountPaymentMethods == null)
    			{
    				_accountPaymentMethods = new TrackableCollection<AccountPaymentMethod>();
    				_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    				_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    			}
    			return _accountPaymentMethods;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accountPaymentMethods, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accountPaymentMethods != null)
    				{
    					_accountPaymentMethods.CollectionChanged -= FixupAccountPaymentMethods;
    					_accountPaymentMethods.CollectionChanged -= RaiseAccountPaymentMethodsChanged;
    				}
    				_accountPaymentMethods = value;
    				if (_accountPaymentMethods != null)
    				{
    					_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    					_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    				}
    				OnNavigationPropertyChanged("AccountPaymentMethods");
    			}
    		}
    	}
    	private TrackableCollection<AccountPaymentMethod> _accountPaymentMethods;
    	partial void AccountPaymentMethodsChanged();
    	private void RaiseAccountPaymentMethodsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountPaymentMethodsChanged();
    	}
    
    	public TrackableCollection<PaymentOrderType> PaymentOrderTypes
    	{
    		get
    		{
    			if (_paymentOrderTypes == null)
    			{
    				_paymentOrderTypes = new TrackableCollection<PaymentOrderType>();
    				_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    				_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    			}
    			return _paymentOrderTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_paymentOrderTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_paymentOrderTypes != null)
    				{
    					_paymentOrderTypes.CollectionChanged -= FixupPaymentOrderTypes;
    					_paymentOrderTypes.CollectionChanged -= RaisePaymentOrderTypesChanged;
    				}
    				_paymentOrderTypes = value;
    				if (_paymentOrderTypes != null)
    				{
    					_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    					_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    				}
    				OnNavigationPropertyChanged("PaymentOrderTypes");
    			}
    		}
    	}
    	private TrackableCollection<PaymentOrderType> _paymentOrderTypes;
    	partial void PaymentOrderTypesChanged();
    	private void RaisePaymentOrderTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PaymentOrderTypesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderPayments != null)
    		{
    			_orderPayments.CollectionChanged -= FixupOrderPayments;
    			_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    			_orderPayments.CollectionChanged += FixupOrderPayments;
    			_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    		}
    		if (_accountPaymentMethods != null)
    		{
    			_accountPaymentMethods.CollectionChanged -= FixupAccountPaymentMethods;
    			_accountPaymentMethods.CollectionChanged -= RaiseAccountPaymentMethodsChanged;
    			_accountPaymentMethods.CollectionChanged += FixupAccountPaymentMethods;
    			_accountPaymentMethods.CollectionChanged += RaiseAccountPaymentMethodsChanged;
    		}
    		if (_paymentOrderTypes != null)
    		{
    			_paymentOrderTypes.CollectionChanged -= FixupPaymentOrderTypes;
    			_paymentOrderTypes.CollectionChanged -= RaisePaymentOrderTypesChanged;
    			_paymentOrderTypes.CollectionChanged += FixupPaymentOrderTypes;
    			_paymentOrderTypes.CollectionChanged += RaisePaymentOrderTypesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		OrderPayments.Clear();
    		AccountPaymentMethods.Clear();
    		PaymentOrderTypes.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupOrderPayments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPayment item in e.NewItems)
    			{
    				item.PaymentType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPayment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.PaymentType, this))
    				{
    					item.PaymentType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccountPaymentMethods(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AccountPaymentMethod item in e.NewItems)
    			{
    				item.PaymentType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AccountPaymentMethods", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AccountPaymentMethod item in e.OldItems)
    			{
    				if (ReferenceEquals(item.PaymentType, this))
    				{
    					item.PaymentType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AccountPaymentMethods", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPaymentOrderTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (PaymentOrderType item in e.NewItems)
    			{
    				item.PaymentType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("PaymentOrderTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (PaymentOrderType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.PaymentType, this))
    				{
    					item.PaymentType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("PaymentOrderTypes", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

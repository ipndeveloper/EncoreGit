//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Country))]
    [KnownType(typeof(TaxCategory))]
    [Serializable]
    public partial class TaxCacheOverride: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void TaxCacheOverrideIDChanged();
    	public int TaxCacheOverrideID
    	{
    		get { return _taxCacheOverrideID; }
    		set
    		{
    			if (_taxCacheOverrideID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'TaxCacheOverrideID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_taxCacheOverrideID = value;
    				TaxCacheOverrideIDChanged();
    				OnPropertyChanged("TaxCacheOverrideID");
    			}
    		}
    	}
    	private int _taxCacheOverrideID;
    	partial void TaxCategoryIDChanged();
    	public Nullable<int> TaxCategoryID
    	{
    		get { return _taxCategoryID; }
    		set
    		{
    			if (_taxCategoryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("TaxCategoryID", _taxCategoryID);
    				if (!IsDeserializing)
    				{
    					if (TaxCategory != null && TaxCategory.TaxCategoryID != value)
    					{
    						TaxCategory = null;
    					}
    				}
    				_taxCategoryID = value;
    				TaxCategoryIDChanged();
    				OnPropertyChanged("TaxCategoryID");
    			}
    		}
    	}
    	private Nullable<int> _taxCategoryID;
    	partial void PostalCodeChanged();
    	public string PostalCode
    	{
    		get { return _postalCode; }
    		set
    		{
    			if (_postalCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("PostalCode", _postalCode);
    				_postalCode = value;
    				PostalCodeChanged();
    				OnPropertyChanged("PostalCode");
    			}
    		}
    	}
    	private string _postalCode;
    	partial void StateChanged();
    	public string State
    	{
    		get { return _state; }
    		set
    		{
    			if (_state != value)
    			{
    				ChangeTracker.RecordOriginalValue("State", _state);
    				_state = value;
    				StateChanged();
    				OnPropertyChanged("State");
    			}
    		}
    	}
    	private string _state;
    	partial void StateAbbreviationChanged();
    	public string StateAbbreviation
    	{
    		get { return _stateAbbreviation; }
    		set
    		{
    			if (_stateAbbreviation != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateAbbreviation", _stateAbbreviation);
    				_stateAbbreviation = value;
    				StateAbbreviationChanged();
    				OnPropertyChanged("StateAbbreviation");
    			}
    		}
    	}
    	private string _stateAbbreviation;
    	partial void CityChanged();
    	public string City
    	{
    		get { return _city; }
    		set
    		{
    			if (_city != value)
    			{
    				ChangeTracker.RecordOriginalValue("City", _city);
    				_city = value;
    				CityChanged();
    				OnPropertyChanged("City");
    			}
    		}
    	}
    	private string _city;
    	partial void CountyChanged();
    	public string County
    	{
    		get { return _county; }
    		set
    		{
    			if (_county != value)
    			{
    				ChangeTracker.RecordOriginalValue("County", _county);
    				_county = value;
    				CountyChanged();
    				OnPropertyChanged("County");
    			}
    		}
    	}
    	private string _county;
    	partial void CountryIDChanged();
    	public Nullable<int> CountryID
    	{
    		get { return _countryID; }
    		set
    		{
    			if (_countryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryID", _countryID);
    				if (!IsDeserializing)
    				{
    					if (Country != null && Country.CountryID != value)
    					{
    						Country = null;
    					}
    				}
    				_countryID = value;
    				CountryIDChanged();
    				OnPropertyChanged("CountryID");
    			}
    		}
    	}
    	private Nullable<int> _countryID;
    	partial void CitySalesTaxChanged();
    	public Nullable<decimal> CitySalesTax
    	{
    		get { return _citySalesTax; }
    		set
    		{
    			if (_citySalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CitySalesTax", _citySalesTax);
    				_citySalesTax = value;
    				CitySalesTaxChanged();
    				OnPropertyChanged("CitySalesTax");
    			}
    		}
    	}
    	private Nullable<decimal> _citySalesTax;
    	partial void CityUseTaxChanged();
    	public Nullable<decimal> CityUseTax
    	{
    		get { return _cityUseTax; }
    		set
    		{
    			if (_cityUseTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CityUseTax", _cityUseTax);
    				_cityUseTax = value;
    				CityUseTaxChanged();
    				OnPropertyChanged("CityUseTax");
    			}
    		}
    	}
    	private Nullable<decimal> _cityUseTax;
    	partial void CityLocalSalesChanged();
    	public Nullable<decimal> CityLocalSales
    	{
    		get { return _cityLocalSales; }
    		set
    		{
    			if (_cityLocalSales != value)
    			{
    				ChangeTracker.RecordOriginalValue("CityLocalSales", _cityLocalSales);
    				_cityLocalSales = value;
    				CityLocalSalesChanged();
    				OnPropertyChanged("CityLocalSales");
    			}
    		}
    	}
    	private Nullable<decimal> _cityLocalSales;
    	partial void CityLocalUseChanged();
    	public Nullable<decimal> CityLocalUse
    	{
    		get { return _cityLocalUse; }
    		set
    		{
    			if (_cityLocalUse != value)
    			{
    				ChangeTracker.RecordOriginalValue("CityLocalUse", _cityLocalUse);
    				_cityLocalUse = value;
    				CityLocalUseChanged();
    				OnPropertyChanged("CityLocalUse");
    			}
    		}
    	}
    	private Nullable<decimal> _cityLocalUse;
    	partial void CountySalesTaxChanged();
    	public Nullable<decimal> CountySalesTax
    	{
    		get { return _countySalesTax; }
    		set
    		{
    			if (_countySalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountySalesTax", _countySalesTax);
    				_countySalesTax = value;
    				CountySalesTaxChanged();
    				OnPropertyChanged("CountySalesTax");
    			}
    		}
    	}
    	private Nullable<decimal> _countySalesTax;
    	partial void CountyUseTaxChanged();
    	public Nullable<decimal> CountyUseTax
    	{
    		get { return _countyUseTax; }
    		set
    		{
    			if (_countyUseTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyUseTax", _countyUseTax);
    				_countyUseTax = value;
    				CountyUseTaxChanged();
    				OnPropertyChanged("CountyUseTax");
    			}
    		}
    	}
    	private Nullable<decimal> _countyUseTax;
    	partial void CountyLocalSalesChanged();
    	public Nullable<decimal> CountyLocalSales
    	{
    		get { return _countyLocalSales; }
    		set
    		{
    			if (_countyLocalSales != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyLocalSales", _countyLocalSales);
    				_countyLocalSales = value;
    				CountyLocalSalesChanged();
    				OnPropertyChanged("CountyLocalSales");
    			}
    		}
    	}
    	private Nullable<decimal> _countyLocalSales;
    	partial void CountyLocalUseChanged();
    	public Nullable<decimal> CountyLocalUse
    	{
    		get { return _countyLocalUse; }
    		set
    		{
    			if (_countyLocalUse != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountyLocalUse", _countyLocalUse);
    				_countyLocalUse = value;
    				CountyLocalUseChanged();
    				OnPropertyChanged("CountyLocalUse");
    			}
    		}
    	}
    	private Nullable<decimal> _countyLocalUse;
    	partial void CountrySalesTaxChanged();
    	public Nullable<decimal> CountrySalesTax
    	{
    		get { return _countrySalesTax; }
    		set
    		{
    			if (_countrySalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountrySalesTax", _countrySalesTax);
    				_countrySalesTax = value;
    				CountrySalesTaxChanged();
    				OnPropertyChanged("CountrySalesTax");
    			}
    		}
    	}
    	private Nullable<decimal> _countrySalesTax;
    	partial void DistrictSalesTaxChanged();
    	public Nullable<decimal> DistrictSalesTax
    	{
    		get { return _districtSalesTax; }
    		set
    		{
    			if (_districtSalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("DistrictSalesTax", _districtSalesTax);
    				_districtSalesTax = value;
    				DistrictSalesTaxChanged();
    				OnPropertyChanged("DistrictSalesTax");
    			}
    		}
    	}
    	private Nullable<decimal> _districtSalesTax;
    	partial void StateSalesTaxChanged();
    	public Nullable<decimal> StateSalesTax
    	{
    		get { return _stateSalesTax; }
    		set
    		{
    			if (_stateSalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateSalesTax", _stateSalesTax);
    				_stateSalesTax = value;
    				StateSalesTaxChanged();
    				OnPropertyChanged("StateSalesTax");
    			}
    		}
    	}
    	private Nullable<decimal> _stateSalesTax;
    	partial void StateUseTaxChanged();
    	public Nullable<decimal> StateUseTax
    	{
    		get { return _stateUseTax; }
    		set
    		{
    			if (_stateUseTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateUseTax", _stateUseTax);
    				_stateUseTax = value;
    				StateUseTaxChanged();
    				OnPropertyChanged("StateUseTax");
    			}
    		}
    	}
    	private Nullable<decimal> _stateUseTax;
    	partial void CombinedSalesTaxChanged();
    	public Nullable<decimal> CombinedSalesTax
    	{
    		get { return _combinedSalesTax; }
    		set
    		{
    			if (_combinedSalesTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CombinedSalesTax", _combinedSalesTax);
    				_combinedSalesTax = value;
    				CombinedSalesTaxChanged();
    				OnPropertyChanged("CombinedSalesTax");
    			}
    		}
    	}
    	private Nullable<decimal> _combinedSalesTax;
    	partial void CombinedUseTaxChanged();
    	public Nullable<decimal> CombinedUseTax
    	{
    		get { return _combinedUseTax; }
    		set
    		{
    			if (_combinedUseTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("CombinedUseTax", _combinedUseTax);
    				_combinedUseTax = value;
    				CombinedUseTaxChanged();
    				OnPropertyChanged("CombinedUseTax");
    			}
    		}
    	}
    	private Nullable<decimal> _combinedUseTax;
    	partial void ChargeTaxOnShippingChanged();
    	public Nullable<bool> ChargeTaxOnShipping
    	{
    		get { return _chargeTaxOnShipping; }
    		set
    		{
    			if (_chargeTaxOnShipping != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChargeTaxOnShipping", _chargeTaxOnShipping);
    				_chargeTaxOnShipping = value;
    				ChargeTaxOnShippingChanged();
    				OnPropertyChanged("ChargeTaxOnShipping");
    			}
    		}
    	}
    	private Nullable<bool> _chargeTaxOnShipping;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void EffectiveDateUTCChanged();
    	public System.DateTime EffectiveDateUTC
    	{
    		get { return _effectiveDateUTC; }
    		set
    		{
    			if (_effectiveDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EffectiveDateUTC", _effectiveDateUTC);
    				_effectiveDateUTC = value;
    				EffectiveDateUTCChanged();
    				OnPropertyChanged("EffectiveDateUTC");
    			}
    		}
    	}
    	private System.DateTime _effectiveDateUTC;
    	partial void ExpirationDateUTCChanged();
    	public System.DateTime ExpirationDateUTC
    	{
    		get { return _expirationDateUTC; }
    		set
    		{
    			if (_expirationDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExpirationDateUTC", _expirationDateUTC);
    				_expirationDateUTC = value;
    				ExpirationDateUTCChanged();
    				OnPropertyChanged("ExpirationDateUTC");
    			}
    		}
    	}
    	private System.DateTime _expirationDateUTC;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void SpecialTaxChanged();
    	public Nullable<decimal> SpecialTax
    	{
    		get { return _specialTax; }
    		set
    		{
    			if (_specialTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("SpecialTax", _specialTax);
    				_specialTax = value;
    				SpecialTaxChanged();
    				OnPropertyChanged("SpecialTax");
    			}
    		}
    	}
    	private Nullable<decimal> _specialTax;
    	partial void MiscTaxChanged();
    	public Nullable<decimal> MiscTax
    	{
    		get { return _miscTax; }
    		set
    		{
    			if (_miscTax != value)
    			{
    				ChangeTracker.RecordOriginalValue("MiscTax", _miscTax);
    				_miscTax = value;
    				MiscTaxChanged();
    				OnPropertyChanged("MiscTax");
    			}
    		}
    	}
    	private Nullable<decimal> _miscTax;

        #endregion
        #region Navigation Properties
    
    	public Country Country
    	{
    		get { return _country; }
    		set
    		{
    			if (!ReferenceEquals(_country, value))
    			{
    				var previousValue = _country;
    				_country = value;
    				FixupCountry(previousValue);
    				OnNavigationPropertyChanged("Country");
    			}
    		}
    	}
    	private Country _country;
    
    	public TaxCategory TaxCategory
    	{
    		get { return _taxCategory; }
    		set
    		{
    			if (!ReferenceEquals(_taxCategory, value))
    			{
    				var previousValue = _taxCategory;
    				_taxCategory = value;
    				FixupTaxCategory(previousValue);
    				OnNavigationPropertyChanged("TaxCategory");
    			}
    		}
    	}
    	private TaxCategory _taxCategory;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Country = null;
    		TaxCategory = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCountry(Country previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.TaxCacheOverrides.Contains(this))
    		{
    			previousValue.TaxCacheOverrides.Remove(this);
    		}
    
    		if (Country != null)
    		{
    			if (!Country.TaxCacheOverrides.Contains(this))
    			{
    				Country.TaxCacheOverrides.Add(this);
    			}
    
    			CountryID = Country.CountryID;
    		}
    		else if (!skipKeys)
    		{
    			CountryID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Country")
    				&& (ChangeTracker.OriginalValues["Country"] == Country))
    			{
    				ChangeTracker.OriginalValues.Remove("Country");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Country", previousValue);
    			}
    			if (Country != null && !Country.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Country.StartTracking();
    			}
    		}
    	}
    
    	private void FixupTaxCategory(TaxCategory previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.TaxCacheOverrides.Contains(this))
    		{
    			previousValue.TaxCacheOverrides.Remove(this);
    		}
    
    		if (TaxCategory != null)
    		{
    			if (!TaxCategory.TaxCacheOverrides.Contains(this))
    			{
    				TaxCategory.TaxCacheOverrides.Add(this);
    			}
    
    			TaxCategoryID = TaxCategory.TaxCategoryID;
    		}
    		else if (!skipKeys)
    		{
    			TaxCategoryID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("TaxCategory")
    				&& (ChangeTracker.OriginalValues["TaxCategory"] == TaxCategory))
    			{
    				ChangeTracker.OriginalValues.Remove("TaxCategory");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("TaxCategory", previousValue);
    			}
    			if (TaxCategory != null && !TaxCategory.ChangeTracker.ChangeTrackingEnabled)
    			{
    				TaxCategory.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

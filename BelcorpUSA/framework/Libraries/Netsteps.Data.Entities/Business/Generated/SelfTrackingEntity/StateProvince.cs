//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Country))]
    [KnownType(typeof(OrderPayment))]
    [KnownType(typeof(ShippingRegion))]
    [KnownType(typeof(OrderShipment))]
    [KnownType(typeof(Address))]
    [KnownType(typeof(ProductBase))]
    [Serializable]
    public partial class StateProvince: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void StateProvinceIDChanged();
    	public int StateProvinceID
    	{
    		get { return _stateProvinceID; }
    		set
    		{
    			if (_stateProvinceID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'StateProvinceID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_stateProvinceID = value;
    				StateProvinceIDChanged();
    				OnPropertyChanged("StateProvinceID");
    			}
    		}
    	}
    	private int _stateProvinceID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void CountryIDChanged();
    	public int CountryID
    	{
    		get { return _countryID; }
    		set
    		{
    			if (_countryID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryID", _countryID);
    				if (!IsDeserializing)
    				{
    					if (Country != null && Country.CountryID != value)
    					{
    						Country = null;
    					}
    				}
    				_countryID = value;
    				CountryIDChanged();
    				OnPropertyChanged("CountryID");
    			}
    		}
    	}
    	private int _countryID;
    	partial void ChargeTaxOnShippingChanged();
    	public Nullable<bool> ChargeTaxOnShipping
    	{
    		get { return _chargeTaxOnShipping; }
    		set
    		{
    			if (_chargeTaxOnShipping != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChargeTaxOnShipping", _chargeTaxOnShipping);
    				_chargeTaxOnShipping = value;
    				ChargeTaxOnShippingChanged();
    				OnPropertyChanged("ChargeTaxOnShipping");
    			}
    		}
    	}
    	private Nullable<bool> _chargeTaxOnShipping;
    	partial void IsContinentalChanged();
    	public Nullable<bool> IsContinental
    	{
    		get { return _isContinental; }
    		set
    		{
    			if (_isContinental != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsContinental", _isContinental);
    				_isContinental = value;
    				IsContinentalChanged();
    				OnPropertyChanged("IsContinental");
    			}
    		}
    	}
    	private Nullable<bool> _isContinental;
    	partial void ShippingRegionIDChanged();
    	public Nullable<int> ShippingRegionID
    	{
    		get { return _shippingRegionID; }
    		set
    		{
    			if (_shippingRegionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRegionID", _shippingRegionID);
    				if (!IsDeserializing)
    				{
    					if (ShippingRegion != null && ShippingRegion.ShippingRegionID != value)
    					{
    						ShippingRegion = null;
    					}
    				}
    				_shippingRegionID = value;
    				ShippingRegionIDChanged();
    				OnPropertyChanged("ShippingRegionID");
    			}
    		}
    	}
    	private Nullable<int> _shippingRegionID;
    	partial void CountryRegionIDChanged();
    	public Nullable<int> CountryRegionID
    	{
    		get { return _countryRegionID; }
    		set
    		{
    			if (_countryRegionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CountryRegionID", _countryRegionID);
    				_countryRegionID = value;
    				CountryRegionIDChanged();
    				OnPropertyChanged("CountryRegionID");
    			}
    		}
    	}
    	private Nullable<int> _countryRegionID;
    	partial void StateAbbreviationChanged();
    	public string StateAbbreviation
    	{
    		get { return _stateAbbreviation; }
    		set
    		{
    			if (_stateAbbreviation != value)
    			{
    				ChangeTracker.RecordOriginalValue("StateAbbreviation", _stateAbbreviation);
    				_stateAbbreviation = value;
    				StateAbbreviationChanged();
    				OnPropertyChanged("StateAbbreviation");
    			}
    		}
    	}
    	private string _stateAbbreviation;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public Country Country
    	{
    		get { return _country; }
    		set
    		{
    			if (!ReferenceEquals(_country, value))
    			{
    				var previousValue = _country;
    				_country = value;
    				FixupCountry(previousValue);
    				OnNavigationPropertyChanged("Country");
    			}
    		}
    	}
    	private Country _country;
    
    	public TrackableCollection<OrderPayment> OrderPayments
    	{
    		get
    		{
    			if (_orderPayments == null)
    			{
    				_orderPayments = new TrackableCollection<OrderPayment>();
    				_orderPayments.CollectionChanged += FixupOrderPayments;
    				_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    			}
    			return _orderPayments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderPayments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged -= FixupOrderPayments;
    					_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    				}
    				_orderPayments = value;
    				if (_orderPayments != null)
    				{
    					_orderPayments.CollectionChanged += FixupOrderPayments;
    					_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderPayments");
    			}
    		}
    	}
    	private TrackableCollection<OrderPayment> _orderPayments;
    	partial void OrderPaymentsChanged();
    	private void RaiseOrderPaymentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderPaymentsChanged();
    	}
    
    	public ShippingRegion ShippingRegion
    	{
    		get { return _shippingRegion; }
    		set
    		{
    			if (!ReferenceEquals(_shippingRegion, value))
    			{
    				var previousValue = _shippingRegion;
    				_shippingRegion = value;
    				FixupShippingRegion(previousValue);
    				OnNavigationPropertyChanged("ShippingRegion");
    			}
    		}
    	}
    	private ShippingRegion _shippingRegion;
    
    	public TrackableCollection<OrderShipment> OrderShipments
    	{
    		get
    		{
    			if (_orderShipments == null)
    			{
    				_orderShipments = new TrackableCollection<OrderShipment>();
    				_orderShipments.CollectionChanged += FixupOrderShipments;
    				_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    			}
    			return _orderShipments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderShipments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged -= FixupOrderShipments;
    					_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    				}
    				_orderShipments = value;
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged += FixupOrderShipments;
    					_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderShipments");
    			}
    		}
    	}
    	private TrackableCollection<OrderShipment> _orderShipments;
    	partial void OrderShipmentsChanged();
    	private void RaiseOrderShipmentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderShipmentsChanged();
    	}
    
    	public TrackableCollection<Address> Addresses
    	{
    		get
    		{
    			if (_addresses == null)
    			{
    				_addresses = new TrackableCollection<Address>();
    				_addresses.CollectionChanged += FixupAddresses;
    				_addresses.CollectionChanged += RaiseAddressesChanged;
    			}
    			return _addresses;
    		}
    		set
    		{
    			if (!ReferenceEquals(_addresses, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged -= FixupAddresses;
    					_addresses.CollectionChanged -= RaiseAddressesChanged;
    				}
    				_addresses = value;
    				if (_addresses != null)
    				{
    					_addresses.CollectionChanged += FixupAddresses;
    					_addresses.CollectionChanged += RaiseAddressesChanged;
    				}
    				OnNavigationPropertyChanged("Addresses");
    			}
    		}
    	}
    	private TrackableCollection<Address> _addresses;
    	partial void AddressesChanged();
    	private void RaiseAddressesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AddressesChanged();
    	}
    
    	public TrackableCollection<ProductBase> ExcludedProductBases
    	{
    		get
    		{
    			if (_excludedProductBases == null)
    			{
    				_excludedProductBases = new TrackableCollection<ProductBase>();
    				_excludedProductBases.CollectionChanged += FixupExcludedProductBases;
    				_excludedProductBases.CollectionChanged += RaiseExcludedProductBasesChanged;
    			}
    			return _excludedProductBases;
    		}
    		set
    		{
    			if (!ReferenceEquals(_excludedProductBases, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_excludedProductBases != null)
    				{
    					_excludedProductBases.CollectionChanged -= FixupExcludedProductBases;
    					_excludedProductBases.CollectionChanged -= RaiseExcludedProductBasesChanged;
    				}
    				_excludedProductBases = value;
    				if (_excludedProductBases != null)
    				{
    					_excludedProductBases.CollectionChanged += FixupExcludedProductBases;
    					_excludedProductBases.CollectionChanged += RaiseExcludedProductBasesChanged;
    				}
    				OnNavigationPropertyChanged("ExcludedProductBases");
    			}
    		}
    	}
    	private TrackableCollection<ProductBase> _excludedProductBases;
    	partial void ExcludedProductBasesChanged();
    	private void RaiseExcludedProductBasesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ExcludedProductBasesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_orderPayments != null)
    		{
    			_orderPayments.CollectionChanged -= FixupOrderPayments;
    			_orderPayments.CollectionChanged -= RaiseOrderPaymentsChanged;
    			_orderPayments.CollectionChanged += FixupOrderPayments;
    			_orderPayments.CollectionChanged += RaiseOrderPaymentsChanged;
    		}
    		if (_orderShipments != null)
    		{
    			_orderShipments.CollectionChanged -= FixupOrderShipments;
    			_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    			_orderShipments.CollectionChanged += FixupOrderShipments;
    			_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    		}
    		if (_addresses != null)
    		{
    			_addresses.CollectionChanged -= FixupAddresses;
    			_addresses.CollectionChanged -= RaiseAddressesChanged;
    			_addresses.CollectionChanged += FixupAddresses;
    			_addresses.CollectionChanged += RaiseAddressesChanged;
    		}
    		if (_excludedProductBases != null)
    		{
    			_excludedProductBases.CollectionChanged -= FixupExcludedProductBases;
    			_excludedProductBases.CollectionChanged -= RaiseExcludedProductBasesChanged;
    			_excludedProductBases.CollectionChanged += FixupExcludedProductBases;
    			_excludedProductBases.CollectionChanged += RaiseExcludedProductBasesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Country = null;
    		OrderPayments.Clear();
    		ShippingRegion = null;
    		OrderShipments.Clear();
    		Addresses.Clear();
    		ExcludedProductBases.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCountry(Country previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.StateProvinces.Contains(this))
    		{
    			previousValue.StateProvinces.Remove(this);
    		}
    
    		if (Country != null)
    		{
    			if (!Country.StateProvinces.Contains(this))
    			{
    				Country.StateProvinces.Add(this);
    			}
    
    			CountryID = Country.CountryID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Country")
    				&& (ChangeTracker.OriginalValues["Country"] == Country))
    			{
    				ChangeTracker.OriginalValues.Remove("Country");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Country", previousValue);
    			}
    			if (Country != null && !Country.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Country.StartTracking();
    			}
    		}
    	}
    
    	private void FixupShippingRegion(ShippingRegion previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.StateProvinces.Contains(this))
    		{
    			previousValue.StateProvinces.Remove(this);
    		}
    
    		if (ShippingRegion != null)
    		{
    			if (!ShippingRegion.StateProvinces.Contains(this))
    			{
    				ShippingRegion.StateProvinces.Add(this);
    			}
    
    			ShippingRegionID = ShippingRegion.ShippingRegionID;
    		}
    		else if (!skipKeys)
    		{
    			ShippingRegionID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ShippingRegion")
    				&& (ChangeTracker.OriginalValues["ShippingRegion"] == ShippingRegion))
    			{
    				ChangeTracker.OriginalValues.Remove("ShippingRegion");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ShippingRegion", previousValue);
    			}
    			if (ShippingRegion != null && !ShippingRegion.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ShippingRegion.StartTracking();
    			}
    		}
    	}
    
    	private void FixupOrderPayments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderPayment item in e.NewItems)
    			{
    				item.StateProvince = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderPayment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.StateProvince, this))
    				{
    					item.StateProvince = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderPayments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderShipments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderShipment item in e.NewItems)
    			{
    				item.StateProvince = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderShipment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.StateProvince, this))
    				{
    					item.StateProvince = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAddresses(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Address item in e.NewItems)
    			{
    				item.StateProvince = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Addresses", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Address item in e.OldItems)
    			{
    				if (ReferenceEquals(item.StateProvince, this))
    				{
    					item.StateProvince = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Addresses", item);
    				}
    			}
    		}
    	}
    
    	private void FixupExcludedProductBases(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductBase item in e.NewItems)
    			{
    				if (!item.ExcludedStateProvinces.Contains(this))
    				{
    					item.ExcludedStateProvinces.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ExcludedProductBases", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductBase item in e.OldItems)
    			{
    				if (item.ExcludedStateProvinces.Contains(this))
    				{
    					item.ExcludedStateProvinces.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ExcludedProductBases", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductPropertyTypeRelation))]
    [KnownType(typeof(ProductRelation))]
    [Serializable]
    public partial class ProductRelationsType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductRelationTypeIDChanged();
    	public int ProductRelationTypeID
    	{
    		get { return _productRelationTypeID; }
    		set
    		{
    			if (_productRelationTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductRelationTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productRelationTypeID = value;
    				ProductRelationTypeIDChanged();
    				OnPropertyChanged("ProductRelationTypeID");
    			}
    		}
    	}
    	private int _productRelationTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<ProductPropertyTypeRelation> ProductPropertyTypeRelations
    	{
    		get
    		{
    			if (_productPropertyTypeRelations == null)
    			{
    				_productPropertyTypeRelations = new TrackableCollection<ProductPropertyTypeRelation>();
    				_productPropertyTypeRelations.CollectionChanged += FixupProductPropertyTypeRelations;
    				_productPropertyTypeRelations.CollectionChanged += RaiseProductPropertyTypeRelationsChanged;
    			}
    			return _productPropertyTypeRelations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productPropertyTypeRelations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productPropertyTypeRelations != null)
    				{
    					_productPropertyTypeRelations.CollectionChanged -= FixupProductPropertyTypeRelations;
    					_productPropertyTypeRelations.CollectionChanged -= RaiseProductPropertyTypeRelationsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Remove the cascade delete event handler for any entities in the current collection.
    					foreach (ProductPropertyTypeRelation item in _productPropertyTypeRelations)
    					{
    						ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    					}
    				}
    				_productPropertyTypeRelations = value;
    				if (_productPropertyTypeRelations != null)
    				{
    					_productPropertyTypeRelations.CollectionChanged += FixupProductPropertyTypeRelations;
    					_productPropertyTypeRelations.CollectionChanged += RaiseProductPropertyTypeRelationsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Add the cascade delete event handler for any entities that are already in the new collection.
    					foreach (ProductPropertyTypeRelation item in _productPropertyTypeRelations)
    					{
    						ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    					}
    				}
    				OnNavigationPropertyChanged("ProductPropertyTypeRelations");
    			}
    		}
    	}
    	private TrackableCollection<ProductPropertyTypeRelation> _productPropertyTypeRelations;
    	partial void ProductPropertyTypeRelationsChanged();
    	private void RaiseProductPropertyTypeRelationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPropertyTypeRelationsChanged();
    	}
    
    	public TrackableCollection<ProductRelation> ProductRelations
    	{
    		get
    		{
    			if (_productRelations == null)
    			{
    				_productRelations = new TrackableCollection<ProductRelation>();
    				_productRelations.CollectionChanged += FixupProductRelations;
    				_productRelations.CollectionChanged += RaiseProductRelationsChanged;
    			}
    			return _productRelations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productRelations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productRelations != null)
    				{
    					_productRelations.CollectionChanged -= FixupProductRelations;
    					_productRelations.CollectionChanged -= RaiseProductRelationsChanged;
    				}
    				_productRelations = value;
    				if (_productRelations != null)
    				{
    					_productRelations.CollectionChanged += FixupProductRelations;
    					_productRelations.CollectionChanged += RaiseProductRelationsChanged;
    				}
    				OnNavigationPropertyChanged("ProductRelations");
    			}
    		}
    	}
    	private TrackableCollection<ProductRelation> _productRelations;
    	partial void ProductRelationsChanged();
    	private void RaiseProductRelationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductRelationsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_productPropertyTypeRelations != null)
    		{
    			_productPropertyTypeRelations.CollectionChanged -= FixupProductPropertyTypeRelations;
    			_productPropertyTypeRelations.CollectionChanged -= RaiseProductPropertyTypeRelationsChanged;
    			_productPropertyTypeRelations.CollectionChanged += FixupProductPropertyTypeRelations;
    			_productPropertyTypeRelations.CollectionChanged += RaiseProductPropertyTypeRelationsChanged;
    			// This is the principal end in an association that performs cascade deletes.
    			// Add the cascade delete event handler for any entities that are 
    			// already in the collection.
    			foreach (var item in _productPropertyTypeRelations)
    			{
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    		if (_productRelations != null)
    		{
    			_productRelations.CollectionChanged -= FixupProductRelations;
    			_productRelations.CollectionChanged -= RaiseProductRelationsChanged;
    			_productRelations.CollectionChanged += FixupProductRelations;
    			_productRelations.CollectionChanged += RaiseProductRelationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductPropertyTypeRelations.Clear();
    		ProductRelations.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductPropertyTypeRelations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductPropertyTypeRelation item in e.NewItems)
    			{
    				item.ProductRelationsType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductPropertyTypeRelations", item);
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Update the event listener to refer to the new dependent.
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductPropertyTypeRelation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductRelationsType, this))
    				{
    					item.ProductRelationsType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductPropertyTypeRelations", item);
    					// Delete the dependent end of this identifying association. If the current state is Added,
    					// allow the relationship to be changed without causing the dependent to be deleted.
    					if (item.ChangeTracker.State != ObjectState.Added)
    					{
    						item.MarkAsDeleted();
    					}
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Remove the previous dependent from the event listener.
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    			}
    		}
    	}
    
    	private void FixupProductRelations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductRelation item in e.NewItems)
    			{
    				item.ProductRelationsType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductRelations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductRelation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductRelationsType, this))
    				{
    					item.ProductRelationsType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductRelations", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

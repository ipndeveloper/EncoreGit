//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Account))]
    [KnownType(typeof(Autoresponder))]
    [KnownType(typeof(AutoresponderMessageToken))]
    [Serializable]
    public partial class AutoresponderMessage: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AutoresponderMessageIDChanged();
    	public int AutoresponderMessageID
    	{
    		get { return _autoresponderMessageID; }
    		set
    		{
    			if (_autoresponderMessageID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AutoresponderMessageID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_autoresponderMessageID = value;
    				AutoresponderMessageIDChanged();
    				OnPropertyChanged("AutoresponderMessageID");
    			}
    		}
    	}
    	private int _autoresponderMessageID;
    	partial void AutoresponderIDChanged();
    	public int AutoresponderID
    	{
    		get { return _autoresponderID; }
    		set
    		{
    			if (_autoresponderID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AutoresponderID", _autoresponderID);
    				if (!IsDeserializing)
    				{
    					if (Autoresponder != null && Autoresponder.AutoresponderID != value)
    					{
    						Autoresponder = null;
    					}
    				}
    				_autoresponderID = value;
    				AutoresponderIDChanged();
    				OnPropertyChanged("AutoresponderID");
    			}
    		}
    	}
    	private int _autoresponderID;
    	partial void AccountIDChanged();
    	public int AccountID
    	{
    		get { return _accountID; }
    		set
    		{
    			if (_accountID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountID", _accountID);
    				if (!IsDeserializing)
    				{
    					if (Account != null && Account.AccountID != value)
    					{
    						Account = null;
    					}
    				}
    				_accountID = value;
    				AccountIDChanged();
    				OnPropertyChanged("AccountID");
    			}
    		}
    	}
    	private int _accountID;
    	partial void HasBeenReadChanged();
    	public bool HasBeenRead
    	{
    		get { return _hasBeenRead; }
    		set
    		{
    			if (_hasBeenRead != value)
    			{
    				ChangeTracker.RecordOriginalValue("HasBeenRead", _hasBeenRead);
    				_hasBeenRead = value;
    				HasBeenReadChanged();
    				OnPropertyChanged("HasBeenRead");
    			}
    		}
    	}
    	private bool _hasBeenRead;

        #endregion
        #region Navigation Properties
    
    	public Account Account
    	{
    		get { return _account; }
    		set
    		{
    			if (!ReferenceEquals(_account, value))
    			{
    				var previousValue = _account;
    				_account = value;
    				FixupAccount(previousValue);
    				OnNavigationPropertyChanged("Account");
    			}
    		}
    	}
    	private Account _account;
    
    	public Autoresponder Autoresponder
    	{
    		get { return _autoresponder; }
    		set
    		{
    			if (!ReferenceEquals(_autoresponder, value))
    			{
    				var previousValue = _autoresponder;
    				_autoresponder = value;
    				FixupAutoresponder(previousValue);
    				OnNavigationPropertyChanged("Autoresponder");
    			}
    		}
    	}
    	private Autoresponder _autoresponder;
    
    	public TrackableCollection<AutoresponderMessageToken> AutoresponderMessageTokens
    	{
    		get
    		{
    			if (_autoresponderMessageTokens == null)
    			{
    				_autoresponderMessageTokens = new TrackableCollection<AutoresponderMessageToken>();
    				_autoresponderMessageTokens.CollectionChanged += FixupAutoresponderMessageTokens;
    				_autoresponderMessageTokens.CollectionChanged += RaiseAutoresponderMessageTokensChanged;
    			}
    			return _autoresponderMessageTokens;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoresponderMessageTokens, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoresponderMessageTokens != null)
    				{
    					_autoresponderMessageTokens.CollectionChanged -= FixupAutoresponderMessageTokens;
    					_autoresponderMessageTokens.CollectionChanged -= RaiseAutoresponderMessageTokensChanged;
    				}
    				_autoresponderMessageTokens = value;
    				if (_autoresponderMessageTokens != null)
    				{
    					_autoresponderMessageTokens.CollectionChanged += FixupAutoresponderMessageTokens;
    					_autoresponderMessageTokens.CollectionChanged += RaiseAutoresponderMessageTokensChanged;
    				}
    				OnNavigationPropertyChanged("AutoresponderMessageTokens");
    			}
    		}
    	}
    	private TrackableCollection<AutoresponderMessageToken> _autoresponderMessageTokens;
    	partial void AutoresponderMessageTokensChanged();
    	private void RaiseAutoresponderMessageTokensChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoresponderMessageTokensChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_autoresponderMessageTokens != null)
    		{
    			_autoresponderMessageTokens.CollectionChanged -= FixupAutoresponderMessageTokens;
    			_autoresponderMessageTokens.CollectionChanged -= RaiseAutoresponderMessageTokensChanged;
    			_autoresponderMessageTokens.CollectionChanged += FixupAutoresponderMessageTokens;
    			_autoresponderMessageTokens.CollectionChanged += RaiseAutoresponderMessageTokensChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Account = null;
    		Autoresponder = null;
    		AutoresponderMessageTokens.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccount(Account previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoresponderMessages.Contains(this))
    		{
    			previousValue.AutoresponderMessages.Remove(this);
    		}
    
    		if (Account != null)
    		{
    			if (!Account.AutoresponderMessages.Contains(this))
    			{
    				Account.AutoresponderMessages.Add(this);
    			}
    
    			AccountID = Account.AccountID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Account")
    				&& (ChangeTracker.OriginalValues["Account"] == Account))
    			{
    				ChangeTracker.OriginalValues.Remove("Account");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Account", previousValue);
    			}
    			if (Account != null && !Account.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Account.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoresponder(Autoresponder previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoresponderMessages.Contains(this))
    		{
    			previousValue.AutoresponderMessages.Remove(this);
    		}
    
    		if (Autoresponder != null)
    		{
    			if (!Autoresponder.AutoresponderMessages.Contains(this))
    			{
    				Autoresponder.AutoresponderMessages.Add(this);
    			}
    
    			AutoresponderID = Autoresponder.AutoresponderID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Autoresponder")
    				&& (ChangeTracker.OriginalValues["Autoresponder"] == Autoresponder))
    			{
    				ChangeTracker.OriginalValues.Remove("Autoresponder");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Autoresponder", previousValue);
    			}
    			if (Autoresponder != null && !Autoresponder.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Autoresponder.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoresponderMessageTokens(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoresponderMessageToken item in e.NewItems)
    			{
    				item.AutoresponderMessage = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoresponderMessageTokens", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoresponderMessageToken item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AutoresponderMessage, this))
    				{
    					item.AutoresponderMessage = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoresponderMessageTokens", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Note))]
    [KnownType(typeof(NoteType))]
    [KnownType(typeof(User))]
    [KnownType(typeof(Account))]
    [KnownType(typeof(Order))]
    [KnownType(typeof(SupportTicket))]
    [Serializable]
    public partial class Note: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void NoteIDChanged();
    	public int NoteID
    	{
    		get { return _noteID; }
    		set
    		{
    			if (_noteID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'NoteID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_noteID = value;
    				NoteIDChanged();
    				OnPropertyChanged("NoteID");
    			}
    		}
    	}
    	private int _noteID;
    	partial void NoteTypeIDChanged();
    	public int NoteTypeID
    	{
    		get { return _noteTypeID; }
    		set
    		{
    			if (_noteTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("NoteTypeID", _noteTypeID);
    				if (!IsDeserializing)
    				{
    					if (NoteType != null && NoteType.NoteTypeID != value)
    					{
    						NoteType = null;
    					}
    				}
    				_noteTypeID = value;
    				NoteTypeIDChanged();
    				OnPropertyChanged("NoteTypeID");
    			}
    		}
    	}
    	private int _noteTypeID;
    	partial void UserIDChanged();
    	public Nullable<int> UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserID", _userID);
    				if (!IsDeserializing)
    				{
    					if (User1 != null && User1.UserID != value)
    					{
    						User1 = null;
    					}
    				}
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private Nullable<int> _userID;
    	partial void ParentIDChanged();
    	public Nullable<int> ParentID
    	{
    		get { return _parentID; }
    		set
    		{
    			if (_parentID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParentID", _parentID);
    				if (!IsDeserializing)
    				{
    					if (Note1 != null && Note1.NoteID != value)
    					{
    						Note1 = null;
    					}
    				}
    				_parentID = value;
    				ParentIDChanged();
    				OnPropertyChanged("ParentID");
    			}
    		}
    	}
    	private Nullable<int> _parentID;
    	partial void DateCreatedUTCChanged();
    	public System.DateTime DateCreatedUTC
    	{
    		get { return _dateCreatedUTC; }
    		set
    		{
    			if (_dateCreatedUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
    				_dateCreatedUTC = value;
    				DateCreatedUTCChanged();
    				OnPropertyChanged("DateCreatedUTC");
    			}
    		}
    	}
    	private System.DateTime _dateCreatedUTC;
    	partial void SubjectChanged();
    	public string Subject
    	{
    		get { return _subject; }
    		set
    		{
    			if (_subject != value)
    			{
    				ChangeTracker.RecordOriginalValue("Subject", _subject);
    				_subject = value;
    				SubjectChanged();
    				OnPropertyChanged("Subject");
    			}
    		}
    	}
    	private string _subject;
    	partial void NoteTextChanged();
    	public string NoteText
    	{
    		get { return _noteText; }
    		set
    		{
    			if (_noteText != value)
    			{
    				ChangeTracker.RecordOriginalValue("NoteText", _noteText);
    				_noteText = value;
    				NoteTextChanged();
    				OnPropertyChanged("NoteText");
    			}
    		}
    	}
    	private string _noteText;
    	partial void DataVersionChanged();
    	public byte[] DataVersion
    	{
    		get { return _dataVersion; }
    		set
    		{
    			if (_dataVersion != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataVersion", _dataVersion);
    				_dataVersion = value;
    				DataVersionChanged();
    				OnPropertyChanged("DataVersion");
    			}
    		}
    	}
    	private byte[] _dataVersion;
    	partial void ModifiedByUserIDChanged();
    	public Nullable<int> ModifiedByUserID
    	{
    		get { return _modifiedByUserID; }
    		set
    		{
    			if (_modifiedByUserID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_modifiedByUserID = value;
    				ModifiedByUserIDChanged();
    				OnPropertyChanged("ModifiedByUserID");
    			}
    		}
    	}
    	private Nullable<int> _modifiedByUserID;
    	partial void IsInternalChanged();
    	public bool IsInternal
    	{
    		get { return _isInternal; }
    		set
    		{
    			if (_isInternal != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsInternal", _isInternal);
    				_isInternal = value;
    				IsInternalChanged();
    				OnPropertyChanged("IsInternal");
    			}
    		}
    	}
    	private bool _isInternal;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<Note> Notes1
    	{
    		get
    		{
    			if (_notes1 == null)
    			{
    				_notes1 = new TrackableCollection<Note>();
    				_notes1.CollectionChanged += FixupNotes1;
    				_notes1.CollectionChanged += RaiseNotes1Changed;
    			}
    			return _notes1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_notes1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_notes1 != null)
    				{
    					_notes1.CollectionChanged -= FixupNotes1;
    					_notes1.CollectionChanged -= RaiseNotes1Changed;
    				}
    				_notes1 = value;
    				if (_notes1 != null)
    				{
    					_notes1.CollectionChanged += FixupNotes1;
    					_notes1.CollectionChanged += RaiseNotes1Changed;
    				}
    				OnNavigationPropertyChanged("Notes1");
    			}
    		}
    	}
    	private TrackableCollection<Note> _notes1;
    	partial void Notes1Changed();
    	private void RaiseNotes1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		Notes1Changed();
    	}
    
    	public Note Note1
    	{
    		get { return _note1; }
    		set
    		{
    			if (!ReferenceEquals(_note1, value))
    			{
    				var previousValue = _note1;
    				_note1 = value;
    				FixupNote1(previousValue);
    				OnNavigationPropertyChanged("Note1");
    			}
    		}
    	}
    	private Note _note1;
    
    	public NoteType NoteType
    	{
    		get { return _noteType; }
    		set
    		{
    			if (!ReferenceEquals(_noteType, value))
    			{
    				var previousValue = _noteType;
    				_noteType = value;
    				FixupNoteType(previousValue);
    				OnNavigationPropertyChanged("NoteType");
    			}
    		}
    	}
    	private NoteType _noteType;
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public User User1
    	{
    		get { return _user1; }
    		set
    		{
    			if (!ReferenceEquals(_user1, value))
    			{
    				var previousValue = _user1;
    				_user1 = value;
    				FixupUser1(previousValue);
    				OnNavigationPropertyChanged("User1");
    			}
    		}
    	}
    	private User _user1;
    
    	public TrackableCollection<Account> Accounts
    	{
    		get
    		{
    			if (_accounts == null)
    			{
    				_accounts = new TrackableCollection<Account>();
    				_accounts.CollectionChanged += FixupAccounts;
    				_accounts.CollectionChanged += RaiseAccountsChanged;
    			}
    			return _accounts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_accounts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged -= FixupAccounts;
    					_accounts.CollectionChanged -= RaiseAccountsChanged;
    				}
    				_accounts = value;
    				if (_accounts != null)
    				{
    					_accounts.CollectionChanged += FixupAccounts;
    					_accounts.CollectionChanged += RaiseAccountsChanged;
    				}
    				OnNavigationPropertyChanged("Accounts");
    			}
    		}
    	}
    	private TrackableCollection<Account> _accounts;
    	partial void AccountsChanged();
    	private void RaiseAccountsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AccountsChanged();
    	}
    
    	public TrackableCollection<Order> Orders
    	{
    		get
    		{
    			if (_orders == null)
    			{
    				_orders = new TrackableCollection<Order>();
    				_orders.CollectionChanged += FixupOrders;
    				_orders.CollectionChanged += RaiseOrdersChanged;
    			}
    			return _orders;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orders, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orders != null)
    				{
    					_orders.CollectionChanged -= FixupOrders;
    					_orders.CollectionChanged -= RaiseOrdersChanged;
    				}
    				_orders = value;
    				if (_orders != null)
    				{
    					_orders.CollectionChanged += FixupOrders;
    					_orders.CollectionChanged += RaiseOrdersChanged;
    				}
    				OnNavigationPropertyChanged("Orders");
    			}
    		}
    	}
    	private TrackableCollection<Order> _orders;
    	partial void OrdersChanged();
    	private void RaiseOrdersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrdersChanged();
    	}
    
    	public TrackableCollection<SupportTicket> SupportTickets
    	{
    		get
    		{
    			if (_supportTickets == null)
    			{
    				_supportTickets = new TrackableCollection<SupportTicket>();
    				_supportTickets.CollectionChanged += FixupSupportTickets;
    				_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    			}
    			return _supportTickets;
    		}
    		set
    		{
    			if (!ReferenceEquals(_supportTickets, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_supportTickets != null)
    				{
    					_supportTickets.CollectionChanged -= FixupSupportTickets;
    					_supportTickets.CollectionChanged -= RaiseSupportTicketsChanged;
    				}
    				_supportTickets = value;
    				if (_supportTickets != null)
    				{
    					_supportTickets.CollectionChanged += FixupSupportTickets;
    					_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    				}
    				OnNavigationPropertyChanged("SupportTickets");
    			}
    		}
    	}
    	private TrackableCollection<SupportTicket> _supportTickets;
    	partial void SupportTicketsChanged();
    	private void RaiseSupportTicketsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SupportTicketsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_notes1 != null)
    		{
    			_notes1.CollectionChanged -= FixupNotes1;
    			_notes1.CollectionChanged -= RaiseNotes1Changed;
    			_notes1.CollectionChanged += FixupNotes1;
    			_notes1.CollectionChanged += RaiseNotes1Changed;
    		}
    		if (_accounts != null)
    		{
    			_accounts.CollectionChanged -= FixupAccounts;
    			_accounts.CollectionChanged -= RaiseAccountsChanged;
    			_accounts.CollectionChanged += FixupAccounts;
    			_accounts.CollectionChanged += RaiseAccountsChanged;
    		}
    		if (_orders != null)
    		{
    			_orders.CollectionChanged -= FixupOrders;
    			_orders.CollectionChanged -= RaiseOrdersChanged;
    			_orders.CollectionChanged += FixupOrders;
    			_orders.CollectionChanged += RaiseOrdersChanged;
    		}
    		if (_supportTickets != null)
    		{
    			_supportTickets.CollectionChanged -= FixupSupportTickets;
    			_supportTickets.CollectionChanged -= RaiseSupportTicketsChanged;
    			_supportTickets.CollectionChanged += FixupSupportTickets;
    			_supportTickets.CollectionChanged += RaiseSupportTicketsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Notes1.Clear();
    		Note1 = null;
    		NoteType = null;
    		User = null;
    		User1 = null;
    		Accounts.Clear();
    		Orders.Clear();
    		SupportTickets.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupNote1(Note previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Notes1.Contains(this))
    		{
    			previousValue.Notes1.Remove(this);
    		}
    
    		if (Note1 != null)
    		{
    			if (!Note1.Notes1.Contains(this))
    			{
    				Note1.Notes1.Add(this);
    			}
    
    			ParentID = Note1.NoteID;
    		}
    		else if (!skipKeys)
    		{
    			ParentID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Note1")
    				&& (ChangeTracker.OriginalValues["Note1"] == Note1))
    			{
    				ChangeTracker.OriginalValues.Remove("Note1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Note1", previousValue);
    			}
    			if (Note1 != null && !Note1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Note1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupNoteType(NoteType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Notes.Contains(this))
    		{
    			previousValue.Notes.Remove(this);
    		}
    
    		if (NoteType != null)
    		{
    			if (!NoteType.Notes.Contains(this))
    			{
    				NoteType.Notes.Add(this);
    			}
    
    			NoteTypeID = NoteType.NoteTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("NoteType")
    				&& (ChangeTracker.OriginalValues["NoteType"] == NoteType))
    			{
    				ChangeTracker.OriginalValues.Remove("NoteType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("NoteType", previousValue);
    			}
    			if (NoteType != null && !NoteType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				NoteType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Notes.Contains(this))
    		{
    			previousValue.Notes.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.Notes.Contains(this))
    			{
    				User.Notes.Add(this);
    			}
    
    			ModifiedByUserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			ModifiedByUserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupUser1(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.Notes1.Contains(this))
    		{
    			previousValue.Notes1.Remove(this);
    		}
    
    		if (User1 != null)
    		{
    			if (!User1.Notes1.Contains(this))
    			{
    				User1.Notes1.Add(this);
    			}
    
    			UserID = User1.UserID;
    		}
    		else if (!skipKeys)
    		{
    			UserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User1")
    				&& (ChangeTracker.OriginalValues["User1"] == User1))
    			{
    				ChangeTracker.OriginalValues.Remove("User1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User1", previousValue);
    			}
    			if (User1 != null && !User1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupNotes1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Note item in e.NewItems)
    			{
    				item.Note1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Notes1", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Note item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Note1, this))
    				{
    					item.Note1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Notes1", item);
    				}
    			}
    		}
    	}
    
    	private void FixupAccounts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Account item in e.NewItems)
    			{
    				if (!item.Notes.Contains(this))
    				{
    					item.Notes.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Accounts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Account item in e.OldItems)
    			{
    				if (item.Notes.Contains(this))
    				{
    					item.Notes.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Accounts", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Order item in e.NewItems)
    			{
    				if (!item.Notes.Contains(this))
    				{
    					item.Notes.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Orders", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Order item in e.OldItems)
    			{
    				if (item.Notes.Contains(this))
    				{
    					item.Notes.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Orders", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSupportTickets(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (SupportTicket item in e.NewItems)
    			{
    				if (!item.Notes.Contains(this))
    				{
    					item.Notes.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("SupportTickets", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (SupportTicket item in e.OldItems)
    			{
    				if (item.Notes.Contains(this))
    				{
    					item.Notes.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("SupportTickets", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

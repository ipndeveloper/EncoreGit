//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Country))]
    [KnownType(typeof(CalendarEvent))]
    [KnownType(typeof(News))]
    [KnownType(typeof(Site))]
    [KnownType(typeof(Policy))]
    [KnownType(typeof(HostessRewardRule))]
    [KnownType(typeof(Campaign))]
    [KnownType(typeof(Newsletter))]
    [KnownType(typeof(MarketStoreFront))]
    [Serializable]
    public partial class Market: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'MarketID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void PickupPointsEnabledChanged();
    	public bool PickupPointsEnabled
    	{
    		get { return _pickupPointsEnabled; }
    		set
    		{
    			if (_pickupPointsEnabled != value)
    			{
    				ChangeTracker.RecordOriginalValue("PickupPointsEnabled", _pickupPointsEnabled);
    				_pickupPointsEnabled = value;
    				PickupPointsEnabledChanged();
    				OnPropertyChanged("PickupPointsEnabled");
    			}
    		}
    	}
    	private bool _pickupPointsEnabled;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<Country> Countries
    	{
    		get
    		{
    			if (_countries == null)
    			{
    				_countries = new TrackableCollection<Country>();
    				_countries.CollectionChanged += FixupCountries;
    				_countries.CollectionChanged += RaiseCountriesChanged;
    			}
    			return _countries;
    		}
    		set
    		{
    			if (!ReferenceEquals(_countries, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_countries != null)
    				{
    					_countries.CollectionChanged -= FixupCountries;
    					_countries.CollectionChanged -= RaiseCountriesChanged;
    				}
    				_countries = value;
    				if (_countries != null)
    				{
    					_countries.CollectionChanged += FixupCountries;
    					_countries.CollectionChanged += RaiseCountriesChanged;
    				}
    				OnNavigationPropertyChanged("Countries");
    			}
    		}
    	}
    	private TrackableCollection<Country> _countries;
    	partial void CountriesChanged();
    	private void RaiseCountriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CountriesChanged();
    	}
    
    	public TrackableCollection<CalendarEvent> CalendarEvents
    	{
    		get
    		{
    			if (_calendarEvents == null)
    			{
    				_calendarEvents = new TrackableCollection<CalendarEvent>();
    				_calendarEvents.CollectionChanged += FixupCalendarEvents;
    				_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    			}
    			return _calendarEvents;
    		}
    		set
    		{
    			if (!ReferenceEquals(_calendarEvents, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    					_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    				}
    				_calendarEvents = value;
    				if (_calendarEvents != null)
    				{
    					_calendarEvents.CollectionChanged += FixupCalendarEvents;
    					_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    				}
    				OnNavigationPropertyChanged("CalendarEvents");
    			}
    		}
    	}
    	private TrackableCollection<CalendarEvent> _calendarEvents;
    	partial void CalendarEventsChanged();
    	private void RaiseCalendarEventsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CalendarEventsChanged();
    	}
    
    	public TrackableCollection<News> News
    	{
    		get
    		{
    			if (_news == null)
    			{
    				_news = new TrackableCollection<News>();
    				_news.CollectionChanged += FixupNews;
    				_news.CollectionChanged += RaiseNewsChanged;
    			}
    			return _news;
    		}
    		set
    		{
    			if (!ReferenceEquals(_news, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_news != null)
    				{
    					_news.CollectionChanged -= FixupNews;
    					_news.CollectionChanged -= RaiseNewsChanged;
    				}
    				_news = value;
    				if (_news != null)
    				{
    					_news.CollectionChanged += FixupNews;
    					_news.CollectionChanged += RaiseNewsChanged;
    				}
    				OnNavigationPropertyChanged("News");
    			}
    		}
    	}
    	private TrackableCollection<News> _news;
    	partial void NewsChanged();
    	private void RaiseNewsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewsChanged();
    	}
    
    	public TrackableCollection<Site> Sites
    	{
    		get
    		{
    			if (_sites == null)
    			{
    				_sites = new TrackableCollection<Site>();
    				_sites.CollectionChanged += FixupSites;
    				_sites.CollectionChanged += RaiseSitesChanged;
    			}
    			return _sites;
    		}
    		set
    		{
    			if (!ReferenceEquals(_sites, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_sites != null)
    				{
    					_sites.CollectionChanged -= FixupSites;
    					_sites.CollectionChanged -= RaiseSitesChanged;
    				}
    				_sites = value;
    				if (_sites != null)
    				{
    					_sites.CollectionChanged += FixupSites;
    					_sites.CollectionChanged += RaiseSitesChanged;
    				}
    				OnNavigationPropertyChanged("Sites");
    			}
    		}
    	}
    	private TrackableCollection<Site> _sites;
    	partial void SitesChanged();
    	private void RaiseSitesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		SitesChanged();
    	}
    
    	public TrackableCollection<Policy> Policies
    	{
    		get
    		{
    			if (_policies == null)
    			{
    				_policies = new TrackableCollection<Policy>();
    				_policies.CollectionChanged += FixupPolicies;
    				_policies.CollectionChanged += RaisePoliciesChanged;
    			}
    			return _policies;
    		}
    		set
    		{
    			if (!ReferenceEquals(_policies, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_policies != null)
    				{
    					_policies.CollectionChanged -= FixupPolicies;
    					_policies.CollectionChanged -= RaisePoliciesChanged;
    				}
    				_policies = value;
    				if (_policies != null)
    				{
    					_policies.CollectionChanged += FixupPolicies;
    					_policies.CollectionChanged += RaisePoliciesChanged;
    				}
    				OnNavigationPropertyChanged("Policies");
    			}
    		}
    	}
    	private TrackableCollection<Policy> _policies;
    	partial void PoliciesChanged();
    	private void RaisePoliciesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		PoliciesChanged();
    	}
    
    	public TrackableCollection<HostessRewardRule> HostessRewardRules
    	{
    		get
    		{
    			if (_hostessRewardRules == null)
    			{
    				_hostessRewardRules = new TrackableCollection<HostessRewardRule>();
    				_hostessRewardRules.CollectionChanged += FixupHostessRewardRules;
    				_hostessRewardRules.CollectionChanged += RaiseHostessRewardRulesChanged;
    			}
    			return _hostessRewardRules;
    		}
    		set
    		{
    			if (!ReferenceEquals(_hostessRewardRules, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_hostessRewardRules != null)
    				{
    					_hostessRewardRules.CollectionChanged -= FixupHostessRewardRules;
    					_hostessRewardRules.CollectionChanged -= RaiseHostessRewardRulesChanged;
    				}
    				_hostessRewardRules = value;
    				if (_hostessRewardRules != null)
    				{
    					_hostessRewardRules.CollectionChanged += FixupHostessRewardRules;
    					_hostessRewardRules.CollectionChanged += RaiseHostessRewardRulesChanged;
    				}
    				OnNavigationPropertyChanged("HostessRewardRules");
    			}
    		}
    	}
    	private TrackableCollection<HostessRewardRule> _hostessRewardRules;
    	partial void HostessRewardRulesChanged();
    	private void RaiseHostessRewardRulesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		HostessRewardRulesChanged();
    	}
    
    	public TrackableCollection<Campaign> Campaigns
    	{
    		get
    		{
    			if (_campaigns == null)
    			{
    				_campaigns = new TrackableCollection<Campaign>();
    				_campaigns.CollectionChanged += FixupCampaigns;
    				_campaigns.CollectionChanged += RaiseCampaignsChanged;
    			}
    			return _campaigns;
    		}
    		set
    		{
    			if (!ReferenceEquals(_campaigns, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_campaigns != null)
    				{
    					_campaigns.CollectionChanged -= FixupCampaigns;
    					_campaigns.CollectionChanged -= RaiseCampaignsChanged;
    				}
    				_campaigns = value;
    				if (_campaigns != null)
    				{
    					_campaigns.CollectionChanged += FixupCampaigns;
    					_campaigns.CollectionChanged += RaiseCampaignsChanged;
    				}
    				OnNavigationPropertyChanged("Campaigns");
    			}
    		}
    	}
    	private TrackableCollection<Campaign> _campaigns;
    	partial void CampaignsChanged();
    	private void RaiseCampaignsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CampaignsChanged();
    	}
    
    	public TrackableCollection<Newsletter> Newsletters
    	{
    		get
    		{
    			if (_newsletters == null)
    			{
    				_newsletters = new TrackableCollection<Newsletter>();
    				_newsletters.CollectionChanged += FixupNewsletters;
    				_newsletters.CollectionChanged += RaiseNewslettersChanged;
    			}
    			return _newsletters;
    		}
    		set
    		{
    			if (!ReferenceEquals(_newsletters, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_newsletters != null)
    				{
    					_newsletters.CollectionChanged -= FixupNewsletters;
    					_newsletters.CollectionChanged -= RaiseNewslettersChanged;
    				}
    				_newsletters = value;
    				if (_newsletters != null)
    				{
    					_newsletters.CollectionChanged += FixupNewsletters;
    					_newsletters.CollectionChanged += RaiseNewslettersChanged;
    				}
    				OnNavigationPropertyChanged("Newsletters");
    			}
    		}
    	}
    	private TrackableCollection<Newsletter> _newsletters;
    	partial void NewslettersChanged();
    	private void RaiseNewslettersChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		NewslettersChanged();
    	}
    
    	public TrackableCollection<MarketStoreFront> MarketStoreFronts
    	{
    		get
    		{
    			if (_marketStoreFronts == null)
    			{
    				_marketStoreFronts = new TrackableCollection<MarketStoreFront>();
    				_marketStoreFronts.CollectionChanged += FixupMarketStoreFronts;
    				_marketStoreFronts.CollectionChanged += RaiseMarketStoreFrontsChanged;
    			}
    			return _marketStoreFronts;
    		}
    		set
    		{
    			if (!ReferenceEquals(_marketStoreFronts, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_marketStoreFronts != null)
    				{
    					_marketStoreFronts.CollectionChanged -= FixupMarketStoreFronts;
    					_marketStoreFronts.CollectionChanged -= RaiseMarketStoreFrontsChanged;
    				}
    				_marketStoreFronts = value;
    				if (_marketStoreFronts != null)
    				{
    					_marketStoreFronts.CollectionChanged += FixupMarketStoreFronts;
    					_marketStoreFronts.CollectionChanged += RaiseMarketStoreFrontsChanged;
    				}
    				OnNavigationPropertyChanged("MarketStoreFronts");
    			}
    		}
    	}
    	private TrackableCollection<MarketStoreFront> _marketStoreFronts;
    	partial void MarketStoreFrontsChanged();
    	private void RaiseMarketStoreFrontsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		MarketStoreFrontsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_countries != null)
    		{
    			_countries.CollectionChanged -= FixupCountries;
    			_countries.CollectionChanged -= RaiseCountriesChanged;
    			_countries.CollectionChanged += FixupCountries;
    			_countries.CollectionChanged += RaiseCountriesChanged;
    		}
    		if (_calendarEvents != null)
    		{
    			_calendarEvents.CollectionChanged -= FixupCalendarEvents;
    			_calendarEvents.CollectionChanged -= RaiseCalendarEventsChanged;
    			_calendarEvents.CollectionChanged += FixupCalendarEvents;
    			_calendarEvents.CollectionChanged += RaiseCalendarEventsChanged;
    		}
    		if (_news != null)
    		{
    			_news.CollectionChanged -= FixupNews;
    			_news.CollectionChanged -= RaiseNewsChanged;
    			_news.CollectionChanged += FixupNews;
    			_news.CollectionChanged += RaiseNewsChanged;
    		}
    		if (_sites != null)
    		{
    			_sites.CollectionChanged -= FixupSites;
    			_sites.CollectionChanged -= RaiseSitesChanged;
    			_sites.CollectionChanged += FixupSites;
    			_sites.CollectionChanged += RaiseSitesChanged;
    		}
    		if (_policies != null)
    		{
    			_policies.CollectionChanged -= FixupPolicies;
    			_policies.CollectionChanged -= RaisePoliciesChanged;
    			_policies.CollectionChanged += FixupPolicies;
    			_policies.CollectionChanged += RaisePoliciesChanged;
    		}
    		if (_hostessRewardRules != null)
    		{
    			_hostessRewardRules.CollectionChanged -= FixupHostessRewardRules;
    			_hostessRewardRules.CollectionChanged -= RaiseHostessRewardRulesChanged;
    			_hostessRewardRules.CollectionChanged += FixupHostessRewardRules;
    			_hostessRewardRules.CollectionChanged += RaiseHostessRewardRulesChanged;
    		}
    		if (_campaigns != null)
    		{
    			_campaigns.CollectionChanged -= FixupCampaigns;
    			_campaigns.CollectionChanged -= RaiseCampaignsChanged;
    			_campaigns.CollectionChanged += FixupCampaigns;
    			_campaigns.CollectionChanged += RaiseCampaignsChanged;
    		}
    		if (_newsletters != null)
    		{
    			_newsletters.CollectionChanged -= FixupNewsletters;
    			_newsletters.CollectionChanged -= RaiseNewslettersChanged;
    			_newsletters.CollectionChanged += FixupNewsletters;
    			_newsletters.CollectionChanged += RaiseNewslettersChanged;
    		}
    		if (_marketStoreFronts != null)
    		{
    			_marketStoreFronts.CollectionChanged -= FixupMarketStoreFronts;
    			_marketStoreFronts.CollectionChanged -= RaiseMarketStoreFrontsChanged;
    			_marketStoreFronts.CollectionChanged += FixupMarketStoreFronts;
    			_marketStoreFronts.CollectionChanged += RaiseMarketStoreFrontsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Countries.Clear();
    		CalendarEvents.Clear();
    		News.Clear();
    		Sites.Clear();
    		Policies.Clear();
    		HostessRewardRules.Clear();
    		Campaigns.Clear();
    		Newsletters.Clear();
    		MarketStoreFronts.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupCountries(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Country item in e.NewItems)
    			{
    				item.Market = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Countries", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Country item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Market, this))
    				{
    					item.Market = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Countries", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCalendarEvents(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (CalendarEvent item in e.NewItems)
    			{
    				item.Market = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (CalendarEvent item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Market, this))
    				{
    					item.Market = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("CalendarEvents", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNews(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (News item in e.NewItems)
    			{
    				item.Market = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("News", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (News item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Market, this))
    				{
    					item.Market = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("News", item);
    				}
    			}
    		}
    	}
    
    	private void FixupSites(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Site item in e.NewItems)
    			{
    				item.Market = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Sites", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Site item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Market, this))
    				{
    					item.Market = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Sites", item);
    				}
    			}
    		}
    	}
    
    	private void FixupPolicies(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Policy item in e.NewItems)
    			{
    				if (!item.Markets.Contains(this))
    				{
    					item.Markets.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Policies", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Policy item in e.OldItems)
    			{
    				if (item.Markets.Contains(this))
    				{
    					item.Markets.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Policies", item);
    				}
    			}
    		}
    	}
    
    	private void FixupHostessRewardRules(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (HostessRewardRule item in e.NewItems)
    			{
    				item.Market = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("HostessRewardRules", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (HostessRewardRule item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Market, this))
    				{
    					item.Market = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("HostessRewardRules", item);
    				}
    			}
    		}
    	}
    
    	private void FixupCampaigns(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Campaign item in e.NewItems)
    			{
    				item.Market = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Campaigns", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Campaign item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Market, this))
    				{
    					item.Market = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Campaigns", item);
    				}
    			}
    		}
    	}
    
    	private void FixupNewsletters(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Newsletter item in e.NewItems)
    			{
    				item.Market = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Newsletters", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Newsletter item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Market, this))
    				{
    					item.Market = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Newsletters", item);
    				}
    			}
    		}
    	}
    
    	private void FixupMarketStoreFronts(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (MarketStoreFront item in e.NewItems)
    			{
    				item.Market = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("MarketStoreFronts", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (MarketStoreFront item in e.OldItems)
    			{
    				if (ReferenceEquals(item.Market, this))
    				{
    					item.Market = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("MarketStoreFronts", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using NetSteps.Common.Extensions;

namespace NetSteps.Data.Entities
{
    public partial class DomainEventCategoryType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
        partial void DomainEventCategoryTypeIDChanged();
        public int DomainEventCategoryTypeID
        {
            get { return _domainEventCategoryTypeID; }
            set
            {
                if (_domainEventCategoryTypeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DomainEventCategoryTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _domainEventCategoryTypeID = value;
    				DomainEventCategoryTypeIDChanged();
                    OnPropertyChanged("DomainEventCategoryTypeID");
                }
            }
        }
        private int _domainEventCategoryTypeID;
        partial void NameChanged();
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    ChangeTracker.RecordOriginalValue("Name", _name);
                    _name = value;
    				NameChanged();
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
        partial void TermNameChanged();
        public string TermName
        {
            get { return _termName; }
            set
            {
                if (_termName != value)
                {
                    ChangeTracker.RecordOriginalValue("TermName", _termName);
                    _termName = value;
    				TermNameChanged();
                    OnPropertyChanged("TermName");
                }
            }
        }
        private string _termName;

        #endregion
        #region Navigation Properties
    
        partial void LazyLoadDomainEventTypes();
        public TrackableCollection<DomainEventType> DomainEventTypes
        {
            get
            {
                if ((_domainEventTypes == null || !_lazyLoadedPropertyNames.Contains("DomainEventTypes")) && IsLazyLoadingEnabled)
                    LazyLoadDomainEventTypes();
                if (_domainEventTypes == null)
                {
                    _domainEventTypes = new TrackableCollection<DomainEventType>();
                    _domainEventTypes.CollectionChanged += FixupDomainEventTypes;
                }
                return _domainEventTypes;
            }
            set
            {
                if (!ReferenceEquals(_domainEventTypes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_domainEventTypes != null)
                    {
                        _domainEventTypes.CollectionChanged -= FixupDomainEventTypes;
                    }
                    _domainEventTypes = value;
                    if (_domainEventTypes != null)
                    {
                        _domainEventTypes.CollectionChanged += FixupDomainEventTypes;
                    }
                    OnNavigationPropertyChanged("DomainEventTypes");
                }
            }
        }
        private TrackableCollection<DomainEventType> _domainEventTypes;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DomainEventTypes.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupDomainEventTypes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DomainEventType item in e.NewItems)
                {
                    item.DomainEventCategoryType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DomainEventTypes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DomainEventType item in e.OldItems)
                {
                    if (ReferenceEquals(item.DomainEventCategoryType, this))
                    {
                        item.DomainEventCategoryType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DomainEventTypes", item);
                    }
                }
            }
        }

        #endregion
    }
}

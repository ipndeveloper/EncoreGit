//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(AccountType))]
    [KnownType(typeof(PriceRelationshipType))]
    [KnownType(typeof(ProductPriceType))]
    [KnownType(typeof(StoreFront))]
    [Serializable]
    public partial class AccountPriceType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AccountPriceTypeIDChanged();
    	public int AccountPriceTypeID
    	{
    		get { return _accountPriceTypeID; }
    		set
    		{
    			if (_accountPriceTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AccountPriceTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_accountPriceTypeID = value;
    				AccountPriceTypeIDChanged();
    				OnPropertyChanged("AccountPriceTypeID");
    			}
    		}
    	}
    	private int _accountPriceTypeID;
    	partial void ProductPriceTypeIDChanged();
    	public int ProductPriceTypeID
    	{
    		get { return _productPriceTypeID; }
    		set
    		{
    			if (_productPriceTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductPriceTypeID", _productPriceTypeID);
    				if (!IsDeserializing)
    				{
    					if (ProductPriceType != null && ProductPriceType.ProductPriceTypeID != value)
    					{
    						ProductPriceType = null;
    					}
    				}
    				_productPriceTypeID = value;
    				ProductPriceTypeIDChanged();
    				OnPropertyChanged("ProductPriceTypeID");
    			}
    		}
    	}
    	private int _productPriceTypeID;
    	partial void AccountTypeIDChanged();
    	public short AccountTypeID
    	{
    		get { return _accountTypeID; }
    		set
    		{
    			if (_accountTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AccountTypeID", _accountTypeID);
    				if (!IsDeserializing)
    				{
    					if (AccountType != null && AccountType.AccountTypeID != value)
    					{
    						AccountType = null;
    					}
    				}
    				_accountTypeID = value;
    				AccountTypeIDChanged();
    				OnPropertyChanged("AccountTypeID");
    			}
    		}
    	}
    	private short _accountTypeID;
    	partial void PriceRelationshipTypeIDChanged();
    	public int PriceRelationshipTypeID
    	{
    		get { return _priceRelationshipTypeID; }
    		set
    		{
    			if (_priceRelationshipTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("PriceRelationshipTypeID", _priceRelationshipTypeID);
    				if (!IsDeserializing)
    				{
    					if (PriceRelationshipType != null && PriceRelationshipType.PriceRelationshipTypeID != value)
    					{
    						PriceRelationshipType = null;
    					}
    				}
    				_priceRelationshipTypeID = value;
    				PriceRelationshipTypeIDChanged();
    				OnPropertyChanged("PriceRelationshipTypeID");
    			}
    		}
    	}
    	private int _priceRelationshipTypeID;
    	partial void StoreFrontIDChanged();
    	public int StoreFrontID
    	{
    		get { return _storeFrontID; }
    		set
    		{
    			if (_storeFrontID != value)
    			{
    				ChangeTracker.RecordOriginalValue("StoreFrontID", _storeFrontID);
    				if (!IsDeserializing)
    				{
    					if (StoreFront != null && StoreFront.StoreFrontID != value)
    					{
    						StoreFront = null;
    					}
    				}
    				_storeFrontID = value;
    				StoreFrontIDChanged();
    				OnPropertyChanged("StoreFrontID");
    			}
    		}
    	}
    	private int _storeFrontID;

        #endregion
        #region Navigation Properties
    
    	public AccountType AccountType
    	{
    		get { return _accountType; }
    		set
    		{
    			if (!ReferenceEquals(_accountType, value))
    			{
    				var previousValue = _accountType;
    				_accountType = value;
    				FixupAccountType(previousValue);
    				OnNavigationPropertyChanged("AccountType");
    			}
    		}
    	}
    	private AccountType _accountType;
    
    	public PriceRelationshipType PriceRelationshipType
    	{
    		get { return _priceRelationshipType; }
    		set
    		{
    			if (!ReferenceEquals(_priceRelationshipType, value))
    			{
    				var previousValue = _priceRelationshipType;
    				_priceRelationshipType = value;
    				FixupPriceRelationshipType(previousValue);
    				OnNavigationPropertyChanged("PriceRelationshipType");
    			}
    		}
    	}
    	private PriceRelationshipType _priceRelationshipType;
    
    	public ProductPriceType ProductPriceType
    	{
    		get { return _productPriceType; }
    		set
    		{
    			if (!ReferenceEquals(_productPriceType, value))
    			{
    				var previousValue = _productPriceType;
    				_productPriceType = value;
    				FixupProductPriceType(previousValue);
    				OnNavigationPropertyChanged("ProductPriceType");
    			}
    		}
    	}
    	private ProductPriceType _productPriceType;
    
    	public StoreFront StoreFront
    	{
    		get { return _storeFront; }
    		set
    		{
    			if (!ReferenceEquals(_storeFront, value))
    			{
    				var previousValue = _storeFront;
    				_storeFront = value;
    				FixupStoreFront(previousValue);
    				OnNavigationPropertyChanged("StoreFront");
    			}
    		}
    	}
    	private StoreFront _storeFront;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		AccountType = null;
    		PriceRelationshipType = null;
    		ProductPriceType = null;
    		StoreFront = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAccountType(AccountType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPriceTypes.Contains(this))
    		{
    			previousValue.AccountPriceTypes.Remove(this);
    		}
    
    		if (AccountType != null)
    		{
    			if (!AccountType.AccountPriceTypes.Contains(this))
    			{
    				AccountType.AccountPriceTypes.Add(this);
    			}
    
    			AccountTypeID = AccountType.AccountTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("AccountType")
    				&& (ChangeTracker.OriginalValues["AccountType"] == AccountType))
    			{
    				ChangeTracker.OriginalValues.Remove("AccountType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("AccountType", previousValue);
    			}
    			if (AccountType != null && !AccountType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				AccountType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupPriceRelationshipType(PriceRelationshipType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPriceTypes.Contains(this))
    		{
    			previousValue.AccountPriceTypes.Remove(this);
    		}
    
    		if (PriceRelationshipType != null)
    		{
    			if (!PriceRelationshipType.AccountPriceTypes.Contains(this))
    			{
    				PriceRelationshipType.AccountPriceTypes.Add(this);
    			}
    
    			PriceRelationshipTypeID = PriceRelationshipType.PriceRelationshipTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("PriceRelationshipType")
    				&& (ChangeTracker.OriginalValues["PriceRelationshipType"] == PriceRelationshipType))
    			{
    				ChangeTracker.OriginalValues.Remove("PriceRelationshipType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("PriceRelationshipType", previousValue);
    			}
    			if (PriceRelationshipType != null && !PriceRelationshipType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				PriceRelationshipType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductPriceType(ProductPriceType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPriceTypes.Contains(this))
    		{
    			previousValue.AccountPriceTypes.Remove(this);
    		}
    
    		if (ProductPriceType != null)
    		{
    			if (!ProductPriceType.AccountPriceTypes.Contains(this))
    			{
    				ProductPriceType.AccountPriceTypes.Add(this);
    			}
    
    			ProductPriceTypeID = ProductPriceType.ProductPriceTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductPriceType")
    				&& (ChangeTracker.OriginalValues["ProductPriceType"] == ProductPriceType))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductPriceType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductPriceType", previousValue);
    			}
    			if (ProductPriceType != null && !ProductPriceType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductPriceType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupStoreFront(StoreFront previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AccountPriceTypes.Contains(this))
    		{
    			previousValue.AccountPriceTypes.Remove(this);
    		}
    
    		if (StoreFront != null)
    		{
    			if (!StoreFront.AccountPriceTypes.Contains(this))
    			{
    				StoreFront.AccountPriceTypes.Add(this);
    			}
    
    			StoreFrontID = StoreFront.StoreFrontID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("StoreFront")
    				&& (ChangeTracker.OriginalValues["StoreFront"] == StoreFront))
    			{
    				ChangeTracker.OriginalValues.Remove("StoreFront");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("StoreFront", previousValue);
    			}
    			if (StoreFront != null && !StoreFront.ChangeTracker.ChangeTrackingEnabled)
    			{
    				StoreFront.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

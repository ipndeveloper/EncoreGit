//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductProperty))]
    [KnownType(typeof(ProductPropertyTypeRelation))]
    [KnownType(typeof(ProductPropertyValue))]
    [KnownType(typeof(ProductType))]
    [KnownType(typeof(HtmlInputType))]
    [KnownType(typeof(ProductBaseProperty))]
    [Serializable]
    public partial class ProductPropertyType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductPropertyTypeIDChanged();
    	public int ProductPropertyTypeID
    	{
    		get { return _productPropertyTypeID; }
    		set
    		{
    			if (_productPropertyTypeID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductPropertyTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productPropertyTypeID = value;
    				ProductPropertyTypeIDChanged();
    				OnPropertyChanged("ProductPropertyTypeID");
    			}
    		}
    	}
    	private int _productPropertyTypeID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void DataTypeChanged();
    	public string DataType
    	{
    		get { return _dataType; }
    		set
    		{
    			if (_dataType != value)
    			{
    				ChangeTracker.RecordOriginalValue("DataType", _dataType);
    				_dataType = value;
    				DataTypeChanged();
    				OnPropertyChanged("DataType");
    			}
    		}
    	}
    	private string _dataType;
    	partial void SKUSuffixChanged();
    	public string SKUSuffix
    	{
    		get { return _sKUSuffix; }
    		set
    		{
    			if (_sKUSuffix != value)
    			{
    				ChangeTracker.RecordOriginalValue("SKUSuffix", _sKUSuffix);
    				_sKUSuffix = value;
    				SKUSuffixChanged();
    				OnPropertyChanged("SKUSuffix");
    			}
    		}
    	}
    	private string _sKUSuffix;
    	partial void RequiredChanged();
    	public bool Required
    	{
    		get { return _required; }
    		set
    		{
    			if (_required != value)
    			{
    				ChangeTracker.RecordOriginalValue("Required", _required);
    				_required = value;
    				RequiredChanged();
    				OnPropertyChanged("Required");
    			}
    		}
    	}
    	private bool _required;
    	partial void SortIndexChanged();
    	public int SortIndex
    	{
    		get { return _sortIndex; }
    		set
    		{
    			if (_sortIndex != value)
    			{
    				ChangeTracker.RecordOriginalValue("SortIndex", _sortIndex);
    				_sortIndex = value;
    				SortIndexChanged();
    				OnPropertyChanged("SortIndex");
    			}
    		}
    	}
    	private int _sortIndex;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void EditableChanged();
    	public bool Editable
    	{
    		get { return _editable; }
    		set
    		{
    			if (_editable != value)
    			{
    				ChangeTracker.RecordOriginalValue("Editable", _editable);
    				_editable = value;
    				EditableChanged();
    				OnPropertyChanged("Editable");
    			}
    		}
    	}
    	private bool _editable;
    	partial void IsInternalChanged();
    	public bool IsInternal
    	{
    		get { return _isInternal; }
    		set
    		{
    			if (_isInternal != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsInternal", _isInternal);
    				_isInternal = value;
    				IsInternalChanged();
    				OnPropertyChanged("IsInternal");
    			}
    		}
    	}
    	private bool _isInternal;
    	partial void IsProductVariantPropertyChanged();
    	public bool IsProductVariantProperty
    	{
    		get { return _isProductVariantProperty; }
    		set
    		{
    			if (_isProductVariantProperty != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsProductVariantProperty", _isProductVariantProperty);
    				_isProductVariantProperty = value;
    				IsProductVariantPropertyChanged();
    				OnPropertyChanged("IsProductVariantProperty");
    			}
    		}
    	}
    	private bool _isProductVariantProperty;
    	partial void HtmlInputTypeIDChanged();
    	public Nullable<short> HtmlInputTypeID
    	{
    		get { return _htmlInputTypeID; }
    		set
    		{
    			if (_htmlInputTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("HtmlInputTypeID", _htmlInputTypeID);
    				if (!IsDeserializing)
    				{
    					if (HtmlInputType != null && HtmlInputType.HtmlInputTypeID != value)
    					{
    						HtmlInputType = null;
    					}
    				}
    				_htmlInputTypeID = value;
    				HtmlInputTypeIDChanged();
    				OnPropertyChanged("HtmlInputTypeID");
    			}
    		}
    	}
    	private Nullable<short> _htmlInputTypeID;
    	partial void IsMasterChanged();
    	public bool IsMaster
    	{
    		get { return _isMaster; }
    		set
    		{
    			if (_isMaster != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsMaster", _isMaster);
    				_isMaster = value;
    				IsMasterChanged();
    				OnPropertyChanged("IsMaster");
    			}
    		}
    	}
    	private bool _isMaster;
    	partial void ShowNameAndThumbnailChanged();
    	public bool ShowNameAndThumbnail
    	{
    		get { return _showNameAndThumbnail; }
    		set
    		{
    			if (_showNameAndThumbnail != value)
    			{
    				ChangeTracker.RecordOriginalValue("ShowNameAndThumbnail", _showNameAndThumbnail);
    				_showNameAndThumbnail = value;
    				ShowNameAndThumbnailChanged();
    				OnPropertyChanged("ShowNameAndThumbnail");
    			}
    		}
    	}
    	private bool _showNameAndThumbnail;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<ProductProperty> ProductProperties
    	{
    		get
    		{
    			if (_productProperties == null)
    			{
    				_productProperties = new TrackableCollection<ProductProperty>();
    				_productProperties.CollectionChanged += FixupProductProperties;
    				_productProperties.CollectionChanged += RaiseProductPropertiesChanged;
    			}
    			return _productProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productProperties != null)
    				{
    					_productProperties.CollectionChanged -= FixupProductProperties;
    					_productProperties.CollectionChanged -= RaiseProductPropertiesChanged;
    				}
    				_productProperties = value;
    				if (_productProperties != null)
    				{
    					_productProperties.CollectionChanged += FixupProductProperties;
    					_productProperties.CollectionChanged += RaiseProductPropertiesChanged;
    				}
    				OnNavigationPropertyChanged("ProductProperties");
    			}
    		}
    	}
    	private TrackableCollection<ProductProperty> _productProperties;
    	partial void ProductPropertiesChanged();
    	private void RaiseProductPropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPropertiesChanged();
    	}
    
    	public TrackableCollection<ProductPropertyTypeRelation> ProductPropertyTypeRelations
    	{
    		get
    		{
    			if (_productPropertyTypeRelations == null)
    			{
    				_productPropertyTypeRelations = new TrackableCollection<ProductPropertyTypeRelation>();
    				_productPropertyTypeRelations.CollectionChanged += FixupProductPropertyTypeRelations;
    				_productPropertyTypeRelations.CollectionChanged += RaiseProductPropertyTypeRelationsChanged;
    			}
    			return _productPropertyTypeRelations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productPropertyTypeRelations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productPropertyTypeRelations != null)
    				{
    					_productPropertyTypeRelations.CollectionChanged -= FixupProductPropertyTypeRelations;
    					_productPropertyTypeRelations.CollectionChanged -= RaiseProductPropertyTypeRelationsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Remove the cascade delete event handler for any entities in the current collection.
    					foreach (ProductPropertyTypeRelation item in _productPropertyTypeRelations)
    					{
    						ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    					}
    				}
    				_productPropertyTypeRelations = value;
    				if (_productPropertyTypeRelations != null)
    				{
    					_productPropertyTypeRelations.CollectionChanged += FixupProductPropertyTypeRelations;
    					_productPropertyTypeRelations.CollectionChanged += RaiseProductPropertyTypeRelationsChanged;
    					// This is the principal end in an association that performs cascade deletes.
    					// Add the cascade delete event handler for any entities that are already in the new collection.
    					foreach (ProductPropertyTypeRelation item in _productPropertyTypeRelations)
    					{
    						ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    					}
    				}
    				OnNavigationPropertyChanged("ProductPropertyTypeRelations");
    			}
    		}
    	}
    	private TrackableCollection<ProductPropertyTypeRelation> _productPropertyTypeRelations;
    	partial void ProductPropertyTypeRelationsChanged();
    	private void RaiseProductPropertyTypeRelationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPropertyTypeRelationsChanged();
    	}
    
    	public TrackableCollection<ProductPropertyTypeRelation> ProductPropertyTypeRelations1
    	{
    		get
    		{
    			if (_productPropertyTypeRelations1 == null)
    			{
    				_productPropertyTypeRelations1 = new TrackableCollection<ProductPropertyTypeRelation>();
    				_productPropertyTypeRelations1.CollectionChanged += FixupProductPropertyTypeRelations1;
    				_productPropertyTypeRelations1.CollectionChanged += RaiseProductPropertyTypeRelations1Changed;
    			}
    			return _productPropertyTypeRelations1;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productPropertyTypeRelations1, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productPropertyTypeRelations1 != null)
    				{
    					_productPropertyTypeRelations1.CollectionChanged -= FixupProductPropertyTypeRelations1;
    					_productPropertyTypeRelations1.CollectionChanged -= RaiseProductPropertyTypeRelations1Changed;
    					// This is the principal end in an association that performs cascade deletes.
    					// Remove the cascade delete event handler for any entities in the current collection.
    					foreach (ProductPropertyTypeRelation item in _productPropertyTypeRelations1)
    					{
    						ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    					}
    				}
    				_productPropertyTypeRelations1 = value;
    				if (_productPropertyTypeRelations1 != null)
    				{
    					_productPropertyTypeRelations1.CollectionChanged += FixupProductPropertyTypeRelations1;
    					_productPropertyTypeRelations1.CollectionChanged += RaiseProductPropertyTypeRelations1Changed;
    					// This is the principal end in an association that performs cascade deletes.
    					// Add the cascade delete event handler for any entities that are already in the new collection.
    					foreach (ProductPropertyTypeRelation item in _productPropertyTypeRelations1)
    					{
    						ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    					}
    				}
    				OnNavigationPropertyChanged("ProductPropertyTypeRelations1");
    			}
    		}
    	}
    	private TrackableCollection<ProductPropertyTypeRelation> _productPropertyTypeRelations1;
    	partial void ProductPropertyTypeRelations1Changed();
    	private void RaiseProductPropertyTypeRelations1Changed(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPropertyTypeRelations1Changed();
    	}
    
    	public TrackableCollection<ProductPropertyValue> ProductPropertyValues
    	{
    		get
    		{
    			if (_productPropertyValues == null)
    			{
    				_productPropertyValues = new TrackableCollection<ProductPropertyValue>();
    				_productPropertyValues.CollectionChanged += FixupProductPropertyValues;
    				_productPropertyValues.CollectionChanged += RaiseProductPropertyValuesChanged;
    			}
    			return _productPropertyValues;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productPropertyValues, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productPropertyValues != null)
    				{
    					_productPropertyValues.CollectionChanged -= FixupProductPropertyValues;
    					_productPropertyValues.CollectionChanged -= RaiseProductPropertyValuesChanged;
    				}
    				_productPropertyValues = value;
    				if (_productPropertyValues != null)
    				{
    					_productPropertyValues.CollectionChanged += FixupProductPropertyValues;
    					_productPropertyValues.CollectionChanged += RaiseProductPropertyValuesChanged;
    				}
    				OnNavigationPropertyChanged("ProductPropertyValues");
    			}
    		}
    	}
    	private TrackableCollection<ProductPropertyValue> _productPropertyValues;
    	partial void ProductPropertyValuesChanged();
    	private void RaiseProductPropertyValuesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductPropertyValuesChanged();
    	}
    
    	public TrackableCollection<ProductType> ProductTypes
    	{
    		get
    		{
    			if (_productTypes == null)
    			{
    				_productTypes = new TrackableCollection<ProductType>();
    				_productTypes.CollectionChanged += FixupProductTypes;
    				_productTypes.CollectionChanged += RaiseProductTypesChanged;
    			}
    			return _productTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productTypes != null)
    				{
    					_productTypes.CollectionChanged -= FixupProductTypes;
    					_productTypes.CollectionChanged -= RaiseProductTypesChanged;
    				}
    				_productTypes = value;
    				if (_productTypes != null)
    				{
    					_productTypes.CollectionChanged += FixupProductTypes;
    					_productTypes.CollectionChanged += RaiseProductTypesChanged;
    				}
    				OnNavigationPropertyChanged("ProductTypes");
    			}
    		}
    	}
    	private TrackableCollection<ProductType> _productTypes;
    	partial void ProductTypesChanged();
    	private void RaiseProductTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductTypesChanged();
    	}
    
    	public HtmlInputType HtmlInputType
    	{
    		get { return _htmlInputType; }
    		set
    		{
    			if (!ReferenceEquals(_htmlInputType, value))
    			{
    				var previousValue = _htmlInputType;
    				_htmlInputType = value;
    				FixupHtmlInputType(previousValue);
    				OnNavigationPropertyChanged("HtmlInputType");
    			}
    		}
    	}
    	private HtmlInputType _htmlInputType;
    
    	public TrackableCollection<ProductBaseProperty> ProductBaseProperties
    	{
    		get
    		{
    			if (_productBaseProperties == null)
    			{
    				_productBaseProperties = new TrackableCollection<ProductBaseProperty>();
    				_productBaseProperties.CollectionChanged += FixupProductBaseProperties;
    				_productBaseProperties.CollectionChanged += RaiseProductBasePropertiesChanged;
    			}
    			return _productBaseProperties;
    		}
    		set
    		{
    			if (!ReferenceEquals(_productBaseProperties, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_productBaseProperties != null)
    				{
    					_productBaseProperties.CollectionChanged -= FixupProductBaseProperties;
    					_productBaseProperties.CollectionChanged -= RaiseProductBasePropertiesChanged;
    				}
    				_productBaseProperties = value;
    				if (_productBaseProperties != null)
    				{
    					_productBaseProperties.CollectionChanged += FixupProductBaseProperties;
    					_productBaseProperties.CollectionChanged += RaiseProductBasePropertiesChanged;
    				}
    				OnNavigationPropertyChanged("ProductBaseProperties");
    			}
    		}
    	}
    	private TrackableCollection<ProductBaseProperty> _productBaseProperties;
    	partial void ProductBasePropertiesChanged();
    	private void RaiseProductBasePropertiesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ProductBasePropertiesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_productProperties != null)
    		{
    			_productProperties.CollectionChanged -= FixupProductProperties;
    			_productProperties.CollectionChanged -= RaiseProductPropertiesChanged;
    			_productProperties.CollectionChanged += FixupProductProperties;
    			_productProperties.CollectionChanged += RaiseProductPropertiesChanged;
    		}
    		if (_productPropertyTypeRelations != null)
    		{
    			_productPropertyTypeRelations.CollectionChanged -= FixupProductPropertyTypeRelations;
    			_productPropertyTypeRelations.CollectionChanged -= RaiseProductPropertyTypeRelationsChanged;
    			_productPropertyTypeRelations.CollectionChanged += FixupProductPropertyTypeRelations;
    			_productPropertyTypeRelations.CollectionChanged += RaiseProductPropertyTypeRelationsChanged;
    			// This is the principal end in an association that performs cascade deletes.
    			// Add the cascade delete event handler for any entities that are 
    			// already in the collection.
    			foreach (var item in _productPropertyTypeRelations)
    			{
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    		if (_productPropertyTypeRelations1 != null)
    		{
    			_productPropertyTypeRelations1.CollectionChanged -= FixupProductPropertyTypeRelations1;
    			_productPropertyTypeRelations1.CollectionChanged -= RaiseProductPropertyTypeRelations1Changed;
    			_productPropertyTypeRelations1.CollectionChanged += FixupProductPropertyTypeRelations1;
    			_productPropertyTypeRelations1.CollectionChanged += RaiseProductPropertyTypeRelations1Changed;
    			// This is the principal end in an association that performs cascade deletes.
    			// Add the cascade delete event handler for any entities that are 
    			// already in the collection.
    			foreach (var item in _productPropertyTypeRelations1)
    			{
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    		if (_productPropertyValues != null)
    		{
    			_productPropertyValues.CollectionChanged -= FixupProductPropertyValues;
    			_productPropertyValues.CollectionChanged -= RaiseProductPropertyValuesChanged;
    			_productPropertyValues.CollectionChanged += FixupProductPropertyValues;
    			_productPropertyValues.CollectionChanged += RaiseProductPropertyValuesChanged;
    		}
    		if (_productTypes != null)
    		{
    			_productTypes.CollectionChanged -= FixupProductTypes;
    			_productTypes.CollectionChanged -= RaiseProductTypesChanged;
    			_productTypes.CollectionChanged += FixupProductTypes;
    			_productTypes.CollectionChanged += RaiseProductTypesChanged;
    		}
    		if (_productBaseProperties != null)
    		{
    			_productBaseProperties.CollectionChanged -= FixupProductBaseProperties;
    			_productBaseProperties.CollectionChanged -= RaiseProductBasePropertiesChanged;
    			_productBaseProperties.CollectionChanged += FixupProductBaseProperties;
    			_productBaseProperties.CollectionChanged += RaiseProductBasePropertiesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductProperties.Clear();
    		ProductPropertyTypeRelations.Clear();
    		ProductPropertyTypeRelations1.Clear();
    		ProductPropertyValues.Clear();
    		ProductTypes.Clear();
    		HtmlInputType = null;
    		ProductBaseProperties.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupHtmlInputType(HtmlInputType previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductPropertyTypes.Contains(this))
    		{
    			previousValue.ProductPropertyTypes.Remove(this);
    		}
    
    		if (HtmlInputType != null)
    		{
    			if (!HtmlInputType.ProductPropertyTypes.Contains(this))
    			{
    				HtmlInputType.ProductPropertyTypes.Add(this);
    			}
    
    			HtmlInputTypeID = HtmlInputType.HtmlInputTypeID;
    		}
    		else if (!skipKeys)
    		{
    			HtmlInputTypeID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("HtmlInputType")
    				&& (ChangeTracker.OriginalValues["HtmlInputType"] == HtmlInputType))
    			{
    				ChangeTracker.OriginalValues.Remove("HtmlInputType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("HtmlInputType", previousValue);
    			}
    			if (HtmlInputType != null && !HtmlInputType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				HtmlInputType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProductProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductProperty item in e.NewItems)
    			{
    				item.ProductPropertyType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPropertyType, this))
    				{
    					item.ProductPropertyType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductProperties", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductPropertyTypeRelations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductPropertyTypeRelation item in e.NewItems)
    			{
    				item.ProductPropertyType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductPropertyTypeRelations", item);
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Update the event listener to refer to the new dependent.
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductPropertyTypeRelation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPropertyType, this))
    				{
    					item.ProductPropertyType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductPropertyTypeRelations", item);
    					// Delete the dependent end of this identifying association. If the current state is Added,
    					// allow the relationship to be changed without causing the dependent to be deleted.
    					if (item.ChangeTracker.State != ObjectState.Added)
    					{
    						item.MarkAsDeleted();
    					}
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Remove the previous dependent from the event listener.
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    			}
    		}
    	}
    
    	private void FixupProductPropertyTypeRelations1(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductPropertyTypeRelation item in e.NewItems)
    			{
    				item.ProductPropertyType1 = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductPropertyTypeRelations1", item);
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Update the event listener to refer to the new dependent.
    				ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductPropertyTypeRelation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPropertyType1, this))
    				{
    					item.ProductPropertyType1 = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductPropertyTypeRelations1", item);
    					// Delete the dependent end of this identifying association. If the current state is Added,
    					// allow the relationship to be changed without causing the dependent to be deleted.
    					if (item.ChangeTracker.State != ObjectState.Added)
    					{
    						item.MarkAsDeleted();
    					}
    				}
    				// This is the principal end in an association that performs cascade deletes.
    				// Remove the previous dependent from the event listener.
    				ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
    			}
    		}
    	}
    
    	private void FixupProductPropertyValues(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductPropertyValue item in e.NewItems)
    			{
    				item.ProductPropertyType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductPropertyValues", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductPropertyValue item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPropertyType, this))
    				{
    					item.ProductPropertyType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductPropertyValues", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductType item in e.NewItems)
    			{
    				if (!item.ProductPropertyTypes.Contains(this))
    				{
    					item.ProductPropertyTypes.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductType item in e.OldItems)
    			{
    				if (item.ProductPropertyTypes.Contains(this))
    				{
    					item.ProductPropertyTypes.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductTypes", item);
    				}
    			}
    		}
    	}
    
    	private void FixupProductBaseProperties(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ProductBaseProperty item in e.NewItems)
    			{
    				item.ProductPropertyType = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ProductBaseProperties", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ProductBaseProperty item in e.OldItems)
    			{
    				if (ReferenceEquals(item.ProductPropertyType, this))
    				{
    					item.ProductPropertyType = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ProductBaseProperties", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

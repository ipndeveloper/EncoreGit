//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(ProductRelationsType))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(Material))]
    [Serializable]
    public partial class ProductRelation: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void ProductRelationIDChanged();
    	public int ProductRelationID
    	{
    		get { return _productRelationID; }
    		set
    		{
    			if (_productRelationID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'ProductRelationID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_productRelationID = value;
    				ProductRelationIDChanged();
    				OnPropertyChanged("ProductRelationID");
    			}
    		}
    	}
    	private int _productRelationID;
    	partial void ProductRelationsTypeIDChanged();
    	public int ProductRelationsTypeID
    	{
    		get { return _productRelationsTypeID; }
    		set
    		{
    			if (_productRelationsTypeID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ProductRelationsTypeID", _productRelationsTypeID);
    				if (!IsDeserializing)
    				{
    					if (ProductRelationsType != null && ProductRelationsType.ProductRelationTypeID != value)
    					{
    						ProductRelationsType = null;
    					}
    				}
    				_productRelationsTypeID = value;
    				ProductRelationsTypeIDChanged();
    				OnPropertyChanged("ProductRelationsTypeID");
    			}
    		}
    	}
    	private int _productRelationsTypeID;
    	partial void ParentProductIDChanged();
    	public int ParentProductID
    	{
    		get { return _parentProductID; }
    		set
    		{
    			if (_parentProductID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParentProductID", _parentProductID);
    				if (!IsDeserializing)
    				{
    					if (Product1 != null && Product1.ProductID != value)
    					{
    						Product1 = null;
    					}
    				}
    				_parentProductID = value;
    				ParentProductIDChanged();
    				OnPropertyChanged("ParentProductID");
    			}
    		}
    	}
    	private int _parentProductID;
    	partial void ChildProductIDChanged();
    	public int ChildProductID
    	{
    		get { return _childProductID; }
    		set
    		{
    			if (_childProductID != value)
    			{
    				ChangeTracker.RecordOriginalValue("ChildProductID", _childProductID);
    				if (!IsDeserializing)
    				{
    					if (Product != null && Product.ProductID != value)
    					{
    						Product = null;
    					}
    				}
    				_childProductID = value;
    				ChildProductIDChanged();
    				OnPropertyChanged("ChildProductID");
    			}
    		}
    	}
    	private int _childProductID;
    	partial void ExclusionChanged();
    	public Nullable<bool> Exclusion
    	{
    		get { return _exclusion; }
    		set
    		{
    			if (_exclusion != value)
    			{
    				ChangeTracker.RecordOriginalValue("Exclusion", _exclusion);
    				_exclusion = value;
    				ExclusionChanged();
    				OnPropertyChanged("Exclusion");
    			}
    		}
    	}
    	private Nullable<bool> _exclusion;
    	partial void ETLNaturalKeyChanged();
    	public string ETLNaturalKey
    	{
    		get { return _eTLNaturalKey; }
    		set
    		{
    			if (_eTLNaturalKey != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLNaturalKey", _eTLNaturalKey);
    				_eTLNaturalKey = value;
    				ETLNaturalKeyChanged();
    				OnPropertyChanged("ETLNaturalKey");
    			}
    		}
    	}
    	private string _eTLNaturalKey;
    	partial void ETLHashChanged();
    	public string ETLHash
    	{
    		get { return _eTLHash; }
    		set
    		{
    			if (_eTLHash != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLHash", _eTLHash);
    				_eTLHash = value;
    				ETLHashChanged();
    				OnPropertyChanged("ETLHash");
    			}
    		}
    	}
    	private string _eTLHash;
    	partial void ETLPhaseChanged();
    	public string ETLPhase
    	{
    		get { return _eTLPhase; }
    		set
    		{
    			if (_eTLPhase != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLPhase", _eTLPhase);
    				_eTLPhase = value;
    				ETLPhaseChanged();
    				OnPropertyChanged("ETLPhase");
    			}
    		}
    	}
    	private string _eTLPhase;
    	partial void ETLDateChanged();
    	public Nullable<System.DateTime> ETLDate
    	{
    		get { return _eTLDate; }
    		set
    		{
    			if (_eTLDate != value)
    			{
    				ChangeTracker.RecordOriginalValue("ETLDate", _eTLDate);
    				_eTLDate = value;
    				ETLDateChanged();
    				OnPropertyChanged("ETLDate");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _eTLDate;
    	partial void MaterialIDChanged();
    	public Nullable<int> MaterialID
    	{
    		get { return _materialID; }
    		set
    		{
    			if (_materialID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaterialID", _materialID);
    				if (!IsDeserializing)
    				{
    					if (Material != null && Material.MaterialID != value)
    					{
    						Material = null;
    					}
    				}
    				_materialID = value;
    				MaterialIDChanged();
    				OnPropertyChanged("MaterialID");
    			}
    		}
    	}
    	private Nullable<int> _materialID;
    	partial void OfertTypeChanged();
    	public int OfertType
    	{
    		get { return _ofertType; }
    		set
    		{
    			if (_ofertType != value)
    			{
    				ChangeTracker.RecordOriginalValue("OfertType", _ofertType);
    				_ofertType = value;
    				OfertTypeChanged();
    				OnPropertyChanged("OfertType");
    			}
    		}
    	}
    	private int _ofertType;
    	partial void ExternalCodeChanged();
    	public int ExternalCode
    	{
    		get { return _externalCode; }
    		set
    		{
    			if (_externalCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExternalCode", _externalCode);
    				_externalCode = value;
    				ExternalCodeChanged();
    				OnPropertyChanged("ExternalCode");
    			}
    		}
    	}
    	private int _externalCode;
    	partial void ParticipationPercentageChanged();
    	public Nullable<decimal> ParticipationPercentage
    	{
    		get { return _participationPercentage; }
    		set
    		{
    			if (_participationPercentage != value)
    			{
    				ChangeTracker.RecordOriginalValue("ParticipationPercentage", _participationPercentage);
    				_participationPercentage = value;
    				ParticipationPercentageChanged();
    				OnPropertyChanged("ParticipationPercentage");
    			}
    		}
    	}
    	private Nullable<decimal> _participationPercentage;

        #endregion
        #region Navigation Properties
    
    	public ProductRelationsType ProductRelationsType
    	{
    		get { return _productRelationsType; }
    		set
    		{
    			if (!ReferenceEquals(_productRelationsType, value))
    			{
    				var previousValue = _productRelationsType;
    				_productRelationsType = value;
    				FixupProductRelationsType(previousValue);
    				OnNavigationPropertyChanged("ProductRelationsType");
    			}
    		}
    	}
    	private ProductRelationsType _productRelationsType;
    
    	public Product Product
    	{
    		get { return _product; }
    		set
    		{
    			if (!ReferenceEquals(_product, value))
    			{
    				var previousValue = _product;
    				_product = value;
    				FixupProduct(previousValue);
    				OnNavigationPropertyChanged("Product");
    			}
    		}
    	}
    	private Product _product;
    
    	public Product Product1
    	{
    		get { return _product1; }
    		set
    		{
    			if (!ReferenceEquals(_product1, value))
    			{
    				var previousValue = _product1;
    				_product1 = value;
    				FixupProduct1(previousValue);
    				OnNavigationPropertyChanged("Product1");
    			}
    		}
    	}
    	private Product _product1;
    
    	public Material Material
    	{
    		get { return _material; }
    		set
    		{
    			if (!ReferenceEquals(_material, value))
    			{
    				var previousValue = _material;
    				_material = value;
    				FixupMaterial(previousValue);
    				OnNavigationPropertyChanged("Material");
    			}
    		}
    	}
    	private Material _material;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		ProductRelationsType = null;
    		Product = null;
    		Product1 = null;
    		Material = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupProductRelationsType(ProductRelationsType previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductRelations.Contains(this))
    		{
    			previousValue.ProductRelations.Remove(this);
    		}
    
    		if (ProductRelationsType != null)
    		{
    			if (!ProductRelationsType.ProductRelations.Contains(this))
    			{
    				ProductRelationsType.ProductRelations.Add(this);
    			}
    
    			ProductRelationsTypeID = ProductRelationsType.ProductRelationTypeID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("ProductRelationsType")
    				&& (ChangeTracker.OriginalValues["ProductRelationsType"] == ProductRelationsType))
    			{
    				ChangeTracker.OriginalValues.Remove("ProductRelationsType");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("ProductRelationsType", previousValue);
    			}
    			if (ProductRelationsType != null && !ProductRelationsType.ChangeTracker.ChangeTrackingEnabled)
    			{
    				ProductRelationsType.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProduct(Product previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ParentProductRelations.Contains(this))
    		{
    			previousValue.ParentProductRelations.Remove(this);
    		}
    
    		if (Product != null)
    		{
    			if (!Product.ParentProductRelations.Contains(this))
    			{
    				Product.ParentProductRelations.Add(this);
    			}
    
    			ChildProductID = Product.ProductID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Product")
    				&& (ChangeTracker.OriginalValues["Product"] == Product))
    			{
    				ChangeTracker.OriginalValues.Remove("Product");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Product", previousValue);
    			}
    			if (Product != null && !Product.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Product.StartTracking();
    			}
    		}
    	}
    
    	private void FixupProduct1(Product previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ChildProductRelations.Contains(this))
    		{
    			previousValue.ChildProductRelations.Remove(this);
    		}
    
    		if (Product1 != null)
    		{
    			if (!Product1.ChildProductRelations.Contains(this))
    			{
    				Product1.ChildProductRelations.Add(this);
    			}
    
    			ParentProductID = Product1.ProductID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Product1")
    				&& (ChangeTracker.OriginalValues["Product1"] == Product1))
    			{
    				ChangeTracker.OriginalValues.Remove("Product1");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Product1", previousValue);
    			}
    			if (Product1 != null && !Product1.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Product1.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMaterial(Material previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.ProductRelations.Contains(this))
    		{
    			previousValue.ProductRelations.Remove(this);
    		}
    
    		if (Material != null)
    		{
    			if (!Material.ProductRelations.Contains(this))
    			{
    				Material.ProductRelations.Add(this);
    			}
    
    			MaterialID = Material.MaterialID;
    		}
    		else if (!skipKeys)
    		{
    			MaterialID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Material")
    				&& (ChangeTracker.OriginalValues["Material"] == Material))
    			{
    				ChangeTracker.OriginalValues.Remove("Material");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Material", previousValue);
    			}
    			if (Material != null && !Material.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Material.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

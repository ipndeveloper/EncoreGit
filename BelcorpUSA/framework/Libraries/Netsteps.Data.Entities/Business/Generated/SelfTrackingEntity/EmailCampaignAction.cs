//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(EmailTemplate))]
    [KnownType(typeof(CampaignAction))]
    [Serializable]
    public partial class EmailCampaignAction: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void EmailCampaignActionIDChanged();
    	public int EmailCampaignActionID
    	{
    		get { return _emailCampaignActionID; }
    		set
    		{
    			if (_emailCampaignActionID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'EmailCampaignActionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_emailCampaignActionID = value;
    				EmailCampaignActionIDChanged();
    				OnPropertyChanged("EmailCampaignActionID");
    			}
    		}
    	}
    	private int _emailCampaignActionID;
    	partial void EmailTemplateIDChanged();
    	public int EmailTemplateID
    	{
    		get { return _emailTemplateID; }
    		set
    		{
    			if (_emailTemplateID != value)
    			{
    				ChangeTracker.RecordOriginalValue("EmailTemplateID", _emailTemplateID);
    				if (!IsDeserializing)
    				{
    					if (EmailTemplate != null && EmailTemplate.EmailTemplateID != value)
    					{
    						EmailTemplate = null;
    					}
    				}
    				_emailTemplateID = value;
    				EmailTemplateIDChanged();
    				OnPropertyChanged("EmailTemplateID");
    			}
    		}
    	}
    	private int _emailTemplateID;
    	partial void CampaignActionIDChanged();
    	public int CampaignActionID
    	{
    		get { return _campaignActionID; }
    		set
    		{
    			if (_campaignActionID != value)
    			{
    				ChangeTracker.RecordOriginalValue("CampaignActionID", _campaignActionID);
    				if (!IsDeserializing)
    				{
    					if (CampaignAction != null && CampaignAction.CampaignActionID != value)
    					{
    						CampaignAction = null;
    					}
    				}
    				_campaignActionID = value;
    				CampaignActionIDChanged();
    				OnPropertyChanged("CampaignActionID");
    			}
    		}
    	}
    	private int _campaignActionID;
    	partial void DistributorEditableDateUTCChanged();
    	public Nullable<System.DateTime> DistributorEditableDateUTC
    	{
    		get { return _distributorEditableDateUTC; }
    		set
    		{
    			if (_distributorEditableDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("DistributorEditableDateUTC", _distributorEditableDateUTC);
    				_distributorEditableDateUTC = value;
    				DistributorEditableDateUTCChanged();
    				OnPropertyChanged("DistributorEditableDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _distributorEditableDateUTC;

        #endregion
        #region Navigation Properties
    
    	public EmailTemplate EmailTemplate
    	{
    		get { return _emailTemplate; }
    		set
    		{
    			if (!ReferenceEquals(_emailTemplate, value))
    			{
    				var previousValue = _emailTemplate;
    				_emailTemplate = value;
    				FixupEmailTemplate(previousValue);
    				OnNavigationPropertyChanged("EmailTemplate");
    			}
    		}
    	}
    	private EmailTemplate _emailTemplate;
    
    	public CampaignAction CampaignAction
    	{
    		get { return _campaignAction; }
    		set
    		{
    			if (!ReferenceEquals(_campaignAction, value))
    			{
    				var previousValue = _campaignAction;
    				_campaignAction = value;
    				FixupCampaignAction(previousValue);
    				OnNavigationPropertyChanged("CampaignAction");
    			}
    		}
    	}
    	private CampaignAction _campaignAction;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		EmailTemplate = null;
    		CampaignAction = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupEmailTemplate(EmailTemplate previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.EmailCampaignActions.Contains(this))
    		{
    			previousValue.EmailCampaignActions.Remove(this);
    		}
    
    		if (EmailTemplate != null)
    		{
    			if (!EmailTemplate.EmailCampaignActions.Contains(this))
    			{
    				EmailTemplate.EmailCampaignActions.Add(this);
    			}
    
    			EmailTemplateID = EmailTemplate.EmailTemplateID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("EmailTemplate")
    				&& (ChangeTracker.OriginalValues["EmailTemplate"] == EmailTemplate))
    			{
    				ChangeTracker.OriginalValues.Remove("EmailTemplate");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("EmailTemplate", previousValue);
    			}
    			if (EmailTemplate != null && !EmailTemplate.ChangeTracker.ChangeTrackingEnabled)
    			{
    				EmailTemplate.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCampaignAction(CampaignAction previousValue)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.EmailCampaignActions.Contains(this))
    		{
    			previousValue.EmailCampaignActions.Remove(this);
    		}
    
    		if (CampaignAction != null)
    		{
    			if (!CampaignAction.EmailCampaignActions.Contains(this))
    			{
    				CampaignAction.EmailCampaignActions.Add(this);
    			}
    
    			CampaignActionID = CampaignAction.CampaignActionID;
    		}
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("CampaignAction")
    				&& (ChangeTracker.OriginalValues["CampaignAction"] == CampaignAction))
    			{
    				ChangeTracker.OriginalValues.Remove("CampaignAction");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("CampaignAction", previousValue);
    			}
    			if (CampaignAction != null && !CampaignAction.ChangeTracker.ChangeTrackingEnabled)
    			{
    				CampaignAction.StartTracking();
    			}
    		}
    	}

        #endregion
    }
}

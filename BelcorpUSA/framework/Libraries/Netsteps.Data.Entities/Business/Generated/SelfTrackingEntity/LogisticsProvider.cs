//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(Address))]
    [KnownType(typeof(Country))]
    [KnownType(typeof(OrderShipment))]
    [KnownType(typeof(ShippingOrderType))]
    [Serializable]
    public partial class LogisticsProvider: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void LogisticsProviderIDChanged();
    	public short LogisticsProviderID
    	{
    		get { return _logisticsProviderID; }
    		set
    		{
    			if (_logisticsProviderID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'LogisticsProviderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_logisticsProviderID = value;
    				LogisticsProviderIDChanged();
    				OnPropertyChanged("LogisticsProviderID");
    			}
    		}
    	}
    	private short _logisticsProviderID;
    	partial void AddressIDChanged();
    	public Nullable<int> AddressID
    	{
    		get { return _addressID; }
    		set
    		{
    			if (_addressID != value)
    			{
    				ChangeTracker.RecordOriginalValue("AddressID", _addressID);
    				if (!IsDeserializing)
    				{
    					if (Address != null && Address.AddressID != value)
    					{
    						Address = null;
    					}
    				}
    				_addressID = value;
    				AddressIDChanged();
    				OnPropertyChanged("AddressID");
    			}
    		}
    	}
    	private Nullable<int> _addressID;
    	partial void NameChanged();
    	public string Name
    	{
    		get { return _name; }
    		set
    		{
    			if (_name != value)
    			{
    				ChangeTracker.RecordOriginalValue("Name", _name);
    				_name = value;
    				NameChanged();
    				OnPropertyChanged("Name");
    			}
    		}
    	}
    	private string _name;
    	partial void FaxNumberChanged();
    	public string FaxNumber
    	{
    		get { return _faxNumber; }
    		set
    		{
    			if (_faxNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("FaxNumber", _faxNumber);
    				_faxNumber = value;
    				FaxNumberChanged();
    				OnPropertyChanged("FaxNumber");
    			}
    		}
    	}
    	private string _faxNumber;
    	partial void EmailAddressChanged();
    	public string EmailAddress
    	{
    		get { return _emailAddress; }
    		set
    		{
    			if (_emailAddress != value)
    			{
    				ChangeTracker.RecordOriginalValue("EmailAddress", _emailAddress);
    				_emailAddress = value;
    				EmailAddressChanged();
    				OnPropertyChanged("EmailAddress");
    			}
    		}
    	}
    	private string _emailAddress;
    	partial void TermNameChanged();
    	public string TermName
    	{
    		get { return _termName; }
    		set
    		{
    			if (_termName != value)
    			{
    				ChangeTracker.RecordOriginalValue("TermName", _termName);
    				_termName = value;
    				TermNameChanged();
    				OnPropertyChanged("TermName");
    			}
    		}
    	}
    	private string _termName;
    	partial void DescriptionChanged();
    	public string Description
    	{
    		get { return _description; }
    		set
    		{
    			if (_description != value)
    			{
    				ChangeTracker.RecordOriginalValue("Description", _description);
    				_description = value;
    				DescriptionChanged();
    				OnPropertyChanged("Description");
    			}
    		}
    	}
    	private string _description;
    	partial void ActiveChanged();
    	public bool Active
    	{
    		get { return _active; }
    		set
    		{
    			if (_active != value)
    			{
    				ChangeTracker.RecordOriginalValue("Active", _active);
    				_active = value;
    				ActiveChanged();
    				OnPropertyChanged("Active");
    			}
    		}
    	}
    	private bool _active;
    	partial void MarketIDChanged();
    	public int MarketID
    	{
    		get { return _marketID; }
    		set
    		{
    			if (_marketID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MarketID", _marketID);
    				_marketID = value;
    				MarketIDChanged();
    				OnPropertyChanged("MarketID");
    			}
    		}
    	}
    	private int _marketID;
    	partial void ExternalCodeChanged();
    	public string ExternalCode
    	{
    		get { return _externalCode; }
    		set
    		{
    			if (_externalCode != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExternalCode", _externalCode);
    				_externalCode = value;
    				ExternalCodeChanged();
    				OnPropertyChanged("ExternalCode");
    			}
    		}
    	}
    	private string _externalCode;
    	partial void WorkInSaturdaysChanged();
    	public bool WorkInSaturdays
    	{
    		get { return _workInSaturdays; }
    		set
    		{
    			if (_workInSaturdays != value)
    			{
    				ChangeTracker.RecordOriginalValue("WorkInSaturdays", _workInSaturdays);
    				_workInSaturdays = value;
    				WorkInSaturdaysChanged();
    				OnPropertyChanged("WorkInSaturdays");
    			}
    		}
    	}
    	private bool _workInSaturdays;
    	partial void WorkInSundaysChanged();
    	public bool WorkInSundays
    	{
    		get { return _workInSundays; }
    		set
    		{
    			if (_workInSundays != value)
    			{
    				ChangeTracker.RecordOriginalValue("WorkInSundays", _workInSundays);
    				_workInSundays = value;
    				WorkInSundaysChanged();
    				OnPropertyChanged("WorkInSundays");
    			}
    		}
    	}
    	private bool _workInSundays;
    	partial void WorkInHolidaysChanged();
    	public bool WorkInHolidays
    	{
    		get { return _workInHolidays; }
    		set
    		{
    			if (_workInHolidays != value)
    			{
    				ChangeTracker.RecordOriginalValue("WorkInHolidays", _workInHolidays);
    				_workInHolidays = value;
    				WorkInHolidaysChanged();
    				OnPropertyChanged("WorkInHolidays");
    			}
    		}
    	}
    	private bool _workInHolidays;
    	partial void ExternalTrakingURLChanged();
    	public string ExternalTrakingURL
    	{
    		get { return _externalTrakingURL; }
    		set
    		{
    			if (_externalTrakingURL != value)
    			{
    				ChangeTracker.RecordOriginalValue("ExternalTrakingURL", _externalTrakingURL);
    				_externalTrakingURL = value;
    				ExternalTrakingURLChanged();
    				OnPropertyChanged("ExternalTrakingURL");
    			}
    		}
    	}
    	private string _externalTrakingURL;
    	partial void PhoneNumberChanged();
    	public string PhoneNumber
    	{
    		get { return _phoneNumber; }
    		set
    		{
    			if (_phoneNumber != value)
    			{
    				ChangeTracker.RecordOriginalValue("PhoneNumber", _phoneNumber);
    				_phoneNumber = value;
    				PhoneNumberChanged();
    				OnPropertyChanged("PhoneNumber");
    			}
    		}
    	}
    	private string _phoneNumber;

        #endregion
        #region Navigation Properties
    
    	public Address Address
    	{
    		get { return _address; }
    		set
    		{
    			if (!ReferenceEquals(_address, value))
    			{
    				var previousValue = _address;
    				_address = value;
    				FixupAddress(previousValue);
    				OnNavigationPropertyChanged("Address");
    			}
    		}
    	}
    	private Address _address;
    
    	public TrackableCollection<Country> Countries
    	{
    		get
    		{
    			if (_countries == null)
    			{
    				_countries = new TrackableCollection<Country>();
    				_countries.CollectionChanged += FixupCountries;
    				_countries.CollectionChanged += RaiseCountriesChanged;
    			}
    			return _countries;
    		}
    		set
    		{
    			if (!ReferenceEquals(_countries, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_countries != null)
    				{
    					_countries.CollectionChanged -= FixupCountries;
    					_countries.CollectionChanged -= RaiseCountriesChanged;
    				}
    				_countries = value;
    				if (_countries != null)
    				{
    					_countries.CollectionChanged += FixupCountries;
    					_countries.CollectionChanged += RaiseCountriesChanged;
    				}
    				OnNavigationPropertyChanged("Countries");
    			}
    		}
    	}
    	private TrackableCollection<Country> _countries;
    	partial void CountriesChanged();
    	private void RaiseCountriesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		CountriesChanged();
    	}
    
    	public TrackableCollection<OrderShipment> OrderShipments
    	{
    		get
    		{
    			if (_orderShipments == null)
    			{
    				_orderShipments = new TrackableCollection<OrderShipment>();
    				_orderShipments.CollectionChanged += FixupOrderShipments;
    				_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    			}
    			return _orderShipments;
    		}
    		set
    		{
    			if (!ReferenceEquals(_orderShipments, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged -= FixupOrderShipments;
    					_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    				}
    				_orderShipments = value;
    				if (_orderShipments != null)
    				{
    					_orderShipments.CollectionChanged += FixupOrderShipments;
    					_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    				}
    				OnNavigationPropertyChanged("OrderShipments");
    			}
    		}
    	}
    	private TrackableCollection<OrderShipment> _orderShipments;
    	partial void OrderShipmentsChanged();
    	private void RaiseOrderShipmentsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		OrderShipmentsChanged();
    	}
    
    	public TrackableCollection<ShippingOrderType> ShippingOrderTypes
    	{
    		get
    		{
    			if (_shippingOrderTypes == null)
    			{
    				_shippingOrderTypes = new TrackableCollection<ShippingOrderType>();
    				_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    				_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    			}
    			return _shippingOrderTypes;
    		}
    		set
    		{
    			if (!ReferenceEquals(_shippingOrderTypes, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_shippingOrderTypes != null)
    				{
    					_shippingOrderTypes.CollectionChanged -= FixupShippingOrderTypes;
    					_shippingOrderTypes.CollectionChanged -= RaiseShippingOrderTypesChanged;
    				}
    				_shippingOrderTypes = value;
    				if (_shippingOrderTypes != null)
    				{
    					_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    					_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    				}
    				OnNavigationPropertyChanged("ShippingOrderTypes");
    			}
    		}
    	}
    	private TrackableCollection<ShippingOrderType> _shippingOrderTypes;
    	partial void ShippingOrderTypesChanged();
    	private void RaiseShippingOrderTypesChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		ShippingOrderTypesChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_countries != null)
    		{
    			_countries.CollectionChanged -= FixupCountries;
    			_countries.CollectionChanged -= RaiseCountriesChanged;
    			_countries.CollectionChanged += FixupCountries;
    			_countries.CollectionChanged += RaiseCountriesChanged;
    		}
    		if (_orderShipments != null)
    		{
    			_orderShipments.CollectionChanged -= FixupOrderShipments;
    			_orderShipments.CollectionChanged -= RaiseOrderShipmentsChanged;
    			_orderShipments.CollectionChanged += FixupOrderShipments;
    			_orderShipments.CollectionChanged += RaiseOrderShipmentsChanged;
    		}
    		if (_shippingOrderTypes != null)
    		{
    			_shippingOrderTypes.CollectionChanged -= FixupShippingOrderTypes;
    			_shippingOrderTypes.CollectionChanged -= RaiseShippingOrderTypesChanged;
    			_shippingOrderTypes.CollectionChanged += FixupShippingOrderTypes;
    			_shippingOrderTypes.CollectionChanged += RaiseShippingOrderTypesChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		Address = null;
    		Countries.Clear();
    		OrderShipments.Clear();
    		ShippingOrderTypes.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupAddress(Address previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.LogisticsProviders.Contains(this))
    		{
    			previousValue.LogisticsProviders.Remove(this);
    		}
    
    		if (Address != null)
    		{
    			if (!Address.LogisticsProviders.Contains(this))
    			{
    				Address.LogisticsProviders.Add(this);
    			}
    
    			AddressID = Address.AddressID;
    		}
    		else if (!skipKeys)
    		{
    			AddressID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Address")
    				&& (ChangeTracker.OriginalValues["Address"] == Address))
    			{
    				ChangeTracker.OriginalValues.Remove("Address");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Address", previousValue);
    			}
    			if (Address != null && !Address.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Address.StartTracking();
    			}
    		}
    	}
    
    	private void FixupCountries(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (Country item in e.NewItems)
    			{
    				if (!item.LogisticsProviders.Contains(this))
    				{
    					item.LogisticsProviders.Add(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("Countries", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (Country item in e.OldItems)
    			{
    				if (item.LogisticsProviders.Contains(this))
    				{
    					item.LogisticsProviders.Remove(this);
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("Countries", item);
    				}
    			}
    		}
    	}
    
    	private void FixupOrderShipments(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (OrderShipment item in e.NewItems)
    			{
    				item.LogisticsProvider = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (OrderShipment item in e.OldItems)
    			{
    				if (ReferenceEquals(item.LogisticsProvider, this))
    				{
    					item.LogisticsProvider = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("OrderShipments", item);
    				}
    			}
    		}
    	}
    
    	private void FixupShippingOrderTypes(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (ShippingOrderType item in e.NewItems)
    			{
    				item.LogisticsProvider = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("ShippingOrderTypes", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (ShippingOrderType item in e.OldItems)
    			{
    				if (ReferenceEquals(item.LogisticsProvider, this))
    				{
    					item.LogisticsProvider = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("ShippingOrderTypes", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

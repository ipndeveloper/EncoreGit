//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(WarehouseMaterialAllocation))]
    [KnownType(typeof(Warehouse))]
    [KnownType(typeof(Material))]
    [Serializable]
    public partial class WarehouseMaterial: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void WarehouseMaterialIDChanged();
    	public int WarehouseMaterialID
    	{
    		get { return _warehouseMaterialID; }
    		set
    		{
    			if (_warehouseMaterialID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'WarehouseMaterialID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_warehouseMaterialID = value;
    				WarehouseMaterialIDChanged();
    				OnPropertyChanged("WarehouseMaterialID");
    			}
    		}
    	}
    	private int _warehouseMaterialID;
    	partial void WarehouseIDChanged();
    	public Nullable<int> WarehouseID
    	{
    		get { return _warehouseID; }
    		set
    		{
    			if (_warehouseID != value)
    			{
    				ChangeTracker.RecordOriginalValue("WarehouseID", _warehouseID);
    				if (!IsDeserializing)
    				{
    					if (Warehouse != null && Warehouse.WarehouseID != value)
    					{
    						Warehouse = null;
    					}
    				}
    				_warehouseID = value;
    				WarehouseIDChanged();
    				OnPropertyChanged("WarehouseID");
    			}
    		}
    	}
    	private Nullable<int> _warehouseID;
    	partial void MaterialIDChanged();
    	public Nullable<int> MaterialID
    	{
    		get { return _materialID; }
    		set
    		{
    			if (_materialID != value)
    			{
    				ChangeTracker.RecordOriginalValue("MaterialID", _materialID);
    				if (!IsDeserializing)
    				{
    					if (Material != null && Material.MaterialID != value)
    					{
    						Material = null;
    					}
    				}
    				_materialID = value;
    				MaterialIDChanged();
    				OnPropertyChanged("MaterialID");
    			}
    		}
    	}
    	private Nullable<int> _materialID;
    	partial void QuantityAllocatedChanged();
    	public Nullable<int> QuantityAllocated
    	{
    		get { return _quantityAllocated; }
    		set
    		{
    			if (_quantityAllocated != value)
    			{
    				ChangeTracker.RecordOriginalValue("QuantityAllocated", _quantityAllocated);
    				_quantityAllocated = value;
    				QuantityAllocatedChanged();
    				OnPropertyChanged("QuantityAllocated");
    			}
    		}
    	}
    	private Nullable<int> _quantityAllocated;
    	partial void QuantityOnHandChanged();
    	public Nullable<int> QuantityOnHand
    	{
    		get { return _quantityOnHand; }
    		set
    		{
    			if (_quantityOnHand != value)
    			{
    				ChangeTracker.RecordOriginalValue("QuantityOnHand", _quantityOnHand);
    				_quantityOnHand = value;
    				QuantityOnHandChanged();
    				OnPropertyChanged("QuantityOnHand");
    			}
    		}
    	}
    	private Nullable<int> _quantityOnHand;
    	partial void QuantityBufferChanged();
    	public Nullable<int> QuantityBuffer
    	{
    		get { return _quantityBuffer; }
    		set
    		{
    			if (_quantityBuffer != value)
    			{
    				ChangeTracker.RecordOriginalValue("QuantityBuffer", _quantityBuffer);
    				_quantityBuffer = value;
    				QuantityBufferChanged();
    				OnPropertyChanged("QuantityBuffer");
    			}
    		}
    	}
    	private Nullable<int> _quantityBuffer;
    	partial void IsAvailableChanged();
    	public Nullable<bool> IsAvailable
    	{
    		get { return _isAvailable; }
    		set
    		{
    			if (_isAvailable != value)
    			{
    				ChangeTracker.RecordOriginalValue("IsAvailable", _isAvailable);
    				_isAvailable = value;
    				IsAvailableChanged();
    				OnPropertyChanged("IsAvailable");
    			}
    		}
    	}
    	private Nullable<bool> _isAvailable;
    	partial void ReorderLevelChanged();
    	public Nullable<int> ReorderLevel
    	{
    		get { return _reorderLevel; }
    		set
    		{
    			if (_reorderLevel != value)
    			{
    				ChangeTracker.RecordOriginalValue("ReorderLevel", _reorderLevel);
    				_reorderLevel = value;
    				ReorderLevelChanged();
    				OnPropertyChanged("ReorderLevel");
    			}
    		}
    	}
    	private Nullable<int> _reorderLevel;
    	partial void CostAvarageChanged();
    	public Nullable<decimal> CostAvarage
    	{
    		get { return _costAvarage; }
    		set
    		{
    			if (_costAvarage != value)
    			{
    				ChangeTracker.RecordOriginalValue("CostAvarage", _costAvarage);
    				_costAvarage = value;
    				CostAvarageChanged();
    				OnPropertyChanged("CostAvarage");
    			}
    		}
    	}
    	private Nullable<decimal> _costAvarage;

        #endregion
        #region Navigation Properties
    
    	public TrackableCollection<WarehouseMaterialAllocation> WarehouseMaterialAllocations
    	{
    		get
    		{
    			if (_warehouseMaterialAllocations == null)
    			{
    				_warehouseMaterialAllocations = new TrackableCollection<WarehouseMaterialAllocation>();
    				_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    				_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    			}
    			return _warehouseMaterialAllocations;
    		}
    		set
    		{
    			if (!ReferenceEquals(_warehouseMaterialAllocations, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_warehouseMaterialAllocations != null)
    				{
    					_warehouseMaterialAllocations.CollectionChanged -= FixupWarehouseMaterialAllocations;
    					_warehouseMaterialAllocations.CollectionChanged -= RaiseWarehouseMaterialAllocationsChanged;
    				}
    				_warehouseMaterialAllocations = value;
    				if (_warehouseMaterialAllocations != null)
    				{
    					_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    					_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    				}
    				OnNavigationPropertyChanged("WarehouseMaterialAllocations");
    			}
    		}
    	}
    	private TrackableCollection<WarehouseMaterialAllocation> _warehouseMaterialAllocations;
    	partial void WarehouseMaterialAllocationsChanged();
    	private void RaiseWarehouseMaterialAllocationsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		WarehouseMaterialAllocationsChanged();
    	}
    
    	public Warehouse Warehouse
    	{
    		get { return _warehouse; }
    		set
    		{
    			if (!ReferenceEquals(_warehouse, value))
    			{
    				var previousValue = _warehouse;
    				_warehouse = value;
    				FixupWarehouse(previousValue);
    				OnNavigationPropertyChanged("Warehouse");
    			}
    		}
    	}
    	private Warehouse _warehouse;
    
    	public Material Material
    	{
    		get { return _material; }
    		set
    		{
    			if (!ReferenceEquals(_material, value))
    			{
    				var previousValue = _material;
    				_material = value;
    				FixupMaterial(previousValue);
    				OnNavigationPropertyChanged("Material");
    			}
    		}
    	}
    	private Material _material;

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_warehouseMaterialAllocations != null)
    		{
    			_warehouseMaterialAllocations.CollectionChanged -= FixupWarehouseMaterialAllocations;
    			_warehouseMaterialAllocations.CollectionChanged -= RaiseWarehouseMaterialAllocationsChanged;
    			_warehouseMaterialAllocations.CollectionChanged += FixupWarehouseMaterialAllocations;
    			_warehouseMaterialAllocations.CollectionChanged += RaiseWarehouseMaterialAllocationsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		WarehouseMaterialAllocations.Clear();
    		Warehouse = null;
    		Material = null;
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupWarehouse(Warehouse previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.WarehouseMaterials.Contains(this))
    		{
    			previousValue.WarehouseMaterials.Remove(this);
    		}
    
    		if (Warehouse != null)
    		{
    			if (!Warehouse.WarehouseMaterials.Contains(this))
    			{
    				Warehouse.WarehouseMaterials.Add(this);
    			}
    
    			WarehouseID = Warehouse.WarehouseID;
    		}
    		else if (!skipKeys)
    		{
    			WarehouseID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Warehouse")
    				&& (ChangeTracker.OriginalValues["Warehouse"] == Warehouse))
    			{
    				ChangeTracker.OriginalValues.Remove("Warehouse");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Warehouse", previousValue);
    			}
    			if (Warehouse != null && !Warehouse.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Warehouse.StartTracking();
    			}
    		}
    	}
    
    	private void FixupMaterial(Material previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.WarehouseMaterials.Contains(this))
    		{
    			previousValue.WarehouseMaterials.Remove(this);
    		}
    
    		if (Material != null)
    		{
    			if (!Material.WarehouseMaterials.Contains(this))
    			{
    				Material.WarehouseMaterials.Add(this);
    			}
    
    			MaterialID = Material.MaterialID;
    		}
    		else if (!skipKeys)
    		{
    			MaterialID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("Material")
    				&& (ChangeTracker.OriginalValues["Material"] == Material))
    			{
    				ChangeTracker.OriginalValues.Remove("Material");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("Material", previousValue);
    			}
    			if (Material != null && !Material.ChangeTracker.ChangeTrackingEnabled)
    			{
    				Material.StartTracking();
    			}
    		}
    	}
    
    	private void FixupWarehouseMaterialAllocations(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (WarehouseMaterialAllocation item in e.NewItems)
    			{
    				item.WarehouseMaterial = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("WarehouseMaterialAllocations", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (WarehouseMaterialAllocation item in e.OldItems)
    			{
    				if (ReferenceEquals(item.WarehouseMaterial, this))
    				{
    					item.WarehouseMaterial = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("WarehouseMaterialAllocations", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

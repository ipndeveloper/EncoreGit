//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities
{
    [KnownType(typeof(User))]
    [KnownType(typeof(AutoshipLog))]
    [Serializable]
    public partial class AutoshipBatch: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    	partial void AutoshipBatchIDChanged();
    	public int AutoshipBatchID
    	{
    		get { return _autoshipBatchID; }
    		set
    		{
    			if (_autoshipBatchID != value)
    			{
    				if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
    				{
    					throw new InvalidOperationException("The property 'AutoshipBatchID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
    				}
    				_autoshipBatchID = value;
    				AutoshipBatchIDChanged();
    				OnPropertyChanged("AutoshipBatchID");
    			}
    		}
    	}
    	private int _autoshipBatchID;
    	partial void UserIDChanged();
    	public Nullable<int> UserID
    	{
    		get { return _userID; }
    		set
    		{
    			if (_userID != value)
    			{
    				ChangeTracker.RecordOriginalValue("UserID", _userID);
    				if (!IsDeserializing)
    				{
    					if (User != null && User.UserID != value)
    					{
    						User = null;
    					}
    				}
    				_userID = value;
    				UserIDChanged();
    				OnPropertyChanged("UserID");
    			}
    		}
    	}
    	private Nullable<int> _userID;
    	partial void StartDateUTCChanged();
    	public Nullable<System.DateTime> StartDateUTC
    	{
    		get { return _startDateUTC; }
    		set
    		{
    			if (_startDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("StartDateUTC", _startDateUTC);
    				_startDateUTC = value;
    				StartDateUTCChanged();
    				OnPropertyChanged("StartDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _startDateUTC;
    	partial void EndDateUTCChanged();
    	public Nullable<System.DateTime> EndDateUTC
    	{
    		get { return _endDateUTC; }
    		set
    		{
    			if (_endDateUTC != value)
    			{
    				ChangeTracker.RecordOriginalValue("EndDateUTC", _endDateUTC);
    				_endDateUTC = value;
    				EndDateUTCChanged();
    				OnPropertyChanged("EndDateUTC");
    			}
    		}
    	}
    	private Nullable<System.DateTime> _endDateUTC;
    	partial void NotesChanged();
    	public string Notes
    	{
    		get { return _notes; }
    		set
    		{
    			if (_notes != value)
    			{
    				ChangeTracker.RecordOriginalValue("Notes", _notes);
    				_notes = value;
    				NotesChanged();
    				OnPropertyChanged("Notes");
    			}
    		}
    	}
    	private string _notes;

        #endregion
        #region Navigation Properties
    
    	public User User
    	{
    		get { return _user; }
    		set
    		{
    			if (!ReferenceEquals(_user, value))
    			{
    				var previousValue = _user;
    				_user = value;
    				FixupUser(previousValue);
    				OnNavigationPropertyChanged("User");
    			}
    		}
    	}
    	private User _user;
    
    	public TrackableCollection<AutoshipLog> AutoshipLogs
    	{
    		get
    		{
    			if (_autoshipLogs == null)
    			{
    				_autoshipLogs = new TrackableCollection<AutoshipLog>();
    				_autoshipLogs.CollectionChanged += FixupAutoshipLogs;
    				_autoshipLogs.CollectionChanged += RaiseAutoshipLogsChanged;
    			}
    			return _autoshipLogs;
    		}
    		set
    		{
    			if (!ReferenceEquals(_autoshipLogs, value))
    			{
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
    				}
    				if (_autoshipLogs != null)
    				{
    					_autoshipLogs.CollectionChanged -= FixupAutoshipLogs;
    					_autoshipLogs.CollectionChanged -= RaiseAutoshipLogsChanged;
    				}
    				_autoshipLogs = value;
    				if (_autoshipLogs != null)
    				{
    					_autoshipLogs.CollectionChanged += FixupAutoshipLogs;
    					_autoshipLogs.CollectionChanged += RaiseAutoshipLogsChanged;
    				}
    				OnNavigationPropertyChanged("AutoshipLogs");
    			}
    		}
    	}
    	private TrackableCollection<AutoshipLog> _autoshipLogs;
    	partial void AutoshipLogsChanged();
    	private void RaiseAutoshipLogsChanged(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		AutoshipLogsChanged();
    	}

        #endregion
        #region ChangeTracking
    
    	protected virtual void OnPropertyChanged(String propertyName)
    	{
    		if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
    		{
    			ChangeTracker.State = ObjectState.Modified;
    		}
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	protected virtual void OnNavigationPropertyChanged(String propertyName)
    	{
    		if (_propertyChanged != null)
    		{
    			_propertyChanged(this, new PropertyChangedEventArgs(propertyName));
    		}
    	}
    
    	event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
    	private event PropertyChangedEventHandler _propertyChanged;
    	private ObjectChangeTracker _changeTracker;
    
    	public ObjectChangeTracker ChangeTracker
    	{
    		get
    		{
    			if (_changeTracker == null)
    			{
    				_changeTracker = new ObjectChangeTracker();
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    			return _changeTracker;
    		}
    		set
    		{
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
    			}
    			_changeTracker = value;
    			if(_changeTracker != null)
    			{
    				_changeTracker.ObjectStateChanging += HandleObjectStateChanging;
    			}
    		}
    	}
    
    	private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    	{
    		if (e.NewState == ObjectState.Deleted)
    		{
    			ClearNavigationProperties();
    		}
    	}
    
    	protected bool IsDeserializing { get; private set; }
    
    	[OnDeserializing]
    	public void OnDeserializingMethod(StreamingContext context)
    	{
    		IsDeserializing = true;
    	}
    
    	[OnDeserialized]
    	public void OnDeserializedMethod(StreamingContext context)
    	{
    		IsDeserializing = false;
    		ChangeTracker.ChangeTrackingEnabled = true;
    		if (_autoshipLogs != null)
    		{
    			_autoshipLogs.CollectionChanged -= FixupAutoshipLogs;
    			_autoshipLogs.CollectionChanged -= RaiseAutoshipLogsChanged;
    			_autoshipLogs.CollectionChanged += FixupAutoshipLogs;
    			_autoshipLogs.CollectionChanged += RaiseAutoshipLogsChanged;
    		}
    	}
    
    
    	protected virtual void ClearNavigationProperties()
    	{
    		User = null;
    		AutoshipLogs.Clear();
    	}

        #endregion
        #region Association Fixup
    
    	private void FixupUser(User previousValue, bool skipKeys = false)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (previousValue != null && previousValue.AutoshipBatches.Contains(this))
    		{
    			previousValue.AutoshipBatches.Remove(this);
    		}
    
    		if (User != null)
    		{
    			if (!User.AutoshipBatches.Contains(this))
    			{
    				User.AutoshipBatches.Add(this);
    			}
    
    			UserID = User.UserID;
    		}
    		else if (!skipKeys)
    		{
    			UserID = null;
    		}
    
    		if (ChangeTracker.ChangeTrackingEnabled)
    		{
    			if (ChangeTracker.OriginalValues.ContainsKey("User")
    				&& (ChangeTracker.OriginalValues["User"] == User))
    			{
    				ChangeTracker.OriginalValues.Remove("User");
    			}
    			else
    			{
    				ChangeTracker.RecordOriginalValue("User", previousValue);
    			}
    			if (User != null && !User.ChangeTracker.ChangeTrackingEnabled)
    			{
    				User.StartTracking();
    			}
    		}
    	}
    
    	private void FixupAutoshipLogs(object sender, NotifyCollectionChangedEventArgs e)
    	{
    		if (IsDeserializing)
    		{
    			return;
    		}
    
    		if (e.NewItems != null)
    		{
    			foreach (AutoshipLog item in e.NewItems)
    			{
    				item.AutoshipBatch = this;
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					if (!item.ChangeTracker.ChangeTrackingEnabled)
    					{
    						item.StartTracking();
    					}
    					ChangeTracker.RecordAdditionToCollectionProperties("AutoshipLogs", item);
    				}
    			}
    		}
    
    		if (e.OldItems != null)
    		{
    			foreach (AutoshipLog item in e.OldItems)
    			{
    				if (ReferenceEquals(item.AutoshipBatch, this))
    				{
    					item.AutoshipBatch = null;
    				}
    				if (ChangeTracker.ChangeTrackingEnabled)
    				{
    					ChangeTracker.RecordRemovalFromCollectionProperties("AutoshipLogs", item);
    				}
    			}
    		}
    	}

        #endregion
    }
}

using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using NetSteps.Common.Configuration;
using NetSteps.Common.Extensions;
using NetSteps.Common.Interfaces;
using NetSteps.Common.Validation.NetTiers;
using NetSteps.Data.Entities.Business.Logic.Interfaces;
using NetSteps.Data.Entities.Mail;
using NetSteps.Data.Entities.Repositories;
using NetSteps.Encore.Core.IoC;

namespace NetSteps.Data.Entities.Business.Logic
{
    [ContainerRegister(typeof(IMailMessageBusinessLogic), RegistrationBehaviors.Default, ScopeBehavior = ScopeBehavior.Singleton)]
    public partial class MailMessageBusinessLogic : BusinessLogicBase<MailMessage, Int32, IMailMessageRepository, IMailMessageBusinessLogic>, IMailMessageBusinessLogic, IDefaultImplementation
    {
        #region Public
        public override void AddValidationRules(MailMessage Entity)
		{
			base.AddValidationRules(Entity);

			Entity.ValidationRules.AddRule(CommonRules.StringRequired, "FromAddress");
		}

		public override void DefaultValues(IMailMessageRepository repository, MailMessage entity)
		{
			entity.VisualTemplateID = 0;
			entity.MailMessagePriorityID = NetSteps.Data.Entities.Mail.Constants.EmailPriority.Normal.ToShort();
			entity.Attachments = new ObservableCollection<MailAttachment>();
		}

		public override void Delete(IMailMessageRepository repository, MailMessage entity)
		{
			repository.Delete(entity);
		}

		public override void Delete(IMailMessageRepository repository, int mailMessageID)
		{
			repository.Delete(mailMessageID);
		}

		public virtual int SaveAsDraft(IMailMessageRepository repository, MailMessage entity, MailAccount mailAccount)
		{
			entity.BeenRead = true;
			repository.SaveDraft(entity, mailAccount);
			return entity.MailMessageID;
		}

        public virtual string ApplyEventTrackingToInternalMessage(string htmlBody, int? campaignActionId, int mailMessageGroupID, string recipientEmailAddress)
        {
            string hurricaneAccountId = ConfigurationManager.GetAppSetting<string>(ConfigurationManager.VariableKey.HurricaneAccountId);
            string emailEventTrackingUri = ConfigurationManager.GetAppSetting<string>(ConfigurationManager.VariableKey.EmailEventTrackingUri);

            // Validate parameters and config settings
            if (string.IsNullOrWhiteSpace(htmlBody)
                || string.IsNullOrWhiteSpace(recipientEmailAddress)
                || string.IsNullOrWhiteSpace(hurricaneAccountId)
                || string.IsNullOrWhiteSpace(emailEventTrackingUri)
                || !Uri.IsWellFormedUriString(emailEventTrackingUri, UriKind.Absolute))
                return htmlBody;

            // Find links in HTML body
            var matches = GetLinkMatches(htmlBody);

            if (matches.Count == 0)
                return htmlBody;

            // Parse EmailEventTrackingUri from config
            var trackingUri = new Uri(emailEventTrackingUri);
            var uriBuilder = new UriBuilder
            {
                Host = trackingUri.Host,
            };
            if (trackingUri.Port != 80)
                uriBuilder.Port = trackingUri.Port;

            #region Click Tracking
            // These are the values to embed in the click-tracking links
            // DANGER: The order and format of this data must match Hurricane MTA Server's open/click tracking format.
            var clickData = string.Join("\r\n", new[]
            {
                hurricaneAccountId,             // Hurricane AccountId - This is how the Hurricane plugin knows to which database to write the event.
                campaignActionId.HasValue ?
                    campaignActionId.Value.ToString()
                    : string.Empty,             // MailingId - Used for reporting and troubleshooting.
                mailMessageGroupID.ToString(),  // CustomMessageId - This is how the Hurricane plugin knows in which MailMessageGroup to look for the recipient.
                "0",                            // SystemMessageId - Normally generated by Hurricane but we just use "0" since the message is internal.
                "{0}",                          // URL - We will insert each link URL in the code below.
                "true",                         // TrackingId - For Hurricane's internal use. Hurricane puts "true" here so we do too.
                recipientEmailAddress           // EmailAddress - This is how the Hurricane plugin knows to which MailMessageGroupAddress to attach the event.
            });

            // Iterate over (distinct) matches and replace them with click-tracking URLs
            htmlBody = matches
                .Cast<Match>()
                .DistinctBy(m => m.Groups["UrlWithQuotes"].Value)
                .Aggregate(htmlBody, (tempHtml, match) =>
            {
                // DANGER: The format and encoding of this data must match Hurricane MTA Server's open/click tracking format.
                uriBuilder.Query = "r=" +
                    HttpUtility.UrlEncode(
                        Convert.ToBase64String(
                            Encoding.UTF8.GetBytes(
                                string.Format(clickData, match.Groups["UrlWithoutQuotes"].Value)
                            )
                        )
                    );
                return tempHtml.Replace(
                    match.Groups["UrlWithQuotes"].Value,
                    string.Format("\"{0}\"", uriBuilder.ToString())
                );
            });
            #endregion

            #region Open Tracking
            // These are the values to embed in the open-tracking image
            // DANGER: The order and format of this data must match Hurricane MTA Server's open/click tracking format.
            var openData = string.Join("\r\n", new[]
            {
                hurricaneAccountId,             // Hurricane AccountId - This is how the Hurricane plugin knows to which database to write the event.
                campaignActionId.HasValue ?
                    campaignActionId.Value.ToString()
                    : string.Empty,             // MailingId - Used for reporting and troubleshooting.
                mailMessageGroupID.ToString(),  // CustomMessageId - This is how the Hurricane plugin knows in which MailMessageGroup to look for the recipient.
                "0",                            // SystemMessageId - Normally generated by Hurricane but we just use "0" since the message is internal.
                recipientEmailAddress           // EmailAddress - This is how the Hurricane plugin knows to which MailMessageGroupAddress to attach the event.
            });

            // DANGER: The format and encoding of this data must match Hurricane MTA Server's open/click tracking format.
            uriBuilder.Query = string.Empty;
            uriBuilder.Path =
                HttpUtility.UrlEncode(
                    Convert.ToBase64String(
                        Encoding.UTF8.GetBytes(
                            openData
                        )
                    )
                );
            htmlBody += string.Format("<img src=\"{0}.gif\" width=0 height=0>", uriBuilder.ToString());
            #endregion

            return htmlBody;
        }

        public virtual string ApplyEventTrackingToExternalMessage(string htmlBody)
        {
            // Find links in HTML body
            var matches = GetLinkMatches(htmlBody);

            if (matches.Count == 0)
                return htmlBody;

            // Iterate over (distinct) matches and add the Hurricane click-tracking placeholder
            htmlBody = matches
                .Cast<Match>()
                .DistinctBy(m => m.Groups["UrlWithQuotes"].Value)
                .Aggregate(htmlBody, (tempHtml, match) =>
                    tempHtml.Replace(
                        match.Groups["UrlWithQuotes"].Value,
                        match.Groups["UrlWithQuotes"].Value + " HsTracking=\"true\""
                    )
                );

            // Append the Hurricane open-tracking placeholder
            htmlBody += "\r\n<HsTracking/>";

            return htmlBody;
        }

        public virtual bool SetReplyToEmailAddress()
        {
            var retVal = false;
            var useExternal =
                ConfigurationManager.GetAppSetting<bool>(ConfigurationManager.VariableKey.UseExternalEmailForReplyTo);
            if (useExternal)
            {
                retVal = true;
            }
            return retVal;
        }

        #endregion

        #region Private        
        /// <summary>
        /// Finds all hyperlinks with absolute URLs (i.e. href="http://www.netsteps.com").
        /// Each match contains two regex groups: "UrlWithQuotes" and "UrlWithoutQuotes".
        /// </summary>
        protected virtual MatchCollection GetLinkMatches(string html)
        {
            const string linkPattern = @"<\s*a\s+[^<>]*href\s*=\s*(?<UrlWithQuotes>[""']\s*(?<UrlWithoutQuotes>(mailto\:|(news|(ht|f)tp(s?))\://)[^""'<>]+)\s*[""'])[^<>]*>";

            return Regex.Matches(html, linkPattern, RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.Singleline);
        }
        #endregion
    }
}

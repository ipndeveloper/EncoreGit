//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities.Mail
{
    [Serializable]
    public partial class SitesAccount: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        public int AccountID
        {
            get { return _accountID; }
            set
            {
                if (_accountID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AccountID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _accountID = value;
                    OnPropertyChanged("AccountID");
                }
            }
        }
        private int _accountID;
    
        public string AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                if (_accountNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("AccountNumber", _accountNumber);
                    _accountNumber = value;
                    OnPropertyChanged("AccountNumber");
                }
            }
        }
        private string _accountNumber;
    
        public short AccountTypeID
        {
            get { return _accountTypeID; }
            set
            {
                if (_accountTypeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AccountTypeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _accountTypeID = value;
                    OnPropertyChanged("AccountTypeID");
                }
            }
        }
        private short _accountTypeID;
    
        public short AccountStatusID
        {
            get { return _accountStatusID; }
            set
            {
                if (_accountStatusID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AccountStatusID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _accountStatusID = value;
                    OnPropertyChanged("AccountStatusID");
                }
            }
        }
        private short _accountStatusID;
    
        public Nullable<int> PreferedContactMethodID
        {
            get { return _preferedContactMethodID; }
            set
            {
                if (_preferedContactMethodID != value)
                {
                    ChangeTracker.RecordOriginalValue("PreferedContactMethodID", _preferedContactMethodID);
                    _preferedContactMethodID = value;
                    OnPropertyChanged("PreferedContactMethodID");
                }
            }
        }
        private Nullable<int> _preferedContactMethodID;
    
        public int DefaultLanguageID
        {
            get { return _defaultLanguageID; }
            set
            {
                if (_defaultLanguageID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DefaultLanguageID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _defaultLanguageID = value;
                    OnPropertyChanged("DefaultLanguageID");
                }
            }
        }
        private int _defaultLanguageID;
    
        public Nullable<int> UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private Nullable<int> _userID;
    
        public string FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    ChangeTracker.RecordOriginalValue("FirstName", _firstName);
                    _firstName = value;
                    OnPropertyChanged("FirstName");
                }
            }
        }
        private string _firstName;
    
        public string MiddleName
        {
            get { return _middleName; }
            set
            {
                if (_middleName != value)
                {
                    ChangeTracker.RecordOriginalValue("MiddleName", _middleName);
                    _middleName = value;
                    OnPropertyChanged("MiddleName");
                }
            }
        }
        private string _middleName;
    
        public string LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
                    ChangeTracker.RecordOriginalValue("LastName", _lastName);
                    _lastName = value;
                    OnPropertyChanged("LastName");
                }
            }
        }
        private string _lastName;
    
        public string NickName
        {
            get { return _nickName; }
            set
            {
                if (_nickName != value)
                {
                    ChangeTracker.RecordOriginalValue("NickName", _nickName);
                    _nickName = value;
                    OnPropertyChanged("NickName");
                }
            }
        }
        private string _nickName;
    
        public string CoApplicant
        {
            get { return _coApplicant; }
            set
            {
                if (_coApplicant != value)
                {
                    ChangeTracker.RecordOriginalValue("CoApplicant", _coApplicant);
                    _coApplicant = value;
                    OnPropertyChanged("CoApplicant");
                }
            }
        }
        private string _coApplicant;
    
        public string EmailAddress
        {
            get { return _emailAddress; }
            set
            {
                if (_emailAddress != value)
                {
                    ChangeTracker.RecordOriginalValue("EmailAddress", _emailAddress);
                    _emailAddress = value;
                    OnPropertyChanged("EmailAddress");
                }
            }
        }
        private string _emailAddress;
    
        public Nullable<int> SponsorID
        {
            get { return _sponsorID; }
            set
            {
                if (_sponsorID != value)
                {
                    ChangeTracker.RecordOriginalValue("SponsorID", _sponsorID);
                    _sponsorID = value;
                    OnPropertyChanged("SponsorID");
                }
            }
        }
        private Nullable<int> _sponsorID;
    
        public Nullable<int> EnrollerID
        {
            get { return _enrollerID; }
            set
            {
                if (_enrollerID != value)
                {
                    ChangeTracker.RecordOriginalValue("EnrollerID", _enrollerID);
                    _enrollerID = value;
                    OnPropertyChanged("EnrollerID");
                }
            }
        }
        private Nullable<int> _enrollerID;
    
        public Nullable<System.DateTime> EnrollmentDateUTC
        {
            get { return _enrollmentDateUTC; }
            set
            {
                if (_enrollmentDateUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("EnrollmentDateUTC", _enrollmentDateUTC);
                    _enrollmentDateUTC = value;
                    OnPropertyChanged("EnrollmentDateUTC");
                }
            }
        }
        private Nullable<System.DateTime> _enrollmentDateUTC;
    
        public Nullable<bool> IsTaxExempt
        {
            get { return _isTaxExempt; }
            set
            {
                if (_isTaxExempt != value)
                {
                    ChangeTracker.RecordOriginalValue("IsTaxExempt", _isTaxExempt);
                    _isTaxExempt = value;
                    OnPropertyChanged("IsTaxExempt");
                }
            }
        }
        private Nullable<bool> _isTaxExempt;
    
        public string TaxNumber
        {
            get { return _taxNumber; }
            set
            {
                if (_taxNumber != value)
                {
                    ChangeTracker.RecordOriginalValue("TaxNumber", _taxNumber);
                    _taxNumber = value;
                    OnPropertyChanged("TaxNumber");
                }
            }
        }
        private string _taxNumber;
    
        public bool IsEntity
        {
            get { return _isEntity; }
            set
            {
                if (_isEntity != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsEntity' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isEntity = value;
                    OnPropertyChanged("IsEntity");
                }
            }
        }
        private bool _isEntity;
    
        public string EntityName
        {
            get { return _entityName; }
            set
            {
                if (_entityName != value)
                {
                    ChangeTracker.RecordOriginalValue("EntityName", _entityName);
                    _entityName = value;
                    OnPropertyChanged("EntityName");
                }
            }
        }
        private string _entityName;
    
        public Nullable<short> AccountStatusChangeReasonID
        {
            get { return _accountStatusChangeReasonID; }
            set
            {
                if (_accountStatusChangeReasonID != value)
                {
                    ChangeTracker.RecordOriginalValue("AccountStatusChangeReasonID", _accountStatusChangeReasonID);
                    _accountStatusChangeReasonID = value;
                    OnPropertyChanged("AccountStatusChangeReasonID");
                }
            }
        }
        private Nullable<short> _accountStatusChangeReasonID;
    
        public Nullable<System.DateTime> LastRenewalUTC
        {
            get { return _lastRenewalUTC; }
            set
            {
                if (_lastRenewalUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("LastRenewalUTC", _lastRenewalUTC);
                    _lastRenewalUTC = value;
                    OnPropertyChanged("LastRenewalUTC");
                }
            }
        }
        private Nullable<System.DateTime> _lastRenewalUTC;
    
        public Nullable<System.DateTime> NextRenewalUTC
        {
            get { return _nextRenewalUTC; }
            set
            {
                if (_nextRenewalUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("NextRenewalUTC", _nextRenewalUTC);
                    _nextRenewalUTC = value;
                    OnPropertyChanged("NextRenewalUTC");
                }
            }
        }
        private Nullable<System.DateTime> _nextRenewalUTC;
    
        public bool ReceivedApplication
        {
            get { return _receivedApplication; }
            set
            {
                if (_receivedApplication != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReceivedApplication' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _receivedApplication = value;
                    OnPropertyChanged("ReceivedApplication");
                }
            }
        }
        private bool _receivedApplication;
    
        public bool IsTaxExemptVerified
        {
            get { return _isTaxExemptVerified; }
            set
            {
                if (_isTaxExemptVerified != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsTaxExemptVerified' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isTaxExemptVerified = value;
                    OnPropertyChanged("IsTaxExemptVerified");
                }
            }
        }
        private bool _isTaxExemptVerified;
    
        public Nullable<System.DateTime> DateApplicationReceivedUTC
        {
            get { return _dateApplicationReceivedUTC; }
            set
            {
                if (_dateApplicationReceivedUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("DateApplicationReceivedUTC", _dateApplicationReceivedUTC);
                    _dateApplicationReceivedUTC = value;
                    OnPropertyChanged("DateApplicationReceivedUTC");
                }
            }
        }
        private Nullable<System.DateTime> _dateApplicationReceivedUTC;
    
        public Nullable<System.DateTime> BirthdayUTC
        {
            get { return _birthdayUTC; }
            set
            {
                if (_birthdayUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("BirthdayUTC", _birthdayUTC);
                    _birthdayUTC = value;
                    OnPropertyChanged("BirthdayUTC");
                }
            }
        }
        private Nullable<System.DateTime> _birthdayUTC;
    
        public Nullable<short> GenderID
        {
            get { return _genderID; }
            set
            {
                if (_genderID != value)
                {
                    ChangeTracker.RecordOriginalValue("GenderID", _genderID);
                    _genderID = value;
                    OnPropertyChanged("GenderID");
                }
            }
        }
        private Nullable<short> _genderID;
    
        public byte[] DataVersion
        {
            get { return _dataVersion; }
            set
            {
                if (!EqualityComparer.BinaryEquals(_dataVersion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DataVersion' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dataVersion = value;
                    OnPropertyChanged("DataVersion");
                }
            }
        }
        private byte[] _dataVersion;
    
        public Nullable<int> ModifiedByUserID
        {
            get { return _modifiedByUserID; }
            set
            {
                if (_modifiedByUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("ModifiedByUserID", _modifiedByUserID);
                    _modifiedByUserID = value;
                    OnPropertyChanged("ModifiedByUserID");
                }
            }
        }
        private Nullable<int> _modifiedByUserID;
    
        public System.DateTime DateCreatedUTC
        {
            get { return _dateCreatedUTC; }
            set
            {
                if (_dateCreatedUTC != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DateCreatedUTC' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dateCreatedUTC = value;
                    OnPropertyChanged("DateCreatedUTC");
                }
            }
        }
        private System.DateTime _dateCreatedUTC;
    
        public Nullable<int> CreatedByUserID
        {
            get { return _createdByUserID; }
            set
            {
                if (_createdByUserID != value)
                {
                    ChangeTracker.RecordOriginalValue("CreatedByUserID", _createdByUserID);
                    _createdByUserID = value;
                    OnPropertyChanged("CreatedByUserID");
                }
            }
        }
        private Nullable<int> _createdByUserID;
    
        public Nullable<short> AccountSourceID
        {
            get { return _accountSourceID; }
            set
            {
                if (_accountSourceID != value)
                {
                    ChangeTracker.RecordOriginalValue("AccountSourceID", _accountSourceID);
                    _accountSourceID = value;
                    OnPropertyChanged("AccountSourceID");
                }
            }
        }
        private Nullable<short> _accountSourceID;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}

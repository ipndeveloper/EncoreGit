//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities.Mail
{
    [KnownType(typeof(MailMessageGroup))]
    [KnownType(typeof(MessageGroupStatus))]
    [Serializable]
    public partial class MailMessageGroupStatusAudit: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        public int MailMessageGroupStatusAuditID
        {
            get { return _mailMessageGroupStatusAuditID; }
            set
            {
                if (_mailMessageGroupStatusAuditID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MailMessageGroupStatusAuditID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _mailMessageGroupStatusAuditID = value;
                    OnPropertyChanged("MailMessageGroupStatusAuditID");
                }
            }
        }
        private int _mailMessageGroupStatusAuditID;
    
        public int MailMessageGroupID
        {
            get { return _mailMessageGroupID; }
            set
            {
                if (_mailMessageGroupID != value)
                {
                    ChangeTracker.RecordOriginalValue("MailMessageGroupID", _mailMessageGroupID);
                    if (!IsDeserializing)
                    {
                        if (MailMessageGroup != null && MailMessageGroup.MailMessageGroupID != value)
                        {
                            MailMessageGroup = null;
                        }
                    }
                    _mailMessageGroupID = value;
                    OnPropertyChanged("MailMessageGroupID");
                }
            }
        }
        private int _mailMessageGroupID;
    
        public Nullable<short> MessageGroupStatusID
        {
            get { return _messageGroupStatusID; }
            set
            {
                if (_messageGroupStatusID != value)
                {
                    ChangeTracker.RecordOriginalValue("MessageGroupStatusID", _messageGroupStatusID);
                    if (!IsDeserializing)
                    {
                        if (MessageGroupStatus != null && MessageGroupStatus.MessageGroupStatusID != value)
                        {
                            MessageGroupStatus = null;
                        }
                    }
                    _messageGroupStatusID = value;
                    OnPropertyChanged("MessageGroupStatusID");
                }
            }
        }
        private Nullable<short> _messageGroupStatusID;
    
        public int AttemptCount
        {
            get { return _attemptCount; }
            set
            {
                if (_attemptCount != value)
                {
                    ChangeTracker.RecordOriginalValue("AttemptCount", _attemptCount);
                    _attemptCount = value;
                    OnPropertyChanged("AttemptCount");
                }
            }
        }
        private int _attemptCount;
    
        public Nullable<System.DateTime> RetryTimeUTC
        {
            get { return _retryTimeUTC; }
            set
            {
                if (_retryTimeUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("RetryTimeUTC", _retryTimeUTC);
                    _retryTimeUTC = value;
                    OnPropertyChanged("RetryTimeUTC");
                }
            }
        }
        private Nullable<System.DateTime> _retryTimeUTC;
    
        public System.DateTime DateAddedUTC
        {
            get { return _dateAddedUTC; }
            set
            {
                if (_dateAddedUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("DateAddedUTC", _dateAddedUTC);
                    _dateAddedUTC = value;
                    OnPropertyChanged("DateAddedUTC");
                }
            }
        }
        private System.DateTime _dateAddedUTC;

        #endregion
        #region Navigation Properties
    
            public MailMessageGroup MailMessageGroup
        {
            get { return _mailMessageGroup; }
            set
            {
                if (!ReferenceEquals(_mailMessageGroup, value))
                {
                    var previousValue = _mailMessageGroup;
                    _mailMessageGroup = value;
                    FixupMailMessageGroup(previousValue);
                    OnNavigationPropertyChanged("MailMessageGroup");
                }
            }
        }
        private MailMessageGroup _mailMessageGroup;
    
            public MessageGroupStatus MessageGroupStatus
        {
            get { return _messageGroupStatus; }
            set
            {
                if (!ReferenceEquals(_messageGroupStatus, value))
                {
                    var previousValue = _messageGroupStatus;
                    _messageGroupStatus = value;
                    FixupMessageGroupStatus(previousValue);
                    OnNavigationPropertyChanged("MessageGroupStatus");
                }
            }
        }
        private MessageGroupStatus _messageGroupStatus;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            MailMessageGroup = null;
            MessageGroupStatus = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMailMessageGroup(MailMessageGroup previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MailMessageGroupStatusAudits.Contains(this))
            {
                previousValue.MailMessageGroupStatusAudits.Remove(this);
            }
    
            if (MailMessageGroup != null)
            {
                if (!MailMessageGroup.MailMessageGroupStatusAudits.Contains(this))
                {
                    MailMessageGroup.MailMessageGroupStatusAudits.Add(this);
                }
    
                MailMessageGroupID = MailMessageGroup.MailMessageGroupID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MailMessageGroup")
                    && (ChangeTracker.OriginalValues["MailMessageGroup"] == MailMessageGroup))
                {
                    ChangeTracker.OriginalValues.Remove("MailMessageGroup");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MailMessageGroup", previousValue);
                }
                if (MailMessageGroup != null && !MailMessageGroup.ChangeTracker.ChangeTrackingEnabled)
                {
                    MailMessageGroup.StartTracking();
                }
            }
        }
    
        private void FixupMessageGroupStatus(MessageGroupStatus previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MailMessageGroupStatusAudits.Contains(this))
            {
                previousValue.MailMessageGroupStatusAudits.Remove(this);
            }
    
            if (MessageGroupStatus != null)
            {
                if (!MessageGroupStatus.MailMessageGroupStatusAudits.Contains(this))
                {
                    MessageGroupStatus.MailMessageGroupStatusAudits.Add(this);
                }
    
                MessageGroupStatusID = MessageGroupStatus.MessageGroupStatusID;
            }
            else if (!skipKeys)
            {
                MessageGroupStatusID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MessageGroupStatus")
                    && (ChangeTracker.OriginalValues["MessageGroupStatus"] == MessageGroupStatus))
                {
                    ChangeTracker.OriginalValues.Remove("MessageGroupStatus");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MessageGroupStatus", previousValue);
                }
                if (MessageGroupStatus != null && !MessageGroupStatus.ChangeTracker.ChangeTrackingEnabled)
                {
                    MessageGroupStatus.StartTracking();
                }
            }
        }

        #endregion
    }
}

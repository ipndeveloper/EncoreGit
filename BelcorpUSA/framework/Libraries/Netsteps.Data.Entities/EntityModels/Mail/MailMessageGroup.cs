//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities.Mail
{
    [KnownType(typeof(MailMessageGroupAddress))]
    [KnownType(typeof(MailMessageGroupStatusAudit))]
    [KnownType(typeof(MailMessage))]
    [Serializable]
    public partial class MailMessageGroup: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        public int MailMessageGroupID
        {
            get { return _mailMessageGroupID; }
            set
            {
                if (_mailMessageGroupID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MailMessageGroupID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _mailMessageGroupID = value;
                    OnPropertyChanged("MailMessageGroupID");
                }
            }
        }
        private int _mailMessageGroupID;
    
        public int MailMessageID
        {
            get { return _mailMessageID; }
            set
            {
                if (_mailMessageID != value)
                {
                    ChangeTracker.RecordOriginalValue("MailMessageID", _mailMessageID);
                    if (!IsDeserializing)
                    {
                        if (MailMessage != null && MailMessage.MailMessageID != value)
                        {
                            MailMessage = null;
                        }
                    }
                    _mailMessageID = value;
                    OnPropertyChanged("MailMessageID");
                }
            }
        }
        private int _mailMessageID;
    
        public Nullable<short> MessageGroupStatusID
        {
            get { return _messageGroupStatusID; }
            set
            {
                if (_messageGroupStatusID != value)
                {
                    ChangeTracker.RecordOriginalValue("MessageGroupStatusID", _messageGroupStatusID);
                    _messageGroupStatusID = value;
                    OnPropertyChanged("MessageGroupStatusID");
                }
            }
        }
        private Nullable<short> _messageGroupStatusID;
    
        public int AttemptCount
        {
            get { return _attemptCount; }
            set
            {
                if (_attemptCount != value)
                {
                    ChangeTracker.RecordOriginalValue("AttemptCount", _attemptCount);
                    _attemptCount = value;
                    OnPropertyChanged("AttemptCount");
                }
            }
        }
        private int _attemptCount;
    
        public Nullable<bool> IsOriginal
        {
            get { return _isOriginal; }
            set
            {
                if (_isOriginal != value)
                {
                    ChangeTracker.RecordOriginalValue("IsOriginal", _isOriginal);
                    _isOriginal = value;
                    OnPropertyChanged("IsOriginal");
                }
            }
        }
        private Nullable<bool> _isOriginal;
    
        public Nullable<int> tmpAccountID
        {
            get { return _tmpAccountID; }
            set
            {
                if (_tmpAccountID != value)
                {
                    ChangeTracker.RecordOriginalValue("tmpAccountID", _tmpAccountID);
                    _tmpAccountID = value;
                    OnPropertyChanged("tmpAccountID");
                }
            }
        }
        private Nullable<int> _tmpAccountID;
    
        public Nullable<System.DateTime> RetryTimeUTC
        {
            get { return _retryTimeUTC; }
            set
            {
                if (_retryTimeUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("RetryTimeUTC", _retryTimeUTC);
                    _retryTimeUTC = value;
                    OnPropertyChanged("RetryTimeUTC");
                }
            }
        }
        private Nullable<System.DateTime> _retryTimeUTC;

        #endregion
        #region Navigation Properties
    
            public TrackableCollection<MailMessageGroupAddress> MailMessageGroupAddresses
        {
            get
            {
                if (_mailMessageGroupAddresses == null)
                {
                    _mailMessageGroupAddresses = new TrackableCollection<MailMessageGroupAddress>();
                    _mailMessageGroupAddresses.CollectionChanged += FixupMailMessageGroupAddresses;
                }
                return _mailMessageGroupAddresses;
            }
            set
            {
                if (!ReferenceEquals(_mailMessageGroupAddresses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mailMessageGroupAddresses != null)
                    {
                        _mailMessageGroupAddresses.CollectionChanged -= FixupMailMessageGroupAddresses;
                    }
                    _mailMessageGroupAddresses = value;
                    if (_mailMessageGroupAddresses != null)
                    {
                        _mailMessageGroupAddresses.CollectionChanged += FixupMailMessageGroupAddresses;
                    }
                    OnNavigationPropertyChanged("MailMessageGroupAddresses");
                }
            }
        }
        private TrackableCollection<MailMessageGroupAddress> _mailMessageGroupAddresses;
    
            public TrackableCollection<MailMessageGroupStatusAudit> MailMessageGroupStatusAudits
        {
            get
            {
                if (_mailMessageGroupStatusAudits == null)
                {
                    _mailMessageGroupStatusAudits = new TrackableCollection<MailMessageGroupStatusAudit>();
                    _mailMessageGroupStatusAudits.CollectionChanged += FixupMailMessageGroupStatusAudits;
                }
                return _mailMessageGroupStatusAudits;
            }
            set
            {
                if (!ReferenceEquals(_mailMessageGroupStatusAudits, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mailMessageGroupStatusAudits != null)
                    {
                        _mailMessageGroupStatusAudits.CollectionChanged -= FixupMailMessageGroupStatusAudits;
                    }
                    _mailMessageGroupStatusAudits = value;
                    if (_mailMessageGroupStatusAudits != null)
                    {
                        _mailMessageGroupStatusAudits.CollectionChanged += FixupMailMessageGroupStatusAudits;
                    }
                    OnNavigationPropertyChanged("MailMessageGroupStatusAudits");
                }
            }
        }
        private TrackableCollection<MailMessageGroupStatusAudit> _mailMessageGroupStatusAudits;
    
            public MailMessage MailMessage
        {
            get { return _mailMessage; }
            set
            {
                if (!ReferenceEquals(_mailMessage, value))
                {
                    var previousValue = _mailMessage;
                    _mailMessage = value;
                    FixupMailMessage(previousValue);
                    OnNavigationPropertyChanged("MailMessage");
                }
            }
        }
        private MailMessage _mailMessage;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
            if (_mailMessageGroupAddresses != null)
    		{
    		    _mailMessageGroupAddresses.CollectionChanged -= FixupMailMessageGroupAddresses;
                _mailMessageGroupAddresses.CollectionChanged += FixupMailMessageGroupAddresses;
            }
            if (_mailMessageGroupStatusAudits != null)
    		{
    		    _mailMessageGroupStatusAudits.CollectionChanged -= FixupMailMessageGroupStatusAudits;
                _mailMessageGroupStatusAudits.CollectionChanged += FixupMailMessageGroupStatusAudits;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            MailMessageGroupAddresses.Clear();
            MailMessageGroupStatusAudits.Clear();
            MailMessage = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMailMessage(MailMessage previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MailMessageGroups.Contains(this))
            {
                previousValue.MailMessageGroups.Remove(this);
            }
    
            if (MailMessage != null)
            {
                if (!MailMessage.MailMessageGroups.Contains(this))
                {
                    MailMessage.MailMessageGroups.Add(this);
                }
    
                MailMessageID = MailMessage.MailMessageID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MailMessage")
                    && (ChangeTracker.OriginalValues["MailMessage"] == MailMessage))
                {
                    ChangeTracker.OriginalValues.Remove("MailMessage");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MailMessage", previousValue);
                }
                if (MailMessage != null && !MailMessage.ChangeTracker.ChangeTrackingEnabled)
                {
                    MailMessage.StartTracking();
                }
            }
        }
    
        private void FixupMailMessageGroupAddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MailMessageGroupAddress item in e.NewItems)
                {
                    item.MailMessageGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MailMessageGroupAddresses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MailMessageGroupAddress item in e.OldItems)
                {
                    if (ReferenceEquals(item.MailMessageGroup, this))
                    {
                        item.MailMessageGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MailMessageGroupAddresses", item);
                    }
                }
            }
        }
    
        private void FixupMailMessageGroupStatusAudits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MailMessageGroupStatusAudit item in e.NewItems)
                {
                    item.MailMessageGroup = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MailMessageGroupStatusAudits", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MailMessageGroupStatusAudit item in e.OldItems)
                {
                    if (ReferenceEquals(item.MailMessageGroup, this))
                    {
                        item.MailMessageGroup = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MailMessageGroupStatusAudits", item);
                    }
                }
            }
        }

        #endregion
    }
}

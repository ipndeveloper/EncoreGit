//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace NetSteps.Data.Entities.Mail
{
    [KnownType(typeof(MailMessageGroupAddress))]
    [KnownType(typeof(MailMessageRecipientEventType))]
    [Serializable]
    public partial class MailMessageRecipientEvent: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        public int MailMessageRecipientEventID
        {
            get { return _mailMessageRecipientEventID; }
            set
            {
                if (_mailMessageRecipientEventID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MailMessageRecipientEventID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _mailMessageRecipientEventID = value;
                    OnPropertyChanged("MailMessageRecipientEventID");
                }
            }
        }
        private int _mailMessageRecipientEventID;
    
        public int MailMessageGroupAddressID
        {
            get { return _mailMessageGroupAddressID; }
            set
            {
                if (_mailMessageGroupAddressID != value)
                {
                    ChangeTracker.RecordOriginalValue("MailMessageGroupAddressID", _mailMessageGroupAddressID);
                    if (!IsDeserializing)
                    {
                        if (MailMessageGroupAddress != null && MailMessageGroupAddress.MailMessageGroupAddressID != value)
                        {
                            MailMessageGroupAddress = null;
                        }
                    }
                    _mailMessageGroupAddressID = value;
                    OnPropertyChanged("MailMessageGroupAddressID");
                }
            }
        }
        private int _mailMessageGroupAddressID;
    
        public short MailMessageRecipientEventTypeID
        {
            get { return _mailMessageRecipientEventTypeID; }
            set
            {
                if (_mailMessageRecipientEventTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("MailMessageRecipientEventTypeID", _mailMessageRecipientEventTypeID);
                    if (!IsDeserializing)
                    {
                        if (MailMessageRecipientEventType != null && MailMessageRecipientEventType.MailMessageRecipientEventTypeID != value)
                        {
                            MailMessageRecipientEventType = null;
                        }
                    }
                    _mailMessageRecipientEventTypeID = value;
                    OnPropertyChanged("MailMessageRecipientEventTypeID");
                }
            }
        }
        private short _mailMessageRecipientEventTypeID;
    
        public System.DateTime DateCreatedUTC
        {
            get { return _dateCreatedUTC; }
            set
            {
                if (_dateCreatedUTC != value)
                {
                    ChangeTracker.RecordOriginalValue("DateCreatedUTC", _dateCreatedUTC);
                    _dateCreatedUTC = value;
                    OnPropertyChanged("DateCreatedUTC");
                }
            }
        }
        private System.DateTime _dateCreatedUTC;
    
        public string Text
        {
            get { return _text; }
            set
            {
                if (_text != value)
                {
                    ChangeTracker.RecordOriginalValue("Text", _text);
                    _text = value;
                    OnPropertyChanged("Text");
                }
            }
        }
        private string _text;
    
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    ChangeTracker.RecordOriginalValue("Url", _url);
                    _url = value;
                    OnPropertyChanged("Url");
                }
            }
        }
        private string _url;

        #endregion
        #region Navigation Properties
    
            public MailMessageGroupAddress MailMessageGroupAddress
        {
            get { return _mailMessageGroupAddress; }
            set
            {
                if (!ReferenceEquals(_mailMessageGroupAddress, value))
                {
                    var previousValue = _mailMessageGroupAddress;
                    _mailMessageGroupAddress = value;
                    FixupMailMessageGroupAddress(previousValue);
                    OnNavigationPropertyChanged("MailMessageGroupAddress");
                }
            }
        }
        private MailMessageGroupAddress _mailMessageGroupAddress;
    
            public MailMessageRecipientEventType MailMessageRecipientEventType
        {
            get { return _mailMessageRecipientEventType; }
            set
            {
                if (!ReferenceEquals(_mailMessageRecipientEventType, value))
                {
                    var previousValue = _mailMessageRecipientEventType;
                    _mailMessageRecipientEventType = value;
                    FixupMailMessageRecipientEventType(previousValue);
                    OnNavigationPropertyChanged("MailMessageRecipientEventType");
                }
            }
        }
        private MailMessageRecipientEventType _mailMessageRecipientEventType;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            MailMessageGroupAddress = null;
            MailMessageRecipientEventType = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMailMessageGroupAddress(MailMessageGroupAddress previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MailMessageRecipientEvents.Contains(this))
            {
                previousValue.MailMessageRecipientEvents.Remove(this);
            }
    
            if (MailMessageGroupAddress != null)
            {
                if (!MailMessageGroupAddress.MailMessageRecipientEvents.Contains(this))
                {
                    MailMessageGroupAddress.MailMessageRecipientEvents.Add(this);
                }
    
                MailMessageGroupAddressID = MailMessageGroupAddress.MailMessageGroupAddressID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MailMessageGroupAddress")
                    && (ChangeTracker.OriginalValues["MailMessageGroupAddress"] == MailMessageGroupAddress))
                {
                    ChangeTracker.OriginalValues.Remove("MailMessageGroupAddress");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MailMessageGroupAddress", previousValue);
                }
                if (MailMessageGroupAddress != null && !MailMessageGroupAddress.ChangeTracker.ChangeTrackingEnabled)
                {
                    MailMessageGroupAddress.StartTracking();
                }
            }
        }
    
        private void FixupMailMessageRecipientEventType(MailMessageRecipientEventType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MailMessageRecipientEvents.Contains(this))
            {
                previousValue.MailMessageRecipientEvents.Remove(this);
            }
    
            if (MailMessageRecipientEventType != null)
            {
                if (!MailMessageRecipientEventType.MailMessageRecipientEvents.Contains(this))
                {
                    MailMessageRecipientEventType.MailMessageRecipientEvents.Add(this);
                }
    
                MailMessageRecipientEventTypeID = MailMessageRecipientEventType.MailMessageRecipientEventTypeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MailMessageRecipientEventType")
                    && (ChangeTracker.OriginalValues["MailMessageRecipientEventType"] == MailMessageRecipientEventType))
                {
                    ChangeTracker.OriginalValues.Remove("MailMessageRecipientEventType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MailMessageRecipientEventType", previousValue);
                }
                if (MailMessageRecipientEventType != null && !MailMessageRecipientEventType.ChangeTracker.ChangeTrackingEnabled)
                {
                    MailMessageRecipientEventType.StartTracking();
                }
            }
        }

        #endregion
    }
}

@using NetSteps.Data.Entities.Business
@using NetSteps.Data.Entities.Cache
@using System.Linq
@{
	
    string baseUrl = "~/Accounts/Search";
    
    
}
<script type="text/javascript">
    $(function () {
        $('#exportToExcel').click(function () {
            window.location = '@Href("~/Reports/Reports/ProductCreditBalanceExport")';
        });

        var accountId = $('<input type="hidden" id="accountIdFilter" class="Filter" />');
        $('#accountNumberOrNameInputFilter').change(function () {
            accountId.val('');
        });
        var url = '@Href("~/Accounts/Search")';  
        $('#accountNumberOrNameInputFilter').removeClass('Filter').after(accountId).css('width', '200px')
				
				.watermark('@Html.JavascriptTerm("AccountSearch", "Look up account by ID or name")')
				.jsonSuggest('@Href(baseUrl)', { onSelect: function (item) {
              
				    accountId.val(item.id);
				}, minCharacters: 3, ajaxResults: true, maxResults: 50, showMore: true
        });



$.datepicker.regional['es'] = {
    closeText: 'Cerrar',
    prevText: '<Ant',
    nextText: 'Sig>',
    currentText: 'Hoy',
    monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
    monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
    dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
    dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Juv', 'Vie', 'Sáb'],
    dayNamesMin: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
    weekHeader: 'Sm',
    dateFormat: 'dd/mm/yy',
    firstDay: 1,
    isRTL: false,
    showMonthAfterYear: false,
    yearSuffix: ''
};

$.datepicker.setDefaults($.datepicker.regional['es']);


    });
</script>



@{Html.PaginatedGrid<ProductCreditBalanceSearchData>("~/Reports/Reports/GetProductCreditBalanceReport")
        .AutoGenerateColumns()
        //.AddColumn(Html.Term("Description"), "EntryDescription", false)     
        //.HideClientSpecificColumns_()
          .AddSelectFilter(Html.Term("State", "State"), "State",
           new Dictionary<string, string>() {
                                                { " ", Html.Term("All", "All") },
                                                { "=", Html.Term("Balance Zero", "Balance Zero") },                                  
                                                { ">", Html.Term("BalancePositive", "Balance Positive")}  , 
                                                { "<", Html.Term("BalanceAgainst", "Balance Against")}                                                         
                                           })   
        .AddInputFilter(Html.Term("AccountNumberOrName", "Account Number or Name"), "accountNumberOrName")
        .AddInputFilter(Html.Term("Credit_BalanceIni1", "Credit Balance --> Min"), "credit_BalanceIni")
        .AddInputFilter(Html.Term("Credit_BalanceFin1", "--> Max"), "credit_BalanceFin")
        .AddInputFilter(Html.Term("DateRange", "Date Range"), "startDate", null, true, false)
        .AddInputFilter(Html.Term("To", "To"), "endDate", null, true, false)
           
                        
         
        
                
        .ClickEntireRow()
        .Render();
 }


@*	@{
        var grid = Html.PaginatedGrid<ProductCreditBalanceSearchData>("~/CTE/RenegotiationMethods/GetRenegotiationMethods")
		.AutoGenerateColumns()
        .HideClientSpecificColumns_()
        .AddInputFilter(Html.Term("Description", "Description"), "desc")   
		.Render();
    grid.Render(); 
      
      }*@
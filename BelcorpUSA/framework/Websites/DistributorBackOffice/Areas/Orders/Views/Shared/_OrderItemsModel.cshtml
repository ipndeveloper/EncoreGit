@using NetSteps.Data.Entities.Business.HelperObjects.SearchData;
@using NetSteps.Data.Entities
@using NetSteps.Data.Entities.Extensions
@{
    // Use htmlFieldPrefix as a prefix for global vars inside a partial to avoid name collision.
    var htmlFieldPrefix = Html.HtmlFieldPrefix();
    var modelName = htmlFieldPrefix + "orderEntryModel";
    string baseUrl = Href("~/") + ViewContext.RouteData.DataTokens["area"].ToString() + "/" + ViewContext.RouteData.Values["controller"].ToString() + "/";
    int numOrderID = Convert.ToInt32(Model.OrderID);
    var Modelo = Model.OrderCustomers[0].OrderItems; 
}

<div class="UI-mainBg m1 pad5" id="promotionHeader" data-bind="visible: ApplicablePromotions().length > 0">
    <div class="UI-lightBg UI-icon-container FL mr5 brdrAll promoNotification promoNotAvailable">
        @Html.Term("Promotions_OrderQualifiedForPromotionNotification", "This order qualified for the following promotions: ")
    </div>
    <div id="promotionList" data-bind="foreach: ApplicablePromotions">
        <div data-bind="if: PromotionOutOfStock" class="UI-lightBg UI-icon-container FL mr5 brdrAll promoNotification promoNotAvailable">
            <span class="UI-icon FL icon-star"></span><span class="FL" data-bind="text: Description">
            </span><span class="bold promoItemAvailability" title="@Html.Term("FreeItemsOutOfStock", "The free item(s) for this promotion are currently Out Of Stock")">@Html.Term("Unavailable", "Unavailable")</span>
        </div>
        <div data-bind="ifnot: PromotionOutOfStock" class="UI-lightBg UI-icon-container FL mr5 brdrAll promoNotification">
            <span class="UI-icon FL icon-star"></span><span class="FL" data-bind="text: Description">
            </span><a href="javascript:void(0);" class="bold selectGift" data-bind="if: StepID, attr: { 'stepId': StepID }">@Html.Term("Cart_SelectFreeGiftLinkText", "Select Free Gift >")</a>
        </div>
    </div>
    <span class="clr"></span>
</div>
<table id="products" width="100%" class="DataGrid editableGrid responsive" style="display: none"
    data-bind="visible: true">
    <thead>
        <tr class="GridColHead UI-bg UI-header">
            <th class="GridCheckBox">
            </th>
            <th>
                @Html.Term("SKU")
            </th>
            <th>
                @Html.Term("Product")
            </th>
            <th>
                @Html.Term("Retail", "Retail")
            </th>
            <th>
                @Html.Term("PricePerItem", "Price Per Item")
            </th>

            @*CS.05MAY2016.Inicio.Muestra CV*@
                            @{ 
                                string valorSCV = OrderExtensions.GeneralParameterVal(CoreContext.CurrentMarketId, "SCV");
                                if (valorSCV == "S")
                                {
            <th>
                @Html.Term("CommissionablePrice", "Commissionable Price")
            </th>
                                }
                                }
                                @*CS.05MAY2016.Fin.Muestra CV*@


            <th style="width: 100px;">
                @Html.Term("Quantity")
            </th>
            @*CGI(CMR)-29/10/2014-Inicio*@
            <th>
                @Html.Term("QV")
            </th>
            @*CGI(CMR)-29/10/2014-Fin*@
            <th>
                @Html.Term("Price")
            </th>
        </tr>
    </thead>

     @{
         Session.Remove("listDispatChProducts");
         List<getDispatchByOrder> loadDispatchProcessOrder = new List<getDispatchByOrder>();
         loadDispatchProcessOrder = OrderExtensions.GetDispatchByOrder(numOrderID);
            //Session["listDispatChProducts"] = loadDispatchProcessOrder;    
 }

    <tbody id="CartItems" data-bind="foreach: OrderItemModels">
        @Html.Partial("_OrderItemModel")
    </tbody>

       <tbody id="Dispatch">
   @{
       int edicion = Convert.ToInt32(Session["Edit"]);
       int account = Convert.ToInt32(Session["AccountId"]);
       int typeID = Convert.ToInt32(ViewBag.AccountTypeId);
       List<NetSteps.Data.Entities.Business.HelperObjects.SearchData.DispatchProducts> itemsProductsDispatch = new List<NetSteps.Data.Entities.Business.HelperObjects.SearchData.DispatchProducts>();
       var lstProductsVal = (List<DispatchProducts>)Session["listDispatChProducts"];
       var existOrder = OrderExtensions.ExistDispatchItemControl(account, Model.OrderID);
       if (edicion == 1 && !OrderExtensions.ExistDispatchItemControl(Model.OrderCustomers[0].AccountID, Model.OrderID))
       {          
           var numeroOrden = Convert.ToInt32(Model.OrderNumber);
           loadDispatchProcessOrder = OrderExtensions.GetDispatchByOrder(numeroOrden);
           Session["listDispatChProducts"] = OrderExtensions.GetOrderItemByDispatch(Model.OrderID); ;
            
           //var listDispatchProcess = (List<getDispatchByOrder>)Session["listDispatChProducts"];

           var listG = loadDispatchProcessOrder.GroupBy(x => new { x.DispatchID, x.Ddescripcion }).Select(y => new GrupoDispatchByOrder()
           {
               DispatchID = y.Key.DispatchID,
               Ddescripcion = y.Key.Ddescripcion
           }).ToList();
           foreach (var itemG in listG)
           {
               var listaCarga = loadDispatchProcessOrder.Where(donde => donde.DispatchID == itemG.DispatchID);
            <tr class = "UI-lightBg specialPromotionItem">
                <td>
                </td>
                <td>
                </td>
                <td colspan = "5">
                @itemG.Ddescripcion
                </td>
            </tr>
               foreach (var item in listaCarga)
               {
                   foreach (var objE in PreOrderExtension.GetProductDispatch(item.OrderItemID))
                   {
                       <tr>
                            <td>
                            </td>
                            <td data-label="@Html.Term("SKU", "SKU")">
                            @objE.SKU
                            </td>
                            <td data-label="@Html.Term("Product", "Product")">
                            @objE.ProductName
                            </td>
                            <td>
                            </td>
                            <td>
                               @Html.Term("Cart_FreeItemPrice", "FREE")
                            </td>
                            <td colspan = "4">
                            </td>
                        </tr>  
                   }
               }
           }
       }
       else if (OrderExtensions.ExistDispatchItemControl(account, Model.OrderID))
       {
           if (!(lstProductsVal != null))
           {
               itemsProductsDispatch = NetSteps.Data.Entities.Order.getDispatchProducts(account, 0, typeID, Convert.ToInt32(Session["WareHouseId"]), Convert.ToInt32(Session["PreOrder"]), 1, 22, false, true, false);
               Session["listDispatChProducts"] = itemsProductsDispatch;
               lstProductsVal = (List<DispatchProducts>)Session["listDispatChProducts"];
           }           
           int Q0 = 0;
           //List<NetSteps.Data.Entities.Business.HelperObjects.SearchData.DispatchProducts> itemsProductsDispatch = new List<NetSteps.Data.Entities.Business.HelperObjects.SearchData.DispatchProducts>();
           //lstProductsVal = (List<DispatchProducts>)Session["listDispatChProducts"];
           if (!(lstProductsVal != null))
           {
               itemsProductsDispatch = NetSteps.Data.Entities.Order.getDispatchProducts(account, 0, typeID, Convert.ToInt32(Session["WareHouseId"]), Convert.ToInt32(Session["PreOrder"]), 1, 22, false, true, false);
               Session["listDispatChProducts"] = itemsProductsDispatch;
               lstProductsVal = (List<DispatchProducts>)Session["listDispatChProducts"];
           }
           if (lstProductsVal != null)
           {
               foreach (var item in lstProductsVal)
               {
                    <tr class="UI-lightBg specialPromotionItem">
                    <td colspan = 3>
                        <b><span>@item.NameType</span></b>
			        </td>
                    <td>
                    </td>
                    <td>
                    </td>
                    <td>
                    </td>
                    <td>
                    </td>
                </tr>
        <tr class="promoGiftLineItem">
        <td class = "FL pad5 promoItemSku">
                @item.SKU
            </td>
            <td class="promoItemName">@item.Name 
            </td>
			<td>
			</td>
            <td>
                <span class="freeItemPrice">
                    <@Html.Term("Cart_FREE", "FREE")</span>
            </td>
            <td>                
                <!-- @Q0 -->
            </td>
            <td style="text-align: center;">
                @item.Quantity
            </td>
            <td>
                <!-- @Q0 -->
            </td>
        </tr> }
           }

       }
       }
        @{
           @* int edicion = Convert.ToInt32(Session["Edit"]);
            int account = Convert.ToInt32(Session["AccountId"]);
            int typeID = Convert.ToInt32(ViewBag.AccountTypeId);
            if(edicion == 0)
            {  
            int Q0 = 0;
                    List<NetSteps.Data.Entities.Business.HelperObjects.SearchData.DispatchProducts> itemsProductsDispatch = new List<NetSteps.Data.Entities.Business.HelperObjects.SearchData.DispatchProducts>();
                    var lstProductsVal = (List<DispatchProducts>)Session["listDispatChProducts"];
                    if (!(lstProductsVal != null))
                    {
                        itemsProductsDispatch = NetSteps.Data.Entities.Order.getDispatchProducts(account, 0, typeID, Convert.ToInt32(Session["WareHouseId"]), Convert.ToInt32(Session["PreOrder"]), 1, 22, false, true, false);
                        Session["listDispatChProducts"] = itemsProductsDispatch;
                        lstProductsVal = (List<DispatchProducts>)Session["listDispatChProducts"];
                    }
                    if (lstProductsVal != null)
                    {
                        foreach (var item in lstProductsVal)
                        {
                    <tr class="UI-lightBg specialPromotionItem">
                    <td colspan = 3>
                        <b><span>@item.NameType</span></b>
			        </td>
                    <td>
                    </td>
                    <td>
                    </td>
                    <td>
                    </td>
                    <td>
                    </td>
                </tr>
        <tr class="promoGiftLineItem">
        <td class = "FL pad5 promoItemSku">
                @item.SKU
            </td>
            <td class="promoItemName">@item.Name

			<!--	<div class="bundlePackItemList">
					<table cellspacing="0" width="100%">
						<tbody>
							<tr>
								<td>
								</td>
								<td>
									@item.Name
								</td>                                   
							</tr>
						</tbody>
					</table>
				</div> -->
            </td>
			<td>
			</td>
            <td>
                <span class="freeItemPrice">
                    <@Html.Term("Cart_FREE", "FREE")</span>
            </td>
            <td>                
                <!-- @Q0 -->
            </td>
            <td style="text-align: center;">
                @item.Quantity
            </td>
            <td>
                <!-- @Q0 -->
            </td>
        </tr> }
                    }
        }*@
  }

     </tbody>




    <tbody data-bind="foreach: FreeGiftModels">
        @Html.Partial("_FreeGiftModel")
    </tbody>
    <tbody>
        <tr id="productTotalBar" class="GridTotalBar">
            <td>
            </td>
            <td>
            </td>
            <td>
            </td>
            @*<td></td><td></td><td></td>*@ @*CGI(CMR)-07/04/2015-Comentado*@
            <td style="text-align: right;">
               @*CS21AB2016.Inicio-Comentado*@
               @* <a id="btnUpdateCart" href="javascript:void(0);" class="DTL Update OverrideDisable"
                    data-bind="click: btnUpdateCart_click, disable: isUpdating">
                    @Html.Term("Update")
                </a>*@
                @*CS21AB2016.Fin-Comentado*@
            </td>
            @*CGI(CMR)-07/04/2015-Inicio*@
            <td>
            </td>

            @*CS.05MAY2016.Inicio.Muestra CV*@
                            @{ 
                                if (valorSCV == "S")
                                {
            <td>
                <b><span data-bind="text: OriginalCommissionableTotal_Sum, css: { strikethrough: isSubtotalCVModifiedNew }">
                </span><span data-bind="text: AdjustedCommissionableTotal_Sum, visible: isSubtotalCVModifiedNew">
                </span>(@Html.Term("CV.T", "CV.T")) </b>
            </td>
                                }
                                }
                                @*CS.05MAY2016.Fin.Muestra CV*@


            <td style="text-align: center;">
                <b><span data-bind="text: CountItems"></span></b>
            </td>
            @*CGI(CMR)-07/04/2015-Fin*@ @*CGI(CMR)-29/10/2014-Inicio*@
            <td>
                <b><span data-bind="text: TotalQV_Sum"></span>(@Html.Term("QV.T", "QV.T")) </b>
            </td>
            @*CGI(CMR)-29/10/2014-Fin*@ @*CGI(CMR)-07/04/2015-Inicio*@ @* <td>
				<b><span data-bind="text: Subtotal, css: { strikethrough: isSubtotalModified }">
				</span> <span data-bind="text: SubtotalAdjusted, visible: isSubtotalModified">
				</span> (@Html.Term("Subtotal", "Subtotal"))</b>
            </td>*@
            <td>
                <b><span data-bind="text: OriginalTotal_Texto, css: { strikethrough: isSubtotalModifiedNew }">
                </span>
                    <br />
                    <span data-bind="text: AdjustedTotal_Texto, visible: isSubtotalModifiedNew"></span>
                </b>
            </td>
            @*CGI(CMR)-07/04/2015-Fin*@
        </tr>
    </tbody>
</table>

<script type="text/javascript">
    /*CS:21AB2016.Inicio*/
    var valorCantidadActual = 0;

    //onfocus
    function GetValueQuantity(Quantity) {
        valorCantidadActual = Quantity;
        document.getElementById("Quantity").style.backgroundColor = "#FFFFB2";
    }

    //onblur
    function UpdateQuantity(Quantity) {
        if (Quantity == valorCantidadActual) {
            document.getElementById("Quantity").style.backgroundColor = "white";
            return;
        }
        @(modelName).updateQuantities();
    }
    /*CS:21AB2016.Fin*/
</script>
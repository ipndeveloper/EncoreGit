@model SupportTicketsBE
@{
    //var account = Model.ConsultantOrCustomerAccountID.HasValue ? NetSteps.Data.Entities.Account.LoadSlim(Model.ConsultantOrCustomerAccountID.Value).FullName + " - "+NetSteps.Data.Entities.Account.LoadSlim(Model.ConsultantOrCustomerAccountID.Value).AccountID : "";
    string baseUrl = "~/".ResolveUrl() + "Support" + "/";
}
<script type="text/javascript" src="@Url.Content("~/Scripts/json2.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.ns-autogrow.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.form.min.js")"></script>
<script type="text/javascript">

    $(function () {


        var SupportTicketID = '@Model.SupportTicketID';

        if (SupportTicketID > 0) {
            var elem = document.getElementById("tableddl");
            elem.style.display = 'none';
            // alert(SupportTicketID);
            var combo = document.getElementById("cmbParentLevel");
            var selected = combo.options[combo.selectedIndex].text;

            var combo1 = document.getElementById("cmbMotivos");
            var selected1 = combo1.options[combo1.selectedIndex].text;

            var texto = document.getElementById("cat1").innerHTML;
            document.getElementById('cat').innerHTML = selected + '/' + texto + selected1;

        }


        $('#txtDescription').autogrow({ vertical: true, horizontal: false });
        //function resizeHeaders() {
        //  $('#imagesBrowser .emLibraryContent').scroll();
        //}
        //          $('#mediaLibrary').bind('resizeHeaders', resizeHeaders).trigger('resizeHeaders');

        //          $('#folderBrowser li').click(function () {
        //              var $this = $(this),
        //                liText = $this.text(),
        //                icons = ["&#xe02f;", "&#xe030;", "&#xe032;", "&#xe031;"],
        //                dataIcon = icons[$this.index()];
        //              $('.libraryHeader').html('<h3 data-icon="' + dataIcon + '">' + liText + '</h3>')
        //              if (!$this.hasClass('current')) {
        //                  $('#folderBrowser li.current').removeClass('current');
        //                  $this.addClass('current');
        //                  $('#mediaLibrary .emLibraryBrowser').hide();
        //                  $('#mediaLibrary .emLibraryBrowser:eq(' + $this.index() + ')').show();
        //                  $('#mediaLibrary').trigger('resizeHeaders');
        //              }
        //          });

        //          $('#mediaLibrary a.DeleteFile').live({
        //              click: function () {
        //                  if (confirm('@Html.Term("AreYouSureYouWantToDeleteThisFile", "Are you sure you want to delete this file?")')) {
        //                      var t = $(this);
        //                      $.post('@Url.Content("~/Edit/DeleteFile")', { path: t.parent().find('.path').val() }, function (response) {
        //                          if (response.result) {
        //                              t.parent().parent().slideUp(function () {
        //                                  $(this).effect("highlight", { color: 'red' }, 3000).remove();
        //                              });
        //                          }
        //                      });
        //                  }
        //              },
        //              mouseover: function () {
        //                  $(this).closest('.NS-fileInfo').addClass('NS-delete-hover');
        //              },
        //              mouseout: function () {
        //                  $(this).closest('.NS-fileInfo').removeClass('NS-delete-hover');
        //              }
        //          });

        //          $('#txtSearchMedia').attr('autocomplete', 'off').watermark('@Html.JavascriptTerm("SearchFiles", "Search files...")').keyup(function () {
        //              var val = $(this).val();
        //              $('#mediaLibrary .NS-fileInfo').each(function () {
        //                  if (new RegExp(val, 'ig').test($(this).find('.NS-fileName').text())) {
        //                      $(this).show();
        //                  } else {
        //                      $(this).hide();
        //                  }
        //              });
        //          });

        //          $('#mediaLibrary input.emFileURL').live('click', function () {
        //              $(this).select();
        //          });

        //          $('.changeViewIcon').click(function () {
        //              var t = $(this);
        //              if (!t.hasClass('active')) {
        //                  swapView($(this));
        //                  $('#mediaLibrary').trigger('resizeHeaders');
        //              }
        //          });
        //          function swapView($e) {
        //              $e.toggleClass('active', '').siblings().removeClass('active');
        //              $('.emMediaLibrary').toggleClass('listView');
        //              $('.NS-thumbnail').toggleClass('hide');
        //          }

        //          $('.NS-thumbnail').hover(function () {
        //              var $this = $(this),
        //                $preview = $this.find('.imagePreview'),
        //                thumbPos = $this.closest('.NS-fileInfo').offset(),
        //                containerPos = $this.closest('.emLibraryBrowser').offset(),
        //                thumbOffset = {
        //                    x: thumbPos.left - containerPos.left,
        //                    y: thumbPos.top - containerPos.top
        //                };
        //              if ($preview.length == 0) {
        //                  var path = $this.find('img').attr('data-original'),
        //                    imgPreview,
        //                    posY = 'bottom',
        //                    posX = 'right';
        //                  if (thumbOffset.x < 310) {
        //                      posX = 'left';
        //                  }
        //                  if (thumbOffset.y < 310) {
        //                      posY = 'top';
        //                  }
        //                  imgPreview = '<div class="imagePreview" style="' + posY + ':0;' + posX + ':0;' + '"><img src="' + path + '" alt="" /></div>';
        //                  $(imgPreview).hide().appendTo($this).toggle();
        //              }
        //              else {
        //                  $preview.toggle();
        //              }

        //          });


        //          $('img.lazy').lazyload({
        //              container: $('#imagesBrowser.emLibraryBrowser'),
        //              skip_invisible: false,
        //              load: function () { $('#mediaLibrary').trigger('resizeHeaders'); }
        //          });
        //
        //          var uploader = new qq.FileUploader({
        //              element: document.getElementById('uploadNewFile'),
        //              action: '@Href("~/Support/UploadFile")',
        //              messages: {
        //                  typeError: '@Html.Term("InvalidExtension", "{0} has invalid extension. Only {1} are allowed.", "{file}", "{extensions}")',
        //                  sizeError: '@Html.Term("FileTooLarge", "{0} is too large, maximum file size is {1}.", "{file}", "{sizeLimit}")',
        //                  minSizeError: '@Html.Term("FileTooSmall", "{0} is too small, minimum file size is {1}.", "{file}", "{minSizeLimit}")',
        //                  emptyError: '@Html.Term("EmptyFile", "{0} is empty, please select files again without it.", "{file}")',
        //                  onLeave: '@Html.Term("FilesStillUploading", "The files are being uploaded, if you leave now the upload will be canceled.")'
        //              },
        //              template: '<div class="qq-uploader">' +
        //					'<div class="qq-upload-drop-area"><span>@Html.Term("DropFilesHereToUpload", "Drop files here to upload")</span></div>' +
        //					'<div class="qq-upload-button emButton NS-qq-upload NewFileWin" style="width:160px;">@Html.Term("UploadANewFile", "Upload a new file")</div>' +
        //					'<div class="qq-max-file-size">@Html.Term("MaxFileSize", "Max file size"): @NetSteps.Common.Configuration.ConfigurationManager.MaxFileSize</div>' +
        //					'<ul id="qqUploadList" class="qq-upload-list"></ul>' +
        //				 '</div>',
        //              fileTemplate: '<li>' +
        //					'<span class="qq-upload-file"></span>' +
        //					'<span class="qq-upload-spinner"></span>' +
        //					'<span class="qq-upload-size"></span>' +
        //					'<a class="qq-upload-cancel" href="javascript:void(0);">@Html.Term("Cancel03", "Cancel")</a>' +
        //					'<span class="qq-upload-failed-text">@Html.Term("Failed")</span>' +
        //				'</li>',

        //              onComplete: function (id, fileName, response) {

        //                  if (response.success) {
        //                      var item = uploader._getItemByFileId(id), trueRegex = /\s*true\s*/i, allowImageInsert = trueRegex.test('true'), generateSelectButtons = trueRegex.test('true');
        //                      var fileUrl = response.filePath;
        //                      $(item).addClass(response.folder);
        //                      $('#qqUploadList').addClass('hasFiles');
        //                      //$('#qqUploadList li:contains(' + fileName + ')').addClass(response.folder);
        //                      var hideClass = 'hide';
        //                      if ($('.icon-iconView').hasClass('active')) {
        //                          hideClass = '';
        //                      }
        //                      if (response.folder == 'images') {

        //                          var newRow = $('<div class="NS-fileInfo">' +
        //							'<div class="NS-removeLink"><input type="hidden" class="path" value="' + fileUrl + '" /><a class="emIconLink Delete DeleteFile NS-Delete" href="javascript:void(0);"><span>X</span></a></div>' +
        //							'<div class="NS-fileName appended" title="' + fileName + '">' + fileName + '</div>' +
        //							'<div class="NS-thumbnail ' + hideClass + '"><img width="300" src="file:///' + fileUrl + '" data-label="' + fileUrl + '" alt="' + fileName + '" /></div>\n' +
        //							'<div class="NS-dateTime"><span>@Html.Term("MediaLibrary_UploadedTerm", "Uploaded"):</span>' + response.uploaded + '</div>' +
        //							'<div class="NS-FL NS-filePath"><input type="text" value="' + fileUrl + '" class="emFileURL" /></div>' +
        //                          //                            '<div><a class="emButton emSB" href="javascript:void(0);"><span>Cancel</span></a></div>' +
        //						'</div>');
        //                          if (allowImageInsert || generateSelectButtons) {
        //                              var cell = $('<div class="NS-FR NS-selectInsert"></div>');
        //                              if (allowImageInsert) {
        //                                  cell.append('<a class="emButton emSB InsertFile" href="javascript:void(0);"><span>@Html.Term("Insert")</span></a><span class="NS-clr"></span>');
        //                              }
        //                              if (generateSelectButtons) {
        //                                  cell.append('<a class="emButton emSB SelectFile" href="javascript:void(0);"><span>@Html.Term("Select")</span></a><span class="NS-clr"></span>');
        //                              }
        //                              newRow.append(cell);
        //                          }

        //                          $('#imagesBrowser').scrollTop(0).find('.emLibraryContent').prepend(newRow);
        //                          $('#mediaLibrary').trigger('resizeHeaders');
        //                          newRow.hide().slideDown().effect("highlight", {}, 3000);
        //                      } else {

        //                          var newRow = $('<div class="NS-fileInfo">' +
        //							'<div class="NS-removeLink"><input type="hidden" class="path" value="' + fileUrl + '" /><a class="emIconLink Delete DeleteFile NS-Delete" href="javascript:void(0);"><span>X</span></a></div>' +
        //							'<div class="NS-fileName appended" title="' + fileName + '">' + fileName + '</div>' +
        //							'<div class="NS-dateTime"><span>@Html.Term("MediaLibrary_UploadedTerm", "Uploaded"):</span>' + response.uploaded + '</div>' +
        //							'<div class="NS-FL NS-filePath"><input type="text" value="' + fileUrl + '" class="emFileURL" /></div>' +
        //                          //                            '<div><a class="emButton emSB" href="javascript:void(0);"><span>Cancel</span></a></div>' +
        //						'</div>');

        //                          if (generateSelectButtons) {
        //                              newRow.append('<div class="NS-FR NS-selectInsert"><a class="emButton emSB SelectFile" href="javascript:void(0);"><span>@Html.Term("Select")</span></a><span class="NS-clr"></span></div>');
        //                          }

        //                          $('#' + response.folder + 'Browser').scrollTop(0).find('.emLibraryContent').prepend(newRow);
        //                          $('#mediaLibrary').trigger('resizeHeaders');
        //                          //newRow.hide().slideDown().effect("highlight", {}, 3000);
        //                      }
        //                  }
        //              }
        //          });

        //---------------------------------------------------------------------------------------------------------------------------------------------------------
        //----------------------------------------------------------------------------------------------------------------------------------------------------------

        //          $('#accountNumberOrNameInputFilter').jsonSuggest($('#hdnURL').val().toString() + 'SearchAccount', { minCharacters: 3, source: $('#accountNumberOrNameInputFilter'), ajaxResults: true, onSelect: function (item) {
        //              $('#hdnAccountID').val(item.id);
        //          }
        //      });

        //          var t2 = $('#selectItems');
        //          $('#motiveNameInputFilter').jsonSuggest($('#hdnURL').val().toString() + 'SearchMotive', { minCharacters: 3, source: $('#motiveNameInputFilter'), ajaxResults: true, onSelect: function (item) {
        //              $('#hdnMotiveID').val(item.id);
        //              $.post('@Url.Content("~/Support/GetConfigMotive")', { MotiveID: item.id }, function (response) {
        //                  if (response.result) { t2.html(response.select); }
        //              });
        //          }
        //      });


        //          $('#userNumberOrNameInputFilter').jsonSuggest($('#hdnURL').val().toString() + 'SearchUser', { minCharacters: 3, source: $('#userNumberOrNameInputFilter'), ajaxResults: true, onSelect: function (item) {
        //              $('#hdnUserAsigID').val(item.id);
        //          }
        //          });




    });
    function GoURL_Param(url, param) {
        var v = 'valor' + param;
        var getvalor = $('#' + v).val();
        var cadena = "~/" + url + "/" + getvalor;
        window.location = '<%= ResolveUrl("' + cadena + '") %>';
    }
</script>
<script>
    $(document).ready(function () {

        var SupportTicketID = '@Model.SupportTicketID';

        if (SupportTicketID == 0) {
            $("#cmbParentLevel").change();

        } else {
            $("#cmbMotivos").change();
        }


        $("#cmbParentLevel").change(function () {
            cargarHijo(this);
        });

    });


    function cargarHijo(ctr) {
        var value = $(ctr).val();

        if (value == 0) {
            clearNext($(ctr).parent("td"));
            return false;
        }


        $("#tblDetaill tbody tr").remove();
        var odata = JSON.stringify({ input: value });
        clearNext($(ctr).parent("td"));
        var url = '/Support/ListarSupportLevel';
        $.ajax({
            data: odata,
            url: url,
            dataType: "json",
            type: "POST",
            contentType: "application/json",
            success: function (response) {
                var respuesta = response;

                if (respuesta.isLast) {
                    SeleccionadoSupportLevelID = value;
                    crearDetalle(ctr, respuesta.items)
                } else {
                    crearHijo(ctr, value, respuesta.items);
                }
            },
            error: function (error) {
            }
        });
    }

    function crearDetalle(ctr, lista) {
        var FilaActual = $(ctr).parent("td").parent("tr")

        var MensajeDefecto = '@Html.JavascriptTerm("SelectedSupportLevelMotive", "-------Selected Support Level Motive-------")';

        var comboMotivos = $("<select  onchange='SeleccionarMotivo(this)' id='cmbMotivos'>");
        $(comboMotivos).append("<option value='0'>" + MensajeDefecto + "</option>");


        for (var index = 0; index < lista.length; index++) {

            if (lista[index].Item4 > 0)//agrega los items activos cuando ticket == 0, crea un nuevo ticket
                $(comboMotivos).append("<option SupportLevelID='" + lista[index].Item1 + "'SupportMotiveID='" + lista[index].Item3 + "' value ='" + lista[index].Item3 + "'>" + lista[index].Item2 + "</option>");
        }
        var celda = $("<td id='pnlMotivo'></td>")
        celda.append(comboMotivos);
        $(FilaActual).append(celda);


        // $("#description").keyup();
        //$("#txtSolucion").keyup();
    }

    function crearHijo(parent, id, lista) {
        var filaPadre = $(parent).parent("td").parent("tr");
        var celdaPadre = $(parent).parent("td");
        var idPadre = $(parent).val();

        var celda = $("<td id='celda" + idPadre + "-" + id + "'></td>");

        var MensajeDefecto = '@Html.JavascriptTerm("SelectedSupportLevel", "-------Selected Support Level-------")';

        var comboHijo = $("<select onchange='cargarHijo(this)'  id='" + idPadre + "-" + id + "'></select>");
        $(comboHijo).append("<option value='0'>" + MensajeDefecto + "</option>");
        for (var index = 0; index < lista.length; index++) {
            if (lista[index].Item4 > 0)//agrega los items activos cuando ticket == 0, crea un nuevo ticket
                $(comboHijo).append("<option value='" + lista[index].Item1 + "'>" + lista[index].Item2 + "</option>");
        }
        $(celda).append($(comboHijo));
        $(filaPadre).append($(celda));

        $("#description").keyup();
        $("#txtSolucion").keyup();

    }


    function clearNext(ctr) {
        SeleccionadoSupportLevelID = 0;
        SeleccionadoSupportMotiveID = 0;

        var eliminar = [];
        var next = $(ctr);
        while (next != null && next.html() != null) {
            next = $(next).next("td");
            eliminar.push($(next).attr("id"));
        }

        for (var index = 0; index < eliminar.length; index++) {
            $("#" + eliminar[index]).remove();
        }
        $("#ticketTable tr[FilaDinamica='FilaDinamica']").remove();


        $("#pnlMotivo").remove();
    }


    function SeleccionarMotivo(ctr) {
        var idMotive = $(ctr).val();
        SeleccionadoSupportMotiveID = idMotive;
        CargarDetalleTicket(idMotive);
    }
    function CargarDetalleTicket(idMotivo) {

        var url = '@Url.Content("~/Support/GetDetaillSupporMotiveLevel")';
        $.get(url, { SupportMotiveID: idMotivo, SupportTicketID: '@Model.SupportTicketID', ModoEdicion: '@ViewData["Edicion"]' }, function (data) {
            /*
            $("#ticketTable tr[FilaDinamica='FilaDinamica']").remove();
            $("#ticketTable tr[FilaDinamica='FilaDinamicaSolucion']").remove();
            $("#ticketTable tr[tipo='separador']").remove();
                
            var listaFilaDinamica=   $(data).find("tr[FilaDinamica='FilaDinamica']").toArray();
            var listaFilaDinamicaSolucion=   $(data).find("tr[FilaDinamica='FilaDinamicaSolucion']").toArray();
                  
            for(var index=listaFilaDinamica.length;index>0;index--)
            {
            $(listaFilaDinamica[index-1]).insertAfter($("#Descripcion"));

            var textarea=$(listaFilaDinamica[index-1]).find("textarea")
            if(textarea)
            {
            textarea.autogrow({vertical: true, horizontal: false});
            }
            }
            var filaSeprador =$("<tr tipo='separador'> <td colspan='2'><hr></td></tr>");
            if(listaFilaDinamica.length!=0)
            {
            filaSeprador.insertAfter(listaFilaDinamica[listaFilaDinamica.length-1])
                       
            }
           
            var trSolucion= $("#trSolucion");
            for(var index=listaFilaDinamicaSolucion.length;index>0;index--)
            {
            if(listaFilaDinamica.length==0)
            {
            $(listaFilaDinamicaSolucion[index-1]).insertAfter(trSolucion);
                                    
            }else
            {
            $(listaFilaDinamicaSolucion[index-1]).insertAfter(trSolucion);
            }
            var textarea=$(listaFilaDinamicaSolucion[index-1]).find("textarea")
            if(textarea)
            {
            textarea.autogrow({vertical: true, horizontal: false});
            }
                         
            }

            if(listaFilaDinamicaSolucion.length!=0)
            {
            filaSeprador.clone(true).insertAfter(listaFilaDinamicaSolucion[listaFilaDinamicaSolucion.length-1])
            }
            */
            var t2 = $('#selectItems');
            if (data) { t2.html(data); }


        });
    }
    function CargarInformacionCuenta(AccountID) {

        var url = '@Url.Content("~/Support/InformacionCuenta")';
        $.get(url, { AccountID: AccountID }, function (data) {

            $("#informacionConsultora").remove();
            $(data).insertBefore($(".SectionNav"))

        });
    }

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    
       
</script>
<script>
    
 


var listaArchivos=@ViewData["StrlstSupportTicketsFilesBE"]

function agregarArchivo()
        {
            listaArchivos.push
            (
                {
                    SupportTicketFileID:0,
                    SupportTicketID:0,
                    FilePath:"",
                    UserID:0
                }
            );
                var file =$("<input name='"+(listaArchivos.length-1)+"' index='"+(listaArchivos.length-1)+"' onchange='cargarArchivo(this)' id='"+(listaArchivos.length-1)+"' type='file' />")
                $("#GuardarArchivo").append(file);
                file.click();

       
                var checkBox=$("<input SupportTicketFileID='0' value='"+(listaArchivos.length-1)+"' type='checkbox'/>");
                var celdacheckBox =$("<td></td>");
                celdacheckBox.append(checkBox)
                var celdaNombre =$("<td></td>");

                 var className="''";
                 if(((listaArchivos.length-1))%2==0)
                 {
                  className="'Alt'";
                 }
             var UploadFile  = '@Html.JavascriptTerm("UploadFile", "Upload  a file ")';
                var celdacheckSubir =$("<td>   <img style='cursor:pointer' title="+UploadFile+" onclick='SubirArchivo("+(listaArchivos.length-1)+")' src='/Content/Images/Upload.png' width='20' height='20'/> </td>");
                var fila =$("<tr class="+className+" id='"+(listaArchivos.length-1)+"'></tr>");
                fila.append(celdacheckBox);
                fila.append(celdaNombre );
                fila.append(celdacheckSubir);

                 $("#Files tbody").append(fila);
        }

function cargarArchivo(ctr)
        {
            var index =$(ctr).attr("index");
            var celda = $("#Files tbody tr[id='"+index+"'] td:eq(1)")
            celda.text($(ctr).val());
        } 

 
function colorearFilas()
        {
                    var index=0;
                    $("#Files tbody tr:not(:hidden)").each(function()
                    {
                         index++;
                    if(index % 2==0)
                    {
                         $(this).attr("class","Alt")
                    }else
                    {
                        $(this).attr("class","")
                    }

                    });
        }

 
function SubirArchivo(index)
        {
                var file =$("#GuardarArchivo input:file[id='"+index+"']");
                if(!file)
                {
                    file =$("<input name ='"+index+"' index='"+index+"' onchange='cargarArchivo(this)' id='"+index+"' type='file' />")
                    $("#GuardarArchivo").append(file);
                }
                file.click();
        }


function EliminarArchivos()
        {
        var ErrorMessaje = '@Html.JavascriptTerm("EliminarArchivo", "this really want to delete")';

        if(!confirm(ErrorMessaje))
        {
            return false;
        }
         var listaSeleccionados=[];
          var check=null;
                     $("#Files tbody tr").each(function()
                     {
                              var index=$(this).attr("id");
                              var check=$(this).find("input:checkbox");
                              var SupportTicketFileID=(check).attr("SupportTicketFileID");

                                  if(check.is(":checked"))
                                  {
                                        if(SupportTicketFileID!=0)
                                        {
                                             listaEliminar.push(SupportTicketFileID);
                                
                                           $(this).hide();
                                            
                                        }
                                        else
                                        {
                                              $(this).hide();
                                               $("#GuardarArchivo input:file[id='"+index+"']").remove();
                                        }
                                  }
                     });

         colorearFilas();
        }
function marcarTodos(ctr)
         {
          $("#Files tbody tr").each(function()
                     {
                     var $this=this;
                     var check=$($this).find("td:eq(0) input:checkbox");
                     check.attr("checked",ctr.checked);

                     });
        }
    function EliminarFilesOcultos()
    {
            $("#Files tbody tr").each(function(){
                var index=$(this).attr("id");
                    if($(this).is(":hidden"))
                    {
                      $("#GuardarArchivo input:file[id='"+index+"']").remove();
                    }
            });
    }
        $(document).ready(function (){
            $( "#GuardarArchivo" ).submit(function( event ) {
                
            }); 
            
             
        });
        function VerificarValidacionControl(ctr)
        {
            if(ctr.getAttribute("required")==1)
            {
             var value =ctr.value;

                if(value)
                {
                    var NextElement = ctr.nextElementSibling;
                    if(NextElement)
                    {
                       var parent =ctr.parentNode  ;
                       parent.removeChild(NextElement);
                       ctr.style.border="";
                    }
                }
            }
               
        }
       
 function isNumberKey(evt)
       {
          var charCode = (evt.which) ? evt.which : evt.keyCode;
          if (charCode != 46 && charCode > 31 
            && (charCode < 48 || charCode > 57))
             return false;

          return true;
       }

       

</script>
<style>
    .contenedor
    {
        width: 100%;
    }
    .colIzquierda
    {
        float: left;
        width: 85%;
    }
    .colDerecha
    {
        float: right;
        width: 15%;
    }
</style>
<div class="contenedor">
    <div class="colIzquierda">
        <input id="hdnAccountID" value="@ViewData["accountID"]" type="hidden"  />
        <div>
            @{
                List<System.Tuple<int, string, int, int>> lstSupportLevelParent = ViewBag.lstSupportLevelParent as List<System.Tuple<int, string, int, int>>;
       
            }
            <div class="FLabel">
                <label for="">@Html.Term("Level", "Level")</label>
            </div>
            <div class="FInput">
                <table>
                    @if (Model.SupportTicketID == 0)
                    {  
                        <tr>
                            <td>
                            </td>
                            <td>
                                <select id="cmbParentLevel">
                                    <option value="0">@Html.Term("SelectedSupportLevel", "-------Selected Support Level-------")</option>
                                    @for (int index = 0; index < lstSupportLevelParent.Count; index++)
                                    {  
                                        if (lstSupportLevelParent[index].Item4 > 0)
                                        {
                                            <option value="@lstSupportLevelParent[index].Item1">
                                            @lstSupportLevelParent[index].Item2
                                        </option>
                                        }
                                    }
                                </select>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                        </td>
                        <td colspan="10">
                            <table id="tableddl">
                                <tbody>
                                    <tr>
                                        @{
                                            int _SupportTicketID = Convert.ToInt32(ViewData["SupportTicketID"]);
                                            int _SupportMotiveID = Convert.ToInt32(ViewData["SupportMotiveID"]);
                                            int _SupportLevelID = Convert.ToInt32(ViewData["SupportLevelID"]);

                                            DistributorBackOffice.Models.SupportTicketModels.JerarquiaSupportLevelModel _objJerarquiaSupportLevelModel = null;
                                            _objJerarquiaSupportLevelModel = new DistributorBackOffice.Models.SupportTicketModels.JerarquiaSupportLevelModel(_SupportLevelID, _SupportMotiveID);

                                            //JerarquiaSupportLevelModel objJerarquiaSupportLevelModel = Model as nsCore.Areas.Support.Models.Ticket.JerarquiaSupportLevelModel;
                                            int totalHijosJerarquiaDescenedenteSupportLevel = _objJerarquiaSupportLevelModel.lstHijosJerarquiaDescenedenteSupportLevel.Count;

                                            List<SupportLevelSearchData> lstHijosJerarquiaDescenedenteSupportLevel = _objJerarquiaSupportLevelModel.lstHijosJerarquiaDescenedenteSupportLevel;

                                            List<SupportLevelSearchData> lstHijosJerarquiaAscendenteSupportLevel = _objJerarquiaSupportLevelModel.lstHijosJerarquiaAscendenteSupportLevel;
                                            List<SupportLevelSearchData> ListaPrimerNivel = lstHijosJerarquiaAscendenteSupportLevel.FindAll((obj) => obj.ParentSupportLevelID == 0);

                                            Boolean ModoEdicion = Convert.ToInt32(ViewData["Edicion"]) == 1;

                                            Func<bool, string> FncHabilitarDeshabilitar = (estado) =>
                                            {
                                                //return !estado ? "disabled=disabled" : "";
                                                return !estado ? "readonly=readonly" : "";
                                            };
                                            Func<int, string> crearIdCelda = (id) =>
                                            {
                                                string ids = string.Format("celda{0}", id);
                                                return ids;
                                            };


                                        }
                                        @if (totalHijosJerarquiaDescenedenteSupportLevel > 0)
                                        {
 
  
                                            <td>
                                                <select disabled="disabled"  @FncHabilitarDeshabilitar(ModoEdicion) id="cmbParentLevel">
                                                    <option value="0">@Html.Term("SelectedSupportLevel", "-------Selected Support Level-------")</option>
                                                    @for (int indice = 0; indice < ListaPrimerNivel.Count; indice++)
                                                    {

                                                        if (ListaPrimerNivel[indice].SupportLevelID == lstHijosJerarquiaDescenedenteSupportLevel[lstHijosJerarquiaDescenedenteSupportLevel.Count - 1].SupportLevelID)
                                                        {  
                                                        <option   selected="selected"  value ="@ListaPrimerNivel[indice].SupportLevelID">@ListaPrimerNivel[indice].Name</option>
                                                        }
                                                        else
                                                        { 
                                                        <option id="Option1" value ="@ListaPrimerNivel[indice].SupportLevelID">@ListaPrimerNivel[indice].Name</option>
                                                        }


                                                    }
                                                    @{lstHijosJerarquiaDescenedenteSupportLevel = lstHijosJerarquiaDescenedenteSupportLevel.OrderBy((ob) => ob.SupportLevelID).ToList().FindAll((obj) => obj.ParentSupportLevelID != 0);}
                                                </select>
                                            </td>
                                                      Session["ch"] = "";
                                                      for (int indice = 0; indice < lstHijosJerarquiaDescenedenteSupportLevel.Count; indice++)
                                                      {
                                                          List<SupportLevelSearchData> ListaHijos = lstHijosJerarquiaAscendenteSupportLevel.FindAll((obj) => obj.ParentSupportLevelID == lstHijosJerarquiaDescenedenteSupportLevel[indice].ParentSupportLevelID);
                     
                                            <td id="@crearIdCelda(lstHijosJerarquiaDescenedenteSupportLevel[indice].ParentSupportLevelID)-@lstHijosJerarquiaDescenedenteSupportLevel[indice].ParentSupportLevelID">
                                                <select disabled="disabled"   @FncHabilitarDeshabilitar(ModoEdicion) onchange="cargarHijo(this)"  id="@lstHijosJerarquiaDescenedenteSupportLevel[indice].ParentSupportLevelID -@lstHijosJerarquiaDescenedenteSupportLevel[indice].ParentSupportLevelID">
                                                    <option value="0">@Html.Term("SelectedSupportLevel", "-------Selected Support Level-------")</option>
                                                    @for (int indiceHijos = 0; indiceHijos < ListaHijos.Count; indiceHijos++)
                                                    {
                                                        if (lstHijosJerarquiaDescenedenteSupportLevel[indice].SupportLevelID == ListaHijos[indiceHijos].SupportLevelID)
                                                        { 
                                                        <option   selected="selected"  value="@ListaHijos[indiceHijos].SupportLevelID">@ListaHijos[indiceHijos].Name</option>
                                                            Session["ch"] = Session["ch"] + @ListaHijos[indiceHijos].Name + "/";
                                                        }
                                                        else
                                                        { 
                                                        <option value="@ListaHijos[indiceHijos].SupportLevelID">@ListaHijos[indiceHijos].Name</option>
                                                        }

                                                    }
                                                </select>
                                            </td>
                    
                                                      }
                                                      List<System.Tuple<int, string, int>> LstSupportLevelMotive = SupportTicket.GetLevelSupportLevelMotive(lstHijosJerarquiaDescenedenteSupportLevel[lstHijosJerarquiaDescenedenteSupportLevel.Count - 1].SupportLevelID) ?? new List<System.Tuple<int, string, int>>();
                                                      if (LstSupportLevelMotive.Count > 0)
                                                      {
            
                                            <td id="pnlMotivo">
                                                <span>dasfdsaf</span>
                                                <select disabled="disabled" @FncHabilitarDeshabilitar(ModoEdicion)   onchange="SeleccionarMotivo(this)"  id="cmbMotivos">
                                                    <option value="0">@Html.Term("SelectedSupportLevelMotive", "-------Selected Support Level Motive-------")</option>
                                                    @for (int indice = 0; indice < LstSupportLevelMotive.Count; indice++)
                                                    {

                                                        if (_SupportMotiveID == LstSupportLevelMotive[indice].Item3)
                                                        { 
                                                        <option selected ="selected" SupportLevelID="@lstHijosJerarquiaDescenedenteSupportLevel[0].SupportLevelID" SupportMotiveID="@LstSupportLevelMotive[indice].Item3" value ="@LstSupportLevelMotive[indice].Item3">
                                                            @LstSupportLevelMotive[indice].Item2
                                                        </option>
                                                        }
                                                        else
                                                        {
                                                        <option SupportLevelID="@lstHijosJerarquiaDescenedenteSupportLevel[0].SupportLevelID" SupportMotiveID="@LstSupportLevelMotive[indice].Item3" value ="@LstSupportLevelMotive[indice].Item3">
                                                            @LstSupportLevelMotive[indice].Item2
                                                        </option>
                                                        }
                                                    }
                                                </select>
                                            </td>
                                                      }
                                        }
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>
            <div style="float: right; width: 250px;" id="detaills">
                <table id="tblDetaill">
                    <tbody>
                    </tbody>
                </table>
            </div>
            <br />
        </div>
        <div>
            @*<input type="text" id="lblmotive"  disabled="disabled"  class="required fullWidthm motive" name="@Html.Term("MotiveRequired", "Motive is required")"  />*@
        </div>
        @if (Model.SupportTicketID > 0)
        { 
           
            
            <div style="border-width: 1px; border-style: solid; border-color: #BDBDBD; height: 28px;
                width: 522px; padding: 2px">
                <label id="cat" style="font-size: 12px; color: Black;">
                </label>
                <label id="cat1" style="visibility: hidden">
                    @Session["ch"].ToString()
                </label>
            </div>
            <div class="FRow">
                <div class="FLabel">
                    <label for="">@Html.Term("StatusSupportTicket", "Status")</label>
                </div>
                <div class="FInput">
                    <input  readonly="readonly" value="@Model.NameStatuses" type="text"  />
                </div>
                <br />
            </div>
       
            <div class="FRow">
                <div class="FLabel">
                    <label for="">@Html.Term("AsignedSupportTicket", "Asigned to")</label>
                </div>
                <div class="FInput">
                    <input   readonly="readonly"  value="@Model.UserNameAsigned" type="text"  />
                </div>
                <br />
            </div>
       
        }
        <div class="FRow">
            <div class="FLabel">
                <label for="">@Html.Term("Title", "Title")</label>
            </div>
            <div class="FInput">
                <input @FncHabilitarDeshabilitar(ModoEdicion) id="txtTitle" value="@Model.Title" type="text" class="required fullWidth ticketTitle" name="@Html.Term("TitleRequired", "Title is required")"
                    value="" />
            </div>
            <br />
        </div>
        <div class="FRow">
            <div class="FLabel">
                <label for="">@Html.Term("Description", "Description")</label>
            </div>
            <div class="FInput">
                <textarea @FncHabilitarDeshabilitar(ModoEdicion) id="txtDescription" style="height:150px; width:510px" class="required fullWidth ticketDescription" name="@Html.Term("DescriptionRequired", "Description is required")">@Model.Description</textarea>
            </div>
            <br />
        </div>
        <div id="selectItems">
        </div>
        @* <h5>
   @Html.Term("StatusAttention", "Status Attention")</h5>
   <div class="FormTable">
    </div>
     <div class="FormTable">
         <div class="FRow">
        <div class="FLabel">
            <label for="">@Html.Term("Options", "Options")</label>
        </div>
        <div class="FInput">   
         <input type="checkbox" class="toggleEmail" id="chkIsInternal" />@Html.Term("IsInternal", "Is Internal")
        </div>
        <br />
    </div>
     </div>*@
        <div>
            <p class="FL">
            </p>
            <p class="FL">
            </p>
            <p class="FL">
            </p>
            <p class="FL">
            </p>
            <p class="FL">
            </p>
            <p class="FR">
                @{Func<int, string> ocultar = (n) =>
                  {
                      string estilo = "";
                      if (n > 0)
                      {
                          estilo = "style=display:none";
                      }
                      return estilo;
                  };}
                <a @ocultar(Model.SupportTicketID) onclick="agregarArchivo()" id="btnApplySchedule" href="javascript:void(0);" >
                    Add File</a> | <a @ocultar(Model.SupportTicketID)  onclick="EliminarArchivos()" id="btnRemoveProperty" href="javascript:void(0);" >
                        Remove File</a>
            </p>
        </div>
        <span class="ClearAll"></span>
        <table id="Files" width="100%" class="DataGrid">
            <thead>
                <tr class="GridColHead">
                    <th class="GridCheckBox">
                        <input id="selectAllPropertyItems" onchange="marcarTodos(this)" type="checkbox" />
                    </th>
                    <th>
                        File Name
                    </th>
                    <th>
                        @Html.Term("DownloadFileHeader", "Download")/@Html.Term("UploadFileHeader", "Upload")
                    </th>
                </tr>
            </thead>
            <tbody>
                @{ 
                    Boolean __ModoEdicion = Convert.ToInt32(ViewData["Edicion"]) == 1;
                    Func<bool, string> __FncHabilitarDeshabilitar = (estado) =>
                    {
                        return !estado ? "disabled='disabled'" : "";
                    };
                    List<SupportTicketsFilesBE> lstSupportTicketsFilesBE = ViewData["lstSupportTicketsFilesBE"] as List<SupportTicketsFilesBE> ?? new List<SupportTicketsFilesBE>();
                }
                @for (int IndiceFilas = 0; IndiceFilas < (lstSupportTicketsFilesBE).Count; IndiceFilas++)
                {

                    if (IndiceFilas % 2 == 0)
                    {
                    <tr class="Alt">
                        <td>
                            <input @__FncHabilitarDeshabilitar(__ModoEdicion)  SupportTicketFileID='@lstSupportTicketsFilesBE[IndiceFilas].SupportTicketFileID' value ="@IndiceFilas" type="checkbox"/ >
                        </td>
                        <td>
                            @lstSupportTicketsFilesBE[IndiceFilas].FilePath
                        </td>
                        <td>
                            <a title="@Html.Term("DownloadFile", "Download")" href="/Support/Download/@lstSupportTicketsFilesBE[IndiceFilas].SupportTicketFileID">
                                <img src="/Content/Images/DownloadFile.png" width="20" height="20" /></a>
                        </td>
                    </tr>
                    }
                    else
                    {
                    <tr>
                        <td>
                            <input @__FncHabilitarDeshabilitar(__ModoEdicion)  SupportTicketFileID='@lstSupportTicketsFilesBE[IndiceFilas].SupportTicketFileID' value ="@IndiceFilas" type="checkbox"/ >
                        </td>
                        <td>
                            @lstSupportTicketsFilesBE[IndiceFilas].FilePath
                        </td>
                        <td>
                            <a title="@Html.Term("DownloadFile", "Download")" href="/Support/Download/@lstSupportTicketsFilesBE[IndiceFilas].SupportTicketFileID">
                                <img src="/Content/Images/DownloadFile.png" width="20" height="20" /></a>
                        </td>
                    </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    @if (Model.SupportTicketID > 0)
    {  <div class="colDerecha">
        @Html.Partial("_NoteFull", new SupportTicket
   {
       SupportTicketID = Model.SupportTicketID,
       SupportTicketNumber = Model.SupportTicketNumber

   });
    </div> 
 
    }
</div>
<form style="display: none" id="GuardarArchivo" target="frmGuardarArchivo" action="/Support/GuardarArchivos/"
method="post" enctype="multipart/form-data">
</form>
<iframe name="frmGuardarArchivo" style="display: none"></iframe>

<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NetSteps.Common</name>
  </assembly>
  <members>
    <member name="T:NetSteps.Common.Ach.BasicRecord">
      <summary>
            This is used by FileHeaderRecord, FileControlRecord, BatchHeaderRecord, BatchControlRecord, and EntryDetailRecord
            </summary>
    </member>
    <member name="M:NetSteps.Common.Ach.BasicRecord.PadItemLength(System.String,System.Int32,System.Boolean,System.Char)">
      <summary>
            This function is used to get the right amount of blank spaces in each item block for the nacha file.
            Nacha files are fix length so each item has a certain length.
            </summary>
      <param name="original">original string to pad</param>
      <param name="fixedLength">length to be</param>
      <returns>returns the new string all padded and ready to go.</returns>
    </member>
    <member name="P:NetSteps.Common.Ach.BasicRecord.RecordTypeCode">
      <summary>
            This code identifying the BatchHeader record is 
            FileHeader = '1', BatchHeader = '5', EntryRecord = '6', BatchControl = '8', FileControl = '9'
            Length: 1
            </summary>
    </member>
    <member name="T:NetSteps.Common.Ach.BatchControlRecord">
      <summary>
            Basic structure of NACHA FILE by layers...tabs mean the following are part of that layer.
            
            File Header Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
            File Control Record
            
            There can be multiple batches within the file header record.
            
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.BatchControlRecord.ServiceClassCode">
      <summary>
            Identifies the type of entries in the batch:
            200 - ACH Entries mixed Debits and Credits
            220 - ACH Credits Only
            225 - ACH Debits Only
            Numeric
            Length: 3
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.BatchControlRecord.OriginatingFinancialInstitutionID">
      <summary>
            Enter bank routing number of originator
            TTTTAAAA
            Length: 8
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchControlRecord.EntryAddendaCount">
      <summary>
            Total number of entry detail and addenda records processed
            within the batch. This field requires six positions;
            right justify and using leading zeros.
            Numeric
            Length: 6
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchControlRecord.EntryHash">
      <summary>
            Total of all positions 4-11 on each 6 record(detail).
            Only use the final 10 positions in the entry.
            Numeric
            Length: 10
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchControlRecord.TotalDebitEntryDollarAmount">
      <summary>
            Dollar totals of debit entries within the batch. If none, zero fill the field
            $$$$$$$$$$cc
            Length: 12
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchControlRecord.TotalCreditEntryDollarAmount">
      <summary>
            Dollar totals of credit entries with the batch. if none, zero fill the field.
            $$$$$$$$$$cc
            Length: 12
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchControlRecord.CompanyIdentification">
      <summary>
            This should match the company identification number used in the corresponding 
            batch header record, field 5.
            NNNNNNNNNN
            Length: 10
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchControlRecord.MessageAuthenticationCode">
      <summary>
            This is an optional field. Please leave this field blank.
            Blank
            Length: 19
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchControlRecord.Reserved">
      <summary>
            This field is reserved for Federal Reserve use. Please leave this field blank.
            Blank
            Length: 6
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchControlRecord.BatchNumber">
      <summary>
            Number of the batch associated with this control record.
            Numeric
            Length: 7
            </summary>
    </member>
    <member name="T:NetSteps.Common.Ach.BatchHeaderRecord">
      <summary>
            Basic structure of NACHA FILE by layers...tabs mean the following are part of that layer.
            
            File Header Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
            File Control Record
            
            There can be multiple batches within the file header record.
            
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.BatchHeaderRecord.ServiceClassCode">
      <summary>
            Identifies the type of entries in the batch
            200 - ACH Entries mixed Debits and Credits
            220 - ACH Credits Only
            225 - ACH Debits Only
            Numeric
            Length: 3
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.BatchHeaderRecord.StandardEntryClass">
      <summary>
            Identifies the entries in the batch. Common standard entry class codes are 
            PPD(Prearranged Payments, and Deposit entries) for consumer items, 
            CCD(Cash Concentration and Disbursement entries) for corporate transactions,
            TEL(Telephone initiated entries), and
            WEB(Authorization received via the Internet)
            Alpha
            Length: 3
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.BatchHeaderRecord.EffectiveEntryDate">
      <summary>
            Date transactions are to be posted to the participants' account.
            YYMMDD
            Length: 6
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.BatchHeaderRecord.OriginatorStatusCode">
      <summary>
            Originator status code.
            '1'
            Length: 1
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.BatchHeaderRecord.OriginatingFinancialInstitution">
      <summary>
            Originators routing number.
            12345678
            Length: 8
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchHeaderRecord.CompanyName">
      <summary>
            Your company name, up to 16 characters. This name may appear
            on the receivers' statements prepared by the Receiving Financial Institution
            Alpha-Numeric
            Length: 16
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchHeaderRecord.DiscretionaryData">
      <summary>
            Optional
            Alpha-Numeric
            Length: 20
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchHeaderRecord.CompanyIdentification">
      <summary>
            Your 10-digit company number. Identical to the number in field 4 of the 
            File Header Record, unless multiple companies/divisions are provided in
            one transmission
            NNNNNNNNNN
            Length: 10
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchHeaderRecord.CompanyEntryDescription">
      <summary>
            Your description of the transaction. This may be printed on the receivers' bank
            statement by the receiving Financial Institution(i.e. payroll)
            Alpha-Numeric
            Length: 10
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchHeaderRecord.CompanyDescriptiveDate">
      <summary>
            The date you choose to identify the transactions. This date may be printed
            on the participants' bank statement by the Receiving Financial Institution.
            Alpha-Numeric
            Length: 6
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchHeaderRecord.SettlementDate">
      <summary>
            Leave blank, taken care of by ACH
            Length: 3
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.BatchHeaderRecord.BatchNumber">
      <summary>
            Number batches sequentially.
            Numeric
            Length: 7
            </summary>
    </member>
    <member name="T:NetSteps.Common.Ach.EntryDetailRecord">
      <summary>
            This EntryDetailRecord is for WEB entries...
            
            Basic structure of NACHA FILE by layers...tabs mean the following are part of that layer.
            
            File Header Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
            File Control Record
            
            There can be multiple batches within the file header record.
            
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.EntryDetailRecord.TransactionCode">
      <summary>
            Two digit code identifying the account type at the
            receiving financial insitution:
            22 - Deposit destined for a Checking Account 
            23 - Prenotification for a checking credit 
            24 - Zero dollar with remittance into Checking Account 
            27 - Debit destined for a Checking Account 
            28 - Prenotification for a checking debit 
            29 - Zero dollar with remittance into Checking Account 
            32 - Deposit destined for a Savings Account 
            33 - Prenotification for a savings credit 
            34 - Zero dollar with remittance into Savings Account 
            37 - Debit destined for a Savings Account 
            38 - Prenotification for a Savings debit 
            39 - Zero dollar with remittance into Savings Account
            Numeric
            Length: 2
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.EntryDetailRecord.ReceivingDFIIdentification">
      <summary>
            Transit routing number of the receiver's financial institution.
            TTTTAAAA
            Length: 8
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.EntryDetailRecord.CheckDigit">
      <summary>
            The ninth digits of the receiving financial institutions transit routing number.
            Numeric
            Length: 1
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.EntryDetailRecord.AddendaRecordIndicator">
      <summary>
            If there is no addenda accompanying this transaction enter '0'.
            If addenda are accompanying the transaction enter '1'.
            Numeric
            Length: 1
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.EntryDetailRecord.DFIAccountNumber">
      <summary>
            Receiver's account number at their financial institution. Left justify.
            Alpha-Numeric
            Length: 17
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.EntryDetailRecord.Amount">
      <summary>
            Transaction amount in dollars with two decimal places. Left zero fill
            if necessary. Enter 10 zeros for prenotes.
            $$$$$$$$cc
            Length: 10
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.EntryDetailRecord.IndividualIdentificationNumber">
      <summary>
            Receiver's identification number. This number may be printed on the receiver's
            bank statement by the receiving financial insititution.
            Alpha-Numeric
            Length: 15
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.EntryDetailRecord.IndividualName">
      <summary>
            Name of receiver
            Alpha-Numeric
            Length: 22
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.EntryDetailRecord.PaymentTypeCode">
      <summary>
            Input 'R' for recuring payments, and 'S' for single-Entry payment
            Alpha-Numeric
            Length: 2
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.EntryDetailRecord.TraceNumber">
      <summary>
            The bank will assign a trace number. This number will be unique
            to the transaction and will help identify the transaction in case
            of an inquiry.
            Numeric
            Length: 15
            </summary>
    </member>
    <member name="T:NetSteps.Common.Ach.FileControlRecord">
      <summary>
            Basic structure of NACHA FILE by layers...tabs mean the following are part of that layer.
            
            File Header Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
            File Control Record
            
            There can be multiple batches within the file header record.
            
            </summary>
    </member>
    <member name="M:NetSteps.Common.Ach.FileControlRecord.ToString">
      <summary>
            Generates the block of file for FileControlRecord.
            </summary>
      <returns>FileControlRecord block of NACHA File</returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Ach.FileControlRecord.BatchCount">
      <summary>
            The total number of batch header records in the file.
            Numeric
            Length: 6
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileControlRecord.BlockCount">
      <summary>
            The total number of physical blocks on the file, including
            the File Header and File Control records
            Numeric
            Length: 6
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileControlRecord.EntryAddendaCount">
      <summary>
            Total number of entry detail and addenda records on the file.
            Numeric
            Length: 8
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileControlRecord.EntryHash">
      <summary>
            Total of all positions 4-11 on each 6 record(Detail. Only use the
            final 10 positions in the entry.
            Numeric
            Length: 10
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileControlRecord.TotalDebitEntryDollarAmountInFile">
      <summary>
            Dollar totals of debit entries within the file. If none, zero fill
            the field.
            $$$$$$$$$$cc
            Length: 12
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileControlRecord.TotalCreditEntryDollarAmountInFile">
      <summary>
            Dollar totals of credit entries within the file. If none, zero fill
            the field.
            $$$$$$$$$$cc
            Length: 12
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileControlRecord.Reserved">
      <summary>
            Leave this field blank
            Blank
            Length: 39
            </summary>
    </member>
    <member name="T:NetSteps.Common.Ach.FileHeaderRecord">
      <summary>
            Author: Lenni Uitto
            
            Basic structure of NACHA FILE by layers...Pay attention to tabs in this comment...they show the structure of the file.
            
            File Header Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
                Batch Header Record
                    First Entry Detail Record
                             ...
                    Last Entry Detail Record
                Batch Control Record
            File Control Record
            
            There can be multiple batches within the file header record.
            
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.FileHeaderRecord.FileCreationDate">
      <summary>
            The date you created the input file.
            YYMMDD
            Length: 6
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.FileHeaderRecord.FileCreationTime">
      <summary>
            Time of day you created the input file. This field is used
            to distinguish between input files if you submit more than
            one per day.
            HHMM
            Length: 4
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.FileHeaderRecord.FileIDModifier">
      <summary>
            Code to distinguish among multiple input files. Label the first
            (or only) file "A", and continue in sequence (A-Z). If more than
            one file is delivered, they must have different modifiers.
            A-Z 0-9
            Length: 1
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.FileHeaderRecord.RecordSize">
      <summary>
            Number of bytes per record.
            '094'
            Length: 3
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.FileHeaderRecord.BlockingFactor">
      <summary>
            Block at 10
            '10'
            Length: 2
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.FileHeaderRecord.FormatCode">
      <summary>
            Currently there is only one code.
            '1'
            Length: 1
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.FileHeaderRecord.BatchHeader">
      <summary>
            list of batch headers
            </summary>
    </member>
    <member name="F:NetSteps.Common.Ach.FileHeaderRecord.FileControl">
      <summary>
            each file header has a filecontrol
            </summary>
    </member>
    <member name="M:NetSteps.Common.Ach.FileHeaderRecord.ToString">
      <summary>
            Generates NACHA FILE
            </summary>
      <returns>returns string that is the nacha file</returns>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Ach.FileHeaderRecord.PriorityCode">
      <summary>
            The lower the number, the higher processing priority.
            '01'
            Length: 2
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileHeaderRecord.ImmediateDestination">
      <summary>
            Destination Routing number
            it should be proceded by a blank
            b123456789
            Length: 10
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileHeaderRecord.ImmediateOrigin">
      <summary>
            10-digit company number. The use of an IRS Federal TAx
            Identification Number as a company identification is
            recommended.
            1234567890
            Length: 10
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileHeaderRecord.ImmediateDestinationName">
      <summary>
            Name of destination bank
            Alpha-Numeric
            Length: 23
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileHeaderRecord.ImmediateOriginName">
      <summary>
            Your companies name, up to 23 characters
            Alpha-Numeric
            Length: 23
            </summary>
    </member>
    <member name="P:NetSteps.Common.Ach.FileHeaderRecord.ReferenceCode">
      <summary>
            Optional Field you may use to describe input file for internal 
            accounting purposes.
            Alpha-Numeric
            Length: 8
            </summary>
    </member>
    <member name="T:NetSteps.Common.Attributes.TermNameAttribute">
      <summary>
            Author: John Egbert
            Description: Attribute to to translate Property names in UI.
            Created: 10/7/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Attributes.LoadByPrimaryKeyAttribute">
      <summary>
            Author: John Egbert
            Description: Attribute to identify the property on a class that is the primary key.
            Created: 8/18/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.AsyncReloadObject`1">
      <summary>
            Asynchronously load type <typeparamref name="T" /> in the background, blocking only on initial load.
            </summary>
      <typeparam name="T" />
    </member>
    <member name="M:NetSteps.Common.Base.AsyncReloadObject`1.#ctor(System.Func{`0},System.TimeSpan)">
      <summary />
      <param name="lazyLoaderFunction">This function should be thread safe</param>
      <param name="reloadInterval">Defaults to 1 day when zero</param>
    </member>
    <member name="M:NetSteps.Common.Base.AsyncReloadObject`1.AsyncReload">
      <summary>
            Trigger an async reload.  Resets the timer controlling background reloads. Expensive now (in a background thread), cheap later (not lazy). See <seealso cref="M:NetSteps.Common.Base.AsyncReloadObject`1.InvalidateData" /></summary>
    </member>
    <member name="M:NetSteps.Common.Base.AsyncReloadObject`1.InvalidateData">
      <summary>
            Invalidate the data and stop the timer.  The next call to <see cref="P:NetSteps.Common.Base.AsyncReloadObject`1.Value" /> will restart the timer and block until the data has loaded. Cheap now, expensive later (lazy). See <seealso cref="M:NetSteps.Common.Base.AsyncReloadObject`1.AsyncReload" /></summary>
    </member>
    <member name="T:NetSteps.Common.Base.BulkObservableCollection`1">
      <summary>
            Author: John Egbert
            Description: ObservableCollection class with AddRange and RemoveRange to reduce ChangeNotifications 
            http://blogs.windowsclient.net/tamirk/archive/2008/05/13/how-to-addrange-removerange-in-silverlight-observablecollection-lt-t-gt.aspx
            Created: 02-23-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.CachedList`1">
      <summary>
            Author: John Egbert
            Description: This is basically a class wrapping a List{} with Thread safe 'locks' to allow this 
                         'instance' class intended to be used as a static variable to keep the data cached. 
                         It also contains a few additional methods to wrap standard List
                         methods and an Expire cache function. - JHE
            Created: 12/14/2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IExpireCache">
      <summary>
            Allows a cache to be expired.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Interfaces.IExpireCache.ExpireCache">
      <summary>
            Expires the cache.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.BasicResponse">
      <summary>
            Author: John Egbert
            Description: A helper class to return a Success response along with a message for and error
            to offer an alternative to method calls that return a bool and take out/ref string parameters. 
            Created: 04-14-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.CachedListBusiness`2">
      <summary>
            Author: John Egbert
            Description: This is a CachedList{T} with additional functionality to work with 'business' lists.
            Added support to integrate with SqlDependency to expire cache when notified of a change from the DB. - JHE
            Ex: GetById method
            Created: 05-03-2010
            </summary>
    </member>
    <member name="P:NetSteps.Common.Base.CachedListBusiness`2.GetIdColumnFunc">
      <summary>
            Override this so the GetById method will work:
            Example:
                protected override Func{AccountStatus, Int32} GetIdColumn
                {
                    get
                    {
                        return i =&gt; i.AccountStatusID;
                    }
                }
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.BasicResponseItem`1">
      <summary>
            Author: John Egbert
            Description: A helper class to return a Success response along with a message for and error
            to offer an alternative to method calls that return a bool and take out/ref string parameters. 
            Created: 08-05-2010
            </summary>
    </member>
    <member name="F:NetSteps.Common.Base.IndexedList`1._list">
      <summary>
            Cannot Remove any items with this data type.
            </summary>
    </member>
    <member name="F:NetSteps.Common.Base.IndexedList`1._indexedListColumns">
      <summary>
            new Dictionary{string, Func{object}}() { new KeyValuePair{string, Func{V, object}}() { "SKU", (x) =&gt; x.SKU }
            </summary>
    </member>
    <member name="F:NetSteps.Common.Base.IndexedList`1._indexes">
      <summary>
            ConcurrentDictionary{"get_SKU", SortedList{"SKU#", BlockingCollection{Product}}}
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.AsyncReloadDictionary`2.ExpireCache">
      <summary>
            Clears all loaded data.  Cheap now, expensive later (lazy). See <seealso cref="M:NetSteps.Common.Base.AsyncReloadDictionary`2.AsyncReload" /></summary>
    </member>
    <member name="M:NetSteps.Common.Base.AsyncReloadDictionary`2.AsyncReload">
      <summary>
            Reloads all stored data. Expensive now, cheap later (not lazy). See <seealso cref="M:NetSteps.Common.Base.AsyncReloadDictionary`2.ExpireCache" /></summary>
    </member>
    <member name="T:NetSteps.Common.Base.OrderedList`1">
      <summary>
            Author: John Egbert
            Description: Helper class when dealing with an ordered list to enable iterating the list (previous, next) with a little more legible code.
            Created: 10-25-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.SqlDependencyChangeAction">
      <summary>
            Author: John Egbert
            Description: Class to take a SqlDependency and custom action to perform when SqlDependency notifies of a change - JHE
            Created: 10-20-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.SqlUpdatableItem`1">
      <summary>
            Author: John Egbert
            Description: Class returned from Data Layer with Entities and SqlDependency to notify of changes to that Entity - JHE
            Created: 10-05-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.DateRangeSearchParameters">
      <summary>
            Author: John Egbert
            Description: Class to allow date range filtering on a PaginatedList.
            Created: 08-18-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.PaginatedListParameters">
      <summary>
            Author: John Egbert
            Description: Parameter class to pass into methods for paged and ordered results.
            Created: 05-07-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.PaginatedListParameters.Equals(NetSteps.Common.Base.PaginatedListParameters)">
      <summary>
            Determines if the instance is equal to another.
            </summary>
      <param name="other">the other instance</param>
      <returns>true if equal; otherwise false.</returns>
    </member>
    <member name="M:NetSteps.Common.Base.PaginatedListParameters.Equals(System.Object)">
      <summary>
            Determines if the instance is equal to another object.
            </summary>
      <param name="obj">the other object</param>
      <returns>true if equal; otherwise false</returns>
    </member>
    <member name="M:NetSteps.Common.Base.PaginatedListParameters.GetHashCode">
      <summary>
            Gets the instance's hashcode.
            </summary>
      <returns>A hash code for the current instance.</returns>
    </member>
    <member name="P:NetSteps.Common.Base.PaginatedListParameters.OrderByString">
      <summary>
            An "OrderBy" string that includes sort direction to allow the use of DynamicQueryable.OrderBy().
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.DateRangeSearchParameters.Equals(NetSteps.Common.Base.DateRangeSearchParameters)">
      <summary>
            Determines if the instance is equal to another.
            </summary>
      <param name="other">the other instance</param>
      <returns>true if equal; otherwise false.</returns>
    </member>
    <member name="M:NetSteps.Common.Base.DateRangeSearchParameters.Equals(System.Object)">
      <summary>
            Determines if the instance is equal to another object.
            </summary>
      <param name="obj">the other object</param>
      <returns>true if equal; otherwise false</returns>
    </member>
    <member name="M:NetSteps.Common.Base.DateRangeSearchParameters.GetHashCode">
      <summary>
            Gets the instance's hashcode.
            </summary>
      <returns>A hash code for the current instance.</returns>
    </member>
    <member name="M:NetSteps.Common.Base.FilterDateRangePaginatedListParameters`1.Equals(NetSteps.Common.Base.FilterDateRangePaginatedListParameters{`0})">
      <summary>
            Determines if the instance is equal to another.
            </summary>
      <param name="other">the other instance</param>
      <returns>true if equal; otherwise false.</returns>
    </member>
    <member name="M:NetSteps.Common.Base.FilterDateRangePaginatedListParameters`1.Equals(System.Object)">
      <summary>
            Determines if the instance is equal to another object.
            </summary>
      <param name="obj">the other object</param>
      <returns>true if equal; otherwise false</returns>
    </member>
    <member name="M:NetSteps.Common.Base.FilterDateRangePaginatedListParameters`1.GetHashCode">
      <summary>
            Gets the instance's hashcode.
            </summary>
      <returns>A hash code for the current instance.</returns>
    </member>
    <member name="P:NetSteps.Common.Base.FilterDateRangePaginatedListParameters`1.WhereClause">
      <summary>
            Can be used as a normal lambda function, i.e. WhereClause = x =&gt; x.MyProperty;
            </summary>
    </member>
    <member name="P:NetSteps.Common.Base.FilterPaginatedListParameters`1.WhereClause">
      <summary>
            Can be used as a normal lambda function, i.e. WhereClause = x =&gt; x.MyProperty;
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.PaginatedList`1">
      <summary>
            Author: John Egbert
            Description: A helper class to work with large lists in paged manner.
            Created: 05-07-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.PaginatedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Nullable{System.Int32},System.Boolean)">
      <summary>
            Creates a new paginated list from the source given
            </summary>
      <param name="source">The source used to create the paginated list</param>
      <param name="pageIndex">Index of the page to retrieve</param>
      <param name="pageSize">Number of records desired for the page</param>
      <param name="applyPagination">Set to "true" if paginating the records is desired; or set to "false" if you don't want to apply pagination.</param>
    </member>
    <member name="T:NetSteps.Common.Base.SqlUpdatableList`1">
      <summary>
            Author: John Egbert
            Description: Class returned from Data Layer with List of Entities and SqlDependency to notify of changes to those Entities - JHE
            Created: 08-18-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.WeakReferenceList`1">
      <summary>
            Author: John Egbert
            Description: List of classes by weak reference to not prevent them from being Garbage collected - JHE
            Created: 12/14/2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Comparer.LambdaComparer`1">
      <summary>
            Author: John Egbert
            Description: This was taken from http://brendan.enrick.com/blog/linq-your-collections-with-iequalitycomparer-and-lambda-expressions/
            Example Usage: var f3 = album.AlbumImages.Except(siteAlbum.Album.AlbumImages, new LambdaComparer{AlbumImage}((x, y) =&gt; x.Image.ImageUrl == y.Image.ImageUrl));
            Created: 03-11-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Comparer.LambdaEqualityComparer`2">
      <summary>
            Comparer which projects each element of the comparison to a key, and then compares
            those keys using the specified (or default) comparer for the key type.
            Taken from Jon Skeet's ProjectionEqualityComparer example:
            http://stackoverflow.com/questions/188120/can-i-specify-my-explicit-type-comparator-inline/188130#188130
            </summary>
      <typeparam name="T">Type of elements which this comparer will be asked to compare</typeparam>
      <typeparam name="TKey">Type of the key projected from the element</typeparam>
    </member>
    <member name="M:NetSteps.Common.Comparer.LambdaEqualityComparer`2.#ctor(System.Func{`0,`1})">
      <summary>
            Creates a new instance using the specified lambda expression, which must not be null.
            The default comparer for the key type is used.
            </summary>
      <param name="keySelector">Lambda expression to use during comparisons</param>
    </member>
    <member name="M:NetSteps.Common.Comparer.LambdaEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>
            Creates a new instance using the specified lambda expression, which must not be null.
            </summary>
      <param name="keySelector">Lambda expression to use during comparisons</param>
      <param name="comparer">The comparer to use on the keys. May be null,
            in which case the default comparer will be used.</param>
    </member>
    <member name="T:NetSteps.Common.Base.CloneableBase`1">
      <summary>
            Author: John Egbert
            Description: Base class for business object to provide clonability via binary serialization.
            Created: 01-20-2009
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.CloneableBase`1.Clone">
      <summary>
             To clone and return an object of same type.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.CloneableBase`1.GetClone">
      <summary>
            Creates a clone of the object.
            </summary>
      <returns>
            A new object containing the exact data of the original object. - JHE
            </returns>
    </member>
    <member name="T:NetSteps.Common.Base.BusinessListBase`1">
      <summary>
            Author: John Egbert
            Description: A List class that inherits from the generic List class and implements 
            events for item addition and removals.
            Created: 01-20-2009
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.OnItemAdded(System.Object,System.EventArgs)">
      <summary>
            Handles when an item is added to the collection.
            </summary>
      <param name="sender">The item added.</param>
      <param name="e">Event Arguments.</param>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.OnItemRemoved(System.Object,System.EventArgs)">
      <summary>
            Handles when an item is removed from the collection.
            </summary>
      <param name="sender">The item removed.</param>
      <param name="e">Event Arguments.</param>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.Add(`0)">
      <summary>
            Adds an item to the collection.
            </summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds a range of items to the collection.
            </summary>
      <param name="items">Items to be added.</param>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.Remove(`0)">
      <summary>
            Removes a single item.
            </summary>
      <param name="item">The item to remove.</param>
      <returns>True if the item was removed.</returns>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.RemoveAll(System.Predicate{`0})">
      <summary>
            Removes all items that are matched.
            </summary>
      <param name="match">The predicate that provides matching.</param>
      <returns>The number of items removed.</returns>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.RemoveAt(System.Int32)">
      <summary>
            Remove an item at a specified index.
            </summary>
      <param name="index">The index at which to remove an item.</param>
      <returns>True if the item was removed.</returns>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of items from the collection.
            </summary>
      <param name="index">The start index for removing.</param>
      <param name="count">The number of items to remove.</param>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.Clear">
      <summary>
            Clears the collection of all items.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.Clone">
      <summary>
             To clone and return an object of same type.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.GetClone">
      <summary>
            Creates a clone of the object.
            </summary>
      <returns>
            A new object containing the exact data of the original object. - JHE
            </returns>
    </member>
    <member name="E:NetSteps.Common.Base.BusinessListBase`1.ItemAdded">
      <summary>
            Triggered whenever an item is added.
            </summary>
    </member>
    <member name="E:NetSteps.Common.Base.BusinessListBase`1.ItemRemoved">
      <summary>
            Triggered whenever an item is removed.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.NameValue`2">
      <summary>
            Author: John Egbert
            Description: Basic Name/Value class
            Created: 06-26-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Base.Quadruplet">
      <summary>
            Author: John Egbert
            Description: Like Triplet but with a fourth object :-)
            Created: 09-21-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Compression.Compressor">
      <summary>
            Author: John Egbert
            Description: These are currently used to compress the viewstate to reduce the overall size of the HTML transmitted, 
            but can also be used for other purposes where compress might be needed. - JHE
            http://www.codeproject.com/KB/viewstate/ViewStateCompression.aspx
            Created: 05-20-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Configuration.ConfigurationManager">
      <summary>
            Author: John Egbert
            Description: The original code for this was taken from Spencer's implementation on CTMH to provide a way to access
            config values of all different environments (Production, LocalHost, Test, ect...) in one config file. I modified the 
            file to include the Clients name in the config Key in hopes of making copy and pate of config values less prone to errors
            as the values will need to be changes for the specific client. I also added type safe GetAppSetting methods and 
            methods/classes to provide default and overridden values for these config settings.
            Created: 04-19-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Configuration.ConfigurationManager.GetOverridenValue(System.String,NetSteps.Common.Configuration.ConfigurationManager.EnvironmentMode,NetSteps.Common.Constants.Client)">
      <summary>
            This is server as a safety net to override certain values that can accidently be set wrong such as Credit Card processing settings. - JHE
            </summary>
      <param name="key" />
      <param name="mode" />
      <param name="client" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Configuration.ConfigurationManager.GetSecureUploadWebFolder(System.String)">
      <summary>
            For the secure file uploads folder
            </summary>
      <param name="folder" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Configuration.OrdersSection">
      <summary>
            Orders specific configuration information
            </summary>
    </member>
    <member name="P:NetSteps.Common.Constants.States">
      <summary>
            Key = abbreviation ; Value = full state name
            </summary>
    </member>
    <member name="P:NetSteps.Common.Constants.StatesAndTerritories_USA_CAN">
      <summary>
            Key = abbreviation ; Value = full state name
            </summary>
    </member>
    <member name="T:NetSteps.Common.Constants.Client">
      <summary>
            Note: can have base replicated site id as value
            </summary>
    </member>
    <member name="F:NetSteps.Common.ApplicationContextCommon.CookieName">
      <summary>
            This TimeZone is not completely accurate since we can't figure out which TimeZone the Web Client is using.
            All we can get is an TimeZoneOffset - JHE
            </summary>
    </member>
    <member name="F:NetSteps.Common.ApplicationContextCommon._dateTimeNow">
      <summary>
            Used to simulate different different views of content/objects - JHE
            All Entities/Methods should key off this property instead of DateTime.Now - JHE
            If DateTimeNow get set; The Date of that value is combined with the current DateTime.Now time for the simulated DateTime - JHE
            </summary>
    </member>
    <member name="M:NetSteps.Common.ApplicationContextCommon.IsDateTimeNowSet">
      <summary>
            Returns if an override DateTimeNow value has been set
            </summary>
      <returns />
    </member>
    <member name="T:NetSteps.Common.DataFaker.DateTimeFaker">
      <summary>
            Author: John Egbert
            Description: Methods to generate 'Fake' data for use in testing.
            Created: 03-18-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.DataFaker.InternetFaker">
      <summary>
            Author: John Egbert
            Description: Methods to generate 'Fake' data for use in testing.
            Created: 03-18-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.DataFaker.LocationFaker">
      <summary>
            Author: John Egbert
            Description: Methods to generate 'Fake' data for use in testing.
            Created: 03-18-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.DataFaker.LoremIpsum">
      <summary>
            Author: John Egbert
            Description: Helper class for demoing without full content using standard "Lorem Ipsum" sentences.
            Created: 03-18-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.DataFaker.MiscFaker">
      <summary>
            Author: John Egbert
            Description: Methods to generate 'Fake' data for use in testing.
            Created: 03-18-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.DataFaker.NameFaker">
      <summary>
            Author: John Egbert
            Description: Methods to generate 'Fake' data for use in testing.
            Created: 03-18-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.DataFaker.PhoneFaker">
      <summary>
            Author: John Egbert
            Description: Methods to generate 'Fake' data for use in testing.
            Created: 03-18-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.DataFaker.StringFaker">
      <summary>
            Author: John Egbert
            Description: Methods to generate 'Fake' data for use in testing.
            Created: 03-18-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Data.ConnectionStringInfo">
      <summary>
            Author: John Egbert
            Description: Class to help parse a connection string. 
            Created: 11/17/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Data.EntityConnectionStringInfo">
      <summary>
            Author: John Egbert
            Description: Class to help parse a connection string. 
            Created: 03/14/2011
            </summary>
    </member>
    <member name="T:NetSteps.Common.Dynamic.DynamicDictionary">
      <summary>
            A dynamic <see cref="T:System.Collections.Generic.Dictionary`2" /> that returns null if a requested value is not present (rather than throwing an exception).
            </summary>
    </member>
    <member name="M:NetSteps.Common.Dynamic.DynamicDictionary.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Dynamic.DynamicDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes the inner <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
      <requires inheritedFrom="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" inheritedFromTypeName="ISerializable" csharp="info != null" vb="info &lt;&gt; Nothing">info != null</requires>
    </member>
    <member name="M:NetSteps.Common.Dynamic.DynamicDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
    </member>
    <member name="T:NetSteps.Common.EldResolver.IEldResolverExtensions">
      <summary>
            Extension methods for working with the <see cref="T:NetSteps.Common.EldResolver.IEldResolver" />.
            </summary>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldEncode(System.String)">
      <summary>
            Adds the Environment Level Domain (ELD) to an absolute URI string.
            </summary>
      <param name="absoluteUri">A base absolute URI string.</param>
      <returns>An ELD-encoded absolute URI string.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="absoluteUri != null" vb="absoluteUri &lt;&gt; Nothing">absoluteUri != null</requires>
      <exception cref="T:System.ArgumentNullException">absoluteUri == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldEncode(NetSteps.Common.EldResolver.IEldResolver,System.String)">
      <summary>
            Adds the Environment Level Domain (ELD) to an absolute URI string.
            </summary>
      <param name="eldResolver" />
      <param name="absoluteUri">A base absolute URI string.</param>
      <returns>An ELD-encoded absolute URI string.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="eldResolver != null" vb="eldResolver &lt;&gt; Nothing">eldResolver != null</requires>
      <exception cref="T:System.ArgumentNullException">eldResolver == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="absoluteUri != null" vb="absoluteUri &lt;&gt; Nothing">absoluteUri != null</requires>
      <exception cref="T:System.ArgumentNullException">absoluteUri == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldEncode(System.Uri)">
      <summary>
            Adds the Environment Level Domain (ELD) to a URI.
            </summary>
      <param name="uri">A <see cref="T:System.Uri" /> containing the base host.</param>
      <returns>The <see cref="T:System.Uri" /> with the ELD-encoded host.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldEncode(NetSteps.Common.EldResolver.IEldResolver,System.Uri)">
      <summary>
            Adds the Environment Level Domain (ELD) to a URI.
            </summary>
      <param name="eldResolver" />
      <param name="uri">A <see cref="T:System.Uri" /> containing the base host.</param>
      <returns>The <see cref="T:System.Uri" /> with the ELD-encoded host.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="eldResolver != null" vb="eldResolver &lt;&gt; Nothing">eldResolver != null</requires>
      <exception cref="T:System.ArgumentNullException">eldResolver == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldEncode(System.UriBuilder)">
      <summary>
            Adds the Environment Level Domain (ELD) to a URI.
            </summary>
      <param name="uriBuilder">A <see cref="T:System.UriBuilder" /> containing the base host.</param>
      <returns>The <see cref="T:System.UriBuilder" /> with the ELD-encoded host.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uriBuilder != null" vb="uriBuilder &lt;&gt; Nothing">uriBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">uriBuilder == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldDecode(System.String)">
      <summary>
            Removes the Environment Level Domain (ELD) from an absolute URI string.
            </summary>
      <param name="absoluteUri">An ELD-encoded absolute URI string.</param>
      <returns>A decoded absolute URI string.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="absoluteUri != null" vb="absoluteUri &lt;&gt; Nothing">absoluteUri != null</requires>
      <exception cref="T:System.ArgumentNullException">absoluteUri == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldDecode(NetSteps.Common.EldResolver.IEldResolver,System.String)">
      <summary>
            Removes the Environment Level Domain (ELD) from an absolute URI string.
            </summary>
      <param name="eldResolver" />
      <param name="absoluteUri">An ELD-encoded absolute URI string.</param>
      <returns>A decoded absolute URI string.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="eldResolver != null" vb="eldResolver &lt;&gt; Nothing">eldResolver != null</requires>
      <exception cref="T:System.ArgumentNullException">eldResolver == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="absoluteUri != null" vb="absoluteUri &lt;&gt; Nothing">absoluteUri != null</requires>
      <exception cref="T:System.ArgumentNullException">absoluteUri == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldDecode(System.Uri)">
      <summary>
            Removes the Environment Level Domain (ELD) from a URI.
            </summary>
      <param name="uri">A <see cref="T:System.Uri" /> containing the ELD-encoded host.</param>
      <returns>The <see cref="T:System.Uri" /> with the decoded host.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldDecode(NetSteps.Common.EldResolver.IEldResolver,System.Uri)">
      <summary>
            Removes the Environment Level Domain (ELD) from a URI.
            </summary>
      <param name="eldResolver" />
      <param name="uri">A <see cref="T:System.Uri" /> containing the ELD-encoded host.</param>
      <returns>The <see cref="T:System.Uri" /> with the decoded host.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="eldResolver != null" vb="eldResolver &lt;&gt; Nothing">eldResolver != null</requires>
      <exception cref="T:System.ArgumentNullException">eldResolver == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolverExtensions.EldDecode(System.UriBuilder)">
      <summary>
            Removes the Environment Level Domain (ELD) from a URI.
            </summary>
      <param name="uriBuilder">A <see cref="T:System.UriBuilder" /> containing the ELD-encoded host.</param>
      <returns>The <see cref="T:System.UriBuilder" /> with the decoded host.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uriBuilder != null" vb="uriBuilder &lt;&gt; Nothing">uriBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">uriBuilder == null</exception>
    </member>
    <member name="T:NetSteps.Common.Email.EmailHelpers">
      <summary>
            Author: John Egbert
            Created: 04/13/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Events.ProgressMessageEventArgs">
      <summary>
            Author: John Egbert
            Description: Arg class to send Application progress message updates to listener.
            Created: 08-13-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Events.EventArgs`1">
      <summary>
            Author: John Egbert
            Description: Generic args class.
            Created: 08-13-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Events.ProgressEventHandler">
      <summary>
            Author: John Egbert
            Description: Event and Args to relay updated progress of a process.
            Created: 08-13-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Events.EntityEventHandler`1">
      <summary>
            Author: John Egbert
            Description: Class to pass back a specific object when an event occurred with that object.
            Created: 09-21-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Exceptions.ColumnNotInReaderException">
      <summary>
            Author: John Egbert
            Description: Exception thrown by data layer when trying to access a column that is not
            returned by the database in the DataReader.
            Created: 01-03-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IHasBeenLogged">
      <summary>
            Author: John Egbert
            Description: Used with Exceptions to mark the exception logged to the DB.
            Created: 02-05-2010
            </summary>
    </member>
    <member name="P:NetSteps.Common.Exceptions.NetStepsException.StackTrace">
      <summary>
            Overriden to provide a longer stack trace than the default
            </summary>
    </member>
    <member name="T:NetSteps.Common.Expressions.ExpressionHelper">
      <summary>
            Author: Daniel Stafford
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.BoolExtensions">
      <summary>
            Author: John Egbert
            Description: Bool Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.ByteExtensions">
      <summary>
            Author: John Egbert
            Description: Byte Extensions
            Created: 10-19-2008
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.CharExtensions">
      <summary>
            Author: John Egbert
            Description: Char Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.ColorExtensions">
      <summary>
            Author: John Egbert
            Description: Color Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.ConcurrentDictionaryExtensions">
      <summary>
            Author: John Egbert
            Description: ConcurrentDictionary Extensions
            Created: 06-30-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.UriExtensions.ToHttps(System.String)">
      <summary>
            Sets the scheme of a URI to "https".
            </summary>
      <param name="absoluteUri">An absolute URI string.</param>
      <returns>An absolute URI string with the modified scheme.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="absoluteUri != null" vb="absoluteUri &lt;&gt; Nothing">absoluteUri != null</requires>
      <exception cref="T:System.ArgumentNullException">absoluteUri == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.UriExtensions.ToHttps(System.Uri)">
      <summary>
            Sets the scheme of a URI to "https".
            </summary>
      <param name="uri">A <see cref="T:System.Uri" /> containing the URI.</param>
      <returns>The specified <see cref="T:System.Uri" /> with the modified scheme.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme != null" vb="uri.Scheme &lt;&gt; Nothing">uri.Scheme != null</requires>
      <exception cref="T:System.ArgumentException">uri.Scheme == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.UriExtensions.ToHttps(System.UriBuilder)">
      <summary>
            Sets the scheme of a URI to "https".
            </summary>
      <param name="uriBuilder">A <see cref="T:System.UriBuilder" /> containing the URI.</param>
      <returns>The specified <see cref="T:System.UriBuilder" /> with the modified scheme.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uriBuilder != null" vb="uriBuilder &lt;&gt; Nothing">uriBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">uriBuilder == null</exception>
      <requires exception="T:System.ArgumentException" csharp="uriBuilder.Scheme != null" vb="uriBuilder.Scheme &lt;&gt; Nothing">uriBuilder.Scheme != null</requires>
      <exception cref="T:System.ArgumentException">uriBuilder.Scheme == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.UriExtensions.AppendQueryValues(System.String,System.Object)">
      <summary>
            Adds values to the query string of an absolute URI string.
            </summary>
      <param name="absoluteUri">An absolute URI string.</param>
      <param name="queryValues">An object that contains the additional query string values. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <returns>An absolute URI string with the modified query string.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="absoluteUri != null" vb="absoluteUri &lt;&gt; Nothing">absoluteUri != null</requires>
      <exception cref="T:System.ArgumentNullException">absoluteUri == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="queryValues != null" vb="queryValues &lt;&gt; Nothing">queryValues != null</requires>
      <exception cref="T:System.ArgumentNullException">queryValues == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.UriExtensions.AppendQueryValues(System.Uri,System.Object)">
      <summary>
            Adds values to the query string of a URI.
            </summary>
      <param name="uri">A <see cref="T:System.Uri" /> containing the URI.</param>
      <param name="queryValues">An object that contains the additional query string values. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <returns>The specified <see cref="T:System.Uri" /> with the modified query string.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="queryValues != null" vb="queryValues &lt;&gt; Nothing">queryValues != null</requires>
      <exception cref="T:System.ArgumentNullException">queryValues == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.UriExtensions.AppendQueryValues(System.UriBuilder,System.Object)">
      <summary>
            Adds values to the query string of a URI.
            </summary>
      <param name="uriBuilder">A <see cref="T:System.UriBuilder" /> containing the URI.</param>
      <param name="queryValues">An object that contains the additional query string values. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <returns>The specified <see cref="T:System.UriBuilder" /> with the modified query string.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        NetSteps.Common.Extensions.UriExtensions.&lt;&gt;c__DisplayClass2 local_0 = new NetSteps.Common.Extensions.UriExtensions.&lt;&gt;c__DisplayClass2();&#xD;&#xA;    }&#xD;&#xA;    return uriBuilder != null; })()" vb="(() =&gt; {&#xD;&#xA;    NetSteps.Common.Extensions.UriExtensions.&lt;&gt;c__DisplayClass2 local_0 = New NetSteps.Common.Extensions.UriExtensions.&lt;&gt;c__DisplayClass2();&#xD;&#xA;    return uriBuilder &lt;&gt; Nothing; })()">(() =&gt; {
    {
        NetSteps.Common.Extensions.UriExtensions.&lt;&gt;c__DisplayClass2 local_0 = new NetSteps.Common.Extensions.UriExtensions.&lt;&gt;c__DisplayClass2();
    }
    return uriBuilder != null; })()</requires>
      <exception cref="T:System.ArgumentNullException">!(() =&gt; {
    {
        NetSteps.Common.Extensions.UriExtensions.&lt;&gt;c__DisplayClass2 local_0 = new NetSteps.Common.Extensions.UriExtensions.&lt;&gt;c__DisplayClass2();
    }
    return (uriBuilder != null); })()</exception>
      <requires exception="T:System.ArgumentNullException" csharp="queryValues != null" vb="queryValues &lt;&gt; Nothing">queryValues != null</requires>
      <exception cref="T:System.ArgumentNullException">queryValues == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.UriExtensions.SwapHost(System.UriBuilder,System.UriBuilder)">
      <summary>
            Swap the host part of a Uri
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.ValidationRulesExtensions">
      <summary>
            Author: John Egbert
            Description: TimeSpan Extensions
            Created: 10-03-2011
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.CultureInfoExtensions">
      <summary>
            Author: John Egbert
            Description: CultureInfo Extensions
            Created: 10-13-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.IDictionaryExtensions">
      <summary>
            Author: John Egbert
            Description: IDictionary Extensions
            Created: 06-30-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.ParameterRebinder">
      <summary>
            Expression Visitor to rewrite expression trees
            pulled from http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.SortedListExtensions">
      <summary>
            Author: Daniel Stafford
            Description: SortedList Extensions
            Created: 06-24-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.FloatExtensions">
      <summary>
            Author: John Egbert
            Description: Float Extensions
            Created: 06-23-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.IDbConnectionExtensions">
      <summary>
            Author: John Egbert
            Description: IDbConnection Extensions to extend the functionality of LINQ to Entities
            Created: 06-09-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.ObjectContextExtensions">
      <summary>
            Author: John Egbert
            Description: ObjectContext Extensions to extend the functionality of LINQ to Entities
            Created: 06-09-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.ObjectContextExtensions.GetEntitySetName(System.Data.Objects.ObjectContext,System.Type)">
      <summary>
            Will return the EntitySetName (table name in the DB) of an Entity. - JHE
            http://www.scip.be/index.php?Page=ArticlesNET24
            </summary>
      <param name="context" />
      <param name="entityType" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.ObjectContextExtensions.GetMaxLength(System.Data.Objects.ObjectContext,System.Type,System.String)">
      <summary>
            Returns the Max string length in the DataBase by looking it up in Entity Framework MetaData - JHE
            http://stackoverflow.com/questions/748939/field-max-length-in-entity-framwork - JHE
            </summary>
      <param name="context" />
      <param name="entityType" />
      <param name="propertyName" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.ObjectContextExtensions.GetPrimaryKeyInfo(System.Data.Objects.ObjectContext,System.Type)">
      <summary>
            This will first attempt to lookup the primary key by checking for an C# attribute on the Primary Key Property.
            Ex:     [LoadByPrimaryKey]
                    int OrderID { get; set; }
                    
            If this does not exist then the Primary key will be looked up in the Entity Framework Metadata.
            If more that 1 primary keys exists, null will be returned, but can be resolved by specifying which 
                key should be used as above ([LoadByPrimaryKey]) - JHE
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.ObjectContextExtensions.GetPrimaryKeyPropertyUsingEntity(System.Data.Objects.ObjectContext,System.Type)">
      <summary>
            Gets Primary key using Entity Framework Metadata - JHE
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.ObjectContextExtensions.GetPrimaryKeyPropertyUsingAttribute(System.Type)">
      <summary>
            Get Primary key using LoadByPrimaryKeyAttribute - JHE
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.IQueryableExtensions">
      <summary>
            Author: John Egbert
            Description: IQueryable Extensions to extend the functionality of LINQ to Entities
            Created: 06-04-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IQueryableExtensions.ToTraceString``1(System.Linq.IQueryable{``0})">
      <summary>
            http://social.msdn.microsoft.com/Forums/en-US/adodotnetentityframework/thread/4a17b992-05ca-4e3b-9910-0018e7cc9c8c - JHE
            </summary>
      <typeparam name="T" />
      <param name="t" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Extensions.ObjectQueryExtensions">
      <summary>
            Author: John Egbert
            Description: ObjectQuery Extensions to extend the functionality of LINQ to Entities
            Created: 05-24-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.ObjectQueryExtensions.WhereIn``2(System.Data.Objects.ObjectQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Method to work around the lack of support for the Linq To Entities Linq method of Contains(Func). - JHE
            Taken from:
            http://stackoverflow.com/questions/374267/contains-workaround-using-linq-to-entities
            </summary>
      <typeparam name="TEntity" />
      <typeparam name="TValue" />
      <param name="query" />
      <param name="selector" />
      <param name="collection" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Extensions.IDataRecordExtensions">
      <summary>
            Author: John Egbert
            Description: IDataRecord Extensions
            Created: 04-21-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.ObservableCollectionExtensions">
      <summary>
            Author: John Egbert
            Description: ObservableCollection Extensions
            Created: 03-26-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.DateTimeOffsetExtensions">
      <summary>
            Author: John Egbert
            Description: DateTimeOffset Extensions
            Created: 03-08-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.IValidatedModelExtensions">
      <summary>
            Author: John Egbert
            Description: IValidatedModel Extensions
            Add IValidatedModel to objects with DataAnnotations attributes you would like to validate.
            Created: 03-05-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IValidatedModelExtensions.GetErrors(NetSteps.Common.Interfaces.IValidatedModel)">
      <summary>
            Get all validation errors for the given instance. - JHE
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IValidatedModelExtensions.GetErrors(NetSteps.Common.Interfaces.IValidatedModel,System.String)">
      <summary>
            Get all validation errors for the given instance's property. - JHE
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IValidatedModelExtensions.IsValid(NetSteps.Common.Interfaces.IValidatedModel)">
      <summary>
            Are there any validation errors? 
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IValidatedModelExtensions.RegisterThrowExceptionOnValidationError(NetSteps.Common.Interfaces.IValidatedModel)">
      <summary>
            This will cause validation DataAnnotation rules to be run on the property that changed
            and an Exception will be thrown if any rules are broken. - JHE
            </summary>
      <param name="instance" />
    </member>
    <member name="T:NetSteps.Common.Extensions.GuidExtensions">
      <summary>
            Author: John Egbert
            Description: Guid Extensions
            Created: 10-29-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.IListExtensions">
      <summary>
            Author: John Egbert
            Description: IList Extensions
            Created: 11-10-2009
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.GetNext``1(System.Collections.Generic.IList{``0},``0)">
      <summary>
            Will get the next item in list comparing the current item by reference - JHE
            </summary>
      <typeparam name="T" />
      <param name="value" />
      <param name="current" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.GetNext``1(System.Collections.Generic.IList{``0},``0,System.Func{``0,``0,System.Boolean})">
      <summary>
            Will get the next item in list comparing the current item by using the provided equalityComparer - JHE
            Example:
            mailMessageModelCollection.GetNext(MailMessage, (MailMessageModel x, MailMessageModel y) =&gt; x.ExternalMessageID == y.ExternalMessageID);
            </summary>
      <typeparam name="T" />
      <param name="value" />
      <param name="current" />
      <param name="equalityComparer" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.GetPrevous``1(System.Collections.Generic.IList{``0},``0)">
      <summary>
            Will get the next previous in list comparing the current item by reference - JHE
            </summary>
      <typeparam name="T" />
      <param name="value" />
      <param name="current" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.GetPrevous``1(System.Collections.Generic.IList{``0},``0,System.Func{``0,``0,System.Boolean})">
      <summary>
            Will get the previous item in list comparing the current item by using the provided equalityComparer - JHE
            Example:
            mailMessageModelCollection.GetPrevous(MailMessage, (MailMessageModel x, MailMessageModel y) =&gt; x.ExternalMessageID == y.ExternalMessageID);
            </summary>
      <typeparam name="T" />
      <param name="value" />
      <param name="current" />
      <param name="equalityComparer" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.GetIndex``1(System.Collections.Generic.IList{``0},``0)">
      <summary>
            Returns the index of an item comparing the current item by reference
            </summary>
      <typeparam name="T" />
      <param name="value" />
      <param name="current" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.GetIndex``1(System.Collections.Generic.IList{``0},``0,System.Func{``0,``0,System.Boolean})">
      <summary>
            Returns the index of an item comparing the current item by using the provided equalityComparer - JHE
            Example:
            mailMessageModelCollection.GetIndex(MailMessage, (MailMessageModel x, MailMessageModel y) =&gt; x.ExternalMessageID == y.ExternalMessageID);
            </summary>
      <typeparam name="T" />
      <param name="value" />
      <param name="current" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.GetSyncToLists``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Simple helper method that returns lists of items to Sync a collection with another. - JHE
            </summary>
      <typeparam name="T" />
      <param name="list" />
      <param name="syncToList" />
      <param name="equalityComparer" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.GetSyncToLists``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Simple helper method that returns lists of items to Sync a collection with another.
            This Method varies from the one above in that it sync lists of IDs (SiteID, NavigationID, ect..) - JHE
            Example: 
                List{int} accessibleSitesIds = new List{int}() { 1, 2, 3};
                var syncLists = user.Sites.ToList(s =&gt; s.SiteID).GetSyncToLists(accessibleSitesIds);
            </summary>
      <typeparam name="TValue" />
      <param name="list" />
      <param name="syncToList" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.SyncTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Action{``0,``0},System.Action{System.Collections.Generic.IList{``0},``0})">
      <summary>
            Helper method to do a one way sync of one collection to another. - JHE
            </summary>
      <typeparam name="T" />
      <param name="list" />
      <param name="syncToList" />
      <param name="equalityComparer" />
      <param name="updateItem">First parameter is the old item, second is the updated item</param>
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IListExtensions.RemoveWhere``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
      <summary>
            Method to remove and item(s) by a given function. - JHE
            Ex: account.Notes.RemoveWhere(n =&gt; n.NoteID == 1);
            </summary>
      <typeparam name="T" />
      <param name="value" />
      <param name="equalityComparer" />
    </member>
    <member name="T:NetSteps.Common.Extensions.LinqExtensions">
      <summary>
            Author: John Egbert
            Description: Linq Extensions
            Taken from http://extensionoverflow.codeplex.com/SourceControl/ListDownloadableCommits.aspx - JHE
            Created: 04-03-2009
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.LinqExtensions.ToCSVString(System.Linq.IOrderedQueryable)">
      <summary>
            Converts the Linq data to a comma separated string including header.
            </summary>
      <param name="data">The data.</param>
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.LinqExtensions.ToCSVString(System.Linq.IOrderedQueryable,System.String)">
      <summary>
            Converts the Linq data to a comma separated string including header.
            </summary>
      <param name="data">The data.</param>
      <param name="delimiter">The delimiter.</param>
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.LinqExtensions.ToCSVString(System.Linq.IOrderedQueryable,System.String,System.String)">
      <summary>
            Converts the Linq data to a comma seperated string including header.
            </summary>
      <param name="data">The data.</param>
      <param name="delimiter">The delimiter.</param>
      <param name="nullvalue">The null value.</param>
      <returns />
    </member>
    <member name="T:NetSteps.Common.Extensions.TimeSpanExtensions">
      <summary>
            Author: John Egbert
            Description: TimeSpan Extensions
            Created: 01-30-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.TypeExtensions">
      <summary>
            Author: John Egbert
            Description: Type Extensions
            Created: 05-19-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.TypeExtensions.New``1(System.Type)">
      <summary>
            Creates a compiled lambda expression for the constructor and calls it to create a new object - DES
            </summary>
      <typeparam name="T" />
      <param name="type" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.TypeExtensions.New``1(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Creates a compiled lambda expression for the constructor and calls it to create a new object - DES
            </summary>
      <param name="type" />
      <param name="args" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.TypeExtensions.New``1(System.Type,System.Object[])">
      <summary>
            Creates a compiled lambda expression for the constructor and calls it to create a new object - DES
            </summary>
      <typeparam name="T" />
      <param name="type" />
      <param name="args" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.TypeExtensions.New(System.Type)">
      <summary>
            Creates a compiled lambda expression for the constructor and calls it to create a new object - DES
            </summary>
      <param name="type" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.TypeExtensions.New(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Creates a compiled lambda expression for the constructor and calls it to create a new object - DES
            </summary>
      <param name="type" />
      <param name="args" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.TypeExtensions.New(System.Type,System.Object[])">
      <summary>
            Creates a compiled lambda expression for the constructor and calls it to create a new object - DES
            </summary>
      <param name="type" />
      <param name="args" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.TypeExtensions.NewFast(System.Type)">
      <summary>
            Emits some IL to create a new object using a parameterless constructor - DES
            </summary>
      <param name="type" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.TypeExtensions.GetMetadataClassType(System.Type)">
      <summary>
            Returns the metadata class (if any) that is associated with this type.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.DateTimeExtensions">
      <summary>
            Author: John Egbert
            Description: DateTime Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
      <summary>
            Returns whether the DateTime is on a Weekend.
            </summary>
      <param name="dateTime">Required. The DateTime to evaluate.</param>
      <returns>Returns whether the DateTime is on a Weekend.</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.IsWeekDay(System.DateTime)">
      <summary>
            Returns whether the DateTime is on a Week Day.
            </summary>
      <param name="dateTime">Required. The DateTime to evaluate.</param>
      <returns>Returns whether the DateTime is on a Week Day.</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.ToShortDateStringDisplay(System.Nullable{System.DateTime})">
      <summary>
            Will display "N/A" if the date is null or empty. - JHE
            </summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.SetTime(System.Nullable{System.DateTime},System.String)">
      <summary>
            Use to set the time on a DateTime object without modifying the date. - JHE
            </summary>
      <param name="value" />
      <param name="time" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.SetDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Use to set the date on a DateTime object without modifying the time. - JHE
            </summary>
      <param name="value" />
      <param name="date" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.Midnight(System.DateTime)">
      <summary>
            Gets a DateTime representing midnight on the current date
            </summary>
      <param name="dateTime">The current date</param>
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.GetSafeDate(System.Int32,System.Int32,System.Int32)">
      <summary>
            This is to fix the Leap year problem when setting a date to 2/29/**** 
            Date time currently throws an exception - JHE
            </summary>
      <param name="year" />
      <param name="month" />
      <param name="day" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.StartOfMonth(System.DateTime)">
      <summary>
            Gets a DateTime representing midnight on the first day of the current date's month
            </summary>
      <param name="dateTime">The current date</param>
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.DateTimeExtensions.TotalMonths(System.DateTime)">
      <summary>
            Returns the total number of months since 0/0/0000.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.DecimalExtensions">
      <summary>
            Author: John Egbert
            Description: Decimal Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.DecimalExtensions.AsymmetricRoundedNumber(System.Nullable{System.Decimal},System.Int32)">
      <summary>
            Asymmetric rounding rounds away from 0 for positive and towards 0 for negative
            </summary>
      <param name="numberToRound" />
      <param name="numberOfDecimals" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.DecimalExtensions.AsymmetricRoundedNumber(System.Decimal,System.Int32)">
      <summary>
            Asymmetric rounding rounds away from 0 for positive and towards 0 for negative
            </summary>
      <param name="numberToRound" />
      <param name="numberOfDecimals" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Extensions.DoubleExtensions">
      <summary>
            Author: John Egbert
            Description: Double Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.DoubleExtensions.GetDelta(System.Double,System.Double)">
      <summary>
             Returns a positive value representing the difference between 2 double values. - JHE
            </summary>
      <param name="value" />
      <param name="otherValue" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.DoubleExtensions.Constrain(System.Double,System.Double,System.Double)">
      <summary>
            http://blogs.msdn.com/avip/archive/2008/09/30/trivial-but-useful-extension-method.aspx
            </summary>
      <param name="num" />
      <param name="min" />
      <param name="max" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Extensions.EnumExtensions">
      <summary>
            Author: John Egbert
            Description: Enum Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.EnumExtensions.ToIntString(System.Enum)">
      <summary>
            To return the integer value of the Enum as a string. - JHE
            </summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.EnumExtensions.ToInt(System.Enum)">
      <summary>
            To return the integer value of an Enum. - JHE
            </summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.EnumExtensions.PascalToSpaced(System.Enum)">
      <summary>
            Takes a Pascal CASED string and inserts spaces:
            Example: "PascalCaseString" becomes "Pascal Case String" - JHE
            </summary>
      <param name="value" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Extensions.ExceptionExtensions">
      <summary>
            Author: John Egbert
            Description: Exception Extensions
            Taken from http://www.codeplex.com/SpackleNet - JHE
            Created: 11-01-2008
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.ExceptionExtensions.GetRealException(System.Exception)">
      <summary>
            Gets the innermost exception, limiting the nesting level to 3 levels.
            </summary>
      <requires exception="T:System.ArgumentNullException" csharp="ex != null" vb="ex &lt;&gt; Nothing">ex != null</requires>
      <exception cref="T:System.ArgumentNullException">ex == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.ExceptionExtensions.GetRealException(System.Exception,System.Int32)">
      <summary>
            Gets the innermost exception, limiting the nesting level to 3 levels.
            </summary>
      <param name="ex">the exception</param>
      <param name="nestingLimit">max number of nesting levels</param>
      <returns />
      <requires exception="T:System.ArgumentNullException" csharp="ex != null" vb="ex &lt;&gt; Nothing">ex != null</requires>
      <exception cref="T:System.ArgumentNullException">ex == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.ExceptionExtensions.GetRealException(System.Exception,System.Boolean,System.Int32)">
      <summary>
            Gets the innermost exception. If limit is used it controls the nesting level searched.
            </summary>
      <param name="ex">the exception</param>
      <param name="useLimit">indicates whether the nesting level should be limited</param>
      <param name="nestingLimit">max number of nesting levels</param>
      <returns>the innermost exception having a non-empty message, up to the nesting level given.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="ex != null" vb="ex &lt;&gt; Nothing">ex != null</requires>
      <exception cref="T:System.ArgumentNullException">ex == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:NetSteps.Common.Extensions.IDataReaderExtensions">
      <summary>
            Author: John Egbert
            Description: IDataReader Extensions
            Created: 4-28-2009
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.IEnumerableExtensions">
      <summary>
            Author: John Egbert
            Description: IEnumerable Extensions
            Created: 06-19-2009
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns a generic list of the property values specified in the property parameter. - JHE
            Example: var roleFunctionIds = r.Functions.ToList(f =&gt; f.FunctionID);
            </summary>
      <typeparam name="T" />
      <typeparam name="TProp" />
      <param name="list" />
      <param name="property" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
      <summary>
            A wrapper method for Except that takes a Func parameter instead of the IEqualityComparer - JHE
            </summary>
      <typeparam name="T" />
      <param name="list" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.GetNextInt``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
            Will return a incremented int of the property in the keySelector if the value is greater than 0. - JHE
            Example: region.ShippingRegionWarehouses.GetNextInt(sw =&gt; sw.SortIndex)
            </summary>
      <typeparam name="TSource" />
      <param name="source" />
      <param name="keySelector" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.ReIndex(System.Collections.Generic.IEnumerable{NetSteps.Common.Interfaces.ISortIndex})">
      <summary>
            Loops through items and cleans up all the SortIndex properties on the items. - JHE
            </summary>
      <param name="source" />
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.Move(System.Collections.Generic.IEnumerable{NetSteps.Common.Interfaces.ISortIndex},System.Int32,NetSteps.Common.Constants.SortDirection)">
      <summary>
            Loops through items and cleans up all the SortIndex properties on the items. - JHE
            </summary>
      <param name="source" />
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.ReIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Action{``0,System.Int32})">
      <summary>
            Loops through items and "re-indexes" the property passed into the paramaters. - JHE
            Example:
                region.ShippingRegionWarehouses.ReIndex(sw =&gt; sw.SortIndex, (ShippingRegionWarehouse sw, int id) =&gt; sw.SortIndex = id);
            </summary>
      <param name="source" />
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Adds a single element to the end of an IEnumerable.</summary>
      <typeparam name="T">Type of enumerable to return.</typeparam>
      <returns>IEnumerable containing all the input elements, followed by the 
            specified additional element.</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Adds a single element to the start of an IEnumerable.</summary>
      <typeparam name="T">Type of enumerable to return.</typeparam>
      <returns>IEnumerable containing the specified additional element, followed by 
            all the input elements.</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary> 
            Returns the index of the first element in this <paramref name="source" /> 
            satisfying the specified <paramref name="condition" />. If no such elements 
            are found, returns -1. 
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.MinElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Returns the first element from the input sequence for which the 
            value selector returns the smallest value.</summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.SelectDuplicatesObjectIDs``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Returns the IDs specified in the propertySelector of items in the list having more than 1 item (propertySelector) in list with same value. - JHE
            Example: 
            </summary>
      <typeparam name="T" />
      <typeparam name="TProp" />
      <param name="list" />
      <param name="propertySelector" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.SplitWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
      <summary>
            Splits a sequence of values based on a predicate.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.MaxConsecutiveMonths(System.Collections.Generic.IEnumerable{System.DateTime})">
      <summary>
            Returns the maximum number of consecutive months appearing in a sequence of dates.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.MaxConsecutive(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            Returns the maximum number of distinct, consecutive numbers appearing in a sequence.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.Traverse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Recursive query operator
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.ImageExtensions">
      <summary>
            Author: John Egbert
            Description: Image Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.ImageExtensions.TrimWhiteSpace(System.Drawing.Image)">
      <summary>
            http://forums.asp.net/t/1145909.aspx - JHE
            </summary>
      <param name="image" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Extensions.IntExtensions">
      <summary>
            Author: John Egbert
            Description: Int Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsEven(System.Int32)">
      <summary>
            Determines whether the specified input is even.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if the specified input is even; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsEvenOrZero(System.Int32)">
      <summary>
            Determines whether the specified input is even or zero.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if [is even or zero] [the specified input]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsPositive(System.Int32)">
      <summary>
            Determines whether the specified input is positive.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if the specified input is positive; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsPositive(System.Nullable{System.Int32})">
      <summary>
            Determines whether the specified input is positive.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if the specified input is positive; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsNegative(System.Int32)">
      <summary>
            Determines whether the specified input is negative.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if the specified input is negative; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsZero(System.Int32)">
      <summary>
            Determines whether the specified input is zero.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if the specified input is zero; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsEvenlyDivisibleBy(System.Int32,System.Int32)">
      <summary>
            Determines whether the specified input is evenly divisible by the divisor.
            </summary>
      <param name="input">The input.</param>
      <param name="divisor">The divisor.</param>
      <returns>
        <c>true</c> if [is evenly divisible by] [the specified input]; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.Absolute(System.Int32)">
      <summary>
            Absolutes the specified input.
            </summary>
      <param name="input">The input.</param>
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsPrime(System.Int32)">
      <summary>
            Determines whether the specified input is prime.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if the specified input is prime; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.IsBit(System.Int32)">
      <summary>
            This method will take an integer value and determine if it is a bit value.  E.g. 1, 2, 4, 8, 16, etc
            </summary>
      <param name="target">The integer to test.</param>
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.IntExtensions.FormatBytes(System.Int32)">
      <summary>
            Taken from http://sharpertutorials.com/pretty-format-bytes-kb-mb-gb/ - JHE
            </summary>
      <param name="bytes" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Extensions.ListExtensions">
      <summary>
            Author: John Egbert
            Description: List Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="T:NetSteps.Common.Extensions.StringExtensions">
      <summary>
            Author: John Egbert
            Description: String Extensions
            Created: 11-01-2008
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.IsEmpty(System.String)">
      <summary>
            Determines whether the specified input is empty.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if the specified input is empty; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.IsNumberOnly(System.String,System.Boolean)">
      <summary>
            true, if the string contains only digits or float-point.
            Spaces are not considered.
            </summary>
      <param name="s">input string</param>
      <param name="floatpoint">true, if float-point is considered</param>
      <returns>true, if the string contains only digits or float-point</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.IsCaseUpper(System.String)">
      <summary>
            Determines whether entire string is UPPER case. 
            </summary>
      <param name="input">The input string.</param>
      <returns>
        <c>true</c> if [is case upper] [the specified input]; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.IsRepeatedChar(System.String)">
      <summary>
            Determines whether the string consists of just one char.
            </summary>
      <param name="input">The input string.</param>
      <returns>
        <c>true</c> if [is repeated char] [the specified input]; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.IsWhitespace(System.String)">
      <summary>
            Determines whether the string is pure whitespace.
            </summary>
      <param name="input">The input.</param>
      <returns>
        <c>true</c> if the specified input is whitespace; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.GetFromStringList``1(System.String,System.Char)">
      <summary>
            Example: List{string} filterOptions = Utilities.String.GetStringList("All, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z", Char.Parse(","));
            Works for strings, integers, bool, and enum lists right now - JHE
            </summary>
      <param name="commaSeparatedValues" />
      <param name="separatingCharacter" />
      <returns />
            Test this - JHE
        </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.RemoveDiacritics(System.String)">
      <summary>
            Remove accent from strings 
            </summary>
      <example>
             input:  "Příliš žluťoučký kůň úpěl ďábelské ódy."
             result: "Prilis zlutoucky kun upel dabelske ody."
            </example>
      <param name="s" />
      <remarks>founded at http://stackoverflow.com/questions/249087/
            how-do-i-remove-diacritics-accents-from-a-string-in-net</remarks>
      <returns>string without accents</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.RemoveExtraWhiteSpace(System.String)">
      <summary>
            Removes all extra white space, including leading and trailing whitespace.
            </summary>
      <param name="input">The input string.</param>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.ReplaceWithMultipleSweeps(System.String,System.String,System.String)">
      <summary>
            Replaces the all instances of stringFind with replaceWith. 
            Does multiple sweeps until there are no more matches, unlike String.Replace() which only does 1 sweep.
            </summary>
      <param name="input">The input string.</param>
      <param name="stringToFind">The string to match.</param>
      <param name="replaceWith">The string to replace with.</param>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.ConvertToSecureUrl(System.String,System.Boolean)">
      <summary>
            Replaces http:// with https://
            TODO: This method should not take a bool condition. - Lundy
            </summary>
      <param name="value" />
      <param name="forceSSL" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.PascalToSpaced(System.String)">
      <summary>
            Takes a Pascal CASED string and inserts spaces:
            Example: "PascalCaseString" becomes "Pascal Case String" - JHE
            </summary>
      <param name="name" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.TitleCase(System.String)">
      <summary>
            Converts a string to title case.
            </summary>
      <param name="text" />
      <returns>A string.</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.TitleCase(System.String,System.Boolean)">
      <summary>
            Converts a string to title case.
            </summary>
      <param name="text" />
      <param name="ignoreShortWords">If true, 
            does not capitalize words like
            "a", "is", "the", etc.</param>
      <returns>A string.</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.Reverse(System.String)">
      <summary>
            Reverse the string
            from http://en.wikipedia.org/wiki/Extension_method
            </summary>
      <param name="input" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.XmlSanitizedString(System.String)">
      <summary>
            http://prettycode.org/ - JHE
            </summary>
      <param name="xml" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.Trim(System.String,System.String[])">
      <summary>
            Trims leading and trailing character provided by parameter. - JHE
            </summary>
      <param name="value" />
      <param name="characters" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.StripTags(System.String)">
      <summary>
            Removes all HTML tags from the passed string
            </summary>
      <returns>A string.</returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.GetIncrementalNumberStringEquivalent(System.String)">
      <summary>
            Used to check against weak passwords. 
            For input: 'secret' it returns '123456' - JHE
            </summary>
      <param name="text" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.FromJson``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Deserialize the json text to the generic type
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.SubstringSafe(System.String,System.Int32,System.Int32)">
      <summary>
            Retrieves a substring without throwing an exception if the original string is too short.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.GetSiteUrl(System.String)">
      <summary>
            Gets the effective site url from the given url.
            </summary>
      <param name="url">
            The url from HttpContext.Request.
            </param>
      <returns>
            Returns the effective site url.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Extensions.StringExtensions.IsLegalXmlChar(System.Int32)">
      <summary>
            Whether a given character is allowed by XML 1.0.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.CountryCultureInfoCode">
      <summary>
            Author: John Egbert
            Description: Returns the CountryCultureInfoCode for various countries by named properties.
            Created: 01-13-2011
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.CultureInfoCache">
      <summary>
            Author: John Egbert
            Description: Class to server up cached instances of CultureInfo 'lazy-load initialized'.
            Created: 01-13-2011
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.IGeoCode">
      <summary>
            Identifies an object with Latitude/Longitude coordinates.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.IGeoCodeItemWithDistance`1">
      <summary>
            A wrapper class for "appending" a distance property to any <see cref="T:NetSteps.Common.Globalization.IGeoCode" /> object.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.GeoLocation">
      <summary>
            Contains various geo-location utility methods.
            The mathematical calculations were adapted from Jan Philip Matuschek's article found here: http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
            </summary>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocation.ToRadians(System.Double)">
      <summary>
            Converts degrees to radians.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocation.ToDegrees(System.Double)">
      <summary>
            Converts radians to degrees.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocation.ToDistanceRadians(System.Double,NetSteps.Common.Globalization.GeoLocation.DistanceType)">
      <summary>
            Converts distance (mi. or km.) to radians.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocation.ToDistance(System.Double,NetSteps.Common.Globalization.GeoLocation.DistanceType)">
      <summary>
            Converts radians to distance (mi. or km.).
            </summary>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocation.CalculateGeoCodeRange(System.Double,System.Double,System.Double,NetSteps.Common.Globalization.GeoLocation.DistanceType)">
      <summary>
            Computes the bounding coordinates of all points on the surface of the earth that have a great circle distance
            to the point represented by the specified location that is less than or equal to the distance argument.
            </summary>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES &amp;&amp; !!(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)" vb="latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES AndAlso Not !(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)">latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES &amp;&amp; !!(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">latitude &lt; NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES ? !false : !(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES &amp;&amp; !!(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)" vb="longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES AndAlso Not !(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)">longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES &amp;&amp; !!(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">longitude &lt; NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES ? !false : !(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="distance &gt; 0.0" vb="distance &gt; 0">distance &gt; 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">distance &lt;= 0.0</exception>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocation.IncludesMeridian180(NetSteps.Common.Globalization.IGeoCodeRange)">
      <summary>
            Returns true if the <see cref="T:NetSteps.Common.Globalization.IGeoCodeRange" /> spans the 180th meridian.
            </summary>
      <requires exception="T:System.ArgumentNullException" csharp="geoCodeRange != null" vb="geoCodeRange &lt;&gt; Nothing">geoCodeRange != null</requires>
      <exception cref="T:System.ArgumentNullException">geoCodeRange == null</exception>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocation.WhereInGeoCodeRange``1(System.Linq.IQueryable{``0},NetSteps.Common.Globalization.IGeoCodeRange)">
      <summary>
            Filters a sequence of <see cref="T:NetSteps.Common.Globalization.IGeoCode" /> items based on a specified <see cref="T:NetSteps.Common.Globalization.IGeoCodeRange" />.
            Useful for database queries for better performance.
            </summary>
      <requires exception="T:System.ArgumentNullException" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        NetSteps.Common.Globalization.GeoLocation.&lt;&gt;c__DisplayClass0&lt;T&gt; local_5 = new NetSteps.Common.Globalization.GeoLocation.&lt;&gt;c__DisplayClass0&lt;T&gt;();&#xD;&#xA;        local_5.geoCodeRange = geoCodeRange;&#xD;&#xA;    }&#xD;&#xA;    return query != null; })()" vb="(() =&gt; {&#xD;&#xA;    NetSteps.Common.Globalization.GeoLocation.&lt;&gt;c__DisplayClass0&lt;T&gt; local_5 = New NetSteps.Common.Globalization.GeoLocation.&lt;&gt;c__DisplayClass0(Of T)();&#xD;&#xA;    local_5.geoCodeRange = geoCodeRange&#xD;&#xA;    return query &lt;&gt; Nothing; })()">(() =&gt; {
    {
        NetSteps.Common.Globalization.GeoLocation.&lt;&gt;c__DisplayClass0&lt;T&gt; local_5 = new NetSteps.Common.Globalization.GeoLocation.&lt;&gt;c__DisplayClass0&lt;T&gt;();
        local_5.geoCodeRange = geoCodeRange;
    }
    return query != null; })()</requires>
      <exception cref="T:System.ArgumentNullException">!(() =&gt; {
    {
        NetSteps.Common.Globalization.GeoLocation.&lt;&gt;c__DisplayClass0&lt;T&gt; local_5 = new NetSteps.Common.Globalization.GeoLocation.&lt;&gt;c__DisplayClass0&lt;T&gt;();
        (local_5.geoCodeRange = geoCodeRange);
    }
    return (query != null); })()</exception>
      <requires exception="T:System.ArgumentNullException" csharp="local_5.geoCodeRange != null" vb="local_5.geoCodeRange &lt;&gt; Nothing">local_5.geoCodeRange != null</requires>
      <exception cref="T:System.ArgumentNullException">local_5.geoCodeRange == null</exception>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocation.CalculateDistance(System.Double,System.Double,System.Double,System.Double,NetSteps.Common.Globalization.GeoLocation.DistanceType)">
      <summary>
            Calculates the distance between two locations.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocationExtensions.FilterByDistance``1(System.Linq.IQueryable{``0},System.Func{System.Linq.IQueryable{``0},NetSteps.Common.Globalization.IGeoCodeDistanceSelectorParameters,System.Linq.IQueryable{NetSteps.Common.Globalization.IGeoCodeItemWithDistance{``0}}},System.Double,System.Double,NetSteps.Common.Globalization.GeoLocation.DistanceType,System.Double)">
      <summary>
            Filters a sequence of <see cref="T:NetSteps.Common.Globalization.IGeoCode" /> items based on their distance from a specified location,
            and wraps the items in an outer class that contains their distance.
            </summary>
      <requires exception="T:System.ArgumentNullException" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        NetSteps.Common.Globalization.GeoLocationExtensions.&lt;&gt;c__DisplayClass0&lt;T&gt; local_3 = new NetSteps.Common.Globalization.GeoLocationExtensions.&lt;&gt;c__DisplayClass0&lt;T&gt;();&#xD;&#xA;        local_3.maximumDistance = maximumDistance;&#xD;&#xA;    }&#xD;&#xA;    return query != null; })()" vb="(() =&gt; {&#xD;&#xA;    NetSteps.Common.Globalization.GeoLocationExtensions.&lt;&gt;c__DisplayClass0&lt;T&gt; local_3 = New NetSteps.Common.Globalization.GeoLocationExtensions.&lt;&gt;c__DisplayClass0(Of T)();&#xD;&#xA;    local_3.maximumDistance = maximumDistance&#xD;&#xA;    return query &lt;&gt; Nothing; })()">(() =&gt; {
    {
        NetSteps.Common.Globalization.GeoLocationExtensions.&lt;&gt;c__DisplayClass0&lt;T&gt; local_3 = new NetSteps.Common.Globalization.GeoLocationExtensions.&lt;&gt;c__DisplayClass0&lt;T&gt;();
        local_3.maximumDistance = maximumDistance;
    }
    return query != null; })()</requires>
      <exception cref="T:System.ArgumentNullException">!(() =&gt; {
    {
        NetSteps.Common.Globalization.GeoLocationExtensions.&lt;&gt;c__DisplayClass0&lt;T&gt; local_3 = new NetSteps.Common.Globalization.GeoLocationExtensions.&lt;&gt;c__DisplayClass0&lt;T&gt;();
        (local_3.maximumDistance = maximumDistance);
    }
    return (query != null); })()</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES &amp;&amp; !!(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)" vb="latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES AndAlso Not !(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)">latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES &amp;&amp; !!(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">latitude &lt; NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES ? !false : !(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES &amp;&amp; !!(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)" vb="longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES AndAlso Not !(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)">longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES &amp;&amp; !!(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">longitude &lt; NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES ? !false : !(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="local_3.maximumDistance &gt; 0.0" vb="local_3.maximumDistance &gt; 0">local_3.maximumDistance &gt; 0.0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">local_3.maximumDistance &lt;= 0.0</exception>
    </member>
    <member name="M:NetSteps.Common.Globalization.GeoLocationExtensions.SelectWithDistance``1(System.Linq.IQueryable{``0},System.Func{System.Linq.IQueryable{``0},NetSteps.Common.Globalization.IGeoCodeDistanceSelectorParameters,System.Linq.IQueryable{NetSteps.Common.Globalization.IGeoCodeItemWithDistance{``0}}},System.Double,System.Double,NetSteps.Common.Globalization.GeoLocation.DistanceType)">
      <summary>
            Wraps a sequence of <see cref="T:NetSteps.Common.Globalization.IGeoCode" /> items in an outer class that contains their distance from a specified location.
            </summary>
      <requires exception="T:System.ArgumentNullException" csharp="query != null" vb="query &lt;&gt; Nothing">query != null</requires>
      <exception cref="T:System.ArgumentNullException">query == null</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES &amp;&amp; !!(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)" vb="latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES AndAlso Not !(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)">latitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES &amp;&amp; !!(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">latitude &lt; NetSteps.Common.Globalization.GeoLocation.MIN_LAT_DEGREES ? !false : !(latitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LAT_DEGREES)</exception>
      <requires exception="T:System.ArgumentOutOfRangeException" csharp="longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES &amp;&amp; !!(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)" vb="longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES AndAlso Not !(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)">longitude &gt;= NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES &amp;&amp; !!(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">longitude &lt; NetSteps.Common.Globalization.GeoLocation.MIN_LON_DEGREES ? !false : !(longitude &lt;= NetSteps.Common.Globalization.GeoLocation.MAX_LON_DEGREES)</exception>
    </member>
    <member name="M:NetSteps.Common.Globalization.IPostalCodeLookupProviderExtensions.ValidateAndCleanPostalCode(NetSteps.Common.Globalization.IPostalCodeLookupProvider,System.Int32,System.String,System.String@)">
      <summary>
            Validates and then cleans the passed postal code
            </summary>
      <param name="countryId">CountryId</param>
      <param name="postalCode">PostalCode to validate and clean</param>
      <param name="cleanedPostalCode">Cleaned PostalCode, or the given PostalCode if validation fails.</param>
      <returns>True if valid for the given country</returns>
      <requires description="countryId not valid" exception="T:System.ArgumentException" csharp="countryId &gt; 0" vb="countryId &gt; 0">countryId &gt; 0</requires>
      <exception cref="T:System.ArgumentException">countryId &lt;= 0</exception>
      <requires exception="T:System.ArgumentNullException" csharp="postalCode != null" vb="postalCode &lt;&gt; Nothing">postalCode != null</requires>
      <exception cref="T:System.ArgumentNullException">postalCode == null</exception>
    </member>
    <member name="T:NetSteps.Common.Globalization.PostalCodeData">
      <summary>
            Author: John Egbert
            Description: Class to return basic postal code data from Provider
            Created: 8/18/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.StateProvidenceData">
      <summary>
            Author: John Egbert
            Description: Class to return basic state data from Provider
            Created: 8/18/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.CountryData">
      <summary>
            Author: John Egbert
            Description: Class to return basic country data from Provider
            Created: 8/18/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.ICountriesProvider">
      <summary>
            Author: John Egbert
            Created: 08/18/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.IStatesProvidencesProvider">
      <summary>
            Author: John Egbert
            Created: 08/18/2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Globalization.Globalization.GetSystemTimeZones">
      <summary>
             http://www.danrigsby.com/blog/index.php/2008/08/24/timezone-vs-timezoneinfo-in-net/
            </summary>
      <returns />
    </member>
    <member name="T:NetSteps.Common.Globalization.IPostalCodeLookupProvider">
      <summary>
            Author: John Egbert
            Created: 08/18/2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Globalization.Translation">
      <summary>
            Author: John Egbert
            Description: Default implementation of ITermTranslationProvider which just returns the default value.
            Created: 08-18-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IConsultantEnrolledTokenValueProvider">
      <summary>
            Interface for ConsultantEnrolledTokenValueProvider which can be used as the service to be searched by Windsor.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IGeoCodeAddress">
      <summary>
            Interface to using when looking up Geocodes - JHE
            </summary>
    </member>
    <member name="T:NetSteps.Common.Models.IApplication">
      <summary>
            Common interface for Application.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Models.IApplication.AddApplicationRunningInstance(NetSteps.Common.Models.IApplicationRunningInstance)">
      <summary>
            Adds an <see cref="T:NetSteps.Common.Models.IApplicationRunningInstance" /> to the ApplicationRunningInstances collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.IApplicationRunningInstance" /> to add.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="M:NetSteps.Common.Models.IApplication.RemoveApplicationRunningInstance(NetSteps.Common.Models.IApplicationRunningInstance)">
      <summary>
            Removes an <see cref="T:NetSteps.Common.Models.IApplicationRunningInstance" /> from the ApplicationRunningInstances collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.IApplicationRunningInstance" /> to remove.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="P:NetSteps.Common.Models.IApplication.ApplicationID">
      <summary>
            The ApplicationID for this Application.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplication.Name">
      <summary>
            The Name for this Application.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplication.Description">
      <summary>
            The Description for this Application.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplication.Active">
      <summary>
            The Active for this Application.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplication.ApplicationRunningInstances">
      <summary>
            The ApplicationRunningInstances for this Application.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Models.IApplicationRunningInstance">
      <summary>
            Common interface for ApplicationRunningInstance.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplicationRunningInstance.ApplicationRunningInstanceID">
      <summary>
            The ApplicationRunningInstanceID for this ApplicationRunningInstance.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplicationRunningInstance.ApplicationID">
      <summary>
            The ApplicationID for this ApplicationRunningInstance.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplicationRunningInstance.MachineName">
      <summary>
            The MachineName for this ApplicationRunningInstance.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplicationRunningInstance.IpAddress">
      <summary>
            The IpAddress for this ApplicationRunningInstance.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplicationRunningInstance.StartDateUTC">
      <summary>
            The StartDateUTC for this ApplicationRunningInstance.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplicationRunningInstance.LastPingDateUTC">
      <summary>
            The LastPingDateUTC for this ApplicationRunningInstance.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.IApplicationRunningInstance.Application">
      <summary>
            The Application for this ApplicationRunningInstance.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Models.ICategory">
      <summary>
            Common interface for Category.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Models.ICategory.AddChildCategory(NetSteps.Common.Models.ICategory)">
      <summary>
            Adds an <see cref="T:NetSteps.Common.Models.ICategory" /> to the ChildCategories collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.ICategory" /> to add.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="M:NetSteps.Common.Models.ICategory.RemoveChildCategory(NetSteps.Common.Models.ICategory)">
      <summary>
            Removes an <see cref="T:NetSteps.Common.Models.ICategory" /> from the ChildCategories collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.ICategory" /> to remove.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="M:NetSteps.Common.Models.ICategory.AddTranslation(NetSteps.Common.Models.ICategoryTranslation)">
      <summary>
            Adds an <see cref="T:NetSteps.Common.Models.ICategoryTranslation" /> to the Translations collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.ICategoryTranslation" /> to add.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="M:NetSteps.Common.Models.ICategory.RemoveTranslation(NetSteps.Common.Models.ICategoryTranslation)">
      <summary>
            Removes an <see cref="T:NetSteps.Common.Models.ICategoryTranslation" /> from the Translations collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.ICategoryTranslation" /> to remove.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="P:NetSteps.Common.Models.ICategory.CategoryID">
      <summary>
            The CategoryID for this Category.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategory.ParentCategoryID">
      <summary>
            The ParentCategoryID for this Category.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategory.SortIndex">
      <summary>
            The SortIndex for this Category.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategory.SlotCount">
      <summary>
            The SlotCount for this Category.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategory.CategoryTypeID">
      <summary>
            The CategoryTypeID for this Category.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategory.CategoryNumber">
      <summary>
            The CategoryNumber for this Category.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategory.ChildCategories">
      <summary>
            The ChildCategories for this Category.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategory.Translations">
      <summary>
            The Translations for this Category.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Models.ICategoryTranslation">
      <summary>
            Common interface for CategoryTranslation.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryTranslation.CategoryTranslationID">
      <summary>
            The CategoryTranslationID for this CategoryTranslation.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryTranslation.CategoryID">
      <summary>
            The CategoryID for this CategoryTranslation.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryTranslation.LanguageID">
      <summary>
            The LanguageID for this CategoryTranslation.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryTranslation.Name">
      <summary>
            The Name for this CategoryTranslation.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryTranslation.HtmlContentID">
      <summary>
            The HtmlContentID for this CategoryTranslation.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Models.ICategoryType">
      <summary>
            Common interface for CategoryType.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Models.ICategoryType.AddCategory(NetSteps.Common.Models.ICategory)">
      <summary>
            Adds an <see cref="T:NetSteps.Common.Models.ICategory" /> to the Categories collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.ICategory" /> to add.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="M:NetSteps.Common.Models.ICategoryType.RemoveCategory(NetSteps.Common.Models.ICategory)">
      <summary>
            Removes an <see cref="T:NetSteps.Common.Models.ICategory" /> from the Categories collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.ICategory" /> to remove.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryType.CategoryTypeID">
      <summary>
            The CategoryTypeID for this CategoryType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryType.Name">
      <summary>
            The Name for this CategoryType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryType.TermName">
      <summary>
            The TermName for this CategoryType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryType.Description">
      <summary>
            The Description for this CategoryType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryType.Active">
      <summary>
            The Active for this CategoryType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ICategoryType.Categories">
      <summary>
            The Categories for this CategoryType.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Models.ILocalizationInfo">
      <summary>
            Defines localization information for accessing localized content.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ILocalizationInfo.CultureName">
      <summary>
            A predefined <see cref="T:System.Globalization.CultureInfo" /> name. CultureName is not case-sensitive.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.ILocalizationInfo.LanguageId">
      <summary>
            The LanguageId key in the Core database.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.ILocalizationInfoProvider">
      <summary>
            Provides the proper localization content per client
            </summary>
    </member>
    <member name="M:NetSteps.Common.Interfaces.ILocalizationInfoProvider.GetLocalizationInfo">
      <summary>
            Returns you the localized info object.
            </summary>
      <returns />
    </member>
    <member name="M:NetSteps.Common.Interfaces.ILogger.AttemptAtBlockedPage(System.String,System.String)">
      <summary>
            Used when the DistributorBackOffice.Controllers.BaseController.OnActionExecuting method intercepts a request for a blacklisted page
            </summary>
      <param name="url">Requested url</param>
      <param name="referringUrl">Referring url</param>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IReport">
      <summary>
            Author: Jordan Leung
            Created: 10-14-2011
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.ITermTranslationProvider">
      <summary>
            Provides access to term-translations.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Interfaces.ITermTranslationProvider.GetTerm(System.String,System.String)">
      <summary>
            Returns a localized term using the current language.
            </summary>
      <param name="termName" />
      <param name="defaultValue" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Interfaces.ITermTranslationProvider.GetTerm(System.Int32,System.String,System.String)">
      <summary>
            Returns a localized term using the specified language.
            </summary>
      <param name="languageId" />
      <param name="termName" />
      <param name="defaultValue" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Interfaces.ITermTranslationProvider.GetTerm(System.Int32,System.String,System.Object[],System.String)">
      <summary>
            Returns a localized term with args applied using the specified language.
            </summary>
      <param name="languageId" />
      <param name="termName" />
      <param name="args" />
      <param name="defaultValue" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Models.INote">
      <summary>
            Common interface for Note.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Models.INote.AddNotes1(NetSteps.Common.Models.INote)">
      <summary>
            Adds an <see cref="T:NetSteps.Common.Models.INote" /> to the Notes1 collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.INote" /> to add.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="M:NetSteps.Common.Models.INote.RemoveNotes1(NetSteps.Common.Models.INote)">
      <summary>
            Removes an <see cref="T:NetSteps.Common.Models.INote" /> from the Notes1 collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.INote" /> to remove.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="P:NetSteps.Common.Models.INote.NoteID">
      <summary>
            The NoteID for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.NoteTypeID">
      <summary>
            The NoteTypeID for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.UserID">
      <summary>
            The UserID for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.ParentID">
      <summary>
            The ParentID for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.DateCreatedUTC">
      <summary>
            The DateCreatedUTC for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.Subject">
      <summary>
            The Subject for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.NoteText">
      <summary>
            The NoteText for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.DataVersion">
      <summary>
            The DataVersion for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.ModifiedByUserID">
      <summary>
            The ModifiedByUserID for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.IsInternal">
      <summary>
            The IsInternal for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.Note1">
      <summary>
            The Note1 for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.NoteType">
      <summary>
            The NoteType for this Note.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INote.Notes1">
      <summary>
            The Notes1 for this Note.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Models.INoteType">
      <summary>
            Common interface for NoteType.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Models.INoteType.AddNote(NetSteps.Common.Models.INote)">
      <summary>
            Adds an <see cref="T:NetSteps.Common.Models.INote" /> to the Notes collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.INote" /> to add.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="M:NetSteps.Common.Models.INoteType.RemoveNote(NetSteps.Common.Models.INote)">
      <summary>
            Removes an <see cref="T:NetSteps.Common.Models.INote" /> from the Notes collection.
            </summary>
      <param name="item">The <see cref="T:NetSteps.Common.Models.INote" /> to remove.</param>
      <requires exception="T:System.ArgumentNullException" csharp="item != null" vb="item &lt;&gt; Nothing">item != null</requires>
      <exception cref="T:System.ArgumentNullException">item == null</exception>
    </member>
    <member name="P:NetSteps.Common.Models.INoteType.NoteTypeID">
      <summary>
            The NoteTypeID for this NoteType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INoteType.Name">
      <summary>
            The Name for this NoteType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INoteType.TermName">
      <summary>
            The TermName for this NoteType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INoteType.Description">
      <summary>
            The Description for this NoteType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INoteType.Active">
      <summary>
            The Active for this NoteType.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Models.INoteType.Notes">
      <summary>
            The Notes for this NoteType.
            </summary>
    </member>
    <member name="T:NetSteps.Common.EldResolver.DefaultEldResolver">
      <summary>
            The default ELD resolver.
            </summary>
    </member>
    <member name="T:NetSteps.Common.EldResolver.IEldResolver">
      <summary>
            The environment level domain resolver interface.
            </summary>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolver.EldEncode(System.UriBuilder)">
      <summary>
            Adds the Environment Level Domain (ELD) to a URI.
            </summary>
      <param name="uriBuilder">A <see cref="T:System.UriBuilder" /> containing the base host.</param>
      <returns>The <see cref="T:System.UriBuilder" /> with the ELD-encoded host.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uriBuilder != null" vb="uriBuilder &lt;&gt; Nothing">uriBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">uriBuilder == null</exception>
      <requires exception="T:System.ArgumentException" csharp="uriBuilder.Host != null" vb="uriBuilder.Host &lt;&gt; Nothing">uriBuilder.Host != null</requires>
      <exception cref="T:System.ArgumentException">uriBuilder.Host == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.IEldResolver.EldDecode(System.UriBuilder)">
      <summary>
            Removes the Environment Level Domain (ELD) from a URI.
            </summary>
      <param name="uriBuilder">A <see cref="T:System.UriBuilder" /> containing the ELD-encoded host.</param>
      <returns>The <see cref="T:System.UriBuilder" /> with the decoded host.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uriBuilder != null" vb="uriBuilder &lt;&gt; Nothing">uriBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">uriBuilder == null</exception>
      <requires exception="T:System.ArgumentException" csharp="uriBuilder.Host != null" vb="uriBuilder.Host &lt;&gt; Nothing">uriBuilder.Host != null</requires>
      <exception cref="T:System.ArgumentException">uriBuilder.Host == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.DefaultEldResolver.#ctor(System.String)">
      <summary>
            Constructs a <see cref="T:NetSteps.Common.EldResolver.DefaultEldResolver" /> using the specified Environment Level Domain (ELD).
            </summary>
      <param name="eld">Environment Level Domain (i.e. ".client.prod.netsteps.local").</param>
      <requires exception="T:System.ArgumentNullException" csharp="eld != null" vb="eld &lt;&gt; Nothing">eld != null</requires>
      <exception cref="T:System.ArgumentNullException">eld == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.DefaultEldResolver.EldEncode(System.UriBuilder)">
      <summary>
            Adds the Environment Level Domain (ELD) to a URI.
            </summary>
      <param name="uriBuilder">A <see cref="T:System.UriBuilder" /> containing the base host.</param>
      <returns>The <see cref="T:System.UriBuilder" /> with the ELD-encoded host.</returns>
      <requires inheritedFrom="M:NetSteps.Common.EldResolver.IEldResolver.EldEncode(System.UriBuilder)" inheritedFromTypeName="IEldResolver" exception="T:System.ArgumentNullException" csharp="uriBuilder != null" vb="uriBuilder &lt;&gt; Nothing">uriBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">uriBuilder == null</exception>
      <requires inheritedFrom="M:NetSteps.Common.EldResolver.IEldResolver.EldEncode(System.UriBuilder)" inheritedFromTypeName="IEldResolver" exception="T:System.ArgumentException" csharp="uriBuilder.Host != null" vb="uriBuilder.Host &lt;&gt; Nothing">uriBuilder.Host != null</requires>
      <exception cref="T:System.ArgumentException">uriBuilder.Host == null</exception>
    </member>
    <member name="M:NetSteps.Common.EldResolver.DefaultEldResolver.EldDecode(System.UriBuilder)">
      <summary>
            Removes the Environment Level Domain (ELD) from a URI.
            </summary>
      <param name="uriBuilder">A <see cref="T:System.UriBuilder" /> containing the ELD-encoded host.</param>
      <returns>The <see cref="T:System.UriBuilder" /> with the decoded host.</returns>
      <requires inheritedFrom="M:NetSteps.Common.EldResolver.IEldResolver.EldDecode(System.UriBuilder)" inheritedFromTypeName="IEldResolver" exception="T:System.ArgumentNullException" csharp="uriBuilder != null" vb="uriBuilder &lt;&gt; Nothing">uriBuilder != null</requires>
      <exception cref="T:System.ArgumentNullException">uriBuilder == null</exception>
      <requires inheritedFrom="M:NetSteps.Common.EldResolver.IEldResolver.EldDecode(System.UriBuilder)" inheritedFromTypeName="IEldResolver" exception="T:System.ArgumentException" csharp="uriBuilder.Host != null" vb="uriBuilder.Host &lt;&gt; Nothing">uriBuilder.Host != null</requires>
      <exception cref="T:System.ArgumentException">uriBuilder.Host == null</exception>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IDefaultImplementationOverride">
      <summary>
            Author: John Egbert
            Description: Used to indicated a Interface as the default for auto-hookup of IoC. Add to implementing
            classes to indicate a new class should be used as the Default implementation replacing the previous
            Default implementation class marked with IDefaultImplementation.
            Created: 01-31-2011
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.ISortIndex">
      <summary>
            Author: John Egbert
            Description: Interface to access a SortIndex property.
            Created: 06-24-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IKeyName`2">
      <summary>
            Author: John Egbert
            Description: Interface to provide A generic way to list objects (read only).
            Created: 05-06-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IDefaultImplementation">
      <summary>
            Author: John Egbert
            Description: Used to indicated a Interface as the default for auto-hookup of IoC.
            Created: 03-18-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IListValue">
      <summary>
            Author: John Egbert
            Description: Interface to provide A generic replacement for the ListValue table and objects.
            Created: 05-04-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IPrimaryKeyInfo`2">
      <summary>
            Author: John Egbert
            Description: For use with Business Objects to read an objects single primary key.
            Created: 03-11-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IPrimaryKey`1">
      <summary>
            Author: John Egbert
            Description: For use with Business Objects to read an objects single primary key.
            Created: 03-11-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.INotifyPropertyChanging">
      <summary>
            Author: John Egbert
            Description: Interface for an Event to fire when a new property value has been set
            but before the value has been set to the property. Gives an opportunity to do logic injection.
            Created: 03-05-2010
            </summary>
    </member>
    <member name="E:NetSteps.Common.Interfaces.INotifyPropertyChanging.PropertyChanging">
      <summary>
            Occurs before a property value changes.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IValidatedModel">
      <summary>
            Author: John Egbert
            Description: For use with Business Objects that have validation.
            Created: 03-05-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.IUser">
      <summary>
            Author: John Egbert
            Created: 02-05-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Interfaces.PrimaryKeyInfo`2">
      <summary>
            Author: John Egbert
            Created: 08/18/2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.IO.GetThumbnailFromFileType(System.String)">
      <summary>
            Remember to add the root path to these images to the return value. - JHE
            </summary>
      <param name="fileName" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.IO.FileExists(System.String)">
      <summary>
            Determines if a file exists
            </summary>
      <param name="fileName">File name</param>
      <returns>true if it exists, false otherwise</returns>
    </member>
    <member name="M:NetSteps.Common.IO.GetFileContents(System.String)">
      <summary>
            Gets a files' contents
            </summary>
      <param name="fileName">File name</param>
      <returns>a string containing the file's contents</returns>
    </member>
    <member name="M:NetSteps.Common.IO.FileSerialize(System.Object,System.String)">
      <summary>
            Serialize the object to a file
            </summary>
      <param name="obj">Object to be serialized.Ensure that is Serializable !</param>
      <param name="filePath">File( with the entire file path) where the object will be serialized to</param>
      <returns>True on successful serialization.</returns>
    </member>
    <member name="M:NetSteps.Common.IO.FileDeSerialize``1(System.String)">
      <summary>
            Deserializes a binary formatted object.
            </summary>
      <param name="filePath">Full path of the file</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="T:NetSteps.Common.Reflection.CopyProperties">
      <summary>
            Author: John Egbert
            Description: Method to copy value properties from 1 object to another using reflection and dynamic code.
            This is about 10X faster than the reflection only method when more that 1 call for specified
            same types is called.
            Taken from: http://weblogs.asp.net/gunnarpeipman/archive/2010/02/03/performance-using-dynamic-code-to-copy-property-values-of-two-objects.aspx
            Created: 03-01-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Reflection.CopyProperties.CopyWithDom``2(``0,``1)">
      <summary>
            Method to copy value properties from 1 object to another using reflection and dynamic code.
            This is about 10X faster than the reflection only method when more that 1 call for specified
            same types is called. - JHE
            </summary>
      <typeparam name="T" />
      <typeparam name="TU" />
      <param name="source" />
      <param name="target" />
    </member>
    <member name="P:NetSteps.Common.Threading.DispatcherTimerAction.Action">
      <summary>
            uncomment this to see when the DispatcherTimer2 is collected
            if you remove  t.Tick -= _onTimeout; line from _onTimeout method
            you will see that the timer is never collected
            </summary>
    </member>
    <member name="T:NetSteps.Common.Threading.ThreadHelpers">
      <summary>
            Author: John Egbert
            Description: Some helper methods when dealing with threads/threading.
            Created: 02-14-2011
            </summary>
    </member>
    <member name="P:NetSteps.Common.Threading.TimerAction.Action">
      <summary>
            uncomment this to see when the DispatcherTimer2 is collected
            if you remove  t.Tick -= _onTimeout; line from _onTimeout method
            you will see that the timer is never collected
            </summary>
    </member>
    <member name="T:NetSteps.Common.EntityInfoCache">
      <summary>
            Author: John Egbert
            Description: Class to cache some data for use with Entity Framework.
            Created: 03-12-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Utility.ExecutionContext">
      <summary>
            Author: John Egbert
            Description: Class to get the details of the current ExecutionContext in an application.
            Used to log usage statics to the database.
            Created: 03-11-2010
            Example Usage:
                ExceptionHandledDataAction.Run(new ExecutionContext(this), () =&gt;
                {
                    // Code to RUN goes here. 
                });
            </summary>
    </member>
    <member name="T:NetSteps.Common.Utility.GoogleAnalyticsHelper">
      <summary>
            Author: John Egbert
            Description: Helper class to get GoogleAnalyticsScript
            Created: 03-25-2011
            </summary>
    </member>
    <member name="T:NetSteps.Common.OperationTimer">
      <summary>
            Author: John Egbert
            Description: Class to test performance of operation by measuring how long it takes to perform a set of actions
            and output the basic stats of the operation.
            Created: 02-24-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.OperationDebugTimer">
      <summary>
            Author: Daniel Stafford
            Description: Simplified version of the OperationTimer class that automatically prints out the results to the debug window
            Created: 08-20-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Utility.OutlookContactsParseHelper">
      <summary>
            Author: John Egbert
            Description: Taken from Silverlight project to import Contact exported from 'Outlook Contact Export CSV' formatted doc. 
            Created: 12-17-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Utility.PredicateBuilder">
      <summary>
            Author: John Egbert
            Description: Taken from http://www.albahari.com/nutshell/predicatebuilder.aspx
            Created: 07-06-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Random">
      <summary>
            Author: John Egbert
            Description: Wrapper class for the Random class to extend it's functionality. 
            Created: 02-05-2009
            </summary>
    </member>
    <member name="M:NetSteps.Common.Random.GetDateTime(System.DateTime,System.DateTime)">
      <summary>
            This function is not perfect but works ok for now - JHE
            </summary>
      <param name="minValue" />
      <param name="maxValue" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Reflection.Reflection.PropertyExists(System.Type,System.String,System.Action{System.Type,System.Reflection.PropertyInfo})">
      <summary>
            Finds a property (can optionally search child objects for the property as well, i.e. Order.OrderType.Name)
            </summary>
      <param name="t" />
      <param name="propertyKeys" />
      <param name="actionOnEachProperty" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Reflection.Reflection.CopyPropertiesDynamic``2(``0,``1)">
      <summary>
            Method to copy value properties from 1 object to another using reflection and dynamic code.
            This is about 10X faster than the reflection only method when more that 1 call for specified
            same types is called. - JHE
            </summary>
      <typeparam name="T" />
      <typeparam name="TU" />
      <param name="source" />
      <param name="target" />
    </member>
    <member name="T:NetSteps.Common.Serialization.ObjectCloner">
      <summary>
            Author: John Egbert
            Description: Clones an object by using the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />.
            The object to be cloned must be serializable.
            Created: 01-20-2009
            </summary>
    </member>
    <member name="M:NetSteps.Common.Serialization.ObjectCloner.CloneViaDataContractSerialization``1(``0)">
      <summary>
            http://blog.vascooliveira.com/how-to-duplicate-entity-framework-objects/ - JHE
            </summary>
      <typeparam name="T" />
      <param name="obj" />
      <returns />
    </member>
    <member name="P:NetSteps.Common.RegularExpressions.UncPath">
      <summary>
            Validates UNC Paths, with or without files. Does not validate on shares ($) or local files (c:\xxx). 
            http://regexlib.com/REDetails.aspx?regexp_id=865
            </summary>
    </member>
    <member name="P:NetSteps.Common.RegularExpressions.LocalDriveInPath">
      <summary>
            c:\b_card.jpg
            </summary>
    </member>
    <member name="T:NetSteps.Common.Utility.VariableParser">
      <summary>
            Author: John Egbert
            Description: Helpers class to parse variable to strongly typed values.
            Created: 04-19-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.DataAnnotationHelpers">
      <summary>
            Author: John Egbert
            Description: Helper methods to work with System.ComponentModel.DataAnnotations
            Created: 03-05-2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.DataAnnotationHelpers.GetPropertiesWithDataAnnotationAttributes(System.Object)">
      <summary>
            http://www.davidmuto.com/Blog.muto/View/validation-with-dataannotations
            </summary>
      <param name="instance" />
      <returns />
    </member>
    <member name="T:NetSteps.Common.Validation.EntityValidationRules">
      <summary>
            Author: John Egbert
            Description: Helper class to work with System.ComponentModel.DataAnnotations for validation.
            Example Usage:  EntityValidationRules rules = new EntityValidationRules(archive);
                            if (!rules.IsValid)
                                throw new Exception(rules.GetBrokenRules(e2.PropertyName).First().FullErrorMessage);
            Created: 03-05-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.BrokenRule">
      <summary>
            Object representing a broken validation rule
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.BrokenRule.#ctor">
      <summary>
            Default parameterless constructor used by Reflection for Soap Serialization
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.BrokenRule.#ctor(NetSteps.Common.Validation.NetTiers.ValidationRuleInfo)">
      <summary>
            Creates a instance of the object.
            </summary>
      <param name="rule">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo" /> containing the details about the rule that was broken.</param>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.BrokenRule.RuleName">
      <summary>
            Provides access to the name of the broken rule.
            </summary>
      <value>The name of the rule.</value>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.BrokenRule.Description">
      <summary>
            The description of the broken rule.
            </summary>
      <value>The description of the rule.</value>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.BrokenRule.Property">
      <summary>
            The name of the property affected by the broken rule.
            </summary>
      <value>The property affected by the rule.</value>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.BrokenRulesList">
      <summary>
            A List of broken rules.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.BrokenRulesList.GetFirstBrokenRule(System.String)">
      <summary>
            Returns the firstRule <see cref="T:NetSteps.Common.Validation.NetTiers.BrokenRule" /> object
            corresponding to the specified property.
            </summary>
      <param name="property">The name of the property affected by the rule.</param>
      <returns>
            The firstRule BrokenRule object corresponding to the specified property, or null if 
            there are no rules defined for the property.
            </returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.BrokenRulesList.#ctor">
      <summary>
            Internal constructors
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.BrokenRulesList.Add(NetSteps.Common.Validation.NetTiers.ValidationRuleInfo)">
      <summary>
            Add a broken rule to the list
            </summary>
      <param name="rule">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo" /> object containing the details about the rule.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.BrokenRulesList.Remove(NetSteps.Common.Validation.NetTiers.ValidationRuleInfo)">
      <summary>
            Removes a broken rule from the list
            </summary>
      <param name="rule">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo" /> object containing the details about the rule.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.BrokenRulesList.GetPropertyErrorDescriptions(System.String)">
      <summary>
            Returns a string containing all of the broken rule descriptions for the specified property.
            </summary>
      <param name="propertyName">The name of the property to get the errors for.</param>
      <returns>String of the error descriptions</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.BrokenRulesList.ToString">
      <summary>
            Returns the description of each broken rule separated by a new line.
            </summary>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.CommonRules">
      <summary>
            Static class that contains common validation rules.  Each rule conforms to the <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> delegate.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.NotNull(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Rule that does not allow a property value to be null
            </summary>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
      <returns>Returns true if the property value is not null; false otherwise.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.StringRequired(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Rule ensuring a String value contains one or more
            characters.
            </summary>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
      <remarks>
            This implementation uses late binding, and will only work
            against String property values.
            </remarks>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.StringMaxLength(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Rule ensuring a String value doesn't exceed
            a specified length.
            </summary>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
      <remarks>
            This implementation uses late binding, and will only work
            against String property values.
            </remarks>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.MaxWords(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Summary description for MaxWords.
            </summary>
      <param name="target" />
      <param name="e" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.RegexIsMatch(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Rule ensuring a String value is matching
            a specified regular expression.
            </summary>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated, must be of type RegexRuleArgs</param>
      <returns>False if the rule is broken; true otherwise.</returns>
      <remarks>
            This implementation uses late binding, and will only work
            against String property values.
            </remarks>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.LessThanValue``1(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Generic rule that determines if an object's property is less than a particular value.
            </summary>
      <typeparam name="T">Datatype of the property to validate</typeparam>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.LessThanOrEqualToValue``1(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Generic rule that determines if an object's property is less than or equal to a particular value.
            </summary>
      <typeparam name="T">Datatype of the property to validate</typeparam>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.EqualsValue``1(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Generic rule that determines if an object's property is equal to a particular value.
            </summary>
      <typeparam name="T">Datatype of the property to validate</typeparam>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.GreaterThanValue``1(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Generic rule that determines if an object's property is greater than a particular value.
            </summary>
      <typeparam name="T">Datatype of the property to validate</typeparam>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.GreaterThanOrEqualToValue``1(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Generic rule that determines if an object's property is greater than or equal to a particular value.
            </summary>
      <typeparam name="T">Datatype of the property to validate</typeparam>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.CompareValues``1(System.Object,NetSteps.Common.Validation.NetTiers.CommonRules.CompareValueRuleArgs{``0},NetSteps.Common.Validation.NetTiers.CommonRules.CompareType)">
      <summary>
            Private method that compares a property value with a specified value.
            </summary>
      <typeparam name="T">Datatype of the property to validate.</typeparam>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <param name="compareType">
        <see cref="T:NetSteps.Common.Validation.NetTiers.CommonRules.CompareType" /> defining the type of comparison that will be made.</param>
      <returns />
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.InRange``1(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Generic rule that determines if an object's property is within a specified range.
            </summary>
      <typeparam name="T">Datatype of the property to validate.  Must implement <see cref="T:System.IComparable`1" />.</typeparam>
      <param name="target">Object containing the data to validate.</param>
      <param name="e">
        <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> containing the information about the object to be validated.</param>
      <returns>False if the rule is broken; true otherwise.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.ValidDateRange(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Private method that compares a property value with a specified value.
            </summary>
      <param name="target">Object containing the data to validate.</param>
      <returns />
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.CommonRules.MaxLengthRuleArgs">
      <summary>
            Class used with the <see cref="M:NetSteps.Common.Validation.NetTiers.CommonRules.StringMaxLength(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)" />.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs">
      <summary>
            Object that provides additional information about an validation rule.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs.#ctor(System.String)">
      <summary>
            Creates an instance of the object
            </summary>
      <param name="propertyName">The name of the property to be validated.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs.ToString">
      <summary>
            Return a string representation of the object.
            </summary>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs.Tag">
      <summary>
            Gets or sets the tag.
            </summary>
      <value>The tag.</value>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs.PropertyName">
      <summary>
            The name of the property to be validated.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs.Description">
      <summary>
            Detailed description of why the rule was invalidated.  This should be set from the method handling the rule.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs.ErrorMessage">
      <summary>
            The Regular expression that the string have to match.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="propertyName">Property to validate</param>
      <param name="maxLength">Max length of the property</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.MaxLengthRuleArgs.ToString">
      <summary>
            Return a string representation of the object.
            </summary>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.CommonRules.MaxLengthRuleArgs.MaxLength">
      <summary>
            Maximum length of the string property.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.CommonRules.MaxWordsRuleArgs">
      <summary>
            Summary description for MaxWordsRuleArgs.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.MaxWordsRuleArgs.#ctor(System.String,System.Int32)">
      <summary>
            Creates a new instance of the MaxWordsRuleArgs class.
            </summary>
      <param name="propertyName" />
      <param name="maxLength" />
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.MaxWordsRuleArgs.ToString">
      <summary>
            Return a string representation of the object.
            </summary>
      <returns />
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.CommonRules.MaxWordsRuleArgs.MaxLength">
      <summary>
            Gets the value of the MaxLength property.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.CommonRules.RegexRuleArgs">
      <summary>
            Class used with the <see cref="M:NetSteps.Common.Validation.NetTiers.CommonRules.RegexIsMatch(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)" />.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.RegexRuleArgs.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the RegexRuleArgs class.
            </summary>
      <param name="propertyName">Property to validate</param>
      <param name="expression">The Regular expression that the property have to match</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.RegexRuleArgs.ToString">
      <summary>
            Return a string representation of the object.
            </summary>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.CommonRules.RegexRuleArgs.Expression">
      <summary>
            The Regular expression that the string have to match.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.CommonRules.CompareType">
      <summary>
            Enum indicating the type of comparison that will be made.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.CommonRules.CompareValueRuleArgs`1">
      <summary>
            Class used with the <see cref="M:NetSteps.Common.Validation.NetTiers.CommonRules.CompareValues``1(System.Object,NetSteps.Common.Validation.NetTiers.CommonRules.CompareValueRuleArgs{``0},NetSteps.Common.Validation.NetTiers.CommonRules.CompareType)" /> rules.
            </summary>
      <typeparam name="T" />
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.CompareValueRuleArgs`1.#ctor(System.String,`0)">
      <summary>
            Constructor
            </summary>
      <param name="propertyName">Name of the property to be validated.</param>
      <param name="compareValue">The value to be compared against the property.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.CompareValueRuleArgs`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.CommonRules.CompareValueRuleArgs`1.CompareValue">
      <summary>
            Value to be compared against an object's property.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.CommonRules.Range`1">
      <summary>
            Class used to do a range comparison on a property.
            </summary>
      <typeparam name="T">Datatype of the property being validated.</typeparam>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.Range`1.#ctor(`0,`0)">
      <summary>
            Creates a new instance of the <see cref="T:Range" /> class.
            </summary>
      <param name="minValue">The minimum value of the property.</param>
      <param name="maxValue">The maximum value of the property.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.Range`1.Contains(`0)">
      <summary>
            Compares the specified value with the <see cref="P:NetSteps.Common.Validation.NetTiers.CommonRules.Range`1.MinValue" /> and <see cref="P:NetSteps.Common.Validation.NetTiers.CommonRules.Range`1.MaxValue" />
            to determine if the value is within the range.
            </summary>
      <param name="value">The value to find within the current range</param>
      <returns>True if the value is within the range (inclusive); False otherwise.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.Range`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.CommonRules.Range`1.MinValue">
      <summary>
            The minimum value in the range.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.CommonRules.Range`1.MaxValue">
      <summary>
            The maximum value in the range.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.CommonRules.RangeRuleArgs`1">
      <summary>
            Validation Rule Argument class
            </summary>
      <typeparam name="T">Datatype of the property being validated.</typeparam>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.RangeRuleArgs`1.#ctor(System.String,`0,`0)">
      <summary>
            Creates a new instance of the <see cref="T:RangeRuleArgs" /> class.
            </summary>
      <param name="propertyName">Name of the property to be validated.</param>
      <param name="minValue">The minimum value of the property.</param>
      <param name="maxValue">The maximum value of the property.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.RangeRuleArgs`1.#ctor(System.String,NetSteps.Common.Validation.NetTiers.CommonRules.Range{`0})">
      <summary>
            Creates a new instance of the <see cref="T:RangeRuleArgs" /> class.
            </summary>
      <param name="propertyName">Name of the property to be validated.</param>
      <param name="range">
        <see cref="T:Range" /> object containing the range of valid values for the property.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.CommonRules.RangeRuleArgs`1.ToString">
      <summary>
            Returns a string representation of the object.
            </summary>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.CommonRules.RangeRuleArgs`1.Range">
      <summary>
            Returns the <see cref="T:Range{T}" /> object associated with this instance.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.ValidationRuleHandler">
      <summary>
            Delegate providing the signature of all methods that will process validation rules.
            </summary>
      <remarks>
        <para>
            The method handler should set the Description attribute of the 
            <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> parameter so that a meaningful
            error is returned.
            </para>
        <para>
            If the data is valid, the method must return true.  If the data is invalid,
            the Description should be set the false should be returned.
            </para>
      </remarks>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo">
      <summary>
            Object representing a validation rule for an object
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo.ToString">
      <summary>
            Returns a text representation of the rule which is the <see cref="P:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo.RuleName" />.
            </summary>
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo.#ctor(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleHandler,System.String)">
      <summary>
            Creates and initializes the rule.
            </summary>
      <param name="target">Object reference containing the data to validate.</param>
      <param name="handler">The address of the method implementing <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleHandler" />.</param>
      <param name="propertyName">The name of the property to which the rule applies.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo.#ctor(System.Object,NetSteps.Common.Validation.NetTiers.ValidationRuleHandler,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Creates and initializes the rule.
            </summary>
      <param name="target">Object reference containing the data to validate.</param>
      <param name="handler">The address of the method implementing <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleHandler" />.</param>
      <param name="args">A <see cref="P:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo.ValidationRuleArgs" /> object.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo.Invoke">
      <summary>
            Invokes the rule to validate the data.
            </summary>
      <returns>True if the data is valid, False if the data is invalid.</returns>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo.RuleName">
      <summary>
            Gets the name of the rule.
            </summary>
      <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the <see cref="T:NetSteps.Common.Validation.NetTiers.BrokenRulesList" />.
            </remarks>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo.ValidationRuleArgs">
      <summary>
            Returns information about the property that is associated with the rule.
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.NetTiers.ValidationRules">
      <summary>
            Maintains the list of validation rules associated with an object
            </summary>
    </member>
    <member name="F:NetSteps.Common.Validation.NetTiers.ValidationRules._brokenRules">
      <summary>
            List of rules that have not passed validation
            </summary>
    </member>
    <member name="F:NetSteps.Common.Validation.NetTiers.ValidationRules._target">
      <summary>
            Object associated with this list of rules.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.#ctor(System.Object)">
      <summary>
            Creates an instance of the class and associates the target.
            </summary>
      <param name="businessEntity">Target</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.GetPropertyRules(System.String)">
      <summary>
            Returns a list of <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleInfo" /> objects for a specified property.
            </summary>
      <param name="propertyName">The name of the property to get the rules for.</param>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> containing all of the rules for the specified property.</returns>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.AddRule(NetSteps.Common.Validation.NetTiers.ValidationRuleHandler,System.String)">
      <summary>
            Adds a rule to the list of validated rules.
            </summary>
      <remarks>
        <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleHandler" /> delegate.
            </para>
      </remarks>
      <param name="handler">The method that implements the rule.</param>
      <param name="propertyName">
            The name of the property on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.AddRule(NetSteps.Common.Validation.NetTiers.ValidationRuleHandler,NetSteps.Common.Validation.NetTiers.ValidationRuleArgs)">
      <summary>
            Adds a rule to the list of validated rules.
            </summary>
      <remarks>
        <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleHandler" /> delegate.
            </para>
      </remarks>
      <param name="handler">The method that implements the rule.</param>
      <param name="args">
            A <see cref="T:NetSteps.Common.Validation.NetTiers.ValidationRuleArgs" /> object specifying the property name and other arguments
            passed to the rule method
            </param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.ValidateRuleList(System.Collections.Generic.List{NetSteps.Common.Validation.NetTiers.ValidationRuleInfo})">
      <summary>
            Validates a list of rules.
            </summary>
      <remarks>
            This method calls the Invoke method on each rule in the list.  If the rule fails, it 
            is added to the <see cref="P:NetSteps.Common.Validation.NetTiers.ValidationRules.BrokenRulesList" /></remarks>
      <param name="ruleList">List of rules to validate.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.ValidateRules(System.String)">
      <summary>
            Validates all rules for a property
            </summary>
      <param name="propertyName">Name of the property to validate.</param>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.ValidateRules">
      <summary>
            Validate all the rules for all properties.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.GetBrokenRules">
      <summary>
            Return a <see cref="P:NetSteps.Common.Validation.NetTiers.ValidationRules.BrokenRulesList" /> that contains all of the invalid rules.
            </summary>
    </member>
    <member name="M:NetSteps.Common.Validation.NetTiers.ValidationRules.Clear">
      <summary>
            	Clear the rules list.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRules.Target">
      <summary>
            Object associated with this list of rules.
            </summary>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRules.BrokenRulesList">
      <summary>
            List of <see cref="T:NetSteps.Common.Validation.NetTiers.BrokenRule" /> objects
            </summary>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRules.RulesList">
      <summary>
            Read-only list of validation rules
            </summary>
    </member>
    <member name="P:NetSteps.Common.Validation.NetTiers.ValidationRules.IsValid">
      <summary>
            Returns a value indicating whether the <see cref="P:NetSteps.Common.Validation.NetTiers.ValidationRules.Target" /> object is valid.
            </summary>
      <remarks>If one or more rules are broken, the object is assumed to be invalid and 
            false is return.  Otherwise, True is returned.
            </remarks>
      <returns>A value indicating whether any rules are broken.</returns>
    </member>
    <member name="T:NetSteps.Common.Validation.PhoneValidator">
      <summary>
            Author: John Egbert
            Created: 04/29-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.Validation.ValidationMessage">
      <summary>
            Author: John Egbert
            Description: A basic class for encapsulating a validation error message
            Created: 03-05-2010
            </summary>
    </member>
    <member name="T:NetSteps.Common.ModuleWireup">
      <summary>
            Wireup command called at bootstrap time by the wireup coordinator.
            </summary>
    </member>
    <member name="M:NetSteps.Common.ModuleWireup.PerformWireup(NetSteps.Encore.Core.Wireup.IWireupCoordinator)">
      <summary>
            Wires this module.
            </summary>
    </member>
    <member name="T:NetSteps.Common.XML.DynamicXElement">
      <summary>
            Dynamic wrapper for XML to be able to use the DLR to parse XML
            Author: Daniel Stafford
            Date: 8/2/2010
            </summary>
    </member>
    <member name="M:NetSteps.Common.XML.DynamicXElement.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>
            Set an attribute on an element (i.e. iso.PostalCodeValidation().Enabled = true;)
            </summary>
      <param name="binder" />
      <param name="value" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.XML.DynamicXElement.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Get an attribute on an element (i.e. string enabled = iso.PostalCodeValidation().Enabled)
            </summary>
      <param name="binder" />
      <param name="result" />
      <returns>Always returns a string of the value of the attribute</returns>
    </member>
    <member name="M:NetSteps.Common.XML.DynamicXElement.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>
            Handle explicit casting of DynamicXElement to some other value
            </summary>
      <param name="binder" />
      <param name="result" />
      <returns />
    </member>
    <member name="M:NetSteps.Common.XML.DynamicXElement.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>
            Uses method notation to:
            1) retrieve child elements (i.e. iso.PostalCodeValidation())
            2) set child elements (i.e. iso.PostalCodeValidation("Content"))
            3) add child elements (i.e. iso.Add(new XElement("Child"))
            4) invoke xpath (i.e. iso.XPath("//element"))
            </summary>
      <param name="binder" />
      <param name="args" />
      <param name="result" />
      <returns>A DynamicXElement object containing the specified node(s)</returns>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.IndexOf(`1)">
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &lt; this.Count" vb="result &lt; Me.Count">result &lt; this.Count</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.Insert(System.Int32,`1)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt;= this.Count" vb="index &lt;= Me.Count">index &lt;= this.Count</requires>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.RemoveAt(System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="this.Count == old(this.Count) - 1" vb="Me.Count = old(Me.Count) - 1">this.Count == old(this.Count) - 1</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.Add(`1)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Add(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &gt;= old(this.Count)" vb="Me.Count &gt;= old(Me.Count)">this.Count &gt;= old(this.Count)</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.Clear">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Clear" inheritedFromTypeName="ICollection" csharp="this.Count == 0" vb="Me.Count = 0">this.Count == 0</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.Contains(`1)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Contains(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt; 0" vb="result Implies Me.Count &gt; 0">!result || this.Count &gt; 0</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.CopyTo(`1[],System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &gt;= 0" vb="arrayIndex &gt;= 0">arrayIndex &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &lt;= array.Length - this.Count" vb="arrayIndex &lt;= array.Length - Me.Count">arrayIndex &lt;= array.Length - this.Count</requires>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.Remove(`1)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Remove(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &lt;= old(this.Count)" vb="Me.Count &lt;= old(Me.Count)">this.Count &lt;= old(this.Count)</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Remove(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt;= old(this.Count - 1)" vb="result Implies Me.Count &gt;= old(Me.Count - 1)">!result || this.Count &gt;= old(this.Count - 1)</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.AbstractList`2.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="P:NetSteps.Common.Collections.AbstractList`2.Item(System.Int32)">
      <getter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </getter>
      <setter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </setter>
    </member>
    <member name="P:NetSteps.Common.Collections.AbstractList`2.Count">
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.get_Count" inheritedFromTypeName="ICollection" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.IndexOf(`1)">
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &lt; this.Count" vb="result &lt; Me.Count">result &lt; this.Count</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.Insert(System.Int32,`1)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt;= this.Count" vb="index &lt;= Me.Count">index &lt;= this.Count</requires>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.RemoveAt(System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="this.Count == old(this.Count) - 1" vb="Me.Count = old(Me.Count) - 1">this.Count == old(this.Count) - 1</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.Add(`1)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Add(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &gt;= old(this.Count)" vb="Me.Count &gt;= old(Me.Count)">this.Count &gt;= old(this.Count)</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.Clear">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Clear" inheritedFromTypeName="ICollection" csharp="this.Count == 0" vb="Me.Count = 0">this.Count == 0</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.Contains(`1)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Contains(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt; 0" vb="result Implies Me.Count &gt; 0">!result || this.Count &gt; 0</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.CopyTo(`1[],System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &gt;= 0" vb="arrayIndex &gt;= 0">arrayIndex &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &lt;= array.Length - this.Count" vb="arrayIndex &lt;= array.Length - Me.Count">arrayIndex &lt;= array.Length - this.Count</requires>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.Remove(`1)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Remove(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &lt;= old(this.Count)" vb="Me.Count &lt;= old(Me.Count)">this.Count &lt;= old(this.Count)</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Remove(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt;= old(this.Count - 1)" vb="result Implies Me.Count &gt;= old(Me.Count - 1)">!result || this.Count &gt;= old(this.Count - 1)</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:NetSteps.Common.Collections.ConcreteList`2.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="P:NetSteps.Common.Collections.ConcreteList`2.Item(System.Int32)">
      <getter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </getter>
      <setter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </setter>
    </member>
    <member name="P:NetSteps.Common.Collections.ConcreteList`2.Count">
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.get_Count" inheritedFromTypeName="ICollection" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="M:NetSteps.Common.Extensions.IEnumerableExtensions.ContainsIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="items != null" vb="items &lt;&gt; Nothing">items != null</requires>
      <exception cref="T:System.ArgumentNullException">items == null</exception>
    </member>
    <member name="M:NetSteps.Common.Extensions.EnumNameValue.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.NameValue`2.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.Add(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Add(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &gt;= old(this.Count)" vb="Me.Count &gt;= old(Me.Count)">this.Count &gt;= old(this.Count)</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.Remove(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Remove(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &lt;= old(this.Count)" vb="Me.Count &lt;= old(Me.Count)">this.Count &lt;= old(this.Count)</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Remove(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt;= old(this.Count - 1)" vb="result Implies Me.Count &gt;= old(Me.Count - 1)">!result || this.Count &gt;= old(this.Count - 1)</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.Contains(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Contains(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt; 0" vb="result Implies Me.Count &gt; 0">!result || this.Count &gt; 0</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.Clear">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Clear" inheritedFromTypeName="ICollection" csharp="this.Count == 0" vb="Me.Count = 0">this.Count == 0</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.CopyTo(`0[],System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &gt;= 0" vb="arrayIndex &gt;= 0">arrayIndex &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &lt;= array.Length - this.Count" vb="arrayIndex &lt;= array.Length - Me.Count">arrayIndex &lt;= array.Length - this.Count</requires>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.Insert(System.Int32,`0)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt;= this.Count" vb="index &lt;= Me.Count">index &lt;= this.Count</requires>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.RemoveAt(System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="this.Count == old(this.Count) - 1" vb="Me.Count = old(Me.Count) - 1">this.Count == old(this.Count) - 1</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CachedList`1.IndexOf(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &lt; this.Count" vb="result &lt; Me.Count">result &lt; this.Count</ensures>
    </member>
    <member name="P:NetSteps.Common.Base.CachedList`1.Item(System.Int32)">
      <getter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </getter>
      <setter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </setter>
    </member>
    <member name="P:NetSteps.Common.Base.CachedList`1.Count">
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.get_Count" inheritedFromTypeName="ICollection" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="M:NetSteps.Common.Base.BusinessListBase`1.System#ICloneable#Clone">
      <ensures inheritedFrom="M:System.ICloneable.Clone" inheritedFromTypeName="ICloneable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:NetSteps.Common.Base.CloneableBase`1.System#ICloneable#Clone">
      <ensures inheritedFrom="M:System.ICloneable.Clone" inheritedFromTypeName="ICloneable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:NetSteps.Common.DebugTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <requires inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" csharp="buffer != null" vb="buffer &lt;&gt; Nothing">buffer != null</requires>
      <requires inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" csharp="buffer.Length - index &gt;= count" vb="buffer.Length - index &gt;= count">buffer.Length - index &gt;= count</requires>
      <ensuresOnThrow description="An I/O error occurs." inheritedFrom="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" inheritedFromTypeName="TextWriter" exception="T:System.IO.IOException" csharp="true" vb="True">true</ensuresOnThrow>
      <exception cref="T:System.IO.IOException">true will be true on throw.</exception>
    </member>
    <member name="M:NetSteps.Common.DebugTextWriter.Write(System.String)">
      <ensuresOnThrow description="An I/O error occurs." inheritedFrom="M:System.IO.TextWriter.Write(System.String)" inheritedFromTypeName="TextWriter" exception="T:System.IO.IOException" csharp="true" vb="True">true</ensuresOnThrow>
      <exception cref="T:System.IO.IOException">true will be true on throw.</exception>
    </member>
    <member name="P:NetSteps.Common.DebugTextWriter.Encoding">
      <getter>
        <ensures inheritedFrom="M:System.IO.TextWriter.get_Encoding" inheritedFromTypeName="TextWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:NetSteps.Common.Utility.TextFile.System#Collections#Generic#IEnumerable{System#String[]}#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:NetSteps.Common.Utility.TextFile.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="M:NetSteps.Common.Ach.EntryDetailRecord.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:NetSteps.Common.Ach.BatchControlRecord.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:NetSteps.Common.Ach.BatchHeaderRecord.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
  </members>
</doc>
// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>NetSteps.Integrations.Service.OrdersToERP</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>True</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>ASCII</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace NetSteps.Integrations.Service.OrdersToERP {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class OrderCollection {
        
        private List<Order> orderField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Order", Order=0)]
        public List<Order> Order {
            get {
                if ((this.orderField == null)) {
                    this.orderField = new List<Order>();
                }
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrderCollection));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrderCollection object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.ASCII);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrderCollection object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrderCollection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrderCollection obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderCollection);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrderCollection obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrderCollection Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrderCollection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrderCollection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.ASCII, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.ASCII);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.ASCII);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrderCollection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrderCollection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrderCollection obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderCollection);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrderCollection obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.ASCII, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OrderCollection obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrderCollection LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.ASCII);
        }
        
        public static OrderCollection LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Order {
        
        private string orderNumberField;
        
        private System.DateTime orderDateField;
        
        private System.DateTime shippedDateField;
        
        private bool shippedDateFieldSpecified;
        
        private OrderType orderTypeField;
        
        private OrderStatus orderStatusField;
        
        private decimal orderSubTotalField;
        
        private decimal taxTotalField;
        
        private decimal shippingTotalField;
        
        private decimal grandTotalField;
        
        private List<OrderCustomer> orderCustomerField;
        
        private List<OrderPayment> orderPaymentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string OrderNumber {
            get {
                return this.orderNumberField;
            }
            set {
                this.orderNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime OrderDate {
            get {
                return this.orderDateField;
            }
            set {
                this.orderDateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime ShippedDate {
            get {
                return this.shippedDateField;
            }
            set {
                this.shippedDateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShippedDateSpecified {
            get {
                return this.shippedDateFieldSpecified;
            }
            set {
                this.shippedDateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public OrderType OrderType {
            get {
                return this.orderTypeField;
            }
            set {
                this.orderTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public OrderStatus OrderStatus {
            get {
                return this.orderStatusField;
            }
            set {
                this.orderStatusField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public decimal OrderSubTotal {
            get {
                return this.orderSubTotalField;
            }
            set {
                this.orderSubTotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public decimal TaxTotal {
            get {
                return this.taxTotalField;
            }
            set {
                this.taxTotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public decimal ShippingTotal {
            get {
                return this.shippingTotalField;
            }
            set {
                this.shippingTotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public decimal GrandTotal {
            get {
                return this.grandTotalField;
            }
            set {
                this.grandTotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("OrderCustomer", Order=9)]
        public List<OrderCustomer> OrderCustomer {
            get {
                if ((this.orderCustomerField == null)) {
                    this.orderCustomerField = new List<OrderCustomer>();
                }
                return this.orderCustomerField;
            }
            set {
                this.orderCustomerField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("OrderPayment", Order=10)]
        public List<OrderPayment> OrderPayment {
            get {
                if ((this.orderPaymentField == null)) {
                    this.orderPaymentField = new List<OrderPayment>();
                }
                return this.orderPaymentField;
            }
            set {
                this.orderPaymentField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Order));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Order object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.ASCII);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Order object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Order object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Order obj, out System.Exception exception) {
            exception = null;
            obj = default(Order);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Order obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Order Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Order)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Order object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.ASCII, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.ASCII);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.ASCII);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Order object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Order object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Order obj, out System.Exception exception) {
            exception = null;
            obj = default(Order);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Order obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.ASCII, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Order obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Order LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.ASCII);
        }
        
        public static Order LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    public enum OrderType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Online Order")]
        OnlineOrder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Workstation Order")]
        WorkstationOrder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Party Order")]
        PartyOrder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Portal Order")]
        PortalOrder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Autoship Template")]
        AutoshipTemplate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Autoship Order")]
        AutoshipOrder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Override Order")]
        OverrideOrder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Return Order")]
        ReturnOrder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Comp Order")]
        CompOrder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Replacement Order")]
        ReplacementOrder,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    public enum OrderStatus {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pending Error")]
        PendingError,
        
        /// <remarks/>
        Paid,
        
        /// <remarks/>
        Cancelled,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Partially Paid")]
        PartiallyPaid,
        
        /// <remarks/>
        Printed,
        
        /// <remarks/>
        Shipped,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Credit Card Declined")]
        CreditCardDeclined,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Credit Card Declined - Retry")]
        CreditCardDeclinedRetry,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class OrderCustomer {
        
        private int orderCustomerIDField;
        
        private string customerIDField;
        
        private AccountType accountTypeField;
        
        private decimal orderSubTotalField;
        
        private decimal taxTotalField;
        
        private decimal shippingTotalField;
        
        private decimal grandTotalField;
        
        private List<OrderItem> orderItemField;
        
        private List<OrderPayment> orderPaymentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int OrderCustomerID {
            get {
                return this.orderCustomerIDField;
            }
            set {
                this.orderCustomerIDField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CustomerID {
            get {
                return this.customerIDField;
            }
            set {
                this.customerIDField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public AccountType AccountType {
            get {
                return this.accountTypeField;
            }
            set {
                this.accountTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public decimal OrderSubTotal {
            get {
                return this.orderSubTotalField;
            }
            set {
                this.orderSubTotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public decimal TaxTotal {
            get {
                return this.taxTotalField;
            }
            set {
                this.taxTotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public decimal ShippingTotal {
            get {
                return this.shippingTotalField;
            }
            set {
                this.shippingTotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public decimal GrandTotal {
            get {
                return this.grandTotalField;
            }
            set {
                this.grandTotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("OrderItem", Order=7)]
        public List<OrderItem> OrderItem {
            get {
                if ((this.orderItemField == null)) {
                    this.orderItemField = new List<OrderItem>();
                }
                return this.orderItemField;
            }
            set {
                this.orderItemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("OrderPayment", Order=8)]
        public List<OrderPayment> OrderPayment {
            get {
                if ((this.orderPaymentField == null)) {
                    this.orderPaymentField = new List<OrderPayment>();
                }
                return this.orderPaymentField;
            }
            set {
                this.orderPaymentField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrderCustomer));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrderCustomer object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.ASCII);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrderCustomer object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrderCustomer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrderCustomer obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderCustomer);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrderCustomer obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrderCustomer Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrderCustomer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrderCustomer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.ASCII, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.ASCII);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.ASCII);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrderCustomer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrderCustomer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrderCustomer obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderCustomer);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrderCustomer obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.ASCII, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OrderCustomer obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrderCustomer LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.ASCII);
        }
        
        public static OrderCustomer LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    public enum AccountType {
        
        /// <remarks/>
        Distributor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Preferred Customer")]
        PreferredCustomer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Retail Customer")]
        RetailCustomer,
        
        /// <remarks/>
        Employee,
        
        /// <remarks/>
        Prospect,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class OrderItem {
        
        private int orderItemIDField;
        
        private string sKUField;
        
        private int qtyField;
        
        private Money itemPriceField;
        
        private int parentOrderItemIDField;
        
        private bool parentOrderItemIDFieldSpecified;
        
        private OrderItemParentType orderItemParentTypeField;
        
        private bool orderItemParentTypeFieldSpecified;
        
        private System.DateTime shippedDateField;
        
        private bool shippedDateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int OrderItemID {
            get {
                return this.orderItemIDField;
            }
            set {
                this.orderItemIDField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string SKU {
            get {
                return this.sKUField;
            }
            set {
                this.sKUField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Qty {
            get {
                return this.qtyField;
            }
            set {
                this.qtyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Money ItemPrice {
            get {
                if ((this.itemPriceField == null)) {
                    this.itemPriceField = new Money();
                }
                return this.itemPriceField;
            }
            set {
                this.itemPriceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int ParentOrderItemID {
            get {
                return this.parentOrderItemIDField;
            }
            set {
                this.parentOrderItemIDField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParentOrderItemIDSpecified {
            get {
                return this.parentOrderItemIDFieldSpecified;
            }
            set {
                this.parentOrderItemIDFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public OrderItemParentType OrderItemParentType {
            get {
                return this.orderItemParentTypeField;
            }
            set {
                this.orderItemParentTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrderItemParentTypeSpecified {
            get {
                return this.orderItemParentTypeFieldSpecified;
            }
            set {
                this.orderItemParentTypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.DateTime ShippedDate {
            get {
                return this.shippedDateField;
            }
            set {
                this.shippedDateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShippedDateSpecified {
            get {
                return this.shippedDateFieldSpecified;
            }
            set {
                this.shippedDateFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrderItem));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrderItem object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.ASCII);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrderItem object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrderItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrderItem obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderItem);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrderItem obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrderItem Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrderItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrderItem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.ASCII, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.ASCII);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.ASCII);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrderItem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrderItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrderItem obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderItem);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrderItem obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.ASCII, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OrderItem obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrderItem LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.ASCII);
        }
        
        public static OrderItem LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Money {
        
        private Currency currencyField;
        
        private decimal valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public Money() {
            this.currencyField = Currency.USD;
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(Currency.USD)]
        public Currency Currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Money));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Money object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.ASCII);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Money object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Money object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Money obj, out System.Exception exception) {
            exception = null;
            obj = default(Money);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Money obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Money Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Money)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Money object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.ASCII, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.ASCII);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.ASCII);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Money object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Money object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Money obj, out System.Exception exception) {
            exception = null;
            obj = default(Money);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Money obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.ASCII, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Money obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Money LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.ASCII);
        }
        
        public static Money LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    public enum Currency {
        
        /// <remarks/>
        USD,
        
        /// <remarks/>
        CAD,
        
        /// <remarks/>
        YEN,
        
        /// <remarks/>
        AUD,
        
        /// <remarks/>
        GBP,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    public enum OrderItemParentType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Static Kit")]
        StaticKit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Dynamic Kit")]
        DynamicKit,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class OrderPayment {
        
        private PaymentType paymentTypeField;
        
        private decimal paymentAmountField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public PaymentType PaymentType {
            get {
                return this.paymentTypeField;
            }
            set {
                this.paymentTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public decimal PaymentAmount {
            get {
                return this.paymentAmountField;
            }
            set {
                this.paymentAmountField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrderPayment));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrderPayment object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.ASCII);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrderPayment object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrderPayment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrderPayment obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderPayment);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrderPayment obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrderPayment Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrderPayment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrderPayment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.ASCII, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.ASCII);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.ASCII);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrderPayment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrderPayment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrderPayment obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderPayment);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrderPayment obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.ASCII, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OrderPayment obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrderPayment LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.ASCII);
        }
        
        public static OrderPayment LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    public enum PaymentType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Credit Card")]
        CreditCard,
        
        /// <remarks/>
        Check,
        
        /// <remarks/>
        Cash,
        
        /// <remarks/>
        EFT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gift Card")]
        GiftCard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Product Credit")]
        ProductCredit,
    }
}
